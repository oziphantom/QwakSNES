
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass.exe -a -b -X -o qwakSNES.sfc --no-caret-diag --dump-labels -l qwakSNES.tass -L qwakSNES.list --verbose-list --line-numbers QWAKSNES.asm
; Sat Jul 22 18:54:22 2023

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: QWAKSNES.asm

1							; LoROM FAST SNES Master
2							.cpu "65816"

4							; setup the ROM MAP
5							* = $000000			; FILE OFFSET
6							.logical $808000	; SNES ADDRESS
7							.dsection sBank80
8							.cerror * > $80FFB0, "Bank 80 overflow by ", *-$80FFB0
9							* = $80FFB0
10							.dsection sHeader
11							*= $80FFE4
12							.dsection s65816Vectors
13							*= $80FFF4
14							.dsection s6502Vectors
15							.here			  ; back to file


18							* = $008000			; FILE OFFSET
19							.logical $818000  ; SNES ADDRESS
20							.dsection sBank81
21							.here
22							.cerror * > $10000, "Bank 81 overflow by ", *-$10000

24							* = $010000			; FILE OFFSET
25							.logical $828000  ; SNES ADDRESS
26							.dsection sBank82
27							.here
28							.cerror * > $18000, "Bank 82 overflow by ", *-$18000

30							* = $018000			; FILE OFFSET
31							.logical $838000	; SNES ADDRESS
32							.dsection sBank83
33							.here
34							.cerror * > $020000, "Bank 83 overflow by ", *-$20000

36							; .. add more banks here ..

38							.if * < $040000
39								* = $040000-1	; make the file 128K
40	>03ffff		00					.byte 0
41							.endif


44							; *** virtual address ***
45							; these exist to the code but are not part of the output file
46							*=$0000
47							.dsection sDP
48							.cerror * > $100, "Direct Page overflow by ", *-$100
49	.0049						gSharedRamStart
50							.dsection sSharedWRAM
51							.cerror * > $1FC0, "Shared WRAM overflow by ", *-$1FC0
52							*=$7e2000
53							.dsection sLoWRAM
54							.cerror * > $7F0000, "Lo WRAM overflow by ", *-$7F0000
55							*=$7f0000
56							.dsection sHiWRAM
57							.cerror * > $800000, "High WRAM overflow by ", *-$800000

59							.include "SNESDef.asm"

:2	;******  Processing file: SNESDef.asm

1	=0						kSPri_0 = 0<<4
2	=16						kSPri_1 = 1<<4
3	=32						kSPri_2 = 2<<4
4	=48						kSPri_3 = 3<<4

6	=0						kSPal_0 = 0<<1
7	=2						kSPal_1 = 1<<1
8	=4						kSPal_2 = 2<<1
9	=6						kSPal_3 = 3<<1
10	=8						kSPal_4 = 4<<1
11	=10						kSPal_5 = 5<<1
12	=12						kSPal_6 = 6<<1
13	=14						kSPal_7 = 7<<1

15	=64						kSFlipX = 64
16	=128						kSFlipY = 128

18	=0						kBaseSize_32x32 = 0
19	=1						kBaseSize_64x32 = 1
20	=2						kBaseSize_32x64 = 2
21	=3						kBaseSize_64x64 = 3

23							;takes the screen base in Word Offset and ScreenLayout in kBaseSize_XXxXX
24							fBGBaseSize .function base,screenLayout
25							.endf ((base/1024)<<2) | screenLayout

27							;takes the 4 screen character base addresses in Word Offset
28							fBGCharAddress .function bg1,bg2,bg3,bg4
29							.endf (bg4/4096)<<12 | (bg3/4096)<<8 | (bg2/4096)<<4 | (bg1/4096)

31							; converts 24bit RGB value into a SNES 16bit word
32							fRGBToSNES .function r,g,b
33							.endf (b&$f8)<<7 | (g&$f8)<<2 | (r&$f8)>>3

35							; this wil convert a sprite X,Y index for 16x16 sprites on the sprite "map" to a tilenum + attributes word
36							; it handles multiple sprite "banks" as well
37							fSprDef .function gridX,gridY,flags
43							.endf (gridX*2+_y*32)|flags<<8


:1	;******  Return to file: QWAKSNES.asm

60	.7f0000						kEntity .block
61	=$00							heli = $00
62	=$01							spring = $01
63	=$02							worm = $02
64	=$03							bat = $03
65	=$04							ghost = $04
66	=$05							spider = $05
67	=$06							fish = $06
68	=$07							circler = $07
69	=$08							bear = $08
70	=$09							octopuss = $09
71	=$0a							bearBody = $0A
72	=$0b							octopussBody = $0B
73	=$0c							bubble = $0C
74	=$0d							bossDummy = $0D
75	=25							maxEntities = 25
76	=8							maxBubbleMakers = 8
77	=2							maxNumBubblesPerMaker = 2
78	=255							removedFromBullet = 255
79	=254							deadFromRedBullet = 254
80							.bend

82	.7f0000						mplex .block
83	=$20							kMaxSpr = $20
84							.bend

86							.include "qwak_structs.asm"

:3	;******  Processing file: qwak_structs.asm

1	.0000						sGameData .struct
2	>0000						lives 		.byte ?					; player lives
3	>0001						flowers 		.byte ?					; current flowers
4	>0002						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>0008						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>000e						currLevel 	.byte ?					; current level 0 bassed
7	>000f						exitOpenNZ 	.byte ?					; have all keys been collected
8	>0010						musicMode 	.byte ?					; not actually used, yet
9							.ends

11	.0000						sLevelData .struct
12	>0000						numKeysLeft			.byte ?			; number of keys left to collect
13	>0001						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>0002						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>0003						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>0005						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>0006						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>0007						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>0008						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends

22	.0000						sTimerTickDowns .struct
23	>0000						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>0001						playerAnim 					.byte ?	; players animation timer
25	>0002						doorAnim						.byte ?	; frames till next exit door animation
26	>0003						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>0004						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>0005						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>0006						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends

32	.0000						sPlayerData .struct
33							; state info
34	>0000						state 					.byte ?				; major FSM value
35	>0001						minorState 				.byte ?				; sub FSM in that FSM value

37	>0002						deadNZ					.byte ?
38	>0003						hasShieldNZ				.byte ?
39	.0004						shieldTimer				.dunion HLWord
215:1	>0004							.word ?
216								.struct
217	>0004								lo .byte ?
218	>0005								hi .byte ?
219								.ends
220							.endu
40:3	>0006						canFloatNZ 				.byte ?				; AKA has collected spring
41	>0007						floatTimer 				.byte ?

43	>0008						onGroundNZ 				.byte ?
44	>0009						hasJumpedNZ				.byte ?
45	>000a						isFallingNZ				.byte ?
46	>000b						facingRight 			.byte ?				; this is 0 or 1 only
47	>000c						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>000d						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>000e						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>000f						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>0010						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.0011						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
215:1	>0011							.word ?
216								.struct
217	>0011								lo .byte ?
218	>0012								hi .byte ?
219								.ends
220							.endu
54:3	>0013						currAnim 				.byte ?				; the players current animation number
55	>0014						frameOffset 			.byte ?				; the current frame in the animation

57	>0015						bulletActive 			.byte ?				; this is 0 or 1 only
58	>0016						bulletUD 				.byte ?				; this is 0 or 1 only
59	>0017						bulletLR 				.byte ?				; this is 0 or 1 only
60	>0018						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>0019						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>001a						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>001b						flashColour				.byte ?				; index into the flash colour LUT
66	>001c						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends

69	.0000						sEntityData .struct
70	>0000						number			 .byte ?									; how many entities are actually in this level
71	>0001						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>001a						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>0033						active			 .fill kEntity.maxEntities 		; if it is still active
74	>004c						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0065						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>007e						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0097						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>00b0						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>00c9						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>00e2						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>00fb						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>0114						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>012d						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0146						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>015f						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0178						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>0191						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>0192						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>019a						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>019b						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends

93	.0000						sCSTCCParams .struct
94	.0000						xDeltaCheck 	.dunion HLWord ; pixels
215:1	>0000							.word ?
216								.struct
217	>0000								lo .byte ?
218	>0001								hi .byte ?
219								.ends
220							.endu
95:3	.0002						yDeltaCheck 	.dunion HLWord	; pixels
215:1	>0002							.word ?
216								.struct
217	>0002								lo .byte ?
218	>0003								hi .byte ?
219								.ends
220							.endu
96:3	.0004						xDeltaBackup 	.dunion HLWord	; pixels
215:1	>0004							.word ?
216								.struct
217	>0004								lo .byte ?
218	>0005								hi .byte ?
219								.ends
220							.endu
97:3	.0006						yDeltaBackup 	.dunion HLWord	; pixels
215:1	>0006							.word ?
216								.struct
217	>0006								lo .byte ?
218	>0007								hi .byte ?
219								.ends
220							.endu
98:3							.ends

100	.0000						sMplexBuffer .struct
101	>0000						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>0021						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>0042						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends


:1	;******  Return to file: QWAKSNES.asm


88							.section sDP
89	.0000						EntityDataPointer	.dunion HLWord
215	>0000							.word ?
216								.struct
217	>0000								lo .byte ?
218	>0001								hi .byte ?
219								.ends
220							.endu
90	>0002						CurrentEntity		.byte ?
91	>0003						CollidedEntity		.byte ?
92	>0004						EntNum				.byte ?
93	>0005						CollisionResult	.byte ?
94	.0006						Pointer1				.dunion HLWord
215	>0006							.word ?
216								.struct
217	>0006								lo .byte ?
218	>0007								hi .byte ?
219								.ends
220							.endu
95	.0008						Pointer2				.dunion HLWord
215	>0008							.word ?
216								.struct
217	>0008								lo .byte ?
218	>0009								hi .byte ?
219								.ends
220							.endu
96	.000a						Pointer3				.dunion HLWord
215	>000a							.word ?
216								.struct
217	>000a								lo .byte ?
218	>000b								hi .byte ?
219								.ends
220							.endu
97	.000c						Pointer4				.dunion HLWord
215	>000c							.word ?
216								.struct
217	>000c								lo .byte ?
218	>000d								hi .byte ?
219								.ends
220							.endu
98	>000e						playerTempCol		.byte ?
99	>000f						ZPTemp				.byte ?
100	>0010						ZPTemp2				.byte ?
101	>0011						ZPTemp3				.byte ?
102	>0012						ZPTemp4				.byte ?
103	>0013						ZPTemp5				.byte ?
104	>0014						TempX					.byte ?
105	>0015						ActiveTileIndex	.byte ?
106	>0016						ActiveTile			.byte ?
107	>0017						TestingSprX1		.byte ?
108	>0018						TestingSprX2		.byte ?
109	>0019						TestingSprY1		.byte ?
110	>001a						TestingSprY2		.byte ?
111	.001b						GameStatePointer	.dunion HLWord
215	>001b							.word ?
216								.struct
217	>001b								lo .byte ?
218	>001c								hi .byte ?
219								.ends
220							.endu

113	>001d						CollideSpriteToCheck		.byte ?
114	>001e						CollideSpriteBoxIndex	.byte ?
115	>001f						CollideCharTLI				.byte ?
116	>0020						CollideCharTLC				.byte ?
117	>0021						CollideCharTRI				.byte ?
118	>0022						CollideCharTRC				.byte ?
119	>0023						CollideCharBLI				.byte ?
120	>0024						CollideCharBLC				.byte ?
121	>0025						CollideCharBRI				.byte ?
122	>0026						CollideCharBRC				.byte ?
123	>0027						CollideInternalSprTLX	.byte ?  ; these 4 MUST be in the same order as below
124	>0028						CollideInternalSprBRX	.byte ?
125	>0029						CollideInternalSprTLY	.byte ?
126	>002a						CollideInternalSprBRY	.byte ?
127	>002b						CollideInternalTTLX		.byte ?
128	>002c						CollideInternalTBRX		.byte ?
129	>002d						CollideInternalTTLY		.byte ?
130	>002e						CollideInternalTBRY		.byte ?
131	>002f						DidClipX						.word ?  ; this is if the add X with MSB function did clip the Y
132	>0031						HideScreen					.byte ?
133	.0032						ZPLong						.dunion HLBLong
223	>0032							.long ?
224								.struct
225	>0032								lo	.byte ?
226	>0033								hi	.byte ?
227	>0034								bank .byte ?
228								.ends
229								.struct
230	>0032								loWord .word ?
231	>0034								dummy1 .byte ?
232								.ends
233								.struct
234	>0032								dummy2 .byte ?
235	>0033								hiWord .word ?
236								.ends
237							.endu
134							.send

136							; *** instance headers and vectors
137							.enc "none"
138							.section sHeader
139	>7fb0	80ffb0	00 00					.word 0
140	>7fb2	80ffb2	d1 d7 c1 cb				.text "QWAK"
141	>7fb6	80ffb6	00 00 00 00 00 00 00			.fill 7,0
142	>7fbd	80ffbd	00					.byte 0 ; RAM
143	>7fbe	80ffbe	00					.byte 0 ; special version
144	>7fbf	80ffbf	00					.byte 0 ; cart type
145								;					 111111111112
146								;	  	 123456789012345678901
147	>7fc0	80ffc0	51 57 41 4b 20 53 4e 45			.text "qwak snes            "
	>7fc8	80ffc8	53 20 20 20 20 20 20 20 20 20 20 20 20
148							.cerror * != $80ffd5, "name is too short", *
149	>7fd5	80ffd5	30					.byte $30	; Mapping
150	>7fd6	80ffd6	00					.byte $00	; Rom
151	>7fd7	80ffd7	07					.byte $07	; 128K
152	>7fd8	80ffd8	00					.byte $00	; 0 SRAM
153	>7fd9	80ffd9	02					.byte $02	; PAL
154	>7fda	80ffda	33					.byte $33	; Version 3
155	>7fdb	80ffdb	00					.byte $00	; rom version 0
156	>7fdc	80ffdc	00 00					.word $0000 ; complement
157	>7fde	80ffde	00 00					.word $0000 ; CRC
158							.send ; sHeader

160							.section s65816Vectors
161							.block								; scope this so we don't get name clashes
162	>7fe4	80ffe4	c7 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
163	>7fe6	80ffe6	c7 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
164	>7fe8	80ffe8	c7 81				ABORT	.word <>Bank80.justRTI
165	>7fea	80ffea	70 81				NMI	.word <>Bank80.NMI
166	>7fec	80ffec	c7 81				RESET	.word <>Bank80.justRTI
167	>7fee	80ffee	c7 81				IRQ	.word <>Bank80.justRTI
168							.bend
169							.send ; s65816Vectors

171							.section s6502Vectors
172							.block								; scope this so we don't get name clashes
173	>7ff4	80fff4	c7 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
174	>7ff6	80fff6	c7 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
175	>7ff8	80fff8	c7 81				ABORT	.word <>Bank80.justRTI
176	>7ffa	80fffa	c7 81				NMI	.word <>Bank80.justRTI
177	>7ffc	80fffc	00 80				RESET	.word <>Bank80.RESET
178	>7ffe	80fffe	c7 81				IRQ	.word <>Bank80.justRTI
179							.bend
180							.send ; s65816Vectors

182							; *** instance banks ***
183							.section sBank80
184	.0000	808000					Bank80 .binclude "Bank80.asm"

:4	;******  Processing file: Bank80.asm

1							; Bank 80
2							.virtual $800000+gSharedRamstart
3							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>800049						mINIDISP  .word ?
3	>80004b						mOBSEL    .word ?
4	>80004d						mBGMODE   .word ?
5	>80004f						mMOSIAC   .word ?
6	>800051						mBG1SC    .word ?
7	>800053						mBG2SC    .word ?
8	>800055						mBG3SC    .word ?
9	>800057						mBG4SC    .word ?
10	>800059						mBG12NBA  .word ?
11	>80005b						mBG23NBA  .word ?
12	.80005d						mBG1HOFS  .dunion HLWord
215:1	>80005d							.word ?
216								.struct
217	>80005d								lo .byte ?
218	>80005e								hi .byte ?
219								.ends
220							.endu
13:5	.80005f						mBG1VOFS  .dunion HLWord
215:1	>80005f							.word ?
216								.struct
217	>80005f								lo .byte ?
218	>800060								hi .byte ?
219								.ends
220							.endu
14:5	.800061						mBG2HOFS  .dunion HLWord
215:1	>800061							.word ?
216								.struct
217	>800061								lo .byte ?
218	>800062								hi .byte ?
219								.ends
220							.endu
15:5	.800063						mBG2VOFS  .dunion HLWord
215:1	>800063							.word ?
216								.struct
217	>800063								lo .byte ?
218	>800064								hi .byte ?
219								.ends
220							.endu
16:5	.800065						mBG3HOFS  .dunion HLWord
215:1	>800065							.word ?
216								.struct
217	>800065								lo .byte ?
218	>800066								hi .byte ?
219								.ends
220							.endu
17:5	.800067						mBG3VOFS  .dunion HLWord
215:1	>800067							.word ?
216								.struct
217	>800067								lo .byte ?
218	>800068								hi .byte ?
219								.ends
220							.endu
18:5	.800069						mBG4HOFS  .dunion HLWord
215:1	>800069							.word ?
216								.struct
217	>800069								lo .byte ?
218	>80006a								hi .byte ?
219								.ends
220							.endu
19:5	.80006b						mBG4VOFS  .dunion HLWord
215:1	>80006b							.word ?
216								.struct
217	>80006b								lo .byte ?
218	>80006c								hi .byte ?
219								.ends
220							.endu
20:5	>80006d						mW12SEL   .word ?
21	>80006f						mW34SEL   .word ?
22	>800071						mWOBJSEL  .word ?
23	>800073						mWH0      .word ?
24	>800075						mWH1      .word ?
25	>800077						mWH2      .word ?
26	>800079						mWH3      .word ?
27	>80007b						mWBGLOG   .word ?
28	>80007d						mOBJLOG   .word ?
29	>80007f						mTM       .word ?
30	>800081						mTS       .word ?
31	>800083						mTMW      .word ?
32	>800085						mTSW      .word ?
33	>800087						mCOLDATA  .word ?
34	>800089						mSETINI   .word ?
35	>80008b						mNMITIMEN .word ?

37	>80008d						joyLeft	 		.byte ?
38	>80008e						joyRight 		.byte ?
39	>80008f						joyUp	 			.byte ?
40	>800090						joyDown	 		.byte ?
41	>800091						joyFire	 		.byte ?
42	>800092						oldJoyLeft		.byte ?
43	>800093						oldJoyRight 	.byte ?
44	>800094						oldJoyUp			.byte ?
45	>800095						oldJoyDown		.byte ?
46	>800096						oldJoyFire		.byte ?
47	>800097						joyUpStart  	.byte ?
48	>800098						joyUpStop		.byte ?
49	>800099						joyFireEvent 	.byte ?
50	.80009a						GameData 		.dstruct sGameData
2:3	>80009a						lives 		.byte ?					; player lives
3	>80009b						flowers 		.byte ?					; current flowers
4	>80009c						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>8000a2						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>8000a8						currLevel 	.byte ?					; current level 0 bassed
7	>8000a9						exitOpenNZ 	.byte ?					; have all keys been collected
8	>8000aa						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.8000ab						LevelData 		.dstruct sLevelData
12:3	>8000ab						numKeysLeft			.byte ?			; number of keys left to collect
13	>8000ac						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>8000ad						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>8000ae						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>8000b0						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>8000b1						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>8000b2						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>8000b3						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.8000b4						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>8000b4						state 					.byte ?				; major FSM value
35	>8000b5						minorState 				.byte ?				; sub FSM in that FSM value

37	>8000b6						deadNZ					.byte ?
38	>8000b7						hasShieldNZ				.byte ?
39	.8000b8						shieldTimer				.dunion HLWord
215:1	>8000b8							.word ?
216								.struct
217	>8000b8								lo .byte ?
218	>8000b9								hi .byte ?
219								.ends
220							.endu
40:3	>8000ba						canFloatNZ 				.byte ?				; AKA has collected spring
41	>8000bb						floatTimer 				.byte ?

43	>8000bc						onGroundNZ 				.byte ?
44	>8000bd						hasJumpedNZ				.byte ?
45	>8000be						isFallingNZ				.byte ?
46	>8000bf						facingRight 			.byte ?				; this is 0 or 1 only
47	>8000c0						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>8000c1						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>8000c2						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>8000c3						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>8000c4						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.8000c5						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
215:1	>8000c5							.word ?
216								.struct
217	>8000c5								lo .byte ?
218	>8000c6								hi .byte ?
219								.ends
220							.endu
54:3	>8000c7						currAnim 				.byte ?				; the players current animation number
55	>8000c8						frameOffset 			.byte ?				; the current frame in the animation

57	>8000c9						bulletActive 			.byte ?				; this is 0 or 1 only
58	>8000ca						bulletUD 				.byte ?				; this is 0 or 1 only
59	>8000cb						bulletLR 				.byte ?				; this is 0 or 1 only
60	>8000cc						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>8000cd						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>8000ce						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>8000cf						flashColour				.byte ?				; index into the flash colour LUT
66	>8000d0						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$8000d1					TICK_DOWN_START = *
54	.8000d1						TickDowns 		.dstruct sTimerTickDowns
23:3	>8000d1						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>8000d2						playerAnim 					.byte ?	; players animation timer
25	>8000d3						doorAnim						.byte ?	; frames till next exit door animation
26	>8000d4						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>8000d5						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>8000d6						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>8000d7						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$8000df					TICK_DOWN_END = *
56	.8000df						EntityData 		.dstruct sEntityData
70:3	>8000df						number			 .byte ?									; how many entities are actually in this level
71	>8000e0						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>8000f9						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>800112						active			 .fill kEntity.maxEntities 		; if it is still active
74	>80012b						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>800144						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>80015d						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>800176						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>80018f						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>8001a8						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>8001c1						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>8001da						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>8001f3						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>80020c						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>800225						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>80023e						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>800257						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>800270						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>800271						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>800279						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>80027a						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.80027b						PasswordTemp .block
58	>80027b							lives			.byte ?
59	>80027c							flowers		.byte ?
60	>80027d							score			.byte ?,?,?,?,?,?
61	>800283							high			.byte ?,?,?,?,?,?
62	>800289							currLevel	.byte ?
63							.bend ;PasswordTemp
64	>80028a						ActivePassword 						.fill 12
65	>800296						PasswordEntryIndex 					.byte ?
66	>800297						ValidPassword 							.byte ?
67	>800298						PasswordInfiLives 					.byte ?
68	>800299						PasswordRedBullets 					.byte ?
69	>80029a						PasswordHaveSpring 					.byte ?
70	>80029b						PasswordLevelSkip 					.byte ?
71	.80029c						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	.80029c						xDeltaCheck 	.dunion HLWord ; pixels
215:1	>80029c							.word ?
216								.struct
217	>80029c								lo .byte ?
218	>80029d								hi .byte ?
219								.ends
220							.endu
95:3	.80029e						yDeltaCheck 	.dunion HLWord	; pixels
215:1	>80029e							.word ?
216								.struct
217	>80029e								lo .byte ?
218	>80029f								hi .byte ?
219								.ends
220							.endu
96:3	.8002a0						xDeltaBackup 	.dunion HLWord	; pixels
215:1	>8002a0							.word ?
216								.struct
217	>8002a0								lo .byte ?
218	>8002a1								hi .byte ?
219								.ends
220							.endu
97:3	.8002a2						yDeltaBackup 	.dunion HLWord	; pixels
215:1	>8002a2							.word ?
216								.struct
217	>8002a2								lo .byte ?
218	>8002a3								hi .byte ?
219								.ends
220							.endu
98:3							.ends
72:5	>8002a4						bulletFrame 							.byte ?
73	>8002a5						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>8002a6						tileMapTemp .fill 240
76	.800396						mplexBuffer     .dstruct sMplexBuffer
101:3	>800396						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>8003b7						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>8003d8						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>8003f9						PasswordRAMCache .fill 12

79	>800405						OAMMirror .fill 256*2
80	>800605						OAMMirrorHigh .fill 32


:4	;******  Return to file: Bank80.asm

4							.endv

6	.0000	808000					kVRAM .block
7	=0							titleScreen		= $0000/2
8	=1024							gameScreen		= $0800/2
9	=2048							font				= $1000/2
10	=2560							fontDest			= $1400/2
11	=4096							gameChars		= $2000/2
12	=16384							Sprite			= $8000/2
13							.bend

15	=16						kTileXCount = 16
16	=12						kTileYCount = 12
17	=192						kLevelSizeMax = kTileXCount*kTileYCount
18	=0						kSprBase = 0
19	=1						kBulletSpriteOffset = 1
20	=2						kEntsSpriteOffset = 2
21	=1						kBulletCollisionbox = 1
22	.0000	808000					kBounds .block
23	=0							screenMinX = 0
24								;screenMinY = 0
25								;screenMaxX = ( kTileXCount * 16 )
26	=192							screenMaxY = ( kTileYCount * 16 )
27							.bend

29	.0000	808000					kTiles .block
30	=0							back = 0

32	=1							wall = 1
33	=2							wall1 = 2
34	=3							wall2 = 3
35	=4							wall3 = 4
36	=5							wall4 = 5

38	=6							spike = 6
39	=7							flower = 7
40	=8							fruit = 8

42	=9							key1 = 9
43	=10							key2 = 10
44	=11							key3 = 11
45	=12							key4 = 12

47	=13							shield = 13
48	=14							spring = 14
49	=15							potion = 15
50	=16							egg = 16

52	=17							exit = 17
53	=18							player = 18

55	=19							pipe = 19
56	=20							diss = 20
57	=33							dissNoColide = 33

59	=34							underHangStart = 34
60	=35							underHang = 35
61	=36							shadowOpenCorner = 36
62	=37							sideShadow = 37
63	=38							middlesideShadow = 38
64	=39							topLeftCorner = 39
65	=37							intermissionOldWall = 37	; used to look up the tile for the intermission
66							.bend
67	=7						kKeyToWallDelta = kTiles.key1 - kTiles.wall1
68	=10						kDoorClosed = 10
69	=14						kDoorOpen = 14

71	=$62						kDefault_OBSEL  = %01100010 ; 8x8 and 16x16 0 gap and sprites at 8K
72	=$08						kBossBearBankOR = %00001000 ; move the upper half 1 4K bank up
73	=$10						kBossOctoBankOR = %00010000 ; move the upper half 2 4K bank up

75	=500						kShieldTimer = 10*50			; 10 seconds on PAL


78							.as				; Assume A8
79							.xs				; Assume X8
80							.autsiz			; Auto size detect
81							.databank $00	; databank is 00
82							.dpage $0000	; dpage is 0000

84	.0000	808000					RESET
85	.0000	808000	18		clc			clc
86	.0001	808001	fb		xce			xce
87	.0002	808002	a9 01		lda #$01		lda #$01
88	.0004	808004	8d 0d 42	sta $420d		sta $420D	; go fast, because why not?
89	.0007	808007	5c 0b 80 80	jml $80800b		jml RESETHi
90	.000b	80800b					RESETHi
91	.000b	80800b	c2 30		rep #$30		REP #$30		; AXY 16
92	.000d	80800d	a2 ff 1f	ldx #$1fff		ldx #$1FFF	; set Stack to top of Shared RAM
93	.0010	808010	9a		txs			txs
94	.0011	808011	4b		phk			phk
95	.0012	808012	ab		plb			plb			; set the data bank to also be fast
96							.databank $80
97	.0013	808013	a9 00 00	lda #$0000		lda #0000
98	.0016	808016	5b		tcd			tcd				; set DP to 0
99	.0017	808017	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
100	.001a	80801a	8d 00 21	sta $802100		sta $802100
101	.001d	80801d					ClearWRAM
102	.001d	80801d	a9 08 80	lda #$8008		lda #$8008		; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
103	.0020	808020	8d 00 43	sta $804300		sta $804300
104	.0023	808023	a9 6e 81	lda #$816e		lda #<>DMAZero	; 64Tass | get low word
105	.0026	808026	8d 02 43	sta $804302		sta $804302
106	.0029	808029	a9 80 00	lda #$0080		lda #`DMAZero	; 64Tass | get bank
107	.002c	80802c	8d 04 43	sta $804304		sta $804304
108	.002f	80802f	9c 81 21	stz $802181		stz $802181
109	.0032	808032	9c 82 21	stz $802182		stz $802182		; START AT 7E:0000
110	.0035	808035	9c 05 43	stz $804305		stz $804305		; DO 64K
111	.0038	808038	a9 01 00	lda #$0001		lda #$0001
112	.003b	80803b	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
113	.003e	80803e	8d 0b 42	sta $80420b		sta $80420B		; FIRE IT AGAIN, FOR NEXT 64k
114	.0041	808041					InitSNESAndMirror	; this is defualt init sequence
115	.0041	808041	c2 20		rep #$20		REP #$20			; a16
116	.0043	808043	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
117	.0046	808046	8d 00 21	sta $802100		sta $802100
118	.0049	808049	8d 49 00	sta $800049		sta mINIDISP
119								;stz mOBSEL
120	.004c	80804c	9c 05 21	stz $802105		stz $802105 ;6
121								;stz mBGMODE
122								;stz mMOSIAC
123	.004f	80804f	9c 07 21	stz $802107		stz $802107 ;8
124								;stz mBG1SC
125								;stz mBG2SC
126	.0052	808052	9c 09 21	stz $802109		stz $802109 ;A
127								;stz mBG3SC
128								;stz mBG4SC
129	.0055	808055	9c 0b 21	stz $80210b		stz $80210B ;C
130								;stz mBG12NBA
131								;stz mBG23NBA
132	.0058	808058	9c 0d 21	stz $80210d		stz $80210D ;E
133	.005b	80805b	9c 0d 21	stz $80210d		stz $80210D ;E
134								;stz mBG1HOFS
135								;stz mBG1VOFS
136	.005e	80805e	9c 0f 21	stz $80210f		stz $80210F ;10
137	.0061	808061	9c 0f 21	stz $80210f		stz $80210F ;10
138								;stz mBG2HOFS
139								;stz mBG2VOFS
140	.0064	808064	9c 11 21	stz $802111		stz $802111 ;12
141	.0067	808067	9c 11 21	stz $802111		stz $802111 ;12
142								;stz mBG3HOFS
143								;stz mBG3VOFS
144	.006a	80806a	9c 13 21	stz $802113		stz $802113 ;14
145	.006d	80806d	9c 13 21	stz $802113		stz $802113 ;14
146								;stz mBG4HOFS
147								;stz mBG4VOFS
148	.0070	808070	9c 19 21	stz $802119		stz $802119 ;1A to get Mode7
149	.0073	808073	9c 1b 21	stz $80211b		stz $80211B ;1C these are write twice
150	.0076	808076	9c 1b 21	stz $80211b		stz $80211B ;1C regs
151	.0079	808079	9c 1d 21	stz $80211d		stz $80211D ;1E
152	.007c	80807c	9c 1d 21	stz $80211d		stz $80211D ;1E
153	.007f	80807f	9c 1f 21	stz $80211f		stz $80211F ;20
154	.0082	808082	9c 1f 21	stz $80211f		stz $80211F ;20
155								; add mirrors here if you are doing mode7
156	.0085	808085	9c 23 21	stz $802123		stz $802123 ;24
157								;stz mW12SEL
158								;stz mW34SEL
159	.0088	808088	9c 25 21	stz $802125		stz $802125 ;26
160								;stz mWOBJSEL
161	.008b	80808b	9c 26 21	stz $802126		stz $802126 ;27 YES IT DOUBLES OH WELL
162	.008e	80808e	9c 28 21	stz $802128		stz $802128 ;29
163								;stz mWH0
164								;stz mWH1
165								;stz mWH2
166								;stz mWH3
167	.0091	808091	9c 2a 21	stz $80212a		stz $80212A ;2B
168								;stz mWBGLOG
169								;stz mOBJLOG
170	.0094	808094	9c 2c 21	stz $80212c		stz $80212C ;2D
171	.0097	808097	9c 2e 21	stz $80212e		stz $80212E ;2F
172								;stz mTM
173								;stz mTS
174								;stz mTMW
175								;stz mTSW
176	.009a	80809a	a9 e0 00	lda #$00e0		lda #$00E0
177	.009d	80809d	8d 32 21	sta $802132		sta $802132
178	.00a0	8080a0	8d 87 00	sta $800087		sta mCOLDATA
179								;stz mSETINI
180								;ONTO THE CPU I/O REGS
181	.00a3	8080a3	a9 00 ff	lda #$ff00		lda #$FF00
182	.00a6	8080a6	8d 01 42	sta $804201		sta $804201
183								;stz mNMITIMEN
184	.00a9	8080a9	9c 02 42	stz $804202		stz $804202 ;3
185	.00ac	8080ac	9c 04 42	stz $804204		stz $804204 ;5
186	.00af	8080af	9c 06 42	stz $804206		stz $804206 ;7
187	.00b2	8080b2	9c 08 42	stz $804208		stz $804208 ;9
188	.00b5	8080b5	9c 0a 42	stz $80420a		stz $80420A ;B
189	.00b8	8080b8	9c 0c 42	stz $80420c		stz $80420C ;D
190								; CLEAR VRAM
191	.00bb	8080bb	c2 20		rep #$20		REP #$20			; A16
192	.00bd	8080bd	a9 09 18	lda #$1809		lda #$1809		; A -> B, FIXED SOURCE, WRITE WORD | VRAM
193	.00c0	8080c0	8d 00 43	sta $804300		sta $804300
194	.00c3	8080c3	a9 6e 81	lda #$816e		lda #<>DMAZero ; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
195	.00c6	8080c6	8d 02 43	sta $804302		sta $804302
196	.00c9	8080c9	a9 80 00	lda #$0080		lda #`DMAZero	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
197	.00cc	8080cc	8d 04 43	sta $804304		sta $804304		; AND THE UPPER BYTE WILL BE 0
198	.00cf	8080cf	9c 05 43	stz $804305		stz $804305		; DO 64K
199	.00d2	8080d2	a9 80 00	lda #$0080		lda #$80			; INC ON HI WRITE
200	.00d5	8080d5	8d 15 21	sta $802115		sta $802115
201	.00d8	8080d8	9c 16 21	stz $802116		stz $802116		; START AT 00
202	.00db	8080db	a9 01 00	lda #$0001		lda #$01
203	.00de	8080de	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
204								; CLEAR CG-RAM
205	.00e1	8080e1	a9 08 22	lda #$2208		lda #$2208		; A -> B, FIXED SOURCE, WRITE BYTE | CG-RAM
206	.00e4	8080e4	8d 00 43	sta $804300		sta $804300
207	.00e7	8080e7	a9 00 02	lda #$0200		lda #$200		; 512 BYTES
208	.00ea	8080ea	8d 05 43	sta $804305		sta $804305
209	.00ed	8080ed	e2 20		sep #$20		SEP #$20			; A8
210	.00ef	8080ef	9c 21 21	stz $802121		stz $802121		; START AT 0
211	.00f2	8080f2	a9 01		lda #$01		lda #$01
212	.00f4	8080f4	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
213	.00f7	8080f7	64 35		stz $35			stz NMIReadyNF
260:1	.00f9	8080f9	e2 30		sep #$30		SEP #$30
215:4	.00fb	8080fb	a9 80		lda #$80		lda #kHideScreen.hide	; make sure the screen is in the hidden mode, it should be, but doesn't hurt ;)
216	.00fd	8080fd	85 31		sta $31			sta HideScreen
217								.cerror kHideScreen.hide < 128, "need to find an actual negative value for disableUpdateSpritesXYToOAMNF"
218	.00ff	8080ff	8d a5 02	sta $8002a5		sta disableUpdateSpritesXYToOAMNF

220	.0102	808102	20 de 88	jsr $8088de		jsr clearSpritesMirror_xx	;sets all sprites to offscreen, small

222	.0105	808105	20 d4 8a	jsr $808ad4		jsr dmaPalletes_XX			; we have fixed palletes so upload them
223	.0108	808108	20 48 8b	jsr $808b48		jsr dmaFixedChars_xx			; also the fixed chars which don't change

225								; draw the title screen
226								; since I have enough VRAM to spare I just draw this once
227								; and then set the BG1 to point to it when I want to
228	.010b	80810b	20 b4 86	jsr $8086b4		jsr clearScreenMirrorToEmptyChar
229								; draw each string ( exepet for Game Over )
230	.010e	80810e	a2 18		ldx #$18		ldx #len(TitleScreenData.AllStrings)*2-2 ; -2 because they are words now
231	.0110	808110	86 0f		stx $0f			stx ZPTemp
232	.0112	808112	a6 0f		ldx $0f		-	ldx ZPTemp
233	.0114	808114	20 fb 86	jsr $8086fb		jsr plotStringAAtIndexX
234	.0117	808117	c6 0f		dec $0f			dec ZPTemp
235	.0119	808119	c6 0f		dec $0f			dec ZPTemp
236	.011b	80811b	10 f5		bpl $808112		bpl -
237								; put the Screen mirror into VRAM
238	.011d	80811d	20 f9 8b	jsr $808bf9		jsr dmaScreenMirrorToTitleScreen_xx
239								; init the SPC and start the title screen music
264:1	.0120	808120	c2 30		rep #$30		REP #$30
241:4	.0122	808122	a9 00 80	lda #$8000		lda #<>spc700_code_1
242	.0125	808125	a2 81 00	ldx #$0081		ldx #`spc700_code_1
243	.0128	808128	22 95 bd 80	jsl $80bd95		jsl SPC_Init
244	.012c	80812c	a9 01 00	lda #$0001		lda #1
245	.012f	80812f	22 b4 be 80	jsl $80beb4		jsl SPC_Stereo
246	.0133	808133	a9 40 af	lda #$af40		lda #<>music_1
247	.0136	808136	a2 82 00	ldx #$0082		ldx #`music_1
248	.0139	808139	22 4f be 80	jsl $80be4f		jsl SPC_Play_Song
240:1	.013d	80813d	e2 20		sep #$20		SEP #$20
250:4								; set up mode and tile pointer
251	.013f	80813f	a9 01		lda #$01		lda #1			; mode 1
252	.0141	808141	8d 05 21	sta $802105		sta $802105
253	.0144	808144	a9 11		lda #$11		lda #%00010001
254	.0146	808146	8d 2c 21	sta $80212c		sta $80212C		; make 1 + sprites on Main Screen

256	.0149	808149	a9 81		lda #$81		lda #%10000001
257	.014b	80814b	8d 00 42	sta $804200		sta $804200		; enable VBlank NMI and enable auto Joypad reading

259								; set the main FSM to point to the title screen FSM
244:1	.014e	80814e	c2 20		rep #$20		REP #$20
261:4	.0150	808150	a9 9a 83	lda #$839a		lda #<>titleScreenLoop
262	.0153	808153	85 1b		sta $1b			sta GameStatePointer

264								; this is the Main Game loop high level
265								; it will wait for the NMI
266								; dispatch the current high level FSM mode
267								; update sprites in the mirror if required
268	.0155	808155					MainLoop
260:1	.0155	808155	e2 30		sep #$30		SEP #$30
270:4	.0157	808157					MainLoopWait
271	.0157	808157	a5 35		lda $35			lda NMIReadyNF
272	.0159	808159	10 fc		bpl $808157		bpl MainLoopWait	; Read Flag
273	.015b	80815b	64 35		stz $35			stz NMIReadyNF		; Clear Flag
274	.015d	80815d	a2 00		ldx #$00		ldx #0				; sadly no jsr(XXXX) so dummy x
275	.015f	80815f	fc 1b 00	jsr ($80001b,x)		jsr (GameStatePointer,k,x) ; why ,k well if you don't have it you get something like
276																	; "error: address in different program bank address '($001b,x)'"
277																	; ,k is a 64tass modificatgion not a 65816 addressing mode.
278																	; See section 3.9 of the manual for details basically ,k says make this
279																	; "program bank relative" aka "trust me"
260:1	.0162	808162	e2 30		sep #$30		SEP #$30
281:4	.0164	808164	2c a5 02	bit $8002a5		bit disableUpdateSpritesXYToOAMNF
282	.0167	808167	30 03		bmi $80816c		bmi +								; this could be MainLoop but that might cause you pain later if you make mods to this code
283	.0169	808169	20 1a 89	jsr $80891a			jsr updateAllSpriteXYsToOAMMirror_88
284	.016c	80816c	80 e7		bra $808155	+	bra MainLoop

286							.section sDP
287	>0035						NMIReadyNF .byte ?	; I need the flag and I want it in the DP
288							.send ; sDP

290	>016e	80816e	00 00				DMAZero .word $0000	; DMA needs a memory address for writing fixed values

292	.0170	808170					kHideScreen .block
293	=$80							hide = $80			; force blank, screen brightness 0
294	=$0f							show = $0f			; display on, screen brightness 15
295							.bend

297							; ----- @NMI@ -----

299	.0170	808170					NMI
300	.0170	808170	5c 74 81 80	jml $808174		jml NMIFast				; Move To 8X:XXXX for speed
301	.0174	808174					NMIFast
302	.0174	808174	8b		phb			phb						; Save Data Bank
303	.0175	808175	4b		phk			phk
304	.0176	808176	ab		plb			plb						; Set Data Bank to Match Program Bank
240:1	.0177	808177	e2 20		sep #$20		SEP #$20
306:4	.0179	808179	2c 10 42	bit $804210		bit $804210				; Ack NMI
307	.017c	80817c	2c 35 00	bit $800035		bit@W NMIReadyNF,b	; Check if this is safe
308	.017f	80817f	10 02		bpl $808183		bpl _ready
309	.0181	808181	ab		plb				plb					; No, restore Data Bank
310	.0182	808182	40		rti				rti					; Exit
311	.0183	808183					_ready						; Safe
264:1	.0183	808183	c2 30		rep #$30		REP #$30
313:4	.0185	808185	48		pha			pha
314	.0186	808186	da		phx			phx
315	.0187	808187	5a		phy			phy						; Save A,X,Y
316	.0188	808188	0b		phd			phd						; Save the DP register
317	.0189	808189	a9 00 00	lda #$0000		lda #0000				; or where ever you want your NMI DP
318	.018c	80818c	5b		tcd			tcd						; set DP to known value
319								; do update code here
260:1	.018d	80818d	e2 30		sep #$30		SEP #$30
321:4	.018f	80818f	a5 31		lda $31			lda HideScreen
322	.0191	808191	8f 00 21 00	sta $002100		sta $2100							; enable screen, or not as case may be
323	.0195	808195	30 23		bmi $8081ba		bmi _Notvisible
324	.0197	808197	20 a2 88	jsr $8088a2			jsr dmaOAM_xx					; this will take up enough time to ensure auto read works
325	.019a	80819a	20 5d 85	jsr $80855d			jsr scanJoystick_88			; joystick because Commodore 64 port
326	.019d	80819d	a5 36		lda $36				lda ScreenUpdateRequiredN0	; only DMA screen if something has been updated
327	.019f	80819f	f0 05		beq $8081a6			beq +
328	.01a1	8081a1	20 cb 8b	jsr $808bcb				jsr dmaScreenMirror_xx
329	.01a4	8081a4	64 36		stz $36					stz ScreenUpdateRequiredN0
330	.01a6	8081a6	a9 a5		lda #$a5		+	lda #128+(2*16)+5				; sprite pallete, 2nd one, 7 entry index
331	.01a8	8081a8	8d 21 21	sta $802121			sta $802121						; which is the player body colour
332	.01ab	8081ab	ae cf 00	ldx $8000cf			ldx PlayerData.flashColour
333	.01ae	8081ae	bd 56 92	lda $809256,x			lda PlayerColourLUT.lo,x
334	.01b1	8081b1	8d 22 21	sta $802122			sta $802122						; write a single pallete entry
335	.01b4	8081b4	bd 58 92	lda $809258,x			lda PlayerColourLUT.hi,x
336	.01b7	8081b7	8d 22 21	sta $802122			sta $802122
337	.01ba	8081ba					_Notvisible
240:1	.01ba	8081ba	e2 20		sep #$20		SEP #$20
339:4	.01bc	8081bc	a9 ff		lda #$ff		lda #$FF				; Doing this is slightly faster than DEC, but 2 more bytes
340	.01be	8081be	85 35		sta $35			sta NMIReadyNF		; set NMI Done Flag
264:1	.01c0	8081c0	c2 30		rep #$30		REP #$30
342:4	.01c2	8081c2	2b		pld			pld					; restore DP page
343	.01c3	8081c3	7a		ply			ply
344	.01c4	8081c4	fa		plx			plx
345	.01c5	8081c5	68		pla			pla					; Restore A,X,Y
346	.01c6	8081c6	ab		plb			plb					; Restore Data Bank
347	.01c7	8081c7					justRTI
348	.01c7	8081c7	40		rti			rti					; Exit

350							; ----- @Game loop@ -----

352							; this runs the level logic
353							.as
354							.xs
355	.01c8	8081c8					GAMELOOP
260:1	.01c8	8081c8	e2 30		sep #$30		SEP #$30
357:4	.01ca	8081ca	20 4f 85	jsr $80854f		jsr updateTickdowns_88		; count down the timers
358	.01cd	8081cd	ad b4 00	lda $8000b4		lda PlayerData.state			; dispatch the player state
359	.01d0	8081d0						_ASSERT_A_LT_6					; make sure we don't get a value too high that puts is into the nulabor code wise
360	.01d0	8081d0	0a		asl a			asl a								; the states is set so you could precalc this but inc is handy and we are not tight
361	.01d1	8081d1	aa		tax			tax								; for code
362	.01d2	8081d2	7c d5 81	jmp ($8081d5,x)		jmp (PlayerCodeLUT,x)		; dispatch
363	>01d5	8081d5	e1 81 26 82 26 82 26 82		PlayerCodeLUT .word <>(playerAppear,playerNormal,playerNormal,playerNormal,playerExit,playerDead)
	>01dd	8081dd	06 83 44 83

365							.as
366							.xs
367							; this will unpack the level data, dma the screen, sprites and init the player to spawn position
368							; screen should be off when called
369	.01e1	8081e1					playerAppear
260:1	.01e1	8081e1	e2 30		sep #$30		SEP #$30
371:4	.01e3	8081e3	20 de 88	jsr $8088de		jsr clearSpritesMirror_xx		; remove all sprites
372	.01e6	8081e6	20 d3 8d	jsr $808dd3		jsr convertLevelToTileMap_88	; unpack the current level
373	.01e9	8081e9	20 88 8c	jsr $808c88		jsr addShadowsToMap_88			; decorate it
374	.01ec	8081ec	20 2f 8c	jsr $808c2f		jsr plotTileMap_88				; draw it to screen mirror
375	.01ef	8081ef	20 2a 87	jsr $80872a		jsr plotStatusArea				; also draw the status area (actually only needs to be done once but meh)
376	.01f2	8081f2	20 cb 8b	jsr $808bcb		jsr dmaScreenMirror_xx			; send it to VRAM
377	.01f5	8081f5	20 69 a2	jsr $80a269		jsr setAnimateDoorToOpen_88	; we want doors to open eventually
378								; this takes care of all DMA operations
379	.01f8	8081f8	9c b6 00	stz $8000b6		stz PlayerData.deadNZ			; we are alive
380	.01fb	8081fb	9c cf 00	stz $8000cf		stz PlayerData.flashColour		; not flashing
381	.01fe	8081fe	20 aa 91	jsr $8091aa		jsr setPlayerToSpawnPoint_88	; move player to starting position
382	.0201	808201	20 a3 93	jsr $8093a3		jsr unpackEntityBytes			; get the entities for this level
383	.0204	808204	20 ce 94	jsr $8094ce		jsr setEntitySprites				; setup their sprite data

385	.0207	808207	a9 04		lda #$04		lda #fBGBaseSize(kVRAM.gameScreen,kBaseSize_32x32)
386	.0209	808209	8d 07 21	sta $802107		sta $802107							; set the BG1 to the Game Screen
387	.020c	80820c	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
388	.020e	80820e	8d 0b 21	sta $80210b		sta $80210b							; set the chars to the in game set

390								; we are ready to run the game loop as soon as we exit this basically
391	.0211	808211	a9 01		lda #$01		lda #1
392	.0213	808213	85 35		sta $35			sta NMIReadyNF
393								;	lda #kPlayerState.normal ; == 1
394								.cerror kPlayerState.normal != 1, "need to add lda back"
395	.0215	808215	8d b4 00	sta $8000b4		sta PlayerData.state						; move FSM to the next state
396	.0218	808218	20 05 91	jsr $809105		jsr changePlayerAnimForCurrentDir	; make sure the player's animation is correct
397	.021b	80821b	9c a9 00	stz $8000a9		stz GameData.exitOpenNZ					; the door is closed
398	.021e	80821e	a9 0f		lda #$0f		lda #kHideScreen.show					; show the screen next NMI
399	.0220	808220	85 31		sta $31			sta HideScreen
400								.cerror kHideScreen.show > 128, "need to find something else positive for disableUpdateSpritesXYToOAMNF"
401	.0222	808222	8d a5 02	sta $8002a5		sta disableUpdateSpritesXYToOAMNF	; we want to update the sprites now as well
402	.0225	808225	60		rts			rts

404							.as
405							.xs
406	.0226	808226					playerNormal
407	.0226	808226	a9 00		lda #$00		lda #0 ; remove me when un commenting code below
408	.0228	808228	20 2f 95	jsr $80952f		jsr BuildEntCollisionTable						; build the collision sets
409	.022b	80822b	20 4c 9f	jsr $809f4c		jsr collidePlayerAgainstRest					; did the player hit any entitiies
410	.022e	80822e	86 03		stx $03			stx CollidedEntity								; save the index of the one we hit, if any
411	.0230	808230	ad c3 00	lda $8000c3		lda PlayerData.hitBubbleNum					; save current bubble we are standing on
412	.0233	808233	85 10		sta $10			sta ZPTemp2
413	.0235	808235	a9 00		lda #$00		lda #0
414	.0237	808237	8d c3 00	sta $8000c3		sta PlayerData.hitBubbleNum					; clear current bubble
415	.023a	80823a	2a		rol a			rol a													; pull is carry set, which is if we collided or not
416	.023b	80823b	85 0f		sta $0f			sta ZPTemp											; cache it so we can restore it. php doesn't really work for this case
417	.023d	80823d	f0 4c		beq $80828b		beq _noSpriteCollision
418	.023f	80823f	a6 03		ldx $03				ldx CollidedEntity							; what did we hit
419	.0241	808241	bd e0 00	lda $8000e0,x			lda EntityData.type,x
420	.0244	808244	20 e8 9b	jsr $809be8			jsr isTypeBossBounceDetect					; check if this was a boss bounce (which is 2nd boss ent collision)
421	.0247	808247	b0 2a		bcs $808273			bcs _bossBounce
422	.0249	808249	20 d8 9b	jsr $809bd8				jsr isTypeBoss								; no bouncing on a boss, check the against a boss
423	.024c	80824c	b0 34		bcs $808282				bcs _checkBossDeath
424	.024e	80824e	ec 7a 02	cpx $80027a					cpx EntityData.pipeBubbleStart	; was this a bubble?
425	.0251	808251	90 36		bcc $808289					bcc _normalEnt
426												; so it was a bubble
427	.0253	808253	ad bc 00	lda $8000bc						lda PlayerData.OnGroundNZ		; if on ground or falling
428	.0256	808256	0d be 00	ora $8000be						ora PlayerData.isFallingNZ		; don't collide if I'm jumping up
429	.0259	808259	f0 14		beq $80826f						beq _skipDeath
430	.025b	80825b	a6 03		ldx $03								ldx CollidedEntity
431	.025d	80825d	bd da 03	lda $8003da,x							lda mplexBuffer.ypos+kEntsSpriteOffset,x
432	.0260	808260	cd d8 03	cmp $8003d8							cmp mplexBuffer.ypos
433	.0263	808263	90 0a		bcc $80826f							bcc _skipDeath					; if Bubble Y < player Y pos i.e above me skip
434	.0265	808265	8e c3 00	stx $8000c3								stx PlayerData.hitBubbleNum
435	.0268	808268	c5 10		cmp $10									cmp ZPTemp2
436	.026a	80826a	f0 03		beq $80826f								beq _skipDeath				; already on this bubble so skip
437	.026c	80826c	20 e8 90	jsr $8090e8									jsr enterOnGround		; we just landed on a bubble
438	.026f	80826f										_skipDeath
439	.026f	80826f	a9 00		lda #$00								lda #0						; cancel collision state
440	.0271	808271	80 18		bra $80828b								bra _noSpriteCollision
441	.0273	808273						_bossBounce
442	.0273	808273	ad b7 00	lda $8000b7			lda PlayerData.hasShieldNZ					; boos bounce can only be done with a shield
443	.0276	808276	f0 11		beq $808289			beq _normalEnt
444	.0278	808278	a6 03		ldx $03					ldx CollidedEntity
445	.027a	80827a	20 f4 9b	jsr $809bf4				jsr hurtBoss								; hurt them
446	.027d	80827d	ee c4 00	inc $8000c4				inc PlayerData.forceJumpNZ				; bounce
447	.0280	808280	80 22		bra $8082a4				gra _skipDeathCheck
448										;
449	.0282	808282						_checkBossDeath
450	.0282	808282	bd a8 01	lda $8001a8,x			lda EntityData.entState,x					; if the boss is dead
451	.0285	808285	c9 01		cmp #$01			cmp #kBoss.dead								; ignore the collision
452	.0287	808287	f0 1b		beq $8082a4			beq _skipDeathCheck							; this is because bosses have a death animation
453	.0289	808289					_normalEnt
454	.0289	808289	a5 0f		lda $0f				lda ZPTemp										; this is cache of did we collide
455	.028b	80828b					_noSpriteCollision
456	.028b	80828b	0d b6 00	ora $8000b6			ora PlayerData.deadNZ						; are we dead for some other reason
457	.028e	80828e	f0 14		beq $8082a4			beq _skipDeathCheck							; no, skip
458	.0290	808290	ad b7 00	lda $8000b7				lda PlayerData.hasShieldNZ				; wait do I have a shield?
459	.0293	808293	d0 0f		bne $8082a4				bne _skipDeathCheck						; yup, skip
460											; lda PasswordInfiLives				; password system is removed but
461											; bne +									; left if you wish to restore it or add cheat codes
462	.0295	808295	ce 9a 00	dec $80009a						dec GameData.lives
463	.0298	808298	20 68 88	jsr $808868						jsr pltLives
464	.029b	80829b	a9 05		lda #$05			+		lda #kPlayerState.dead				; set player dead
465	.029d	80829d	8d b4 00	sta $8000b4					sta PlayerData.state					; set to the dead FSM state
466	.02a0	8082a0	8d b5 00	sta $8000b5					sta PlayerData.minorState
467	.02a3	8082a3	60		rts						rts
468											;
469	.02a4	8082a4					_skipDeathCheck
470	.02a4	8082a4	9c b6 00	stz $8000b6			stz PlayerData.deadNZ						; not dead
471	.02a7	8082a7	20 90 8f	jsr $808f90			jsr joyToPlayerDelta_88						; move player based upon
472	.02aa	8082aa	20 f5 9d	jsr $809df5			jsr checkSpriteToCharCollision_88		; collide player against world with deltas
473									; level skip
474							;		lda PasswordLevelSkip						; password system removed but left in case you
475							;		beq _noKey										; want to bring it back
476							;			jsr $FF9F ; SCAN KEY
477							;			jsr $ffe4
478							;			cmp #90 ; Z key, we can't detect C=/CX key with gettin
479							;			bne _noKey
480							;			lda #kPlayerState.exit
481							;			sta PlayerData.state
482							;			sta PlayerData.minorState
483							;			rts
484							;_noKey
485	.02ad	8082ad	ad 9c 02	lda $80029c			lda checkSpriteToCharData.xDeltaCheck	; are we still moving on the X after collision
486	.02b0	8082b0	f0 05		beq $8082b7			beq _addY
487									;make sure x reg is 0, and call addXWithMSBAndClip
488	.02b2	8082b2	a2 00		ldx #$00				ldx #0
489	.02b4	8082b4	20 c7 85	jsr $8085c7				jsr addXWithMSBAndClip_88				; offset player X
490	.02b7	8082b7					_addY
491	.02b7	8082b7	ad d8 03	lda $8003d8			lda mplexBuffer.ypos
492	.02ba	8082ba	18		clc				clc
493	.02bb	8082bb	6d 9e 02	adc $80029e			adc checkSpriteToCharData.yDeltaCheck	; offset Y
494	.02be	8082be	8d d8 03	sta $8003d8			sta mplexBuffer.ypos							; this is just done because Y can wrap
495	.02c1	8082c1	20 7d 91	jsr $80917d			jsr updatePlayerAnim_88						; update animation for new state
496	.02c4	8082c4	ad b7 00	lda $8000b7			lda PlayerData.hasShieldNZ					; if I have a shield update the flash
497	.02c7	8082c7	f0 3b		beq $808304			beq _noShield
498	.02c9	8082c9	ad b8 00	lda $8000b8				lda PlayerData.shieldTimer.lo
499	.02cc	8082cc	d0 03		bne $8082d1				bne +
500	.02ce	8082ce	ce b9 00	dec $8000b9					dec PlayerData.shieldTimer.hi
501	.02d1	8082d1	ce b8 00	dec $8000b8		+		dec PlayerData.shieldTimer.lo			; 16 bit dec, this will bn much easier in 16bit version
502	.02d4	8082d4	ad b8 00	lda $8000b8				lda PlayerData.shieldTimer.lo
503	.02d7	8082d7	0d b9 00	ora $8000b9				ora PlayerData.shieldTimer.hi			; how to tell a 16bit value is zero in 8bit mode easily
504	.02da	8082da	d0 08		bne $8082e4				bne +
505	.02dc	8082dc	9c b7 00	stz $8000b7						stz PlayerData.hasShieldNZ		; it has expired
506	.02df	8082df	9c cf 00	stz $8000cf						stz PlayerData.flashColour		; reset flash colour to be sure
507	.02e2	8082e2	80 20		bra $808304						bra _noShield
508												;
509	.02e4	8082e4	ad d5 00	lda $8000d5		+		lda TickDowns.shieldFlashTimer		; need to toggle the flash?
510	.02e7	8082e7	d0 1b		bne $808304				bne _noShield
511	.02e9	8082e9	ad cf 00	lda $8000cf					lda PlayerData.flashColour
512	.02ec	8082ec	49 01		eor #$01					eor #1
513	.02ee	8082ee	8d cf 00	sta $8000cf					sta PlayerData.flashColour			; toggle 0->1 1->0
514	.02f1	8082f1	ad d6 00	lda $8000d6					lda TickDowns.shieldFlashTimerSpeedUp
515	.02f4	8082f4	d0 08		bne $8082fe					bne +
516	.02f6	8082f6	a9 23		lda #$23						lda #35								; every 35 frames we make the flash faster
517	.02f8	8082f8	8d d6 00	sta $8000d6						sta TickDowns.shieldFlashTimerSpeedUp
518	.02fb	8082fb	ce d0 00	dec $8000d0						dec PlayerData.baseFlashTimeDelta
519	.02fe	8082fe	ad d0 00	lda $8000d0				+	lda PlayerData.baseFlashTimeDelta
520	.0301	808301	8d d5 00	sta $8000d5					sta TickDowns.shieldFlashTimer	; reset the timer
521	.0304	808304					_noShield
522	.0304	808304	80 79		bra $80837f			gra EndOfGameLoop
523									;

525							.as
526							.xs
527	.0306	808306					playerExit
528	.0306	808306	ad b5 00	lda $8000b5		lda PlayerData.minorState
529	.0309	808309	c9 04		cmp #$04		cmp #kPlayerState.exit					; if this is not the first time
530	.030b	80830b	d0 13		bne $808320		bne _waitForAnimation					; then skip the init
531	.030d	80830d	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit		; we have to set up the exit animation
532	.030f	80830f	20 47 91	jsr $809147			jsr setPlayerAnimeTo_88
533									;lda #kPlayerStateExit.waitForAnimation
534									.cerror kPlayerStateExit.waitForAnimation != 0, "need to change stz"
535	.0312	808312	9c b5 00	stz $8000b5			stz PlayerData.minorState			; when entering this state we set minor to same, so 0 to mark it done
536	.0315	808315	ad ce 00	lda $8000ce			lda PlayerData.exitAtIndex
537	.0318	808318	20 ad 91	jsr $8091ad			jsr setPlayerToIndexA				; snap the player to the exit tile
538	.031b	80831b	20 d0 91	jsr $8091d0			jsr removePickups_88					; clear any flashing
539	.031e	80831e	80 5f		bra $80837f	_exit	gra EndOfGameLoop
540	.0320	808320					_waitForAnimation
541	.0320	808320	20 7d 91	jsr $80917d		jsr updatePlayerAnim_88					; returns sec on animation end
542	.0323	808323	90 f9		bcc $80831e		bcc _exit
244:1	.0325	808325	c2 20		rep #$20		REP #$20
544:4	.0327	808327	a9 2a 84	lda #$842a			lda #<>INTERLOOP							; move on to the interlude
545	.032a	80832a	85 1b		sta $1b				sta GameStatePointer
240:1	.032c	80832c	e2 20		sep #$20		SEP #$20
547:4									.cerror kPlayerState.appear != 0, "need to change stz"
548	.032e	80832e	9c b4 00	stz $8000b4			stz PlayerData.state					; return back to appear state
549	.0331	808331	20 26 95	jsr $809526			jsr deactivateAllEntities
550	.0334	808334	20 cb 88	jsr $8088cb			jsr disableAllEntSprites_88		; death is level reset so clear all ents
551	.0337	808337	60		rts				rts

553							.as
554							.xs
555	.0338	808338					incLevelGraphicSet
556	.0338	808338					_ASSERT_jsr
557	.0338	808338					_ASSERT_axy8
558	.0338	808338	ad b3 00	lda $8000b3		lda LevelData.levelGraphicsSet		; this has 4 values 0,1,2,3
559	.033b	80833b	18		clc			clc
560	.033c	80833c	69 01		adc #$01		adc #1										; so add 1
561	.033e	80833e	29 03		and #$03		and #3										; and mask it
562	.0340	808340	8d b3 00	sta $8000b3		sta LevelData.levelGraphicsSet
563	.0343	808343	60		rts			rts											; only called once so could be inlined if wanted

565							.as
566							.xs
567	.0344	808344					playerDead
568	.0344	808344	ad b5 00	lda $8000b5		lda PlayerData.minorState
569	.0347	808347	c9 05		cmp #$05		cmp #kPlayerState.dead					; are we entering this state for the first time?
570	.0349	808349	d0 12		bne $80835d		bne _waitForAnimation
571	.034b	80834b	a9 04		lda #$04			lda #kSFX.hurt
572	.034d	80834d	20 62 bd	jsr $80bd62			jsr playSFX
573	.0350	808350	a9 08		lda #$08			lda #kPlayerAnimsIndex.dead		; we have to set up the exit animation
574	.0352	808352	20 47 91	jsr $809147			jsr setPlayerAnimeTo_88
575									;lda #kPlayerStateDeath.animate
576									.cerror kPlayerStateDeath.animate != 0, "need to change stz"
577	.0355	808355	9c b5 00	stz $8000b5			stz PlayerData.minorState			; mark that we have entered this before
578	.0358	808358	20 d0 91	jsr $8091d0			jsr removePickups_88					; basically removes flashing is the point
579	.035b	80835b	80 22		bra $80837f	_exit	gra EndOfGameLoop
580	.035d	80835d					_waitForAnimation
581	.035d	80835d	ce d8 03	dec $8003d8		dec mplexBuffer.ypos						; move player up the screen
582	.0360	808360	20 7d 91	jsr $80917d		jsr updatePlayerAnim_88					; update the flap animation
583	.0363	808363	90 f6		bcc $80835b		bcc _exit
584	.0365	808365	ad 9a 00	lda $80009a			lda GameData.lives					; all used up?
585	.0368	808368	f0 08		beq $808372			beq _gameOver
586										.cerror kPlayerState.appear != 0, "remove stz"
587										;lda #kPlayerState.appear
588	.036a	80836a	9c b4 00	stz $8000b4				stz PlayerData.state
589	.036d	80836d	9c b6 00	stz $8000b6				stz PlayerData.deadNZ			; clear and reset level
590	.0370	808370	80 0d		bra $80837f				bra EndOfGameLoop
591										;
592	.0372	808372					_gameOver
593	.0372	808372	9c b4 00	stz $8000b4		stz PlayerData.state						; go to game over
244:1	.0375	808375	c2 20		rep #$20		REP #$20
595:4	.0377	808377	a9 de 84	lda #$84de		lda #<>gameOverLoop
596	.037a	80837a	85 1b		sta $1b			sta GameStatePointer
240:1	.037c	80837c	e2 20		sep #$20		SEP #$20
598:4	.037e	80837e	60		rts			rts

600							.as
601							.xs
602	.037f	80837f					EndOfGameLoop
603	.037f	80837f					_ASSERT_axy8
604	.037f	80837f	ad 99 00	lda $800099		lda joyFireEvent					; if	  1 1 1 1 0 0 0 0
605	.0382	808382	4d c9 00	eor $8000c9		eor PlayerData.bulletActive	; eor	  0 0 1 1 0 0 1 1
606	.0385	808385	2d 99 00	and $800099		and joyFireEvent					; and   1 0 1 0 1 0 1 0
607	.0388	808388	f0 03		beq $80838d		beq _noBulletStart				; gives 1 0 0 0 0 0 0 0
608	.038a	80838a	20 5a 92	jsr $80925a			jsr startBullet
609	.038d	80838d					_noBulletStart
610	.038d	80838d	20 99 92	jsr $809299		jsr updateBullet
611	.0390	808390	20 4a 95	jsr $80954a		jsr updateEntities
612	.0393	808393	20 9b 9a	jsr $809a9b		jsr updateBubbles
613	.0396	808396	20 35 a2	jsr $80a235		jsr animateDoor_88
614	.0399	808399	60		rts			rts

616							; ----- @Titlescreen loop@ -----

618							.as
619							.xs
620	.039a	80839a					titleScreenLoop
621	.039a	80839a					_ASSERT_axy8
622	.039a	80839a	ad b4 00	lda $8000b4		lda PlayerData.state
623	.039d	80839d	0a		asl a			asl a
624	.039e	80839e	aa		tax			tax
625	.039f	80839f	7c a2 83	jmp ($8083a2,x)		jmp (TitleScreenLoopFuncLUT,x)
626	>03a2	8083a2	a8 83 f5 83 0a 84		TitleScreenLoopFuncLUT .word <>(TSSetup,TSWaitForFire,TSStartGame)

628	.03a8	8083a8					TSSetup
629	.03a8	8083a8					_ASSERT_axy8
630	.03a8	8083a8	20 26 95	jsr $809526		jsr deactivateAllEntities			; so we don't get any stray sprite due to race conditions
631	.03ab	8083ab	20 cb 88	jsr $8088cb		jsr disableAllEntSprites_88		; this will clear OAM mirror as well
632							;	stz PasswordEntryIndex
633	.03ae	8083ae	9c b3 00	stz $8000b3		stz LevelData.levelGraphicsSet	; reset back to apples
634								; set up the defaults here, in case a password modifies them
635	.03b1	8083b1	20 c7 91	jsr $8091c7		jsr clearPlayerStuct_88				; clear the playerf
636	.03b4	8083b4	a9 05		lda #$05		lda #5
637	.03b6	8083b6	8d 9a 00	sta $80009a		sta GameData.lives					; give default lives
638	.03b9	8083b9	9c a8 00	stz $8000a8		stz GameData.currLevel				; reset to level 1. Change to lda # sta to make a level select for testing
639	.03bc	8083bc	9c 9b 00	stz $80009b		stz GameData.flowers					; no flowers

641	.03bf	8083bf	a9 00		lda #$00		lda #fBGBaseSize(kVRAM.titleScreen,kBaseSize_32x32)
642	.03c1	8083c1	8d 07 21	sta $802107		sta $802107								; set TS screen
643	.03c4	8083c4	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
644	.03c6	8083c6	8d 0b 21	sta $80210b		sta $80210b								; set TS chars/same as game but this will happen first
645	.03c9	8083c9	a9 62		lda #$62		lda #kDefault_OBSEL
646	.03cb	8083cb	8d 01 21	sta $802101		sta $802101								; make sure we are in sprite upper bank 0 to get QWAK sprites
244:1	.03ce	8083ce	c2 20		rep #$20		REP #$20
648:4	.03d0	8083d0	a2 0e		ldx #$0e		ldx #(4*4)-2							; 4 sprites at 4 bytes each
649	.03d2	8083d2	bd b4 bb	lda $80bbb4,x	-	lda TitleScreenData.SpriteStruct.sprites,x
650	.03d5	8083d5	9d 05 04	sta $800405,x		sta OAMMirror,x
651	.03d8	8083d8	ca		dex			dex
652	.03d9	8083d9	ca		dex			dex										; writing words so skip 2
653	.03da	8083da	10 f6		bpl $8083d2		bpl -
240:1	.03dc	8083dc	e2 20		sep #$20		SEP #$20
655:4	.03de	8083de	a9 aa		lda #$aa		lda #TitleScreenData.SpriteStruct.kUpper
656	.03e0	8083e0	8d 05 06	sta $800605		sta OAMMirrorHigh
657	.03e3	8083e3	a9 00		lda #$00		lda #kMus.TITLE
658	.03e5	8083e5	20 6b bd	jsr $80bd6b		jsr playMusic
659	.03e8	8083e8	ee b4 00	inc $8000b4		inc PlayerData.state						; move to the wait for fire FSM state
660	.03eb	8083eb	a9 ff		lda #$ff		lda #$FF
661	.03ed	8083ed	8d a5 02	sta $8002a5		sta disableUpdateSpritesXYToOAMNF	; we do not have the player or Entities and so do not want the auto update
662	.03f0	8083f0	a9 0f		lda #$0f		lda #kHideScreen.show
663	.03f2	8083f2	85 31		sta $31			sta HideScreen
664	.03f4	8083f4	60		rts			rts

666	.03f5	8083f5					TSWaitForFire
667	.03f5	8083f5					_ASSERT_axy8
668	.03f5	8083f5	20 4f 85	jsr $80854f		jsr updateTickdowns_88
669								; in reluanch64 you can just fold this block to skip it
670							.comment ;{{{
775							.endc ;}}}
776	.03f8	8083f8	ad 91 00	lda $800091		lda joyFire							; is fire pressed
777	.03fb	8083fb	d0 0c		bne $808409		bne _exit							; no
778	.03fd	8083fd	ad 96 00	lda $800096			lda oldJoyFire					; was it pressed last frame
779	.0400	808400	f0 07		beq $808409			beq _exit						; no, exit then
780	.0402	808402	ee b4 00	inc $8000b4				inc PlayerData.state		; yes, fire was released and we need to start the game
781	.0405	808405	a9 80		lda #$80				lda #kHideScreen.hide	; hide the screen. for DMA transfers and swaps
782	.0407	808407	85 31		sta $31					sta HideScreen
783	.0409	808409					_exit
784	.0409	808409	60		rts			rts
785							; no password system or keyboard, left in case you wish to crib the password system logic
786							; again you can fold it in Relaunch64. the rts above wasn't there before
787							.comment ;{{{
821							.endc ; }}}

823							; this has the password entry code, in Commander X16 form
824							; left for cribing if wanted
825							.comment ;{{{
910							.endc ;}}}


913	.040a	80840a					TSStartGame
914	.040a	80840a					_ASSERT_axy8
915	.040a	80840a	ad b3 00	lda $8000b3		lda LevelData.levelGraphicsSet	; get the current set of 4
916	.040d	80840d	20 15 8b	jsr $808b15		jsr dmaLevelChars_xx					; update the background/fruit characters etc
244:1	.0410	808410	c2 20		rep #$20		REP #$20
918:4	.0412	808412	a9 c8 81	lda #$81c8		lda #<>GAMELOOP
919	.0415	808415	85 1b		sta $1b			sta GameStatePointer					; set main FSM to game loop
240:1	.0417	808417	e2 20		sep #$20		SEP #$20
921:4	.0419	808419	20 cb 88	jsr $8088cb		jsr disableAllEntSprites_88		; clears OAM Mirror as well
922	.041c	80841c	20 2a 87	jsr $80872a		jsr plotStatusArea
923	.041f	80841f	a9 00		lda #$00		lda #kPlayerState.appear			; set the player state to appear
924	.0421	808421	8d b4 00	sta $8000b4		sta PlayerData.state
925	.0424	808424	a9 01		lda #$01		lda #kMus.THEME_1
926	.0426	808426	20 6b bd	jsr $80bd6b		jsr playMusic
927	.0429	808429	60		rts			rts

929							; ----- @Intermission loop@ -----

931							.as
932							.xs
933	.042a	80842a					INTERLOOP
934	.042a	80842a					_ASSERT_axy8
935	.042a	80842a	20 4f 85	jsr $80854f		jsr updateTickdowns_88
936	.042d	80842d	ad b4 00	lda $8000b4		lda PlayerData.state
937	.0430	808430	0a		asl a			asl a
938	.0431	808431	aa		tax			tax
939	.0432	808432	7c 35 84	jmp ($808435,x)		jmp (InterFuncLUT,x)
940	>0435	808435	3b 84 81 84 ae 84		InterFuncLUT .word <>(interSetUp,interMovePlayer,interEnterDoor)

942							.as
943							.xs
944	.043b	80843b					interSetUp
945	.043b	80843b					_ASSERT_axy8
946	.043b	80843b	20 40 86	jsr $808640		jsr PlotTransitionScreenAndMakeNextChars	; also set player index,exit index
947	.043e	80843e	20 aa 91	jsr $8091aa		jsr setPlayerToSpawnPoint_88					; to the first spawn point as set in above function
948	.0441	808441	a9 50		lda #$50		lda #kIntermission.firstExit
949	.0443	808443	8d ae 00	sta $8000ae		sta LevelData.exitIndex							; set the door we want to animate
950	.0446	808446	a9 ff		lda #$ff		lda #$FF
951	.0448	808448	8d af 00	sta $8000af		sta LevelData.exitIndex+1						; set the end exit index to dummy value for logic tracking
952	.044b	80844b	1a		inc a			inc a													; a = 0
953	.044c	80844c	20 02 91	jsr $809102		jsr changePlayerDir								; make sure player is going right
954	.044f	80844f	a9 01		lda #$01		lda #1
955	.0451	808451	8d c1 00	sta $8000c1		sta PlayerData.movingLRNZ
956	.0454	808454	8d bc 00	sta $8000bc		sta PlayerData.OnGroundNZ						; we are moving and on the ground for anim purposes
957	.0457	808457	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck		; move right
958	.045a	80845a	9c 9d 02	stz $80029d		stz CheckSpriteToCharData.xDeltaCheck.hi
959	.045d	80845d	8d a9 00	sta $8000a9		sta GameData.exitOpenNZ							; we want to close the door
960	.0460	808460	20 79 a2	jsr $80a279		jsr setAnimateDoorToClose_88					; set the door to close
961	.0463	808463	a9 00		lda #$00		lda #kSFX.DOORCLOSE
962	.0465	808465	20 62 bd	jsr $80bd62		jsr playSFX
963	.0468	808468	ad a8 00	lda $8000a8		lda GameData.currLevel							; inc and wrap level number
964	.046b	80846b	18		clc			clc
965	.046c	80846c	69 01		adc #$01		adc #1
966	.046e	80846e	c9 1f		cmp #$1f		cmp #31												; 32 levels in 16K where we mad, probably
967	.0470	808470	d0 02		bne $808474		bne +
968	.0472	808472	a9 00		lda #$00			lda #0
969	.0474	808474	8d a8 00	sta $8000a8	+	sta GameData.currLevel
970	.0477	808477	20 26 95	jsr $809526		jsr deactivateAllEntities						; don't want any stray sprites on screen
971	.047a	80847a	20 d0 91	jsr $8091d0		jsr removePickups_88								; no flashing either
972	.047d	80847d	ee b4 00	inc $8000b4		inc PlayerData.state								; move to next walk state
973							;	jsr loadPasswordTemp								; this will make and show a password for the user
974							;	jsr makePassword									; disabled in this version but for cribbing
975							;		#appendVeraAddress getGameScreenCharPos(10,4) | kVERA.inc_1
976							;		ldx #11
977							;	-	lda ActivePassword,x
978							;		jsr convertToPasswordLetter
979							;		sta kVERA.DATA_0
980							;		stz kVERA.DATA_0 ; CRAM is 0
981							;		dex
982							;		bpl -
983	.0480	808480	60		rts			rts

985							.as
986							.xs
987	.0481	808481					interMovePlayer
988	.0481	808481					_ASSERT_axy8
989	.0481	808481	a2 00		ldx #$00		ldx #0
990	.0483	808483	20 c7 85	jsr $8085c7		jsr addXWithMSBAndClip_88						; move player
991	.0486	808486	20 7d 91	jsr $80917d		jsr updatePlayerAnim_88							; animate player
992	.0489	808489	20 35 a2	jsr $80a235		jsr animateDoor_88								; animate the door
993	.048c	80848c	ad 96 03	lda $800396		lda mplexBuffer.xpos
994	.048f	80848f	c9 f0		cmp #$f0		cmp #256-16											; are we just before the door?
995	.0491	808491	90 09		bcc $80849c		bcc +
996	.0493	808493	ee b4 00	inc $8000b4			inc PlayerData.state							; move to enter door state
997	.0496	808496	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit				; start exit animation
998	.0498	808498	20 47 91	jsr $809147			jsr setPlayerAnimeTo_88
999	.049b	80849b	60		rts				rts
1000									;
1001	.049c	80849c	c9 b0		cmp #$b0	+	cmp #(11*16)										; are we in the middle?
1002	.049e	80849e	d0 0d		bne $8084ad		bne +
1003	.04a0	8084a0	20 69 a2	jsr $80a269			jsr setAnimateDoorToOpen_88				; start opening the next door
1004	.04a3	8084a3	a9 5f		lda #$5f			lda #kIntermission.secondExit
1005	.04a5	8084a5	8d ae 00	sta $8000ae			sta LevelData.exitIndex						; set the door we want to animate
1006	.04a8	8084a8	a9 01		lda #$01			lda #kSFX.DOOROPEN
1007	.04aa	8084aa	20 62 bd	jsr $80bd62			jsr playSFX
1008	.04ad	8084ad	60		rts		+	rts

1010							.as
1011							.xs
1012	.04ae	8084ae					interEnterDoor
1013	.04ae	8084ae					_ASSERT_axy8
1014	.04ae	8084ae	20 7d 91	jsr $80917d		jsr updatePlayerAnim_88							; has the animation completed?
1015	.04b1	8084b1	90 2a		bcc $8084dd		bcc _exit
1016	.04b3	8084b3	ad a8 00	lda $8000a8			lda GameData.currLevel						; we alternate level music
1017	.04b6	8084b6	a2 05		ldx #$05			ldx #size(BossLevels)-1						; so this checks if we are on a boss
1018	.04b8	8084b8	dd 5c bd	cmp $80bd5c,x		-	cmp BossLevels,x								; level and adjust the tune as needed
1019	.04bb	8084bb	f0 09		beq $8084c6			beq _bossLevel
1020	.04bd	8084bd	ca		dex					dex
1021	.04be	8084be	10 f8		bpl $8084b8				bpl -
1022	.04c0	8084c0	29 01		and #$01				and #1
1023	.04c2	8084c2	18		clc					clc
1024	.04c3	8084c3	69 01		adc #$01				adc #1
1025	>04c5	8084c5	2c							.byte $2c ; BIT XXXXX
1026	.04c6	8084c6						_bossLevel
1027	.04c6	8084c6	a9 03		lda #$03			lda #kMus.BOSS
1028	.04c8	8084c8	20 6b bd	jsr $80bd6b			jsr playMusic
1029	.04cb	8084cb	a9 00		lda #$00		lda #kPlayerState.appear						; set player to appear
1030	.04cd	8084cd	8d b4 00	sta $8000b4		sta PlayerData.state
244:1	.04d0	8084d0	c2 20		rep #$20		REP #$20
1032:4	.04d2	8084d2	a9 c8 81	lda #$81c8		lda #<>GAMELOOP
1033	.04d5	8084d5	85 1b		sta $1b			sta GameStatePointer								; set the main FSM to Gameloop
240:1	.04d7	8084d7	e2 20		sep #$20		SEP #$20
1035:4	.04d9	8084d9	a9 80		lda #$80		lda #kHideScreen.hide							; hide the screen for transition and DMA
1036	.04db	8084db	85 31		sta $31			sta HideScreen
1037	.04dd	8084dd					_exit
1038	.04dd	8084dd	60		rts			rts


1041							; ----- @Game Over loop@ -----

1043	.04de	8084de					gameOverLoop
1044	.04de	8084de					_ASSERT_axy8
1045	.04de	8084de	ad b4 00	lda $8000b4		lda PlayerData.state
1046	.04e1	8084e1	0a		asl a			asl a
1047	.04e2	8084e2	aa		tax			tax
1048	.04e3	8084e3	7c e6 84	jmp ($8084e6,x)		jmp (GameOverFuncLUT,x)
1049	>04e6	8084e6	ea 84 38 85			GameOverFuncLUT .word <>(GOSetup,GOWaitForFire)

1051	.04ea	8084ea					GoSetup
1052	.04ea	8084ea					_ASSERT_axy8
1053								; print string
1054	.04ea	8084ea	a2 1a		ldx #$1a		ldx #len(TitleScreenData.AllStrings)*2	; this doesn't have Game Over in it, which is added after
1055	.04ec	8084ec	20 f7 86	jsr $8086f7		jsr plotStringAAtIndexXGameScreen		; so it's len is the index for Game Over
1056	.04ef	8084ef	ee b4 00	inc $8000b4		inc PlayerData.state							; move to wait for firfe state
1057								; remove sprites
1058	.04f2	8084f2	20 26 95	jsr $809526		jsr deactivateAllEntities					; we remove all the entites as well so you stand alone, and they don't move
1059	.04f5	8084f5	20 cb 88	jsr $8088cb		jsr disableAllEntSprites_88
1060								; check to see if this is the new high score
1061	.04f8	8084f8	a2 00		ldx #$00		ldx #0
1062	.04fa	8084fa	bd 9c 00	lda $80009c,x	-	lda GameData.score,x			; score is stored in most significant digit -> lowest significant digit
1063	.04fd	8084fd	dd a2 00	cmp $8000a2,x		cmp GameData.high,x
1064	.0500	808500	f0 04		beq $808506		beq _next						; if == next digit
1065	.0502	808502	b0 1f		bcs $808523		bcs _higher						; if >= new high score take it
1066	.0504	808504	80 05		bra $80850b			bra _clearScore			; thus < and just clear it no new high
1067	.0506	808506					_next
1068	.0506	808506	e8		inx			inx
1069	.0507	808507	e0 06		cpx #$06		cpx #size(sGameData.score)
1070	.0509	808509	d0 ef		bne $8084fa		bne -
1071	.050b	80850b					_clearScore
1072	.050b	80850b	a2 04		ldx #$04		ldx #size(sGameData.score)-2
244:1	.050d	80850d	c2 20		rep #$20		REP #$20
1074:4	.050f	80850f	a9 00 00	lda #$0000		lda #0
1075	.0512	808512	9d 9c 00	sta $80009c,x	-	sta GameData.score,x
1076	.0515	808515	ca		dex			dex
1077	.0516	808516	ca		dex			dex
1078	.0517	808517	10 f9		bpl $808512		bpl -
240:1	.0519	808519	e2 20		sep #$20		SEP #$20
1080:4	.051b	80851b	20 cb 8b	jsr $808bcb		jsr dmaScreenMirror_xx		; update the actual screen. this is risky as I don't know I'm in Blank
1081								;rts								; explicity and I rely on the NMI being short and the DMA only being 2K
1082	.051e	80851e	a9 04		lda #$04		lda #kMus.THEME_3				; on the SNES this eats a lot of time and I need the above to happen in vblank while this is better out of vblank
1083	.0520	808520	4c 6b bd	jmp $80bd6b		jmp playMusic
1084								;
1085	.0523	808523					_higher
1086	.0523	808523	a2 04		ldx #$04		ldx #size(sGameData.score)-2	; save the current score into the high score
244:1	.0525	808525	c2 20		rep #$20		REP #$20
1088:4	.0527	808527	bd 9c 00	lda $80009c,x	-	lda GameData.score,x
1089	.052a	80852a	9d a2 00	sta $8000a2,x		sta GameData.high,x
1090	.052d	80852d	ca		dex			dex
1091	.052e	80852e	ca		dex			dex
1092	.052f	80852f	10 f6		bpl $808527		bpl -
240:1	.0531	808531	e2 20		sep #$20		SEP #$20
1094:4	.0533	808533	20 46 88	jsr $808846		jsr pltHighScore					; update the high score on the screen
1095	.0536	808536	80 d3		bra $80850b		gra _clearScore

1097	.0538	808538					GOWaitForFire
1098	.0538	808538					_ASSERT_axy8
1099								;wait for fire
1100	.0538	808538	ad 91 00	lda $800091		lda joyFire									; if !fire && oldFire
1101	.053b	80853b	d0 11		bne $80854e		bne _exit									; aka fire released
1102	.053d	80853d	ad 96 00	lda $800096			lda oldJoyFire
1103	.0540	808540	f0 0c		beq $80854e			beq _exit
1104										; got to Title Screen State
1105	.0542	808542	9c b4 00	stz $8000b4				stz PlayerData.state				; first minor FSM state
244:1	.0545	808545	c2 20		rep #$20		REP #$20
1107:4	.0547	808547	a9 9a 83	lda #$839a				lda #<>titleScreenLoop
1108	.054a	80854a	85 1b		sta $1b					sta GameStatePointer				; move main FSM to titlescreen
240:1	.054c	80854c	e2 20		sep #$20		SEP #$20
1110:4	.054e	80854e					_exit
1111	.054e	80854e	60		rts			rts

1113							; ----- @Misc functions@ -----

1115							; these are the inital timer load values
1116	.054f	80854f					kTimers .block
1117	=$8							dissBlocksValue = $8
1118	=$50							floatTimer = $50
1119	=10							DoorAnimeRate = 10
1120	=30							spawnBubble = 30
1121							.bend

1123							.as
1124							.xs
1125	.054f	80854f					updateTickdowns_88
1126	.054f	80854f					_ASSERT_jsr
1127	.054f	80854f					_ASSERT_axy8
1128	.054f	80854f	a2 0d		ldx #$0d		ldx #TICK_DOWN_END - TICK_DOWN_START-1
1129	.0551	808551	bd d1 00	lda $8000d1,x	_l	lda TickDowns,x		; if !0
1130	.0554	808554	f0 03		beq $808559		beq _next
1131	.0556	808556	de d1 00	dec $8000d1,x			dec TickDowns,x	; timer--
1132	.0559	808559					_next
1133	.0559	808559	ca		dex			dex
1134	.055a	80855a	10 f5		bpl $808551		bpl _l
1135	.055c	80855c	60		rts			rts

1137							.as
1138							.xs
1139	.055d	80855d					scanJoystick_88
1140							; so this is a SNES and its a Pad, but historic reasons joystick.
1141	.055d	80855d					_ASSERT_jsr
1142	.055d	80855d					_ASSERT_axy8
1143								; copy the current state to the old state
1144	.055d	80855d	a2 04		ldx #$04		ldx #4
1145	.055f	80855f	bd 8d 00	lda $80008d,x	-	lda joyLeft,x
1146	.0562	808562	9d 92 00	sta $800092,x		sta oldJoyLeft,x
1147	.0565	808565	9e 8d 00	stz $80008d,x		stz joyLeft,x
1148	.0568	808568	ca		dex			dex
1149	.0569	808569	10 f4		bpl $80855f		bpl -
1150								; read in the new state
1151								; this uses an odd method of slide the bit out and branching
1152								; its somewhat fast but also compresses really well
1153								; most snes games keep the bit flags in one word
1154								; this works alright on a NES where RAM is precious
1155								; on the C64 RAM is RAM so any trade off in code size vs data size
1156								; is good either way
1157								; the SNES.. we ample ROM and ample RAM so up to the style
1158								; for single input checks this is tighter but for button combinations
1159								; its more expensive, so it depends on what your game does
1160								; also SNES pad is active low
1161								; SNES auto read inverts it to make it active high
1162	.056b	80856b	a2 01		ldx #$01		ldx #1
1163	.056d	80856d	ad 19 42	lda $804219		lda $804219			;JOY1H
1164	.0570	808570	4a		lsr a			lsr a					;right
1165	.0571	808571	b0 4e		bcs $8085c1		bcs _joyRight
1166	.0573	808573	4a		lsr a				lsr a				; left
1167	.0574	808574	b0 46		bcs $8085bc			bcs _joyLeft
1168	.0576	808576					_checkUD
1169	.0576	808576	4a		lsr a			lsr a					; down
1170	.0577	808577	b0 3d		bcs $8085b6		bcs _joyDown
1171	.0579	808579	4a		lsr a				lsr a				; up
1172	.057a	80857a	b0 30		bcs $8085ac			bcs _joyUp
1173	.057c	80857c					_checkFire
1174	.057c	80857c	4a		lsr a			lsr a					; start
1175	.057d	80857d	4a		lsr a			lsr a					; select
1176	.057e	80857e	4a		lsr a			lsr a					; Y
1177	.057f	80857f	b0 30		bcs $8085b1		bcs _joyY
1178	.0581	808581					_checkB
1179	.0581	808581	4a		lsr a			lsr a					; B
1180	.0582	808582	90 03		bcc $808587		bcc _joyEnd
1181	.0584	808584	8e 8f 00	stx $80008f			stx joyUp
1182	.0587	808587					_joyEnd
1183	.0587	808587	ad 94 00	lda $800094		lda oldJoyUp		; old up			0011
1184	.058a	80858a	4d 8f 00	eor $80008f		eor joyUp			; eor new up	0101
1185	.058d	80858d	2d 8f 00	and $80008f		and joyUp			; and up			0101
1186	.0590	808590	8d 97 00	sta $800097		sta joyUpStart		;					0100

1188	.0593	808593	ad 8f 00	lda $80008f		lda joyUp			; up				0011
1189	.0596	808596	4d 94 00	eor $800094		eor OldJoyUp		; eor old up	0101
1190	.0599	808599	2d 94 00	and $800094		and OldJoyUp		; and old up	0101
1191	.059c	80859c	8d 98 00	sta $800098		sta joyUpStop		;					0100

1193	.059f	80859f	ad 96 00	lda $800096		lda oldJoyFire
1194	.05a2	8085a2	4d 91 00	eor $800091		eor joyFire
1195	.05a5	8085a5	2d 91 00	and $800091		and joyFire
1196	.05a8	8085a8	8d 99 00	sta $800099		sta joyFireEvent
1197	.05ab	8085ab	60		rts			rts

1199	.05ac	8085ac					_joyUp
1200	.05ac	8085ac	8e 8f 00	stx $80008f		stx joyUp
1201	.05af	8085af	b0 cb		bcs $80857c		gcs _checkFire

1203	.05b1	8085b1					_joyY
1204	.05b1	8085b1	8e 91 00	stx $800091		stx joyFire
1205	.05b4	8085b4	b0 cb		bcs $808581		gcs _checkB

1207	.05b6	8085b6					_joyDown
1208	.05b6	8085b6	8e 90 00	stx $800090		stx joyDown
1209	.05b9	8085b9	4a		lsr a			lsr a				; skip up bit
1210	.05ba	8085ba	80 c0		bra $80857c		bra _checkFire

1212	.05bc	8085bc					_joyLeft
1213	.05bc	8085bc	8e 8d 00	stx $80008d		stx joyLeft
1214	.05bf	8085bf	b0 b5		bcs $808576		gcs _checkUD

1216	.05c1	8085c1					_joyRight
1217	.05c1	8085c1	8e 8e 00	stx $80008e		stx joyRight
1218	.05c4	8085c4	4a		lsr a			lsr a				; skip left bit
1219	.05c5	8085c5	80 af		bra $808576		bra _checkUD

1221							.as
1222							.xs
1223	.05c7	8085c7					addXWithMSBAndClip_88
1224	.05c7	8085c7					_ASSERT_jsr
1225	.05c7	8085c7					_ASSERT_axy8
1226							; we do wrap on the screen so we need to clip for 0-256
1227							; so I do it in 16bit mode, now if the upper byte is $ff then we are
1228							; negative and went under, which is a branch minus
1229							; then we need to check if we are over 256-16 as the sprite is 16 wide
1230							; if we go under we clip to 0, if we go over we clip to 256-16
1231	.05c7	8085c7	64 2f		stz $2f			stz DidClipX										; not clipped yet
1232	.05c9	8085c9	bd 96 03	lda $800396,x		lda mplexBuffer.xpos,x							; read the X
244:1	.05cc	8085cc	c2 20		rep #$20		REP #$20
1234:4	.05ce	8085ce	29 ff 00	and #$00ff		and #$00ff											; make sure
1235	.05d1	8085d1	18		clc			clc
1236	.05d2	8085d2	6d 9c 02	adc $80029c		adc CheckSpriteToCharData.xDeltaCheck
1237	.05d5	8085d5	30 0c		bmi $8085e3		bmi _wentUnder
1238	.05d7	8085d7	c9 f0 00	cmp #$00f0			cmp #$100-16
1239	.05da	8085da	90 0c		bcc $8085e8			bcc _justStore
1240										; went over
1241	.05dc	8085dc	e6 2f		inc $2f					inc DidClipX
1242	.05de	8085de	a9 f0 00	lda #$00f0				lda #$100-16
1243	.05e1	8085e1	80 05		bra $8085e8				bra _justStore
1244	.05e3	8085e3					_wentUnder
1245	.05e3	8085e3	e6 2f		inc $2f			inc DidClipX
1246	.05e5	8085e5	a9 00 00	lda #$0000		lda #0
1247	.05e8	8085e8					_justStore
240:1	.05e8	8085e8	e2 20		sep #$20		SEP #$20
1249:4	.05ea	8085ea	9d 96 03	sta $800396,x		sta mplexBuffer.xpos,x
1250	.05ed	8085ed	60		rts			rts


1253							.as
1254							.xs
1255	.05ee	8085ee					ClipY
1256	.05ee	8085ee					_ASSERT_jsr
1257	.05ee	8085ee					_ASSERT_axy8
1258							; now Y the screen is only 224 high, while you could just use 256 and "let it happen" it will give a large delay
1259							; but we also have a hud, the game screen is only 192 high with 32 pixels of HUD. So when you go off the top you should
1260							; be moved closer to the bottom of the hud and when you fall off below the hud you should "warp" off the top
1261	.05ee	8085ee	c9 d0		cmp #$d0		cmp #208			; 192 + sprite height
1262	.05f0	8085f0	b0 01		bcs $8085f3		bcs +
1263	.05f2	8085f2	60		rts				rts			; 0 - 192 = safe 192-208 = shared 16 off screen
1264	.05f3	8085f3	c9 f0		cmp #$f0	+	cmp #240			; if 208 < y < 240 then we have fallen off the bottom
1265	.05f5	8085f5	90 03		bcc $8085fa		bcc _bottomOfScreen
1266									; top of screen
1267	.05f7	8085f7	a9 c1		lda #$c1			lda #193		; move to just below the HUD
1268	.05f9	8085f9	60		rts				rts
1269	.05fa	8085fa					_bottomOfScreen
1270	.05fa	8085fa	a9 f0		lda #$f0		lda #-16			; warp to being 16 pixels off the "top"
1271	.05fc	8085fc	60		rts			rts

1273							.as
1274							.xs
1275	.05fd	8085fd					giveScore
1276	.05fd	8085fd					_ASSERT_jsr
1277	.05fd	8085fd					_ASSERT_axy8
1278	.05fd	8085fd	0a		asl a			asl a
1279	.05fe	8085fe	0a		asl a			asl a
1280	.05ff	8085ff	0a		asl a			asl a							; x8 while scores are 6 bytes long x6 is more trouble than wasting 2 bytes per score
1281	.0600	808600	09 05		ora #$05		ora #5						; move to the last digit
1282	.0602	808602	a8		tay			tay							; stash in Y for indexing - LUT would be quicker and smaller looking at it now
1283	.0603	808603	a2 05		ldx #$05		ldx #5						; for 6 digits starting at LSD
1284	.0605	808605	18		clc			clc							; clear initial C
1285	.0606	808606					_scLoop
1286	.0606	808606	bd 9c 00	lda $80009c,x		lda GameData.score,x
1287	.0609	808609	79 20 86	adc $808620,y		adc FruitScore,y
1288	.060c	80860c	9d 9c 00	sta $80009c,x		sta GameData.score,x		; score[x++] += points[y++]
1289	.060f	80860f	c9 0a		cmp #$0a		cmp #10						; digit overflow
1290	.0611	808611	90 06		bcc $808619		bcc _ok
1291									;sec
1292	.0613	808613	e9 0a		sbc #$0a			sbc #10					; restore to 0-9
1293	.0615	808615	9d 9c 00	sta $80009c,x			sta GameData.score,x
1294	.0618	808618	38		sec				sec						; add 1 more next time
1295	.0619	808619					_ok
1296	.0619	808619	88		dey			dey
1297	.061a	80861a	ca		dex			dex
1298	.061b	80861b	10 e9		bpl $808606		bpl _scLoop
1299	.061d	80861d	4c 24 88	jmp $808824		jmp pltScore

1301							;index for scores
1302	.0620	808620					kScoreIndex .block
1303	=0							fruit = 0
1304	=1							flower = 1
1305	=2							key = 2
1306	=3							boss = 3
1307							.bend

1309	>0620	808620	00 00 00 01 00 00 0f 0f		FruitScore	.byte 0,0,0,1,0,0,15,15
1310	>0628	808628	00 00 00 05 00 00 0f 0f		FlowerScore .byte 0,0,0,5,0,0,15,15
1311	>0630	808630	00 00 00 02 05 00 0f 0f		KeyScore		.byte 0,0,0,2,5,0,15,15
1312	>0638	808638	00 01 00 00 00 00 0f 0f		BossScore	.byte 0,1,0,0,0,0,15,15

1314							.as
1315							.xs
1316	.0640	808640					PlotTransitionScreenAndMakeNextChars
1317	.0640	808640					_ASSERT_jsr
1318	.0640	808640					_ASSERT_axy8
1319	.0640	808640	20 c0 86	jsr $8086c0			jsr clearMapInScreenMirror				; clear just the map, leaving the HUD "as is"
1320									; we need to copy in the current wall char elsewhere
1321	.0643	808643	a9 00		lda #$00			lda #0
1322	.0645	808645	eb		xba				xba
1323	.0646	808646	ad b3 00	lda $8000b3			lda LevelData.levelGraphicsSet		; this is the "current levels" set at this point
264:1	.0649	808649	c2 30		rep #$30		REP #$30
1325:4	.064b	80864b	0a		asl a				asl a
1326	.064c	80864c	aa		tax				tax
1327	.064d	80864d	bd ef 86	lda $8086ef,x			lda WallCharLUT,x							; set the DMA source address based upon the set we want
1328	.0650	808650	8d 02 43	sta $804302			sta $804302
240:1	.0653	808653	e2 20		sep #$20		SEP #$20
1330:4	.0655	808655	a9 82		lda #$82			lda #`BackShadowChars
1331	.0657	808657	8d 04 43	sta $804304			sta $804304

1333	.065a	80865a	a2 80 00	ldx #$0080			ldx #4*8*4									; we want to do 4 chars
1334	.065d	80865d	8e 05 43	stx $804305			stx $804305
1335	.0660	808660	a2 01 18	ldx #$1801			ldx #%00000001 | $1800					; A->B, Inc, Write WORD, $2118
1336	.0663	808663	8e 00 43	stx $804300			stx $804300
1337	.0666	808666	a2 c0 17	ldx #$17c0			ldx #kVRAM.gameChars+(124*4*8/2)		; write them to char num 124-127
1338	.0669	808669	8e 16 21	stx $802116			stx $802116									; 4 bytes per line, for 8 lines per char
1339	.066c	80866c	a9 80		lda #$80			lda #$80										; but value is a word address so div 2
1340	.066e	80866e	8d 15 21	sta $802115			sta $802115									; inc VRAM port address
1341	.0671	808671	a9 01		lda #$01			lda #1
1342	.0673	808673	8d 0b 42	sta $80420b			sta $80420B									; fire
252:1	.0676	808676	e2 10		sep #$10		SEP #$10
1344:4									; now we need to draw the first floor half
1345	.0678	808678	a9 50		lda #$50			lda #kIntermission.firstExit			; move to the start position
1346	.067a	80867a	85 15		sta $15				sta ActiveTileIndex
1347	.067c	80867c	8d ad 00	sta $8000ad			sta LevelData.playerIndex				; we start at the first door
1348	.067f	80867f	a9 0e		lda #$0e			lda #kDoorOpen
1349	.0681	808681	20 51 8d	jsr $808d51			jsr pltSingleTileNoLookup				; first door is open
1350	.0684	808684	a9 5f		lda #$5f			lda #kIntermission.secondExit
1351	.0686	808686	85 15		sta $15				sta ActiveTileIndex
1352	.0688	808688	8d ae 00	sta $8000ae			sta LevelData.exitIndex					; and leave on the second one
1353	.068b	80868b	a9 0a		lda #$0a			lda #kDoorClosed
1354	.068d	80868d	20 51 8d	jsr $808d51			jsr pltSingleTileNoLookup				; second door is closed
1355	.0690	808690	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw half a screens worth of the 'old' tile which was chached
1356	.0692	808692					_firstLoop
1357	.0692	808692	da		phx				phx											; preserve X
1358	.0693	808693	e6 15		inc $15					inc ActiveTileIndex					; move to the next tile
1359	.0695	808695	a9 25		lda #$25				lda #kTiles.intermissionOldWall	; cached wall "block" num
1360	.0697	808697	20 51 8d	jsr $808d51				jsr pltSingleTileNoLookup			; plot the value raw without doing a level -> screen tile lookup
1361	.069a	80869a	fa		plx				plx											; restore X
1362	.069b	80869b	ca		dex				dex
1363	.069c	80869c	10 f4		bpl $808692			bpl _firstLoop								; until done

1365	.069e	80869e	20 38 83	jsr $808338			jsr incLevelGraphicSet					; move to the next levels set
1366	.06a1	8086a1	20 15 8b	jsr $808b15			jsr dmaLevelChars_xx						; install the chars to VRAM

1368	.06a4	8086a4	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw the second half of the screen
1369	.06a6	8086a6					_secondLoop
1370	.06a6	8086a6	da		phx				phx
1371	.06a7	8086a7	e6 15		inc $15					inc ActiveTileIndex
1372	.06a9	8086a9	a9 01		lda #$01				lda #kTiles.wall
1373	.06ab	8086ab	20 4d 8d	jsr $808d4d				jsr pltSingleTile
1374	.06ae	8086ae	fa		plx				plx
1375	.06af	8086af	ca		dex				dex
1376	.06b0	8086b0	10 f4		bpl $8086a6			bpl _secondLoop
1377	.06b2	8086b2	60		rts				rts

1379	=47						kEmptyTileNum = 47
1380	>06b3	8086b3	2f				ClearEmptyTile .byte kEmptyTileNum	; for a fixed DMA

1382							.as
1383							.xs
1384	.06b4	8086b4					clearScreenMirrorToEmptyChar
1385	.06b4	8086b4					_ASSERT_jsr
1386	.06b4	8086b4					_ASSERT_axy8
1387	.06b4	8086b4	08		php			php
244:1	.06b5	8086b5	c2 20		rep #$20		REP #$20
1389:4	.06b7	8086b7	a9 00 08	lda #$0800			lda #32*32*2	; whole screen
1390	.06ba	8086ba	8d 05 43	sta $804305			sta $804305
1391	.06bd	8086bd	4c c9 86	jmp $8086c9			jmp clearScreenMirrorCommon_16x

1393							.as
1394							.xs
1395	.06c0	8086c0					clearMapInScreenMirror
1396	.06c0	8086c0					_ASSERT_jsr
1397	.06c0	8086c0					_ASSERT_axy8
1398	.06c0	8086c0	08		php			php
244:1	.06c1	8086c1	c2 20		rep #$20		REP #$20
1400:4	.06c3	8086c3	a9 00 06	lda #$0600			lda #kTileXCount*kTileYCount*4*2 ; just the map
1401	.06c6	8086c6	8d 05 43	sta $804305			sta $804305
1402									; fall through
1403	.06c9	8086c9					clearScreenMirrorCommon_16x
1404	.06c9	8086c9					_ASSERT_a16
1405	.06c9	8086c9	a9 08 80	lda #$8008			lda #$8008	  ; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1406	.06cc	8086cc	8d 00 43	sta $804300			sta $804300
1407	.06cf	8086cf	a9 b3 86	lda #$86b3			lda #<>ClearEmptyTile
1408	.06d2	8086d2	8d 02 43	sta $804302			sta $804302
1409	.06d5	8086d5	a9 80 00	lda #$0080			lda #`ClearEmptyTile
1410	.06d8	8086d8	8d 04 43	sta $804304			sta $804304
1411	.06db	8086db	a9 00 20	lda #$2000			lda #<>ScreenMirror
1412	.06de	8086de	8d 81 21	sta $802181			sta $802181
1413	.06e1	8086e1	a9 20 7e	lda #$7e20			lda #>`ScreenMirror
1414	.06e4	8086e4	8d 82 21	sta $802182			sta $802182
1415	.06e7	8086e7	a9 01 00	lda #$0001			lda #$0001
1416	.06ea	8086ea	8d 0b 42	sta $80420b			sta $80420B	 ; FIRE DMA
1417	.06ed	8086ed	28		plp			plp
1418	.06ee	8086ee	60		rts			rts

1420							; this points to the point of the complete floor tile in the BackShadowChar data
1421	.06ef	8086ef					WallCharLUT .block
1422	=512							_offset = 16*4*8				; we are interested in 16th,17th,18th and 19th chars
1423	=[$828200,$828880,$828f00,$829580]			_values = BackShadowChars + range(4)*(size(BackShadowChars)/4) + _offset
1424	>06ef	8086ef	00 82 80 88 00 8f 80 95			.word <>(_values)
1425							.bend


1428							; these string functions have two entry points as they needed different CRAM values for when you draw them.
1429							; on the SNES I can't be bothered and the GAME OVER text has a black background and not a brown one :P
1430							; left for historic puposes or if you wish to correct this oversite.
1431							.as
1432							.xs
1433	.06f7	8086f7					plotStringAAtIndexXGameScreen
1434	.06f7	8086f7					_ASSERT_jsr
1435	.06f7	8086f7					_ASSERT_axy8
1436	.06f7	8086f7	64 10		stz $10			stz ZPTemp2
1437	.06f9	8086f9	80 02		bra $8086fd		bra psaaixCommon
1438							.as
1439							.xs
1440	.06fb	8086fb					plotStringAAtIndexX
1441	.06fb	8086fb					_ASSERT_jsr
1442	.06fb	8086fb					_ASSERT_axy8
1443	.06fb	8086fb	64 10		stz $10			stz ZPTemp2
1444	.06fd	8086fd					psaaixCommon
1445								; to do this I use the WRAM port to the screen mirror, this is to contrast
1446								; to other functions where I use indrect long.
244:1	.06fd	8086fd	c2 20		rep #$20		REP #$20
1448:4	.06ff	8086ff	a0 7e		ldy #$7e		ldy #`ScreenMirror
1449	.0701	808701	8c 83 21	sty $802183		sty $802183 								; this is most probably a zero but to be "safe" do it this way
1450	.0704	808704	bd e0 bb	lda $80bbe0,x		lda TitleScreenData.stringPos,x
1451	.0707	808707	8d 81 21	sta $802181		sta $802181
1452	.070a	80870a	bc c4 bb	ldy $80bbc4,x		ldy TitleScreenData.string,x
1453	.070d	80870d	b9 fc bb	lda $80bbfc,y		lda StringTableLUT,y						; load up the strings data src pointer
1454	.0710	808710	85 06		sta $06			sta Pointer1
240:1	.0712	808712	e2 20		sep #$20		SEP #$20
1456:4	.0714	808714	a0 00		ldy #$00		ldy #0
1457	.0716	808716	b1 06		lda ($06),y	-	lda (Pointer1),y							; read char
1458	.0718	808718	c9 ff		cmp #$ff		cmp #$ff										; is it the terminator
1459	.071a	80871a	f0 0d		beq $808729		beq _done
1460	.071c	80871c	8f 80 21 00	sta $002180			sta $2180								; write to the WRAM port, which auto incs
1461	.0720	808720	a5 10		lda $10				lda ZPTemp2								; this holds the artributes we want
1462	.0722	808722	8f 80 21 00	sta $002180			sta $2180								; write it too
1463	.0726	808726	c8		iny				iny										; next char
1464	.0727	808727	80 ed		bra $808716			bra -
1465	.0729	808729					_done
1466	.0729	808729	60		rts			rts

1468							; ----- @Hud@ -----

1470	.072a	80872a					kSBC .block ; kStatusBorderChars
1471	=205							M	= 205
1472	=206							TL	= 203+3
1473	=207							T	= 204+3
1474	=209							TR	= 206+3
1475	=208							L	= 205+3
1476	=210							R	= 207+3
1477	=250							BL	= 250
1478	=251							B	= 251
1479	=252							BR	= 252
1480	=211							QWAKT = 208+3
1481	=217							QWAKB = 214+3
1482	=223							Score = 220+3
1483	=229							High = 226+3
1484	=232							QwakP = 232
1485	=204							X = 204
1486	=236							Flower = 236
1487	=240							Digits = 240
1488							.bend

1490	=$20						kStatusAttributes = %00100000 ; PAL 0 no flips but higher priority
1491							fGetMemoryForScreenChar .function base,x,y
1492							.endf base + ( y*32*2 ) + ( x*2 )

1494							.as
1495							.xs
1496	.072a	80872a					plotStatusArea
1497	.072a	80872a					_ASSERT_jsr
1498	.072a	80872a					_ASSERT_axy8
1499							; we need to draw the bottom 4 rows, its 245 bytes vs 32*2*4 = 256 so 11 bytes smaller
1500							; but also it doesn't need a tool ;)
1501							; for this is use indrect long rather than WRAM port as an example of the mode and its uses
1502							; port would be smaller and fast though.
1503	=$7e2600						_statusStart = fGetMemoryForScreenChar(ScreenMirror,0,24)
244:1	.072a	80872a	c2 20		rep #$20		REP #$20
1505:4	.072c	80872c	a9 00 26	lda #$2600		lda #<>_statusStart
1506	.072f	80872f	85 32		sta $32			sta ZPLong.loword
240:1	.0731	808731	e2 20		sep #$20		SEP #$20
1508:4	.0733	808733	a9 7e		lda #$7e		lda #`_statusStart				; set the ZPLong to the start
1509	.0735	808735	85 34		sta $34			sta ZPLong.bank					; of the hud in screen mirror
1510	.0737	808737	a9 20		lda #$20		lda #kStatusAttributes			; set up the high byte
1511	.0739	808739	eb		xba			xba
1512								; draw top row
1513	.073a	80873a	a0 00		ldy #$00		ldy #0
1514	.073c	80873c	a9 ce		lda #$ce		lda #kSBC.TL						; this is a top corner piece, 30 tops peieces, then another corner
1515	.073e	80873e	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1516	.0741	808741	a2 1d		ldx #$1d		ldx #29 ; draw 30
1517	.0743	808743	a9 cf		lda #$cf	-	lda #kSBC.T
1518	.0745	808745	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1519	.0748	808748	ca		dex			dex
1520	.0749	808749	10 f8		bpl $808743		bpl -
1521	.074b	80874b	a9 d1		lda #$d1		lda #kSBC.TR
1522	.074d	80874d	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1523								; draw second row
1524	.0750	808750	a9 d0		lda #$d0		lda #kSBC.L
1525	.0752	808752	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1526									; draw the SCORE text
1527	.0755	808755	a2 00		ldx #$00		ldx #kStatusRanges.Score
1528	.0757	808757	20 00 88	jsr $808800		jsr plotStatusRangeY
1529									; skip score digits
1530	.075a	80875a	98		tya			tya
1531	.075b	80875b	18		clc			clc
1532	.075c	80875c	69 0c		adc #$0c		adc #12 ; 6 chars
1533	.075e	80875e	a8		tay			tay
1534									; draw empty char
1535	.075f	80875f	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1536									; draw top of QWAK
1537	.0762	808762	a2 01		ldx #$01		ldx #kStatusRanges.QWAKT
1538	.0764	808764	20 00 88	jsr $808800		jsr plotStatusRangeY
1539									; draw empty char
1540	.0767	808767	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1541									; draw top of QWAK
1542	.076a	80876a	a9 e8		lda #$e8		lda #kSBC.QwakP
1543	.076c	80876c	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1544	.076f	80876f	a9 e9		lda #$e9		lda #kSBC.QwakP+1
1545	.0771	808771	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1546									; draw 3 banks
1547	.0774	808774	20 13 88	jsr $808813		jsr plot3EmptyStatusCharToZPLong
1548									; draw top of Flower
1549	.0777	808777	a9 ec		lda #$ec		lda #kSBC.Flower
1550	.0779	808779	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1551	.077c	80877c	a9 ed		lda #$ed		lda #kSBC.Flower+1
1552	.077e	80877e	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1553									; draw 3 blanks
1554	.0781	808781	20 13 88	jsr $808813		jsr plot3EmptyStatusCharToZPLong
1555									; draw right edge
1556	.0784	808784	a9 d2		lda #$d2		lda #kSBC.R
1557	.0786	808786	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1558								; draw third row
1559	.0789	808789	a9 d0		lda #$d0		lda #kSBC.L
1560	.078b	80878b	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1561	.078e	80878e	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1562									; draw HIGH text
1563	.0791	808791	a2 02		ldx #$02		ldx #kStatusRanges.High
1564	.0793	808793	20 00 88	jsr $808800		jsr plotStatusRangeY
1565	.0796	808796	a9 e5		lda #$e5		lda #kSBC.High
1566	.0798	808798	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1567	.079b	80879b	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1568									; skip high score digits
1569	.079e	80879e	98		tya			tya
1570	.079f	80879f	18		clc			clc
1571	.07a0	8087a0	69 0c		adc #$0c		adc #12
1572	.07a2	8087a2	a8		tay			tay
1573	.07a3	8087a3	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1574									; draw bottom half of qwak logo
1575	.07a6	8087a6	a2 03		ldx #$03		ldx #kStatusRanges.QWAKB
1576	.07a8	8087a8	20 00 88	jsr $808800		jsr plotStatusRangeY
1577	.07ab	8087ab	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1578									; draw bottom half of qwak
1579	.07ae	8087ae	a9 ea		lda #$ea		lda #kSBC.QwakP+2
1580	.07b0	8087b0	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1581	.07b3	8087b3	a9 eb		lda #$eb		lda #kSBC.QwakP+3
1582	.07b5	8087b5	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1583	.07b8	8087b8	a9 cc		lda #$cc		lda #kSBC.X
1584	.07ba	8087ba	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1585	.07bd	8087bd	20 16 88	jsr $808816		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1586									; plot lower half of flower
1587	.07c0	8087c0	a9 ee		lda #$ee		lda #kSBC.Flower+2
1588	.07c2	8087c2	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1589	.07c5	8087c5	a9 ef		lda #$ef		lda #kSBC.Flower+3
1590	.07c7	8087c7	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1591	.07ca	8087ca	a9 cc		lda #$cc		lda #kSBC.X
1592	.07cc	8087cc	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1593	.07cf	8087cf	20 16 88	jsr $808816		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1594	.07d2	8087d2	a9 d2		lda #$d2		lda #kSBC.R
1595	.07d4	8087d4	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1596								; draw forth row
1597	.07d7	8087d7	a9 fa		lda #$fa		lda #kSBC.BL
1598	.07d9	8087d9	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1599	.07dc	8087dc	a2 1d		ldx #$1d		ldx #29 ; draw 30
1600	.07de	8087de	a9 fb		lda #$fb	-	lda #kSBC.B
1601	.07e0	8087e0	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1602	.07e3	8087e3	ca		dex			dex
1603	.07e4	8087e4	10 f8		bpl $8087de		bpl -
1604	.07e6	8087e6	a9 fc		lda #$fc		lda #kSBC.BR
1605	.07e8	8087e8	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1606	.07eb	8087eb	20 24 88	jsr $808824		jsr pltScore
1607	.07ee	8087ee	20 46 88	jsr $808846		jsr pltHighScore
1608	.07f1	8087f1	20 68 88	jsr $808868		jsr pltLives
1609	.07f4	8087f4	4c 88 88	jmp $808888		jmp pltFlowers
1610	.07f7	8087f7	60		rts			rts

1612	.07f8	8087f8					kStatusRanges .block
1613	=0							Score = 0
1614	=1							QWAKT = 1
1615	=2							High = 2
1616	=3							QWAKB = 3
1617							.bend

1619	=((223,229),)					StatusRangePairs  := ((kSBC.Score, kSBC.Score+6),)
1620	=((223,229),(211,217))				StatusRangePairs ..= ((kSBC.QWAKT, kSBC.QWAKT+6),)
1621	=((223,229),(211,217),(229,232))		StatusRangePairs ..= ((kSBC.High,  kSBC.High+3),)	; the H needs manual repeating
1622	=((223,229),(211,217),(229,232),(217,223))	StatusRangePairs ..= ((kSBC.QWAKB, kSBC.QWAKB+6),)

1624	.07f8	8087f8					StatusRangePairsLUT .block
1625	>07f8	8087f8	df d3 e5 d9				start .byte StatusRangePairs[:,0]
1626	>07fc	8087fc	e5 d9 e8 df				end .byte StatusRangePairs[:,1]
1627							.bend

1629	.0800	808800					plotStatusRangeY
1630	.0800	808800					_ASSERT_jsr
1631	.0800	808800					_ASSERT_axy8
1632							; this take a index into the table and draw the char until the last char spec'd in the table
1633	.0800	808800	bd fc 87	lda $8087fc,x		lda StatusRangePairsLUT.end,x
1634	.0803	808803	85 0f		sta $0f			sta ZPTemp
1635	.0805	808805	bd f8 87	lda $8087f8,x		lda StatusRangePairsLUT.start,x
1636	.0808	808808	aa		tax			tax
1637	.0809	808809	8a		txa		-	txa
1638	.080a	80880a	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1639	.080d	80880d	e8		inx			inx
1640	.080e	80880e	e4 0f		cpx $0f			cpx ZPTemp
1641	.0810	808810	d0 f7		bne $808809		bne -
1642	.0812	808812	60		rts			rts

1644	.0813	808813					plot3EmptyStatusCharToZPLong
1645	.0813	808813					_ASSERT_jsr
1646	.0813	808813					_ASSERT_axy8
1647	.0813	808813	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1648	.0816	808816					plot2EmptyStatusCharToZPLong
1649	.0816	808816	20 19 88	jsr $808819		jsr plotEmptyStatusCharToZPLong
1650	.0819	808819					plotEmptyStatusCharToZPLong
1651	.0819	808819	a9 cd		lda #$cd		lda #kSBC.M
1652	.081b	80881b					plotStatusCharToZPLong
244:1	.081b	80881b	c2 20		rep #$20		REP #$20
1654:4	.081d	80881d	97 32		sta [$32],y		sta [ZPLong],y
1655	.081f	80881f	c8		iny			iny
1656	.0820	808820	c8		iny			iny
240:1	.0821	808821	e2 20		sep #$20		SEP #$20
1658:4	.0823	808823	60		rts			rts

1660	.0824	808824					pltScore
1661	.0824	808824					_ASSERT_jsr
1662	.0824	808824					_ASSERT_axy8
1663	=$7e264e					_statusScore = fGetMemoryForScreenChar(ScreenMirror,7,25)	; location in screen mirror for the score
244:1	.0824	808824	c2 20		rep #$20		REP #$20
1665:4	.0826	808826	a9 4e 26	lda #$264e		lda #<>_statusScore
1666	.0829	808829	85 32		sta $32			sta ZPLong.loword
240:1	.082b	80882b	e2 20		sep #$20		SEP #$20
1668:4	.082d	80882d	a9 7e		lda #$7e		lda #`_statusScore
1669	.082f	80882f	85 34		sta $34			sta ZPLong.bank				; set ZP long
1670	.0831	808831	a9 20		lda #$20		lda #kStatusAttributes			; set up the high byte
1671	.0833	808833	eb		xba			xba
1672	.0834	808834	a0 00		ldy #$00		ldy #0
1673	.0836	808836	a2 00		ldx #$00		ldx #0
1674	.0838	808838	bd 9c 00	lda $80009c,x	-	lda GameData.score,x			; get the score digits
1675	.083b	80883b	09 f0		ora #$f0		ora #kSBC.Digits				; convert from 0-9 to the 0-9chars (the needs them to be aligned on a 16 boundary)
1676	.083d	80883d	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong	; draw digit
1677	.0840	808840	e8		inx			inx
1678	.0841	808841	e0 06		cpx #$06		cpx #6							; do all 6
1679	.0843	808843	d0 f3		bne $808838		bne -
1680	.0845	808845	60		rts			rts

1682	.0846	808846					pltHighScore
1683	.0846	808846					_ASSERT_jsr
1684	.0846	808846					_ASSERT_axy8
1685	=$7e268e					_statusHScore = fGetMemoryForScreenChar(ScreenMirror,7,26)	; location in screen mirror for the score
244:1	.0846	808846	c2 20		rep #$20		REP #$20
1687:4	.0848	808848	a9 8e 26	lda #$268e		lda #<>_statusHScore
1688	.084b	80884b	85 32		sta $32			sta ZPLong.loword
240:1	.084d	80884d	e2 20		sep #$20		SEP #$20
1690:4	.084f	80884f	a9 7e		lda #$7e		lda #`_statusHScore
1691	.0851	808851	85 34		sta $34			sta ZPLong.bank
1692	.0853	808853	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1693	.0855	808855	eb		xba			xba
1694	.0856	808856	a2 00		ldx #$00		ldx #0
1695	.0858	808858	a0 00		ldy #$00		ldy #0
1696	.085a	80885a	bd a2 00	lda $8000a2,x	_l	lda GameData.high,x			; see above
1697	.085d	80885d	09 f0		ora #$f0		ora #kSBC.Digits
1698	.085f	80885f	20 1b 88	jsr $80881b		jsr plotStatusCharToZPLong
1699	.0862	808862	e8		inx			inx
1700	.0863	808863	e0 06		cpx #$06		cpx #6
1701	.0865	808865	d0 f3		bne $80885a		bne _l
1702	.0867	808867	60		rts			rts

1704	.0868	808868					pltLives
1705	.0868	808868					_ASSERT_jsr
1706	.0868	808868					_ASSERT_axy8
1707	=$7e26b0					_statusLives = fGetMemoryForScreenChar(ScreenMirror,24,26)
244:1	.0868	808868	c2 20		rep #$20		REP #$20
1709:4	.086a	80886a	a9 b0 26	lda #$26b0		lda #<>_statusLives
1710	.086d	80886d	85 32		sta $32			sta ZPLong.loword
240:1	.086f	80886f	e2 20		sep #$20		SEP #$20
1712:4	.0871	808871	a9 7e		lda #$7e		lda #`_statusLives
1713	.0873	808873	85 34		sta $34			sta ZPLong.bank
1714	.0875	808875	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1715	.0877	808877	eb		xba			xba
1716	.0878	808878	ad 9a 00	lda $80009a		lda GameData.lives		; get the lives
1717	.087b	80887b	09 f0		ora #$f0		ora #kSBC.Digits
1718	.087d	80887d	c9 fa		cmp #$fa		cmp #kSBC.Digits+10		; clip it to max show 9
1719	.087f	80887f	90 02		bcc $808883		bcc _safe
1720	.0881	808881	a9 f9		lda #$f9			lda #kSBC.Digits+9
1721	.0883	808883					_safe
1722	.0883	808883	a0 00		ldy #$00		ldy #0
1723	.0885	808885	4c 1b 88	jmp $80881b		jmp plotStatusCharToZPLong
1724								;rts

1726	.0888	808888					pltFlowers
1727	.0888	808888					_ASSERT_jsr
1728	.0888	808888					_ASSERT_axy8
1729	=$7e26ba					_statusFlowers = fGetMemoryForScreenChar(ScreenMirror,29,26)
244:1	.0888	808888	c2 20		rep #$20		REP #$20
1731:4	.088a	80888a	a9 ba 26	lda #$26ba		lda #<>_statusFlowers
1732	.088d	80888d	85 32		sta $32			sta ZPLong.loword
240:1	.088f	80888f	e2 20		sep #$20		SEP #$20
1734:4	.0891	808891	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1735	.0893	808893	eb		xba			xba
1736	.0894	808894	a9 7e		lda #$7e		lda #`_statusFlowers
1737	.0896	808896	85 34		sta $34			sta ZPLong.bank
1738	.0898	808898	ad 9b 00	lda $80009b		lda GameData.flowers
1739	.089b	80889b	09 f0		ora #$f0		ora #kSBC.Digits				; flowers can only be 1-8 anyway
1740	.089d	80889d	a0 00		ldy #$00		ldy #0
1741	.089f	80889f	4c 1b 88	jmp $80881b		jmp plotStatusCharToZPLong
1742								;rts

1744							; ----- @Sprite Engine@ -----

1746	.08a2	8088a2					dmaOAM_xx					; copy all of OAM mirror -> OAM Ram in PPU
1747	.08a2	8088a2					_ASSERT_JSR
1748	.08a2	8088a2	08		php			php						; save the current register sizes
256:1	.08a3	8088a3	c2 10		rep #$10		REP #$10
240	.08a5	8088a5	e2 20		sep #$20		SEP #$20
1751:4	.08a7	8088a7	9c 02 21	stz $802102			stz $802102			; OAM is zero
1752	.08aa	8088aa	9c 03 21	stz $802103			stz $802103			; A is 8bits ldx #0000 stx ABS is slower
1753	.08ad	8088ad	a2 00 04	ldx #$0400			ldx #$0400			; A -> B, INC, Write BYTE | OAM
1754	.08b0	8088b0	8e 10 43	stx $804310			stx $804310
1755	.08b3	8088b3	a2 05 04	ldx #$0405			ldx #<>OAMMirror	; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1756	.08b6	8088b6	8e 12 43	stx $804312			stx $804312
1757	.08b9	8088b9	a2 7e 20	ldx #$207e			ldx #$207E			; We want bank 7e and we are trasfereing 512+32 bytes
1758	.08bc	8088bc	8e 14 43	stx $804314			stx $804314
1759	.08bf	8088bf	a9 02		lda #$02			lda #$02
1760	.08c1	8088c1	8d 16 43	sta $804316			sta $804316
1761	.08c4	8088c4	8d 0b 42	sta $80420b			sta $80420B			; DMA channel 1 saves a load
1762	.08c7	8088c7	28		plp			plp
1763	.08c8	8088c8	60		rts			rts

1765	=224						kSpriteEmptyVal = 224
1766	>08c9	8088c9	e0				SpriteEmptyVal .byte kSpriteEmptyVal
1767	>08ca	8088ca	55				SpriteUpperEmpty .byte $55

1769							.as
1770							.xs
1771	.08cb	8088cb					disableAllEntSprites_88
1772	.08cb	8088cb					_ASSERT_jsr
1773	.08cb	8088cb					_ASSERT_axy8
1774							; this sets all sprites to off screen
244:1	.08cb	8088cb	c2 20		rep #$20		REP #$20
1776:4	.08cd	8088cd	a9 e0 e0	lda #$e0e0		lda #kSpriteEmptyVal<<8|kSpriteEmptyVal
1777	.08d0	8088d0	a2 1e		ldx #$1e		ldx #mplex.kMaxSpr-2
1778	.08d2	8088d2	9d d8 03	sta $8003d8,x	-	sta mplexBuffer.ypos,x
1779	.08d5	8088d5	9d 96 03	sta $800396,x		sta mplexBuffer.xpos,x
1780	.08d8	8088d8	ca		dex			dex
1781	.08d9	8088d9	ca		dex			dex
1782	.08da	8088da	d0 f6		bne $8088d2		bne -
240:1	.08dc	8088dc	e2 20		sep #$20		SEP #$20
1784:4								; fall through
1785	.08de	8088de					clearSpritesMirror_xx
1786	.08de	8088de					_ASSERT_JSR
1787	.08de	8088de	08		php			php											; save register size
256:1	.08df	8088df	c2 10		rep #$10		REP #$10
240	.08e1	8088e1	e2 20		sep #$20		SEP #$20
1790:4									; Do Main 256 words
1791	.08e3	8088e3	a2 18 80	ldx #$8018			ldx #$8018								; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1792	.08e6	8088e6	8e 10 43	stx $804310			stx $804310
1793	.08e9	8088e9	a2 c9 88	ldx #$88c9			ldx #<>SpriteEmptyVal				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1794	.08ec	8088ec	8e 12 43	stx $804312			stx $804312
1795	.08ef	8088ef	a2 80 00	ldx #$0080			ldx #`SpriteEmptyVal					; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1796	.08f2	8088f2	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 0
1797	.08f5	8088f5	a2 05 04	ldx #$0405			ldx #<>OAMMirror
1798	.08f8	8088f8	8e 81 21	stx $802181			stx $802181
1799	.08fb	8088fb	9c 83 21	stz $802183			stz $802183								; START AT OAM MIRROR
1800	.08fe	8088fe	a9 02		lda #$02			lda #2
1801	.0900	808900	8d 16 43	sta $804316			sta $804316								; DO 512 BYTES
1802	.0903	808903	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1803									; Do upper 16 words
1804									;	ldx #$8018							; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1805									;	stx $804310
1806	.0906	808906	a2 ca 88	ldx #$88ca			ldx #<>SpriteUpperEmpty				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1807	.0909	808909	8e 12 43	stx $804312			stx $804312
1808	.090c	80890c	a2 80 20	ldx #$2080			ldx #(32<<8)|`SpriteUpperEmpty	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1809	.090f	80890f	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 32
1810	.0912	808912	9c 16 43	stz $804316			stz $804316								; DO 32 BYTES
1811									;	ldx #<>OAMMirrorHigh
1812									;	stx $802181							; IF THIS IS DIRECTLY AFTER LO, WRAM ALREADY POINTS TO IT
1813									;	stz $802183							; START AT HIGH
1814									;	lda #$02
1815	.0915	808915	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1816	.0918	808918	28		plp			plp											; restore register size
1817	.0919	808919	60		rts			rts

1819							.as
1820							.xs
1821	.091a	80891a					updateAllSpriteXYsToOAMMirror_88
1822	.091a	80891a					_ASSERT_jsr
1823	.091a	80891a					_ASSERT_axy8
1824	.091a	80891a	20 de 88	jsr $8088de		jsr clearSpritesMirror_xx
1825								; handle the player which has special cases
1826	.091d	80891d	20 5a 91	jsr $80915a		jsr setPlayerSpritePtrFromFrameNumber_88
1827	.0920	808920	64 0f		stz $0f			stz ZPTemp
1828	.0922	808922	ae c7 00	ldx $8000c7		ldx PlayerData.currAnim
1829	.0925	808925	a0 00		ldy #$00		ldy #0
1830	.0927	808927	bd f6 91	lda $8091f6,x		lda PlayerFrameData.animXOffset,x
1831	.092a	80892a	85 06		sta $06			sta Pointer1.lo
1832	.092c	80892c	10 01		bpl $80892f		bpl +											; do we need to sign extend ?
1833	.092e	80892e	88		dey				dey										; yes - 255
1834	.092f	80892f	84 07		sty $07		+	sty Pointer1.hi
1835	.0931	808931	ad 96 03	lda $800396		lda mplexBuffer.xpos						; get any X offset for this anim
244:1	.0934	808934	c2 20		rep #$20		REP #$20
1837:4	.0936	808936	29 ff 00	and #$00ff		and #$ff										; make sure its the 8bit value we expect
1838	.0939	808939	18		clc			clc
1839	.093a	80893a	65 06		adc $06			adc Pointer1								; offset the Xpos
240:1	.093c	80893c	e2 20		sep #$20		SEP #$20
1841:4	.093e	80893e	8d 05 04	sta $800405		sta OAMMirror								; store the offset X
1842	.0941	808941	8d 09 04	sta $800409		sta OAMMirror+4							; set the lower sprite in case
1843	.0944	808944	eb		xba			xba
1844	.0945	808945	f0 04		beq $80894b		beq +											; have we overflown ?
1845	.0947	808947	a9 05		lda #$05			lda #%00000101							; set the XMSB bit then
1846	.0949	808949	85 0f		sta $0f				sta ZPTemp
1847	.094b	80894b	ad d8 03	lda $8003d8	+	lda mplexBuffer.ypos
1848	.094e	80894e	3a		dec a			dec a											; adjust for sprites being 1 below given y on SNES
1849	.094f	80894f	8d 06 04	sta $800406		sta OAMMirror+1
1850	.0952	808952	18		clc			clc
1851	.0953	808953	69 10		adc #$10		adc #16										; prep y + 16 in case
1852	.0955	808955	ae c7 00	ldx $8000c7		ldx PlayerData.currAnim
1853	.0958	808958	bc e2 91	ldy $8091e2,x		ldy PlayerFrameData.sizes,x			; do we have a dual sprite?
1854	.095b	80895b	a2 50		ldx #$50		ldx #%01010000								; 2 sprites small
1855	.095d	80895d	c0 01		cpy #$01		cpy #kSpriteType.s16x32
1856	.095f	80895f	f0 0d		beq $80896e		beq +											; yes store the +16 y
1857	.0961	808961	a2 e0		ldx #$e0			ldx #kSpriteEmptyVal					; no set 2nd sprite offscreen
1858	.0963	808963	8e 09 04	stx $800409			stx OAMMirror+4
1859	.0966	808966	a2 54		ldx #$54			ldx #%01010100							; 1 sprite small
1860	.0968	808968	c0 02		cpy #$02			cpy #kSpriteType.s32x32
1861	.096a	80896a	d0 02		bne $80896e			bne +
1862	.096c	80896c	a2 56		ldx #$56				ldx #%1010110						; 1 sprite large
1863	.096e	80896e	8d 0a 04	sta $80040a	+	sta OAMMirror+5
1864	.0971	808971	8a		txa			txa
1865	.0972	808972	05 0f		ora $0f			ora ZPTemp									; set the X-MSB if needed
1866	.0974	808974	8d 05 06	sta $800605		sta OAMMirrorHigh
1867								; next add the bullet, if needed
1868	.0977	808977	ad c9 00	lda $8000c9		lda PlayerData.bulletActive
1869	.097a	80897a	f0 16		beq $808992		beq _noBullet
1870									; either way the bullet is a 16x16 sprite
1871	.097c	80897c	ad 97 03	lda $800397			lda mplexBuffer.xpos+kBulletSpriteOffset
1872	.097f	80897f	8d 0d 04	sta $80040d			sta OAMMirror+8
1873	.0982	808982	ad d9 03	lda $8003d9			lda mplexBuffer.ypos+kBulletSpriteOffset
1874	.0985	808985	8d 0e 04	sta $80040e			sta OAMMirror+9
1875	.0988	808988	ad 05 06	lda $800605			lda OAMMirrorHigh
1876	.098b	80898b	29 cf		and #$cf			and #%11001111
1877	.098d	80898d	8d 05 06	sta $800605			sta OAMMirrorHigh	; clear the X MSB for bullet, so you can see it
1878	.0990	808990	80 08		bra $80899a			bra _bulletTile
1879									;
1880	.0992	808992					_noBullet
1881	.0992	808992	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1882	.0994	808994	8d 0d 04	sta $80040d		sta OAMMirror+8		; make sure the bullet is offscreen
1883	.0997	808997	8d 0e 04	sta $80040e		sta OAMMirror+9
1884	.099a	80899a					_bulletTile
1885	.099a	80899a	ae a4 02	ldx $8002a4		ldx bulletFrame		; we set the frame, either way doesn't matter
244:1	.099d	80899d	c2 20		rep #$20		REP #$20
1887:4	.099f	80899f	bd 99 93	lda $809399,x		lda PlayerBulletAnimData,x
1888	.09a2	8089a2	8d 0f 04	sta $80040f		sta OAMMirror+10 ;11
240:1	.09a5	8089a5	e2 20		sep #$20		SEP #$20
1890:4									; now add the entities
1891	.09a7	8089a7	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
1892	.09a9	8089a9	86 0f		stx $0f			stx ZPTemp
1893	.09ab	8089ab					_EntLoop
1894	.09ab	8089ab	a6 0f		ldx $0f			ldx ZPTemp
1895	.09ad	8089ad	bd 12 01	lda $800112,x		lda EntityData.active,x						; if allive
1896	.09b0	8089b0	f0 0b		beq $8089bd		beq _notActive
1897	.09b2	8089b2	bc e0 00	ldy $8000e0,x			ldy EntityData.type,x					; get the type
1898	.09b5	8089b5	b9 fb 9c	lda $809cfb,y			lda EntityAnimData.frameSize,y		; dispatch for the ent type size
1899	.09b8	8089b8	0a		asl a				asl a
1900	.09b9	8089b9	aa		tax				tax
1901	.09ba	8089ba	fc c2 89	jsr ($8089c2,x)			jsr (ENTSpriteDispatchLUT,x)
1902	.09bd	8089bd					_notActive
1903	.09bd	8089bd	c6 0f		dec $0f			dec ZPTemp
1904	.09bf	8089bf	10 ea		bpl $8089ab		bpl _EntLoop
1905	.09c1	8089c1	60		rts			rts

1907	>09c2	8089c2	d3 89 17 8a 69 8a		ENTSpriteDispatchLUT	.word <>(Ent16_16,Ent16_32,Ent32_32)

1909	.09c8	8089c8					EntSpriteConvertToOAMIndex
1910	.09c8	8089c8					_ASSERT_axy8
1911	.09c8	8089c8	a5 0f		lda $0f			lda ZPTemp					; get the current ent number
1912	.09ca	8089ca	aa		tax			tax							; cache it
1913	.09cb	8089cb	18		clc			clc
1914	.09cc	8089cc	69 02		adc #$02		adc #kEntsSpriteOffset	; offset by the start of ent sprites
1915	.09ce	8089ce	0a		asl a			asl a
1916	.09cf	8089cf	0a		asl a			asl a							; each ent is allocated upto 2 sprites, 4 bytes per sprite
1917	.09d0	8089d0	0a		asl a			asl a							; x8 to convert ent number to OAM byte offset
1918	.09d1	8089d1	a8		tay			tay							; y is now the OAM index
1919	.09d2	8089d2	60		rts			rts

1921	.09d3	8089d3					Ent16_16
1922	.09d3	8089d3					_ASSERT_axy8
1923	.09d3	8089d3	20 c8 89	jsr $8089c8		jsr EntSpriteConvertToOAMIndex
1924	.09d6	8089d6	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1925	.09d9	8089d9	99 05 04	sta $800405,y		sta OAMMirror,y			; set X
1926	.09dc	8089dc	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1927	.09df	8089df	3a		dec a			dec a							; adjust for SNES drawing sprites 1 lower than set value
1928	.09e0	8089e0	99 06 04	sta $800406,y		sta OAMMirror+1,y			; set Y
1929	.09e3	8089e3	a9 e0		lda #$e0		lda #kSpriteEmptyVal		; set 2nd sprite off screen
1930	.09e5	8089e5	99 09 04	sta $800409,y		sta OAMMirror+4,y
1931	.09e8	8089e8	99 0a 04	sta $80040a,y		sta OAMMirror+5,y
1932	.09eb	8089eb	bd 57 02	lda $800257,x		lda EntityData.palleteOffset,x
1933	.09ee	8089ee	85 10		sta $10			sta ZPTemp2					; while X is still ent index, cache pallete offset
1934	.09f0	8089f0	bd 5d 01	lda $80015d,x		lda EntityData.animBase,x
1935	.09f3	8089f3	18		clc			clc
1936	.09f4	8089f4	7d 76 01	adc $800176,x		adc EntityData.animFrame,x
1937	.09f7	8089f7	aa		tax			tax							; x is now the EntityFrameData index
1938	.09f8	8089f8	bd 31 9c	lda $809c31,x		lda EntityFrameData.lo,x
1939	.09fb	8089fb	99 07 04	sta $800407,y		sta OAMMirror+2,y			; set Sprite number
1940	.09fe	8089fe	bd 88 9c	lda $809c88,x		lda EntityFrameData.hi,x
1941	.0a01	808a01	18		clc			clc
1942	.0a02	808a02	65 10		adc $10			adc ZPTemp2					; the cached palleteOffset
1943	.0a04	808a04	99 08 04	sta $800408,y		sta OAMMirror+3,y			; set Attributes
1944								; update the high flags
1945	.0a07	808a07	20 ad 8a	jsr $808aad		jsr entSpriteUpdateUpperFlagsGetIndexes
1946	.0a0a	808a0a	b9 05 06	lda $800605,y		lda OAMMirrorHigh,y
1947	.0a0d	808a0d	3d c4 8a	and $808ac4,x		and EntUpperANDMask,x
1948	.0a10	808a10	1d c8 8a	ora $808ac8,x		ora Ent16_16_ORVal,x
1949	.0a13	808a13	99 05 06	sta $800605,y		sta OAMMirrorHigh,y
1950	.0a16	808a16	60		rts			rts

1952	.0a17	808a17					Ent16_32
1953	.0a17	808a17					_ASSERT_axy8
1954	.0a17	808a17	20 c8 89	jsr $8089c8		jsr EntSpriteConvertToOAMIndex
1955	.0a1a	808a1a	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1956	.0a1d	808a1d	99 05 04	sta $800405,y		sta OAMMirror,y
1957	.0a20	808a20	99 09 04	sta $800409,y		sta OAMMirror+4,y			; set both X's
1958	.0a23	808a23	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1959	.0a26	808a26	3a		dec a			dec a
1960	.0a27	808a27	99 06 04	sta $800406,y		sta OAMMirror+1,y			; set top Y
1961	.0a2a	808a2a	18		clc			clc
1962	.0a2b	808a2b	69 10		adc #$10		adc #16						; offset to bellow
1963	.0a2d	808a2d	99 0a 04	sta $80040a,y		sta OAMMirror+5,y			; set bottom Y
1964	.0a30	808a30	bd 57 02	lda $800257,x		lda EntityData.palleteOffset,x
1965	.0a33	808a33	85 10		sta $10			sta ZPTemp2
1966	.0a35	808a35	bd 5d 01	lda $80015d,x		lda EntityData.animBase,x
1967	.0a38	808a38	18		clc			clc
1968	.0a39	808a39	7d 76 01	adc $800176,x		adc EntityData.animFrame,x
1969	.0a3c	808a3c	aa		tax			tax							; is now the EntityFrameData index
1970	.0a3d	808a3d	bd 31 9c	lda $809c31,x		lda EntityFrameData.lo,x
1971	.0a40	808a40	99 07 04	sta $800407,y		sta OAMMirror+2,y			; set first sprite
1972	.0a43	808a43	18		clc			clc
1973	.0a44	808a44	69 20		adc #$20		adc #32						; offset to the tile bellow
1974	.0a46	808a46	99 0b 04	sta $80040b,y		sta OAMMirror+6,y			; set second sprite
1975	.0a49	808a49	08		php			php							; save the C from the ADC
1976	.0a4a	808a4a	bd 88 9c	lda $809c88,x			lda EntityFrameData.hi,x
1977	.0a4d	808a4d	18		clc				clc
1978	.0a4e	808a4e	65 10		adc $10				adc ZPTemp2				; offset, by the potential pallete offset
1979	.0a50	808a50	99 08 04	sta $800408,y			sta OAMMirror+3,y
1980	.0a53	808a53	28		plp			plp							; restore the C from the next sprite tile adc
1981	.0a54	808a54	69 00		adc #$00		adc #0						; add the C
1982	.0a56	808a56	99 0c 04	sta $80040c,y		sta OAMMirror+7,y			; store the bottom sprite attributes and tile MSB
1983								; update the high flags
1984	.0a59	808a59	20 ad 8a	jsr $808aad		jsr entSpriteUpdateUpperFlagsGetIndexes
1985	.0a5c	808a5c	b9 05 06	lda $800605,y		lda OAMMirrorHigh,y
1986	.0a5f	808a5f	3d c4 8a	and $808ac4,x		and EntUpperANDMask,x
1987	.0a62	808a62	1d cc 8a	ora $808acc,x		ora Ent16_32_ORVal,x
1988	.0a65	808a65	99 05 06	sta $800605,y		sta OAMMirrorHigh,y
1989	.0a68	808a68	60		rts			rts

1991	.0a69	808a69					Ent32_32
1992	.0a69	808a69					_ASSERT_axy8
1993	.0a69	808a69	20 c8 89	jsr $8089c8		jsr EntSpriteConvertToOAMIndex				; this is identical to 16_16 except different flags at the end
1994	.0a6c	808a6c	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x	; I've not pulled this out into a function to make it easier to understand
1995	.0a6f	808a6f	99 05 04	sta $800405,y		sta OAMMirror,y									; the 16x16 function.
1996	.0a72	808a72	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1997	.0a75	808a75	3a		dec a			dec a
1998	.0a76	808a76	99 06 04	sta $800406,y		sta OAMMirror+1,y
1999	.0a79	808a79	a9 e0		lda #$e0		lda #kSpriteEmptyVal
2000	.0a7b	808a7b	99 09 04	sta $800409,y		sta OAMMirror+4,y
2001	.0a7e	808a7e	99 0a 04	sta $80040a,y		sta OAMMirror+5,y
2002	.0a81	808a81	bd 57 02	lda $800257,x		lda EntityData.palleteOffset,x
2003	.0a84	808a84	85 10		sta $10			sta ZPTemp2
2004	.0a86	808a86	bd 5d 01	lda $80015d,x		lda EntityData.animBase,x
2005	.0a89	808a89	18		clc			clc
2006	.0a8a	808a8a	7d 76 01	adc $800176,x		adc EntityData.animFrame,x
2007	.0a8d	808a8d	aa		tax			tax													; is now the EntityFrameData index
2008	.0a8e	808a8e	bd 31 9c	lda $809c31,x		lda EntityFrameData.lo,x
2009	.0a91	808a91	99 07 04	sta $800407,y		sta OAMMirror+2,y
2010	.0a94	808a94	bd 88 9c	lda $809c88,x		lda EntityFrameData.hi,x
2011	.0a97	808a97	18		clc			clc
2012	.0a98	808a98	65 10		adc $10			adc ZPTemp2
2013	.0a9a	808a9a	99 08 04	sta $800408,y		sta OAMMirror+3,y
2014								; update the high flags
2015	.0a9d	808a9d	20 ad 8a	jsr $808aad		jsr entSpriteUpdateUpperFlagsGetIndexes
2016	.0aa0	808aa0	b9 05 06	lda $800605,y		lda OAMMirrorHigh,y
2017	.0aa3	808aa3	3d c4 8a	and $808ac4,x		and EntUpperANDMask,x
2018	.0aa6	808aa6	1d d0 8a	ora $808ad0,x		ora Ent32_32_ORVal,x
2019	.0aa9	808aa9	99 05 06	sta $800605,y		sta OAMMirrorHigh,y
2020	.0aac	808aac	60		rts			rts

2022	.0aad	808aad					entSpriteUpdateUpperFlagsGetIndexes
2023	.0aad	808aad	a6 0f		ldx $0f			ldx ZPTemp											; this holds the entity number
2024	.0aaf	808aaf	bd b9 03	lda $8003b9,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x	; do we have MSB set?
2025	.0ab2	808ab2	08		php			php													; save Zero status
2026	.0ab3	808ab3	8a		txa				txa
2027	.0ab4	808ab4	4a		lsr a				lsr a												; ents have two sprites and the upper holds 4 sprites
2028	.0ab5	808ab5	1a		inc a				inc a												; so upper OAM mirrror byte is ent num / 2 + 1 to skip
2029	.0ab6	808ab6	a8		tay				tay												; to skip the plyaer + bullet sprite set
2030	.0ab7	808ab7	8a		txa				txa
2031	.0ab8	808ab8	29 01		and #$01			and #1											; x is now if sprite is even or odd number
2032	.0aba	808aba	aa		tax				tax												; i.e which half of the upper byte mirror it uses
2033	.0abb	808abb	28		plp			plp													; restore "if 0"
2034	.0abc	808abc	f0 05		beq $808ac3		beq _noMSB
2035	.0abe	808abe	8a		txa				txa
2036	.0abf	808abf	18		clc				clc
2037	.0ac0	808ac0	69 02		adc #$02			adc #2 ; offset into MSB masks			; offset the index by 2 to access the MSB set versions
2038	.0ac2	808ac2	aa		tax				tax
2039	.0ac3	808ac3					_noMSB
2040	.0ac3	808ac3	60		rts			rts


2043													;		normal				 | XMSB
2044	>0ac4	808ac4	f0 0f f0 0f			EntUpperANDMask	.byte %11110000,%00001111,%11110000,%00001111
2045	>0ac8	808ac8	04 40 06 60			Ent16_16_ORVal		.byte %00000100,%01000000,%00000110,%01100000
2046	>0acc	808acc	00 00 05 50			Ent16_32_ORVal		.byte %00000000,%00000000,%00000101,%01010000
2047	>0ad0	808ad0	06 60 07 70			Ent32_32_ORVal		.byte %00000110,%01100000,%00000111,%01110000


2050							; ----- @DMA functions@ -----

2052	.0ad4	808ad4					dmaPalletes_XX
2053	.0ad4	808ad4					_ASSERT_JSR
2054	.0ad4	808ad4	08		php			php
240:1	.0ad5	808ad5	e2 20		sep #$20		SEP #$20
256	.0ad7	808ad7	c2 10		rep #$10		REP #$10
2057:4	.0ad9	808ad9	a2 c0 ae	ldx #$aec0			ldx #<>CharPallete
2058	.0adc	808adc	8e 02 43	stx $804302			stx $804302
2059	.0adf	808adf	a9 82		lda #$82			lda #`CharPallete
2060	.0ae1	808ae1	8d 04 43	sta $804304			sta $804304
2061	.0ae4	808ae4	a2 20 00	ldx #$0020			ldx #32
2062	.0ae7	808ae7	8e 05 43	stx $804305			stx $804305
2063	.0aea	808aea	a2 02 22	ldx #$2202			ldx #%00000010 | $2200			; A->B, Inc, Write 2 Bytes, $2122
2064	.0aed	808aed	8e 00 43	stx $804300			stx $804300
2065	.0af0	808af0	9c 21 21	stz $802121			stz $802121							; start of Pallete
2066	.0af3	808af3	a9 01		lda #$01			lda #1
2067	.0af5	808af5	8d 0b 42	sta $80420b			sta $80420B
2068	.0af8	808af8	a2 e0 ae	ldx #$aee0			ldx #<>SpritePallete				; Sprite palletes which is 48 colours to slot 8-10
2069	.0afb	808afb	8e 02 43	stx $804302			stx $804302
2070	.0afe	808afe	a9 82		lda #$82			lda #`SpritePallete
2071	.0b00	808b00	8d 04 43	sta $804304			sta $804304
2072	.0b03	808b03	a2 60 00	ldx #$0060			ldx #32*3							; copy 3 palletes worth
2073	.0b06	808b06	8e 05 43	stx $804305			stx $804305
2074	.0b09	808b09	a9 80		lda #$80			lda #128								; start of Sprite Pallete
2075	.0b0b	808b0b	8d 21 21	sta $802121			sta $802121
2076	.0b0e	808b0e	a9 01		lda #$01			lda #1
2077	.0b10	808b10	8d 0b 42	sta $80420b			sta $80420b
2078	.0b13	808b13	28		plp			plp
2079	.0b14	808b14	60		rts			rts

2081	.0b15	808b15					dmaLevelChars_xx
2082	.0b15	808b15					_ASSERT_JSR
2083	.0b15	808b15	08		php			php
264:1	.0b16	808b16	c2 30		rep #$30		REP #$30
2085:4	.0b18	808b18	29 ff 00	and #$00ff			and #$ff								; to be sure
2086	.0b1b	808b1b	0a		asl a				asl a
2087	.0b1c	808b1c	aa		tax				tax
2088	.0b1d	808b1d	bd 27 8c	lda $808c27,x			lda LevelCharsLUT,x
2089	.0b20	808b20	8d 02 43	sta $804302			sta $804302
240:1	.0b23	808b23	e2 20		sep #$20		SEP #$20
2091:4	.0b25	808b25	a9 82		lda #$82			lda #`BackShadowChars
2092	.0b27	808b27	8d 04 43	sta $804304			sta $804304
2093	.0b2a	808b2a	a2 80 06	ldx #$0680			ldx #size(BackShadowChars)/4	; we have 4 sets
2094	.0b2d	808b2d	8e 05 43	stx $804305			stx $804305
2095	.0b30	808b30	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2096	.0b33	808b33	8e 00 43	stx $804300			stx $804300
2097	.0b36	808b36	a2 00 10	ldx #$1000			ldx #kVRAM.gameChars
2098	.0b39	808b39	8e 16 21	stx $802116			stx $802116
2099	.0b3c	808b3c	a9 80		lda #$80			lda #$80
2100	.0b3e	808b3e	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2101	.0b41	808b41	a9 01		lda #$01			lda #1
2102	.0b43	808b43	8d 0b 42	sta $80420b			sta $80420B
2103	.0b46	808b46	28		plp			plp
2104	.0b47	808b47	60		rts			rts

2106	.0b48	808b48					dmaFixedChars_xx
2107	.0b48	808b48					_ASSERT_JSR
2108	.0b48	808b48	08		php			php
240:1	.0b49	808b49	e2 20		sep #$20		SEP #$20
256	.0b4b	808b4b	c2 10		rep #$10		REP #$10
2111:4	.0b4d	808b4d	a2 00 9a	ldx #$9a00			ldx #<>FixedSectionChars
2112	.0b50	808b50	8e 02 43	stx $804302			stx $804302
2113	.0b53	808b53	a9 82		lda #$82			lda #`FixedSectionChars
2114	.0b55	808b55	8d 04 43	sta $804304			sta $804304
2115	.0b58	808b58	a2 c0 04	ldx #$04c0			ldx #size(FixedSectionChars)
2116	.0b5b	808b5b	8e 05 43	stx $804305			stx $804305
2117	.0b5e	808b5e	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2118	.0b61	808b61	8e 00 43	stx $804300			stx $804300
2119	.0b64	808b64	a2 40 13	ldx #$1340			ldx #kVRAM.gameChars+(52*16)
2120	.0b67	808b67	8e 16 21	stx $802116			stx $802116
2121	.0b6a	808b6a	a9 80		lda #$80			lda #$80
2122	.0b6c	808b6c	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2123	.0b6f	808b6f	a9 01		lda #$01			lda #1
2124	.0b71	808b71	8d 0b 42	sta $80420b			sta $80420B
2125									; the font
2126	.0b74	808b74	a2 c0 9e	ldx #$9ec0			ldx #<>Font4BPP
2127	.0b77	808b77	8e 02 43	stx $804302			stx $804302
2128	.0b7a	808b7a	a9 82		lda #$82			lda #`Font4BPP
2129	.0b7c	808b7c	8d 04 43	sta $804304			sta $804304
2130	.0b7f	808b7f	a2 00 08	ldx #$0800			ldx #size(Font4BPP)
2131	.0b82	808b82	8e 05 43	stx $804305			stx $804305
2132	.0b85	808b85	a2 00 18	ldx #$1800			ldx #kVRAM.gameChars+(128*16)
2133	.0b88	808b88	8e 16 21	stx $802116			stx $802116
2134	.0b8b	808b8b	a9 01		lda #$01			lda #1
2135	.0b8d	808b8d	8d 0b 42	sta $80420b			sta $80420B
2136									; the fixed upper chars
2137	.0b90	808b90	a2 c0 a6	ldx #$a6c0			ldx #<>TopFixedChars
2138	.0b93	808b93	8e 02 43	stx $804302			stx $804302
2139	.0b96	808b96	a9 82		lda #$82			lda #`TopFixedChars
2140	.0b98	808b98	8d 04 43	sta $804304			sta $804304
2141	.0b9b	808b9b	a2 00 08	ldx #$0800			ldx #size(TopFixedChars)
2142	.0b9e	808b9e	8e 05 43	stx $804305			stx $804305
2143	.0ba1	808ba1	a2 00 1c	ldx #$1c00			ldx #kVRAM.gameChars+(192*16)
2144	.0ba4	808ba4	8e 16 21	stx $802116			stx $802116
2145	.0ba7	808ba7	a9 01		lda #$01			lda #1
2146	.0ba9	808ba9	8d 0b 42	sta $80420b			sta $80420B
2147									; lets just do the sprites while we are here
2148	.0bac	808bac	a2 00 80	ldx #$8000			ldx #<>SpritesChars
2149	.0baf	808baf	8e 02 43	stx $804302			stx $804302
2150	.0bb2	808bb2	a9 83		lda #$83			lda #`SpritesChars
2151	.0bb4	808bb4	8f 04 43 08	sta $084304			sta $84304
2152	.0bb8	808bb8	a2 00 80	ldx #$8000			ldx #size(SpritesChars)
2153	.0bbb	808bbb	8e 05 43	stx $804305			stx $804305
2154	.0bbe	808bbe	a2 00 40	ldx #$4000			ldx #kVRAM.Sprite
2155	.0bc1	808bc1	8e 16 21	stx $802116			stx $802116
2156	.0bc4	808bc4	a9 01		lda #$01			lda #1
2157	.0bc6	808bc6	8d 0b 42	sta $80420b			sta $80420B
2158	.0bc9	808bc9	28		plp			plp
2159	.0bca	808bca	60		rts			rts

2161	.0bcb	808bcb					dmaScreenMirror_xx
2162	.0bcb	808bcb					_ASSERT_JSR
2163	.0bcb	808bcb	08		php			php
256:1	.0bcc	808bcc	c2 10		rep #$10		REP #$10
2165:4	.0bce	808bce	a2 00 20	ldx #$2000			ldx #<>ScreenMirror		; this and the next function could be split to pull out the size
2166	.0bd1	808bd1	8e 02 43	stx $804302			stx $804302					; but I couldn't be bothered...
240:1	.0bd4	808bd4	e2 20		sep #$20		SEP #$20
2168:4	.0bd6	808bd6	a9 7e		lda #$7e			lda #`ScreenMirror
2169	.0bd8	808bd8	8d 04 43	sta $804304			sta $804304
2170	.0bdb	808bdb	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2171	.0bde	808bde	8e 05 43	stx $804305			stx $804305
2172	.0be1	808be1	a2 01 18	ldx #$1801			ldx #%00000001 | $1800	; A->B, Inc, Write WORD, $2118
2173	.0be4	808be4	8e 00 43	stx $804300			stx $804300
2174	.0be7	808be7	a2 00 04	ldx #$0400			ldx #kVRAM.gameScreen
2175	.0bea	808bea	8e 16 21	stx $802116			stx $802116
2176	.0bed	808bed	a9 80		lda #$80			lda #$80
2177	.0bef	808bef	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2178	.0bf2	808bf2	a9 01		lda #$01			lda #1
2179	.0bf4	808bf4	8d 0b 42	sta $80420b			sta $80420B
2180	.0bf7	808bf7	28		plp			plp
2181	.0bf8	808bf8	60		rts			rts

2183	.0bf9	808bf9					dmaScreenMirrorToTitleScreen_xx
2184	.0bf9	808bf9					_ASSERT_JSR
2185	.0bf9	808bf9	08		php			php
256:1	.0bfa	808bfa	c2 10		rep #$10		REP #$10
2187:4	.0bfc	808bfc	a2 00 20	ldx #$2000			ldx #<>ScreenMirror
2188	.0bff	808bff	8e 02 43	stx $804302			stx $804302
240:1	.0c02	808c02	e2 20		sep #$20		SEP #$20
2190:4	.0c04	808c04	a9 7e		lda #$7e			lda #`ScreenMirror
2191	.0c06	808c06	8d 04 43	sta $804304			sta $804304
2192	.0c09	808c09	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2193	.0c0c	808c0c	8e 05 43	stx $804305			stx $804305
2194	.0c0f	808c0f	a2 01 18	ldx #$1801			ldx #%00000001 | $1800	; A->B, Inc, Write WORD, $2118
2195	.0c12	808c12	8e 00 43	stx $804300			stx $804300
2196	.0c15	808c15	a2 00 00	ldx #$0000			ldx #kVRAM.titleScreen
2197	.0c18	808c18	8e 16 21	stx $802116			stx $802116
2198	.0c1b	808c1b	a9 80		lda #$80			lda #$80
2199	.0c1d	808c1d	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2200	.0c20	808c20	a9 01		lda #$01			lda #1
2201	.0c22	808c22	8d 0b 42	sta $80420b			sta $80420B
2202	.0c25	808c25	28		plp			plp
2203	.0c26	808c26	60		rts			rts

2205							; this builds a table of the start indexs in the BackShadowChars binary blob that
2206							; holds each "set", which there are 4 so each set size is total size/4
2207	.0c27	808c27					LevelCharsLUT
2208	=[$828000,$828680,$828d00,$829380]			- = BackShadowChars + range(4)*(size(BackShadowChars)/4)
2209	>0c27	808c27	00 80 80 86 00 8d 80 93			.word <>(-)

2211							; ----- @Map routines@ -----
2212							.section sLoWRAM
2213	>7e2000						ScreenMirror .fill 2048		; this is used to hold the screen before DMA
2214							.send ; sLoWRAM
2215							.section sDP
2216	>0036						ScreenUpdateRequiredN0 .byte ?
2217							.send ; sDP

2219							.as
2220							.xs
2221	.0c2f	808c2f					plotTileMap_88
2222	.0c2f	808c2f					_ASSERT_jsr
2223	.0c2f	808c2f					_ASSERT_axy8
244:1	.0c2f	808c2f	c2 20		rep #$20		REP #$20
2225:4	.0c31	808c31	a9 a6 02	lda #$02a6		lda #<>tileMapTemp
2226	.0c34	808c34	85 06		sta $06			sta Pointer1					; pointer 1 holds pointer to the active level data
2227	.0c36	808c36	a9 00 20	lda #$2000		lda #<>ScreenMirror
2228	.0c39	808c39	85 32		sta $32			sta ZPLong.loword
240:1	.0c3b	808c3b	e2 20		sep #$20		SEP #$20
2230:4	.0c3d	808c3d	a9 7e		lda #$7e		lda #`ScreenMirror
2231	.0c3f	808c3f	85 34		sta $34			sta ZPLong.bank				; ZPLong holds the "screen" pointer

2233	.0c41	808c41	a9 0a		lda #$0a		lda #kDoorClosed				; we are plotting the map so take this
2234	.0c43	808c43	8d b0 00	sta $8000b0		sta LevelData.exitFrame		; time to ensure door is closed

2236								; to keep the index's free and so I can use all any 'ZPTemps' in sub functions
2237								; wihtout fear, I store the counters on the stack
2238	.0c46	808c46	a9 0c		lda #$0c		lda #kTileYCount				; num rows
2239	.0c48	808c48	48		pha			pha								; save row counter
2240	.0c49	808c49					_pltY
2241	.0c49	808c49	a0 00		ldy #$00			ldy #00						; num cols
2242	.0c4b	808c4b	5a		phy				phy							; save the column counter
2243	.0c4c	808c4c	b1 06		lda ($06),y	_pltX		lda (Pointer1),y		; tile num
2244	.0c4e	808c4e	aa		tax					tax
2245	.0c4f	808c4f	bd d0 8e	lda $808ed0,x				lda toolToTileLUT,x	; convert map to actual tile
2246	.0c52	808c52	20 5c 8d	jsr $808d5c				jsr renderTile_88		; plot it
248:1	.0c55	808c55	c2 21		rep #$21		REP #$21
2248:4	.0c57	808c57	a5 32		lda $32					lda ZPLong.loword
2249	.0c59	808c59	69 04 00	adc #$0004				adc #4
2250	.0c5c	808c5c	85 32		sta $32					sta ZPLong.loword		; advance screen pointer 2 tiles to the right
240:1	.0c5e	808c5e	e2 20		sep #$20		SEP #$20
2252:4	.0c60	808c60	7a		ply				ply							; restore column counter
2253	.0c61	808c61	c8		iny				iny							; inc it
2254	.0c62	808c62	5a		phy				phy							; save it again ready for the next loop
2255	.0c63	808c63	c0 10		cpy #$10				cpy #kTileXCount		; have we done the row
2256	.0c65	808c65	d0 e5		bne $808c4c				bne _pltX				; no, next
2257	.0c67	808c67	68		pla				pla							; counter will be on stack so remove
248:1	.0c68	808c68	c2 21		rep #$21		REP #$21
2259:4	.0c6a	808c6a	a5 06		lda $06				lda Pointer1.lo			; advance the map data pointer to the next row
2260	.0c6c	808c6c	69 10 00	adc #$0010			adc #kTileXCount
2261	.0c6f	808c6f	85 06		sta $06				sta Pointer1.lo
240:1	.0c71	808c71	e2 20		sep #$20		SEP #$20
2263:4	.0c73	808c73	68		pla			pla								; restore the rows counter
2264	.0c74	808c74	38		sec			sec
2265	.0c75	808c75	e9 01		sbc #$01		sbc #1							; count down
2266	.0c77	808c77	f0 0e		beq $808c87		beq _exit						; done ?
2267	.0c79	808c79	48		pha			pha								; save it back on the stack
248:1	.0c7a	808c7a	c2 21		rep #$21		REP #$21
2269:4	.0c7c	808c7c	a5 32		lda $32				lda ZPLong.loword			; we have to offset the screen position to the next "row"
2270	.0c7e	808c7e	69 40 00	adc #$0040			adc #128-64					; each row is 32 chars, which is words so 64 bytes
2271	.0c81	808c81	85 32		sta $32				sta ZPLong.loword			; and we have 2 rows which is 128 bytes, we are already 1 row over
240:1	.0c83	808c83	e2 20		sep #$20		SEP #$20
2273:4	.0c85	808c85	80 c2		bra $808c49			gra _pltY
2274	.0c87	808c87					_exit
2275	.0c87	808c87	60		rts			rts

2277							.as
2278							.xs
2279	.0c88	808c88					addShadowsToMap_88
2280	.0c88	808c88					_ASSERT_jsr
2281	.0c88	808c88					_ASSERT_axy8
2282	.0c88	808c88	64 14		stz $14			stz TempX						; tile counter that is not trashed
2283	.0c8a	808c8a	a4 14		ldy $14		-	ldy TempX						; get tile map index
2284	.0c8c	808c8c	20 ae 8c	jsr $808cae		jsr tileIsSafeToChange_88	; is this a background tile?
2285	.0c8f	808c8f	90 03		bcc $808c94		bcc +
2286	.0c91	808c91	20 ba 8c	jsr $808cba			jsr calcBCDEforTileY_88	; calc shadow and update the tile
2287	.0c94	808c94	e6 14		inc $14		+	inc TempX						; next tile
2288	.0c96	808c96	a5 14		lda $14			lda TempX
2289	.0c98	808c98	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2290	.0c9a	808c9a	d0 ee		bne $808c8a		bne -
2291	.0c9c	808c9c	60		rts			rts

2293							.as
2294							.xs
2295	.0c9d	808c9d					tileIsWall_88
2296							; if tileMapTemp[y] is a "wall" tile then c will clear, set otherwise
2297	.0c9d	808c9d					_ASSERT_jsr
2298	.0c9d	808c9d					_ASSERT_axy8
2299	.0c9d	808c9d	b9 a6 02	lda $8002a6,y		lda tileMapTemp,y				; get current tile
2300	.0ca0	808ca0	f0 0a		beq $808cac		beq _no
2301	.0ca2	808ca2	c9 06		cmp #$06			cmp #kTiles.wall4+1		; <= Wall4
2302	.0ca4	808ca4	90 05		bcc $808cab			bcc _yes
2303	.0ca6	808ca6	c9 14		cmp #$14				cmp #kTiles.diss		; == dissolvable char
2304	.0ca8	808ca8	d0 02		bne $808cac				bne _no
2305	.0caa	808caa	18		clc					clc						; clear carry
2306	.0cab	808cab					_yes
2307	.0cab	808cab	60		rts			rts								; carry is clear
2308	.0cac	808cac					_no
2309	.0cac	808cac	38		sec			sec
2310	.0cad	808cad	60		rts			rts								; carry is set

2312							.as
2313							.xs
2314	.0cae	808cae					tileIsSafeToChange_88
2315							; if tileMapTemp[y] is not something like a fruit, wall, spike, door etc C is set
2316							; why inverse, that is how the cmp falls. As this is not 16K limited anymore you could set it right.
2317	.0cae	808cae					_ASSERT_jsr
2318	.0cae	808cae					_ASSERT_axy8
2319	.0cae	808cae	b9 a6 02	lda $8002a6,y		lda tileMapTemp,y
2320	.0cb1	808cb1	f0 05		beq $808cb8		beq _yes									; 0 is safe
2321	.0cb3	808cb3	c9 22		cmp #$22			cmp #kTiles.underHangStart
2322	.0cb5	808cb5	b0 01		bcs $808cb8			bcs _yes
2323	.0cb7	808cb7	60		rts					rts ; carry is clear
2324	.0cb8	808cb8					_yes
2325	.0cb8	808cb8	38		sec			sec
2326	.0cb9	808cb9	60		rts			rts

2328							; Don't try and understand this, not worth your life, it calcs the saul drop shadow, just move on.
2329							;  BCD
2330							;  EA
2331							;  H
2332							; A is tile we are testing
2333							;  BCDE H
2334							;  1110   = under hang
2335							;  1100   = under hang right end
2336							;  0110   = under hanr left  end
2337							;  0001 0 = left wall top end
2338							;  1001   = left wall
2339							;  1000   = 35
2340							;  11X1   = top left
2341							;  0XX1 1 = bottom left
2342							.as
2343							.xs
2344	.0cba	808cba					calcBCDEforTileY_88
2345	.0cba	808cba					_ASSERT_jsr
2346	.0cba	808cba					_ASSERT_axy8
2347	.0cba	808cba	84 0f		sty $0f			sty ZPTemp
2348	.0cbc	808cbc	84 10		sty $10			sty ZPTemp2
2349	.0cbe	808cbe	98		tya			tya
2350	.0cbf	808cbf	29 0f		and #$0f		and #15
2351	.0cc1	808cc1	d0 04		bne $808cc7		bne _canDoLeft
2352	.0cc3	808cc3	a9 80		lda #$80			lda #$80					; can't do left on Negative
2353	.0cc5	808cc5	80 02		bra $808cc9			bra +
2354	.0cc7	808cc7					_canDoLeft
2355	.0cc7	808cc7	a9 00		lda #$00		lda #0
2356	.0cc9	808cc9	85 12		sta $12		+	sta ZPTemp4
2357	.0ccb	808ccb	a5 0f		lda $0f			lda ZPTemp
2358	.0ccd	808ccd	29 0f		and #$0f		and #15
2359	.0ccf	808ccf	c9 0f		cmp #$0f		cmp #15
2360	.0cd1	808cd1	d0 04		bne $808cd7		bne _canDoRight
2361	.0cd3	808cd3	a9 40		lda #$40			lda #$40					; can't do right on Overflow
2362	.0cd5	808cd5	85 12		sta $12				sta ZPTemp4
2363	.0cd7	808cd7					_canDoRight
2364	.0cd7	808cd7					END_LEFT_RIGHT_CHECK
2365	.0cd7	808cd7	a9 07		lda #$07		lda #1+2+4					; first 3 are empty ( it is inverted later)
2366	.0cd9	808cd9	85 11		sta $11			sta ZPTemp3
2367	.0cdb	808cdb	a4 0f		ldy $0f			ldy ZPTemp
2368	.0cdd	808cdd	c0 10		cpy #$10		cpy #kTileXCount
2369	.0cdf	808cdf	90 2b		bcc $808d0c		bcc _doneFirstRow		; if it is the first row than ALL of above is not solid
2370	.0ce1	808ce1	64 11		stz $11				stz ZPTemp3
2371	.0ce3	808ce3	98		tya				tya
2372									;sec ;from bcc above
2373	.0ce4	808ce4	e9 11		sbc #$11			sbc #kTileXCount+1	; so get -1x,-1y
2374	.0ce6	808ce6	85 10		sta $10				sta ZPTemp2
2375	.0ce8	808ce8	a8		tay				tay
2376	.0ce9	808ce9	24 12		bit $12				bit ZPTemp4				; test to see if we can do right
2377	.0ceb	808ceb	30 07		bmi $808cf4			bmi _noB					; no then skip B
2378	.0ced	808ced	20 9d 8c	jsr $808c9d				jsr tileIsWall_88
2379	.0cf0	808cf0	26 11		rol $11					rol ZPTemp3
2380	.0cf2	808cf2	80 03		bra $808cf7				bra _testC
2381	.0cf4	808cf4						_noB
2382	.0cf4	808cf4	38		sec				sec						; if there is no B then make it clear
2383	.0cf5	808cf5	26 11		rol $11				rol ZPTemp3
2384	.0cf7	808cf7						_testC
2385	.0cf7	808cf7	c8		iny				iny
2386	.0cf8	808cf8	20 9d 8c	jsr $808c9d			jsr tileIsWall_88
2387	.0cfb	808cfb	26 11		rol $11				rol ZPTemp3
2388	.0cfd	808cfd	c8		iny				iny
2389	.0cfe	808cfe	24 12		bit $12				bit ZPTemp4
2390	.0d00	808d00	70 07		bvs $808d09			bvs _noRight
2391	.0d02	808d02	20 9d 8c	jsr $808c9d				jsr tileIsWall_88
2392	.0d05	808d05	26 11		rol $11					rol ZPTemp3
2393	.0d07	808d07	80 03		bra $808d0c				bra _doneFirstRow
2394	.0d09	808d09						_noRight
2395	.0d09	808d09	38		sec				sec						; make it as 1 so it gets 0 later
2396	.0d0a	808d0a	26 11		rol $11				rol ZPTemp3
2397	.0d0c	808d0c					_doneFirstRow
2398	.0d0c	808d0c	24 12		bit $12			bit ZPTemp4
2399	.0d0e	808d0e	30 0a		bmi $808d1a		bmi _noE						; check negative flag
2400	.0d10	808d10	a4 0f		ldy $0f				ldy ZPTemp
2401	.0d12	808d12	88		dey				dey
2402	.0d13	808d13	20 9d 8c	jsr $808c9d			jsr tileIsWall_88
2403	.0d16	808d16	26 11		rol $11				rol ZPTemp3
2404	.0d18	808d18	80 03		bra $808d1d			bra DoIndexCheck
2405	.0d1a	808d1a					_noE
2406	.0d1a	808d1a	38		sec			sec							; make it 1 so it gets 0 later
2407	.0d1b	808d1b	26 11		rol $11			rol ZPTemp3
2408	.0d1d	808d1d					DoIndexCheck
2409	.0d1d	808d1d	a5 11		lda $11			lda ZPTemp3
2410	.0d1f	808d1f	49 0f		eor #$0f		eor #$0F
2411	.0d21	808d21	a8		tay			tay
2412	.0d22	808d22					BCDEYVALUECHECK
2413	.0d22	808d22	b9 c0 8e	lda $808ec0,y		lda BCDELUT,y				; now we have the 5bit value of the case
2414	.0d25	808d25	30 06		bmi $808d2d		bmi _checkH					; 5th bit is stored in bit7
2415	.0d27	808d27						_writeMap
2416	.0d27	808d27	a4 0f		ldy $0f				ldy ZPTemp
2417	.0d29	808d29	99 a6 02	sta $8002a6,y			sta tileMapTemp,y		; lower 4bits are the tile number
2418	.0d2c	808d2c	60		rts				rts
2419									;
2420	.0d2d	808d2d					_checkH
2421	.0d2d	808d2d	a5 0f		lda $0f			lda ZPTemp
2422	.0d2f	808d2f	18		clc			clc
2423	.0d30	808d30	69 10		adc #$10		adc #kTileXCount
2424	.0d32	808d32	a8		tay			tay
2425	.0d33	808d33	20 9d 8c	jsr $808c9d		jsr tileIsWall_88
2426	.0d36	808d36	b0 02		bcs $808d3a		bcs _HNotWall
2427	.0d38	808d38	a9 00		lda #$00			lda #kTiles.back
2428	.0d3a	808d3a					_HNotWall
2429	.0d3a	808d3a	a9 25		lda #$25		lda #kTiles.sideShadow
2430	.0d3c	808d3c	80 e9		bra $808d27		bra _writeMap
2431								;

2433							.as
2434							.xs
2435	.0d3e	808d3e					clearTile
2436							; this will set a tile to empty and calc and required shadow
2437	.0d3e	808d3e					_ASSERT_jsr
2438	.0d3e	808d3e					_ASSERT_axy8
2439	.0d3e	808d3e	a4 15		ldy $15			ldy ActiveTileIndex
2440	.0d40	808d40	a9 00		lda #$00		lda #kTiles.back
2441	.0d42	808d42	99 a6 02	sta $8002a6,y		sta tileMapTemp,y
2442	.0d45	808d45	20 ba 8c	jsr $808cba		jsr calcBCDEforTileY_88 ; this sets it to be what it should be shadow wise
2443	.0d48	808d48	a4 15		ldy $15			ldy ActiveTileIndex
2444	.0d4a	808d4a	b9 a6 02	lda $8002a6,y		lda tileMapTemp,y
2445	.0d4d	808d4d					pltSingleTile
2446							; plots map tile in A to ActiveTileIndex
2447	.0d4d	808d4d					_ASSERT_jsr
2448	.0d4d	808d4d					_ASSERT_axy8
2449	.0d4d	808d4d	aa		tax			tax
2450	.0d4e	808d4e	bd d0 8e	lda $808ed0,x		lda toolToTileLUT,x
2451	.0d51	808d51					pltSingleTileNoLookup
2452							; plots the raw screen tile in A to ActiveTileIndex
2453	.0d51	808d51					_ASSERT_jsr
2454	.0d51	808d51					_ASSERT_axy8
2455	.0d51	808d51	48		pha			pha
2456	.0d52	808d52	a5 15		lda $15				lda ActiveTileIndex
2457	.0d54	808d54	20 9a 8d	jsr $808d9a			jsr convertIndexToScreenAndCRAM
2458	.0d57	808d57	68		pla			pla
2459	.0d58	808d58	20 5c 8d	jsr $808d5c		jsr renderTile_88
2460	.0d5b	808d5b	60		rts			rts

2462							.as
2463							.xs
2464							; a = tile num, Pointer2 = Screen, Pointer 3 = CRAM
2465	.0d5c	808d5c					renderTile_88
2466	.0d5c	808d5c					_ASSERT_jsr
2467	.0d5c	808d5c					_ASSERT_axy8
244:1	.0d5c	808d5c	c2 20		rep #$20		REP #$20
2469:4	.0d5e	808d5e	29 ff 00	and #$00ff			and #$ff
2470	.0d61	808d61	0a		asl a				asl a					; 16bit multiply
2471	.0d62	808d62	0a		asl a				asl a					; tile num x 4
2472									; clc					; must be empty
2473	.0d63	808d63	69 f8 8e	adc #$8ef8			adc #<>fileTiles	; offset by fileTiles
2474	.0d66	808d66	85 0c		sta $0c				sta Pointer4		; add the start of the map -> chars LUT table
2475	.0d68	808d68	a9 00 00	lda #$0000			lda #0
240:1	.0d6b	808d6b	e2 20		sep #$20		SEP #$20
2477:4	.0d6d	808d6d	b2 0c		lda ($0c)			lda (Pointer4)		; read 1st char
244:1	.0d6f	808d6f	c2 20		rep #$20		REP #$20
2479:4	.0d71	808d71	87 32		sta [$32]			sta [ZPLong]		; word Dest Char 1
240:1	.0d73	808d73	e2 20		sep #$20		SEP #$20
2481:4	.0d75	808d75	a0 01		ldy #$01			ldy #1
2482	.0d77	808d77	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 2nd char
2483	.0d79	808d79	a0 02		ldy #$02			ldy #2
244:1	.0d7b	808d7b	c2 20		rep #$20		REP #$20
2485:4	.0d7d	808d7d	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 2
240:1	.0d7f	808d7f	e2 20		sep #$20		SEP #$20
2487:4	.0d81	808d81	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 3rd char
2488	.0d83	808d83	a0 40		ldy #$40			ldy #64
244:1	.0d85	808d85	c2 20		rep #$20		REP #$20
2490:4	.0d87	808d87	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 3
240:1	.0d89	808d89	e2 20		sep #$20		SEP #$20
2492:4	.0d8b	808d8b	a0 03		ldy #$03			ldy #3
2493	.0d8d	808d8d	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 4th char
2494	.0d8f	808d8f	a0 42		ldy #$42			ldy #66
244:1	.0d91	808d91	c2 20		rep #$20		REP #$20
2496:4	.0d93	808d93	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 4
240:1	.0d95	808d95	e2 20		sep #$20		SEP #$20
2498:4									; y can't be 0 at this point so we can use it to enable the screen update flag
2499	.0d97	808d97	84 36		sty $36				sty ScreenUpdateRequiredN0
2500	.0d99	808d99	60		rts				rts

2502							.as
2503							.xs
2504	.0d9a	808d9a					convertIndexToScreenAndCRAM
2505							;CRAM is a hold over from the C64 that stores the Colour info in another area
2506	.0d9a	808d9a					_ASSERT_jsr
2507	.0d9a	808d9a					_ASSERT_axy8
2508								; screen is 32 wide and 2 per char so we want to time y * 64
2509								; 2 lines per tile so y*128
2510	.0d9a	808d9a	85 14		sta $14			sta TempX
244:1	.0d9c	808d9c	c2 20		rep #$20		REP #$20
2512:4	.0d9e	808d9e	29 f0 00	and #$00f0		and #$00F0	; get y Part which is already x16
2513	.0da1	808da1	0a		asl a			asl a			; x32
2514	.0da2	808da2	0a		asl a			asl a			; x64
2515	.0da3	808da3	0a		asl a			asl a			; x128
2516								;clc			; upper bit had to be zero and still be 0
2517	.0da4	808da4	69 00 20	adc #$2000		adc #<>ScreenMirror
2518	.0da7	808da7	85 32		sta $32			sta ZPLong.loWord
2519	.0da9	808da9	a5 14		lda $14			lda TempX			; this over reads but doesn't matter
2520	.0dab	808dab	29 0f 00	and #$000f		and #$000F			; x = x * 2 and 2 bytes per char so *4
2521	.0dae	808dae	0a		asl a			asl a
2522	.0daf	808daf	0a		asl a			asl a
2523								;clc					; again asl will have set c to 0 100%
2524	.0db0	808db0	65 32		adc $32			adc ZPLong.loWord
2525	.0db2	808db2	85 32		sta $32			sta ZPLong.loWord
240:1	.0db4	808db4	e2 20		sep #$20		SEP #$20
2527:4	.0db6	808db6	a9 7e		lda #$7e		lda #`ScreenMirror
2528	.0db8	808db8	85 34		sta $34			sta ZPLong.bank
2529	.0dba	808dba	60		rts			rts

2531							.as
2532							.xs
2533							; returns Y into ZPTemp
2534	.0dbb	808dbb					convertIndexToEntSpriteXY
2535	.0dbb	808dbb					_ASSERT_jsr
2536	.0dbb	808dbb					_ASSERT_axy8
2537	.0dbb	808dbb	85 11		sta $11			sta ZPTemp3											; save full in temp3
2538	.0dbd	808dbd	29 f0		and #$f0		and #$f0												; mask of Y tile num
2539	.0dbf	808dbf	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x	; this is already x16 so save Y
2540	.0dc2	808dc2	85 0f		sta $0f			sta ZPTemp											; return it in ZPTemp
2541	.0dc4	808dc4	a5 11		lda $11			lda ZPTemp3											; load the original
2542	.0dc6	808dc6	29 0f		and #$0f		and #$0f												; mask of the X tile num
2543	.0dc8	808dc8	0a		asl a			asl a
2544	.0dc9	808dc9	0a		asl a			asl a
2545	.0dca	808dca	0a		asl a			asl a
2546	.0dcb	808dcb	0a		asl a			asl a													; x16
2547	.0dcc	808dcc	9d 98 03	sta $800398,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x	; store x
2548	.0dcf	808dcf	9e b9 03	stz $8003b9,x		stz mplexBuffer.xmsb+kEntsSpriteOffset,x	; to be sure sure
2549	.0dd2	808dd2	60		rts			rts

2551							.as
2552							.xs
2553	.0dd3	808dd3					convertLevelToTileMap_88
2554	.0dd3	808dd3					_ASSERT_JSR
2555	.0dd3	808dd3	9c ab 00	stz $8000ab			stz Bank80.LevelData.numKeysLeft			; we don't have any keys yet
2556	.0dd6	808dd6	9c ac 00	stz $8000ac			stz LevelData.totalKeys
2557	.0dd9	808dd9	9c 70 02	stz $800270			stz EntityData.numPipes						; or pipes
2558	.0ddc	808ddc	9c 79 02	stz $800279			stz EntityData.lastPipeUsed
244:1	.0ddf	808ddf	c2 20		rep #$20		REP #$20
2560:4	.0de1	808de1	a9 ff ff	lda #$ffff			lda #$FFFF
2561	.0de4	808de4	8d ae 00	sta $8000ae			sta LevelData.exitIndex						; and I don't know where the exits are
2562	.0de7	808de7	a9 a6 02	lda #$02a6			lda #<>tileMapTemp
2563	.0dea	808dea	85 06		sta $06				sta Pointer1									; this the location of the converted map data
2564	.0dec	808dec	ad a8 00	lda $8000a8			lda GameData.currLevel
2565	.0def	808def	0a		asl a				asl a												; don't care what the upper half is
2566	.0df0	808df0	aa		tax				tax												; this will only take 8 bits worth
2567	.0df1	808df1	bd 89 a2	lda $80a289,x			lda LevelTable,x
2568	.0df4	808df4	85 08		sta $08				sta Pointer2									; this is the location of the raw level data
2569							; read level pointers
2570	.0df6	808df6	a0 00		ldy #$00			ldy #0
2571	.0df8	808df8	84 15		sty $15				sty ActiveTileIndex							; start at the top left
2572									;lda (Pointer2),y
2573									;clc
2574									;adc Pointer2
2575									;sta LevelKeyListPtrLo						; skip these pointers as no longer used
2576	.0dfa	808dfa	c8		iny				iny
2577									;lda (Pointer2),y
2578									;adc Pointer2+1
2579									;sta LevelKeyListPtrHi
2580	.0dfb	808dfb	c8		iny				iny
2581	.0dfc	808dfc	b1 08		lda ($08),y			lda (Pointer2),y								; we now have the pointer to the entity data for this map
2582	.0dfe	808dfe	18		clc				clc
2583	.0dff	808dff	65 08		adc $08				adc Pointer2									; which is relative to the start of this "level spec"
2584	.0e01	808e01	85 00		sta $00				sta EntityDataPointer
2585	.0e03	808e03	a5 08		lda $08				lda Pointer2
2586	.0e05	808e05	18		clc				clc
2587	.0e06	808e06	69 04 00	adc #$0004			adc #4											; skip over pointers
2588	.0e09	808e09	85 08		sta $08				sta Pointer2
240:1	.0e0b	808e0b	e2 20		sep #$20		SEP #$20
2590:4	.0e0d	808e0d	a9 0c		lda #$0c			lda #12											; level data has 12 rows
2591	.0e0f	808e0f	48		pha				pha												; save the counter on the stack
2592	.0e10	808e10	a0 00		ldy #$00	_row	ldy #0											; for the _row
2593	.0e12	808e12					_loop	; read in 16 bytes							; for the byte in the row
2594	.0e12	808e12	b1 08		lda ($08),y			lda (Pointer2),y								; read source map tile
2595	.0e14	808e14	c9 12		cmp #$12			cmp # kTiles.player							; player pos?
2596	.0e16	808e16	f0 3e		beq $808e56			beq _playerPos
2597	.0e18	808e18	c9 11		cmp #$11				cmp # kTiles.exit							; exit position
2598	.0e1a	808e1a	f0 4f		beq $808e6b				beq _exitPos
2599	.0e1c	808e1c	c9 09		cmp #$09					cmp # kTiles.key1						; a key?
2600	.0e1e	808e1e	f0 3f		beq $808e5f					beq _key
2601	.0e20	808e20	c9 0a		cmp #$0a						cmp # kTiles.key2
2602	.0e22	808e22	f0 3b		beq $808e5f						beq _key
2603	.0e24	808e24	c9 0b		cmp #$0b							cmp # kTiles.key3
2604	.0e26	808e26	f0 37		beq $808e5f							beq _key
2605	.0e28	808e28	c9 0c		cmp #$0c								cmp # kTiles.key4
2606	.0e2a	808e2a	f0 33		beq $808e5f								beq _key
2607	.0e2c	808e2c	c9 13		cmp #$13									cmp # kTiles.pipe		; a pipe?
2608	.0e2e	808e2e	f0 50		beq $808e80									beq _pipe
2609	.0e30	808e30	c9 14		cmp #$14										cmp # kTiles.diss	; a diss?
2610	.0e32	808e32	f0 33		beq $808e67										beq _dissBlock
2611																						; no covert and then push out
2612	.0e34	808e34					_cont
2613	.0e34	808e34	91 06		sta ($06),y			sta (Pointer1),y								; write the value
2614	.0e36	808e36	e6 15		inc $15				inc ActiveTileIndex							; next tile
2615	.0e38	808e38	c8		iny				iny
2616	.0e39	808e39	c0 10		cpy #$10			cpy #16											; done a whole row?
2617	.0e3b	808e3b	d0 d5		bne $808e12			bne _loop
248:1	.0e3d	808e3d	c2 21		rep #$21		REP #$21
2619:4	.0e3f	808e3f	a5 08		lda $08				lda Pointer2									; pMapDataSrc += 16
2620	.0e41	808e41	69 10 00	adc #$0010			adc #16
2621	.0e44	808e44	85 08		sta $08				sta Pointer2
2622									;clc												; can't overflow the bank
2623	.0e46	808e46	a5 06		lda $06				lda Pointer1									; pTempMap += 16
2624	.0e48	808e48	69 10 00	adc #$0010			adc #16
2625	.0e4b	808e4b	85 06		sta $06				sta Pointer1
240:1	.0e4d	808e4d	e2 20		sep #$20		SEP #$20
2627:4	.0e4f	808e4f	68		pla				pla												; pull the Rows counter
2628	.0e50	808e50	3a		dec a				dec a
2629	.0e51	808e51	48		pha				pha												; save it again
2630	.0e52	808e52	d0 bc		bne $808e10			bne _row											; no done, new row
2631	.0e54	808e54	68		pla				pla												; pull counter of stack
2632	.0e55	808e55	60		rts				rts
2633									;
2634	.0e56	808e56					_playerPos
2635	.0e56	808e56	a5 15		lda $15				lda ActiveTileIndex
2636	.0e58	808e58	8d ad 00	sta $8000ad			sta LevelData.playerIndex					; record this tile as the tile player starts on
2637	.0e5b	808e5b	a9 00		lda #$00			lda #kTiles.back								; but draw an empty tile on the map
2638	.0e5d	808e5d	80 d5		bra $808e34			bra _cont
2639									;
2640	.0e5f	808e5f	ee ab 00	inc $8000ab	_key	inc LevelData.numKeysLeft
2641	.0e62	808e62	ee ac 00	inc $8000ac			inc LevelData.totalKeys						; increase total amount of keys
2642	.0e65	808e65	80 cd		bra $808e34			bra _cont
2643									;
2644	.0e67	808e67					_dissBlock
2645	.0e67	808e67	a9 14		lda #$14			lda #kTiles.diss								; convert this to a diss full block
2646	.0e69	808e69	80 c9		bra $808e34			bra _cont
2647									;
2648	.0e6b	808e6b					_exitPos
2649	.0e6b	808e6b	a5 15		lda $15				lda ActiveTileIndex
2650	.0e6d	808e6d	ae ae 00	ldx $8000ae			ldx LevelData.exitIndex						; is this the first or second exit for this map
2651	.0e70	808e70	e0 ff		cpx #$ff			cpx #$FF
2652	.0e72	808e72	d0 05		bne $808e79			bne _2nd
2653	.0e74	808e74	8d ae 00	sta $8000ae				sta LevelData.exitIndex					; first
2654	.0e77	808e77	80 03		bra $808e7c				bra +
2655										;
2656	.0e79	808e79	8d af 00	sta $8000af	_2nd	sta LevelData.exitIndex+1					; second
2657	.0e7c	808e7c	a9 11		lda #$11	+		lda #kTiles.exit								; draw a door at this tile
2658	.0e7e	808e7e	80 b4		bra $808e34			bra _cont
2659									;
2660	.0e80	808e80					_pipe
2661	.0e80	808e80	ae 70 02	ldx $800270			ldx EntityData.numPipes						; current next pipe
2662	.0e83	808e83	a5 15		lda $15				lda ActiveTileIndex
2663	.0e85	808e85	38		sec				sec
2664	.0e86	808e86	e9 10		sbc #$10			sbc #16											; bubbles spawn at the tile above the pipe
2665	.0e88	808e88	9d 71 02	sta $800271,x			sta EntityData.pipeIndex,x
2666	.0e8b	808e8b	e8		inx				inx
2667	.0e8c	808e8c	8e 70 02	stx $800270			stx EntityData.numPipes						; count this pipe
2668	.0e8f	808e8f	a9 13		lda #$13			lda #kTiles.pipe								; draw a pipe
2669	.0e91	808e91	80 a1		bra $808e34			bra _cont
2670									;

2672							.as
2673							.xs
2674	.0e93	808e93					countTempMapTile_88
2675							; how many of A is in the live map?
2676							; returned in A
2677	.0e93	808e93					_ASSERT_jsr
2678	.0e93	808e93					_ASSERT_axy8
2679	.0e93	808e93	a2 bf		ldx #$bf		ldx # kLevelSizeMax-1	; for all tiles
2680	.0e95	808e95	a0 00		ldy #$00		ldy #0
2681	.0e97	808e97					_loop
2682	.0e97	808e97	dd a6 02	cmp $8002a6,x		cmp tileMapTemp,x			; is this it?
2683	.0e9a	808e9a	d0 01		bne $808e9d		bne _skip
2684	.0e9c	808e9c	c8		iny				iny						; count it
2685	.0e9d	808e9d					_skip
2686	.0e9d	808e9d	ca		dex			dex
2687	.0e9e	808e9e	e0 ff		cpx #$ff		cpx #$ff						; until done
2688	.0ea0	808ea0	d0 f5		bne $808e97		bne _loop
2689	.0ea2	808ea2	98		tya			tya
2690	.0ea3	808ea3	60		rts			rts

2692							.as
2693							.xs
2694	.0ea4	808ea4					removeAllTilesOf_88
2695	.0ea4	808ea4					_ASSERT_jsr
2696	.0ea4	808ea4					_ASSERT_axy8
2697	.0ea4	808ea4	85 13		sta $13			sta ZPTemp5							; cache tile I want to remove
2698	.0ea6	808ea6	a2 00		ldx #$00		ldx #0
2699	.0ea8	808ea8	86 15		stx $15			stx ActiveTileIndex				; start at top left
2700	.0eaa	808eaa					_loop
2701	.0eaa	808eaa	bd a6 02	lda $8002a6,x		lda tileMapTemp,x					; if tile[ActiveTileIndex] == tileToRemove
2702	.0ead	808ead	c5 13		cmp $13			cmp ZPTemp5
2703	.0eaf	808eaf	d0 06		bne $808eb7		bne _next
2704	.0eb1	808eb1	20 3e 8d	jsr $808d3e			jsr clearTile					; clear it to "back"
2705	.0eb4	808eb4	20 ed a0	jsr $80a0ed			jsr CheckForShadowPlots		; check to see if it needs to be shadowed
2706	.0eb7	808eb7					_next
2707	.0eb7	808eb7	e6 15		inc $15			inc ActiveTileIndex
2708	.0eb9	808eb9	a6 15		ldx $15			ldx ActiveTileIndex
2709	.0ebb	808ebb	e0 c0		cpx #$c0		cpx # kLevelSizeMax
2710	.0ebd	808ebd	d0 eb		bne $808eaa		bne _loop
2711	.0ebf	808ebf	60		rts			rts

2713	>0ec0	808ec0	00				BCDELUT	.byte $00							; 0000
2714	>0ec1	808ec1	25						.byte kTiles.sideShadow				; 0001
2715	>0ec2	808ec2	00						.byte $00								; 0010
2716	>0ec3	808ec3	25						.byte kTiles.sideShadow				; 0011
2717	>0ec4	808ec4	22						.byte kTiles.underHangStart		; 0100
2718	>0ec5	808ec5	27						.byte kTiles.topLeftCorner			; 0101
2719	>0ec6	808ec6	22						.byte kTiles.underHangStart		; 0110
2720	>0ec7	808ec7	25						.byte kTiles.sideShadow				; 0111
2721	>0ec8	808ec8	24						.byte kTiles.shadowOpenCorner		; 1000
2722	>0ec9	808ec9	26						.byte kTiles.middlesideShadow		; 1001
2723	>0eca	808eca	24						.byte kTiles.shadowOpenCorner		; 1010
2724	>0ecb	808ecb	25						.byte kTiles.sideShadow				; 1011
2725	>0ecc	808ecc	23						.byte kTiles.underHang				; 1100
2726	>0ecd	808ecd	27						.byte kTiles.topLeftCorner			; 1101
2727	>0ece	808ece	23						.byte kTiles.underHang				; 1110
2728	>0ecf	808ecf	27						.byte kTiles.topLeftCorner			; 1111

2730									; back
2731									; wall,wall1,wall2,wall3,wall4
2732									; spike,flower,fruit
2733									; key1,key2,key3,key4
2734									; shield,spring,potion,egg
2735									; exit,something,something,
2736									; diss + 13
2737	.0ed0	808ed0					toolToTileLUT
2738	>0ed0	808ed0	00					.byte 0
2739	>0ed1	808ed1	01 01 01 01 01				.byte 1,1,1,1,1
2740	>0ed6	808ed6	02 03 04				.byte 2,3,4
2741	>0ed9	808ed9	05 05 05 05				.byte 5,5,5,5
2742	>0edd	808edd	06 07 08 09				.byte 6,7,8,9
2743	>0ee1	808ee1	0a 0f 10				.byte 10,15,16
2744	>0ee4	808ee4	11 12 13 14 15 16 17 18			.byte 17,18,19,20,21,22,23,24,25,26,27,28,29,30 ; diss cont
	>0eec	808eec	19 1a 1b 1c 1d 1e
2745	>0ef2	808ef2	1f 20 21 22 23 24			.byte 31,32,33,34,35,36

2747							; tile logic number, doesn't convert to the 4 tiles displayed on the screen 1:1
2748							; so I just made a LUT
2749	.0ef8	808ef8					fileTiles

2751							linerTile4 .macro				; this makes .byte a,a+1,a+2,a+3
2753							.endm
2752	>0ef8	808ef8	00 01 02 03				.byte 0*4+range(4)
2752	>0efc	808efc	10 11 12 13				.byte 4*4+range(4)
2752	>0f00	808f00	38 39 3a 3b				.byte 14*4+range(4)
2752	>0f04	808f04	44 45 46 47				.byte 17*4+range(4)
2752	>0f08	808f08	30 31 32 33				.byte 12*4+range(4)
2752	>0f0c	808f0c	3c 3d 3e 3f				.byte 15*4+range(4)
2752	>0f10	808f10	48 49 4a 4b				.byte 18*4+range(4)
2752	>0f14	808f14	4c 4d 4e 4f				.byte 19*4+range(4)
2752	>0f18	808f18	50 51 52 53				.byte 20*4+range(4)
2752	>0f1c	808f1c	54 55 56 57				.byte 21*4+range(4)
2752	>0f20	808f20	40 41 42 43				.byte 16*4+range(4)
2765	>0f24	808f24	c1 c2 c3 c4			.byte 193,194,195,196 ; exit open frame 1
2766	>0f28	808f28	c5 c6 c7 c8			.byte 197,198,199,200 ; exit open frame 2
2767	>0f2c	808f2c	c5 c9 c7 ca			.byte 197,201,199,202 ; exit open frame 3
2768	>0f30	808f30	c5 c9 c7 cb			.byte 197,201,199,203 ; exit open frame 4
2752	>0f34	808f34	40 41 42 43				.byte 16*4+range(4)
2752	>0f38	808f38	34 35 36 37				.byte 13*4+range(4)
2752	>0f3c	808f3c	14 15 16 17				.byte 5*4+range(4)
2772	>0f40	808f40	14 15 18 19			.byte 20,21,24,25
2773	>0f44	808f44	14 15 1a 1b			.byte 20,21,26,27
2774	>0f48	808f48	14 15 1c 1d			.byte 20,21,28,29
2775	>0f4c	808f4c	14 15 1e 1f			.byte 20,21,30,31
2776	>0f50	808f50	14 15 20 21			.byte 20,21,32,33
2777	>0f54	808f54	14 15 0e 0f			.byte 20,21,14,15
2778	>0f58	808f58	22 23 0e 0f			.byte 34,35,14,15
2779	>0f5c	808f5c	24 25 0e 0f			.byte 36,37,14,15
2780	>0f60	808f60	26 27 0e 0f			.byte 38,39,14,15
2781	>0f64	808f64	28 29 0e 0f			.byte 40,41,14,15
2782	>0f68	808f68	2a 2b 0e 0f			.byte 42,43,14,15
2783	>0f6c	808f6c	2c 2d 0e 0f			.byte 44,45,14,15
2784	>0f70	808f70	0c 0d 0e 0f			.byte 12,13,14,15 ; DISS End
2785	>0f74	808f74	04 05 02 03			.byte 4,5,2,3 ; underhang start
2786	>0f78	808f78	07 05 02 03			.byte 7,5,2,3 ; underhang
2787	>0f7c	808f7c	08 01 02 03			.byte 8,1,2,3 ; shadow open corner
2788	>0f80	808f80	09 01 0b 03			.byte 9,1,11,3 ; side shadow
2789	>0f84	808f84	0a 01 0b 03			.byte 10,1,11,3 ; middlesideShadow
2790	>0f88	808f88	06 05 0b 03			.byte 6,5,11,3 ; topLeftCorner
2791	>0f8c	808f8c	7c 7d 7e 7f			.byte 124,125,126,127 ; old wall for intermission

2793							; ----- @Player Routines@ -----

2795	.0f90	808f90					kPlayerState .block
2796	=0							appear = 0
2797	=1							normal = 1
2798	=2							flap = 2
2799	=3							jump = 3
2800	=4							exit = 4
2801	=5							dead = 5
2802							.bend

2804	.0f90	808f90					kPlayerAnimsIndex .block
2805	=0							standRight = 0
2806	=1							standLeft = 1
2807	=2							standWalkRight = 2
2808	=3							standWalkLeft = 3
2809	=4							jumpRight = 4
2810	=5							jumpLeft = 5
2811	=6							flapRight = 6
2812	=7							flapLeft = 7
2813	=8							dead = 8
2814	=9							exit = 9
2815							.bend

2817	.0f90	808f90					kJumpIndexs .block
2818	=0							normal = 0
2819	=2							floaty = 2
2820							.bend

2822	.0f90	808f90					kPlayerParams .block
2823	=254							jumpStartDelta = 255-1
2824	=19							jumpDeltaAccum = 19
2825	=4							jumpDeltaAccumFloat = 4
2826	=4							maxFallSpeed = 4
2827							.bend

2829	.0f90	808f90					kPlayerStateExit .block
2830	=0							waitForAnimation = 0
2831							.bend

2833	.0f90	808f90					kPlayerStateDeath .block
2834	=0							animate = 0
2835							.bend

2837	.0f90	808f90					kIntermission .block
2838	=80							firstExit = kTileXCount*5
2839	=95							secondExit = (kTileXCount*6)-1
2840							.bend

2842	.0f90	808f90					joyToPlayerDelta_88
2843	.0f90	808f90					_ASSERT_jsr
2844	.0f90	808f90					_ASSERT_axy8
244:1	.0f90	808f90	c2 20		rep #$20		REP #$20
2846:4	.0f92	808f92	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck
2847	.0f95	808f95	9c 9e 02	stz $80029e		stz checkSpriteToCharData.yDeltaCheck				; clear movement deltas
240:1	.0f98	808f98	e2 20		sep #$20		SEP #$20
2849:4	.0f9a	808f9a	9c c1 00	stz $8000c1		stz PlayerData.movingLRNZ								; assmue we are not moving
2850	.0f9d	808f9d	ad 8d 00	lda $80008d		lda joyLeft
2851	.0fa0	808fa0	0d 8e 00	ora $80008e		ora joyRight
2852	.0fa3	808fa3	f0 63		beq $809008		beq _noLR													; any X input
2853	.0fa5	808fa5	ad 8d 00	lda $80008d			lda joyLeft												; was it left?
2854	.0fa8	808fa8	d0 2d		bne $808fd7			bne _left
2855	.0faa	808faa	ad c2 00	lda $8000c2				lda PlayerData.slowMoveNZ						; right, are we in slow move?
2856	.0fad	808fad	f0 03		beq $808fb2				beq +
2857	.0faf	808faf	a9 01		lda #$01					lda #1
2858	>0fb1	808fb1	2c								.byte $2c										; bit XXXX this is a trick to skip 2 bytes, so lda skip next lda
2859	.0fb2	808fb2	a9 02		lda #$02		+		lda #2
2860	.0fb4	808fb4	8d 9c 02	sta $80029c				sta checkSpriteToCharData.xDeltaCheck		; set delta to check
2861	.0fb7	808fb7	ad 8e 00	lda $80008e				lda joyRight
2862	.0fba	808fba	2d 92 00	and $800092				and oldJoyLeft
2863	.0fbd	808fbd	f0 0d		beq $808fcc				beq _fullSpeedRight								; we were already going right
2864	.0fbf	808fbf	ad bc 00	lda $8000bc					lda PlayerData.OnGroundNZ					; slow for opposite only happens in the air
2865	.0fc2	808fc2	d0 03		bne $808fc7					bne _clearSpeedRight
2866	.0fc4	808fc4	a9 01		lda #$01						lda #1
2867	>0fc6	808fc6	2c									.byte $2c									; bit XXXX skip 2 bytes
2868	.0fc7	808fc7							_clearSpeedRight
2869	.0fc7	808fc7	a9 00		lda #$00				lda #0
2870	.0fc9	808fc9	8d c2 00	sta $8000c2				sta PlayerData.slowMoveNZ						; store speed state
2871	.0fcc	808fcc					_fullSpeedRight
2872	.0fcc	808fcc	a9 01		lda #$01		lda #1
2873	.0fce	808fce	8d c1 00	sta $8000c1		sta PlayerData.movingLRNZ								; we are moving
2874	.0fd1	808fd1	3a		dec a			dec a ; a = 0
2875	.0fd2	808fd2	20 02 91	jsr $809102		jsr changePlayerDir										; set player to right
2876	.0fd5	808fd5	80 39		bra $809010		gra _endLR
2877								;
2878	.0fd7	808fd7					_left
2879	.0fd7	808fd7	ad c2 00	lda $8000c2		lda PlayerData.slowMoveNZ
2880	.0fda	808fda	f0 03		beq $808fdf		beq +
2881	.0fdc	808fdc	a9 ff		lda #$ff			lda #-1
2882	>0fde	808fde	2c						.byte $2c ; bit
2883	.0fdf	808fdf	a9 fe		lda #$fe	+	lda #-2
2884	.0fe1	808fe1	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck				; set x delta to -1/-2 depending on speed
2885	.0fe4	808fe4	a9 ff		lda #$ff		lda #$ff
2886	.0fe6	808fe6	8d 9d 02	sta $80029d		sta checkSpriteToCharData.xDeltaCheck.hi			; sign extend
2887	.0fe9	808fe9	ad 8d 00	lda $80008d		lda joyLeft
2888	.0fec	808fec	2d 93 00	and $800093		and oldJoyRight
2889	.0fef	808fef	f0 0d		beq $808ffe		beq _fullSpeedLeft										; we were already going left
2890	.0ff1	808ff1	ad bc 00	lda $8000bc			lda PlayerData.OnGroundNZ
2891	.0ff4	808ff4	d0 03		bne $808ff9			bne _clearSpeedLeft
2892	.0ff6	808ff6	a9 01		lda #$01				lda #1
2893	>0ff8	808ff8	2c							.byte $2c											; bit XXXX skip 2 bytes
2894	.0ff9	808ff9					_clearSpeedLeft
2895	.0ff9	808ff9	a9 00		lda #$00			lda #0
2896	.0ffb	808ffb	8d c2 00	sta $8000c2			sta PlayerData.slowMoveNZ							; set speed
2897	.0ffe	808ffe					_fullSpeedLeft
2898	.0ffe	808ffe	a9 01		lda #$01		lda #1
2899	.1000	809000	8d c1 00	sta $8000c1		sta PlayerData.movingLRNZ								; we are moving
2900	.1003	809003	20 02 91	jsr $809102		jsr changePlayerDir										; make sure we are facing left
2901	.1006	809006	80 08		bra $809010		bra _endLR
2902								;
2903	.1008	809008					_noLR
2904	.1008	809008	a9 80		lda #$80		lda #$80
2905	.100a	80900a	8d c0 00	sta $8000c0		sta PlayerData.startedJumpLR							; we are not jumping LR
2906	.100d	80900d	9c c2 00	stz $8000c2		stz PlayerData.slowMoveNZ								; clear slow move
2907	.1010	809010					_endLR
2908	.1010	809010	ad c1 00	lda $8000c1		lda PlayerData.movingLRNZ								; are we moving LR?
2909	.1013	809013	d0 06		bne $80901b		bne +
2910	.1015	809015	ad bf 00	lda $8000bf			lda PlayerData.facingRight
2911	.1018	809018	20 02 91	jsr $809102			jsr changePlayerDir									; make sure the facing is updated
2912	.101b	80901b	ad bc 00	lda $8000bc	+	lda PlayerData.OnGroundNZ
2913	.101e	80901e	2d 97 00	and $800097		and joyUpStart
2914	.1021	809021	0d c4 00	ora $8000c4		ora PlayerData.forceJumpNZ
2915	.1024	809024	d0 4d		bne $809073		bne StartJump												; if (onGround && JoyUpStart) || forceJump then jump
2916	.1026	809026	ad bc 00	lda $8000bc			lda PlayerData.OnGroundNZ
2917	.1029	809029	d0 28		bne $809053			bne OnGround
2918	.102b	80902b	ad c6 00	lda $8000c6				lda PlayerData.yDeltaAccum.hi					;if inAir then update Y speed
2919	.102e	80902e	10 17		bpl $809047				bpl falling
2920	.1030	809030	9c be 00	stz $8000be					stz PlayerData.isFallingNZ					; if ySpeedDelta -ve then we are going up
2921	.1033	809033	ad bd 00	lda $8000bd					lda PlayerData.hasJumpedNZ					; if this is 1
2922	.1036	809036	2d 98 00	and $800098					and joyUpStop									; and the player has let go
2923	.1039	809039	d0 2d		bne $809068					bne AbortJump									; abort jump and start falling
2924											; we are in air then
2925	.103b	80903b					normalJumpUpdate
2926	.103b	80903b	a2 00		ldx #$00		ldx #kJumpIndexs.normal									; nope just jumping not special
2927	.103d	80903d					customJumpUpdate
2928	.103d	80903d	20 2a 91	jsr $80912a		jsr incPlayerYDeltaAndReturn							; update the jump parabola
2929	.1040	809040	ad c6 00	lda $8000c6		lda PlayerData.yDeltaAccum.hi
2930	.1043	809043	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck				; take the upper 8 bits as the Y delta
2931	.1046	809046	60		rts			rts

2933	.1047	809047					falling
2934	.1047	809047					_ASSERT_axy8
2935	.1047	809047	a9 01		lda #$01		lda #1
2936	.1049	809049	8d be 00	sta $8000be		sta PlayerData.isFallingNZ								; make sure we mark we are falling
2937	.104c	80904c	ad ba 00	lda $8000ba		lda PlayerData.canFloatNZ								; if I can't float
2938							;	ora PasswordHaveSpring
2939	.104f	80904f	f0 ea		beq $80903b		beq normalJumpUpdate										; handle it as normal
2940	.1051	809051	80 4c		bra $80909f			bra handleFall											; else start fall

2942	.1053	809053					OnGround
2943	.1053	809053					_ASSERT_axy8
2944	.1053	809053	a9 01		lda #$01		lda #kPlayerState.normal
2945	.1055	809055	8d b4 00	sta $8000b4		sta PlayerData.state										; back to normal
2946	.1058	809058	ad c3 00	lda $8000c3		lda PlayerData.hitBubbleNum							; unless I landed on a bubble
2947	.105b	80905b	f0 03		beq $809060		beq _skip
2948	.105d	80905d	a9 ff		lda #$ff			lda #-1													; in which case move me up 1 with it, probably should be a constant
2949	>105f	80905f	2c						.byte $2c												; skip XXXX
2950	.1060	809060					_skip
2951	.1060	809060	a9 01		lda #$01		lda #1														; check into the ground to make sure I'm still standing on some
2952	.1062	809062	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck
2953	.1065	809065	4c 05 91	jmp $809105		jmp changePlayerAnimForCurrentDir					; update any facing direction as needed
2954							;	rts

2956	.1068	809068					AbortJump
2957	.1068	809068					_ASSERT_axy8
2958	.1068	809068	a9 80		lda #$80		lda #$80
2959	.106a	80906a	8d c5 00	sta $8000c5		sta PlayerData.yDeltaAccum.lo
2960	.106d	80906d	a9 ff		lda #$ff		lda #$FF
2961	.106f	80906f	8d c6 00	sta $8000c6		sta PlayerData.yDeltaAccum.hi							; set to hash fall speed -1.5
2962	.1072	809072	60		rts			rts

2964	.1073	809073					StartJump
2965	.1073	809073					_ASSERT_axy8
2966	.1073	809073	a9 01		lda #$01		lda #1
2967	.1075	809075	8d bd 00	sta $8000bd		sta PlayerData.hasJumpedNZ								; we are jumping
2968	.1078	809078	a9 03		lda #$03		lda #kPlayerState.jump
2969	.107a	80907a	8d b4 00	sta $8000b4		sta PlayerData.state										; enter the jump state
2970	.107d	80907d	9c be 00	stz $8000be		stz PlayerData.isFallingNZ								; not falling
2971	.1080	809080	9c bc 00	stz $8000bc		stz PlayerData.OnGroundNZ								; not on the ground
2972	.1083	809083	9c c5 00	stz $8000c5		stz PlayerData.yDeltaAccum.lo							; set the Y jump accleration
2973	.1086	809086	9c c4 00	stz $8000c4		stz PlayerData.forceJumpNZ
2974	.1089	809089	a9 50		lda #$50		lda #kTimers.floatTimer									; reset the float timer
2975	.108b	80908b	8d bb 00	sta $8000bb		sta PlayerData.floatTimer
2976	.108e	80908e	a9 fe		lda #$fe		lda #kPlayerParams.jumpStartDelta					; set the upper half of jump accleration
2977	.1090	809090	8d c6 00	sta $8000c6		sta PlayerData.yDeltaAccum.hi
2978	.1093	809093	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck				; which is also how much we are moving this frame
2979	.1096	809096	20 05 91	jsr $809105		jsr changePlayerAnimForCurrentDir					; update the animation
2980	.1099	809099	a9 07		lda #$07		lda #kSFX.jump
2981	.109b	80909b	4c 62 bd	jmp $80bd62		jmp playSFX
2982	.109e	80909e	60		rts			rts

2984	.109f	80909f					handleFall
2985	.109f	80909f					_ASSERT_axy8
2986	.109f	80909f	ad b4 00	lda $8000b4		lda PlayerData.state
2987	.10a2	8090a2	c9 03		cmp #$03		cmp #kPlayerState.jump
2988	.10a4	8090a4	d0 0c		bne $8090b2		bne _didntJustStartFalling								; are we still "jumping"
2989	.10a6	8090a6	ad 8f 00	lda $80008f			lda joyUp												; if we just start falling, and joy is up and we have spring float
2990	.10a9	8090a9	f0 07		beq $8090b2			beq _didntJustStartFalling							; if we don't have the spring we don't to this function.
2991	.10ab	8090ab	a9 02		lda #$02				lda #kPlayerState.flap
2992	.10ad	8090ad	8d b4 00	sta $8000b4				sta PlayerData.state								; enter flap state
2993	.10b0	8090b0	80 14		bra $8090c6				bra _dontStopFloat
2994										;
2995	.10b2	8090b2					_didntJustStartFalling
2996	.10b2	8090b2	ad b4 00	lda $8000b4		lda PlayerData.state
2997	.10b5	8090b5	c9 02		cmp #$02		cmp #kPlayerState.flap
2998	.10b7	8090b7	d0 1d		bne $8090d6		bne _checkUpStart											; if we are falling, and not already flapping check up
2999	.10b9	8090b9	ad 98 00	lda $800098			lda joyUpStop
3000	.10bc	8090bc	f0 08		beq $8090c6			beq _dontStopFloat									; did we just release up?
3001	.10be	8090be	a9 03		lda #$03				lda #kPlayerState.jump
3002	.10c0	8090c0	8d b4 00	sta $8000b4				sta PlayerData.state								; we are now just "jumping" and handle as normal
3003	.10c3	8090c3	4c 3b 90	jmp $80903b				jmp normalJumpUpdate
3004	.10c6	8090c6					_dontStopFloat
3005	.10c6	8090c6	ad bb 00	lda $8000bb		lda PlayerData.floatTimer								; can we still "float"
3006	.10c9	8090c9	10 03		bpl $8090ce		bpl +
3007	.10cb	8090cb	4c 3b 90	jmp $80903b			jmp normalJumpUpdate									; nope, go back to normal to fall
3008	.10ce	8090ce	ce bb 00	dec $8000bb	+	dec PlayerData.floatTimer
3009	.10d1	8090d1	a2 02		ldx #$02		ldx #kJumpIndexs.floaty
3010	.10d3	8090d3	4c 3d 90	jmp $80903d		jmp customJumpUpdate										; do a floaty jump then
3011								;
3012	.10d6	8090d6					_checkUpStart
3013	.10d6	8090d6	ad 97 00	lda $800097		lda joyUpStart
3014	.10d9	8090d9	d0 03		bne $8090de		bne +
3015	.10db	8090db	4c 3b 90	jmp $80903b			jmp normalJumpUpdate									; no up don't enter float so carry on as normal
3016	.10de	8090de	a9 02		lda #$02	+	lda #kPlayerState.flap
3017	.10e0	8090e0	8d b4 00	sta $8000b4		sta PlayerData.state
3018	.10e3	8090e3	a2 02		ldx #$02		ldx #kJumpIndexs.floaty
3019	.10e5	8090e5	4c 3d 90	jmp $80903d		jmp customJumpUpdate										; enter float state and do floaty jump

3021	.10e8	8090e8					enterOnGround
3022	.10e8	8090e8					_ASSERT_jsr
3023	.10e8	8090e8					_ASSERT_axy8
3024	.10e8	8090e8	a9 01		lda #$01		lda #kPlayerState.normal ; == 1
3025	.10ea	8090ea	8d b4 00	sta $8000b4		sta PlayerData.state
3026								.cerror kPlayerState.normal != 1, "need to add lda #1"
3027	.10ed	8090ed	8d bc 00	sta $8000bc		sta PlayerData.OnGroundNZ								; we are now in normal mode and on the ground
3028	.10f0	8090f0	8d c5 00	sta $8000c5		sta PlayerData.yDeltaAccum.lo							; tiny bit down
3029	.10f3	8090f3	9c bd 00	stz $8000bd		stz PlayerData.hasJumpedNZ								; not jumping, or falling, or moving slow
3030	.10f6	8090f6	9c be 00	stz $8000be		stz PlayerData.isFallingNZ
3031	.10f9	8090f9	9c c6 00	stz $8000c6		stz PlayerData.yDeltaAccum.hi
3032	.10fc	8090fc	9c c2 00	stz $8000c2		stz PlayerData.slowMoveNZ
3033	.10ff	8090ff	ad bf 00	lda $8000bf		lda PlayerData.facingRight								; set the right direction and update animation to standing
3034								; fall through
3035	.1102	809102					changePlayerDir
3036	.1102	809102					_ASSERT_axy8
3037	.1102	809102	8d bf 00	sta $8000bf		sta PlayerData.facingRight
3038	.1105	809105					changePlayerAnimForCurrentDir
3039	.1105	809105					_ASSERT_axy8
3040	.1105	809105	ad b4 00	lda $8000b4		lda PlayerData.state
3041	.1108	809108	c9 02		cmp #$02		cmp #kPlayerState.flap									; if flap then flap animation
3042	.110a	80910a	d0 04		bne $809110		bne _notFlap
3043	.110c	80910c	a9 06		lda #$06			lda #kPlayerAnimsIndex.flapRight
3044	.110e	80910e	80 14		bra $809124			bra _still
3045									;
3046	.1110	809110					_notFlap
3047	.1110	809110	ad bc 00	lda $8000bc		lda PlayerData.OnGroundNZ								; else if not on ground, jump animation
3048	.1113	809113	d0 04		bne $809119		bne _onGround
3049	.1115	809115	a9 04		lda #$04			lda #kPlayerAnimsIndex.jumpRight
3050	.1117	809117	80 0b		bra $809124			bra _still
3051									;
3052	.1119	809119					_onGround
3053	.1119	809119	ad c1 00	lda $8000c1		lda PlayerData.movingLRNZ								; else if moving, walk animation
3054	.111c	80911c	f0 04		beq $809122		beq _notMoving
3055	.111e	80911e	a9 02		lda #$02			lda #kPlayerAnimsIndex.standWalkRight
3056	.1120	809120	80 02		bra $809124			bra _still
3057	.1122	809122					_notMoving
3058	.1122	809122	a9 00		lda #$00		lda #kPlayerAnimsIndex.standRight					; else stand animation
3059	.1124	809124					_still
3060	.1124	809124	18		clc			clc
3061	.1125	809125	6d bf 00	adc $8000bf		adc PlayerData.facingRight								; convert to left if needed
3062	.1128	809128	80 1d		bra $809147		gra setPlayerAnimeTo_88
3063								;rts ;above is now a jmp


3066	.112a	80912a					incPlayerYDeltaAndReturn
3067	.112a	80912a					_ASSERT_jsr
3068	.112a	80912a					_ASSERT_axy8
244:1	.112a	80912a	c2 20		rep #$20		REP #$20
3070:4	.112c	80912c	ad c5 00	lda $8000c5		lda PlayerData.yDeltaAccum								; yDelta += JumpSpeed[normal/float]
3071	.112f	80912f	18		clc			clc
3072	.1130	809130	7d 52 92	adc $809252,x		adc PlayerJumpLUT,x
3073	.1133	809133	8d c5 00	sta $8000c5		sta PlayerData.yDeltaAccum
240:1	.1136	809136	e2 20		sep #$20		SEP #$20
3075:4	.1138	809138	ad c6 00	lda $8000c6		lda PlayerData.yDeltaAccum.hi
3076	.113b	80913b	30 06		bmi $809143		bmi +															; if negative then we are fine
3077	.113d	80913d	c9 04		cmp #$04			cmp # kPlayerParams.maxFallSpeed					; has the hi reached max fall velocity
3078	.113f	80913f	90 02		bcc $809143			bcc +														; nope
3079	.1141	809141	a9 04		lda #$04				lda # kPlayerParams.maxFallSpeed				; yes clip it, however lo remains untouched
3080	.1143	809143	8d c6 00	sta $8000c6	+	sta PlayerData.yDeltaAccum.hi							; so fall can be a bit random
3081	.1146	809146	60		rts			rts

3083							.as
3084							.xs
3085	.1147	809147					setPlayerAnimeTo_88
3086	.1147	809147					_ASSERT_jsr
3087	.1147	809147					_ASSERT_axy8
3088	.1147	809147	cd c7 00	cmp $8000c7		cmp PlayerData.currAnim									; if already in this state don't change
3089	.114a	80914a	f0 0d		beq $809159		beq _dontchange											; this way I can just always do a "change anim"
3090	.114c	80914c	8d c7 00	sta $8000c7			sta PlayerData.currAnim								; and it won't muck the animation up
3091	.114f	80914f	aa		tax				tax
3092	.1150	809150	bd 48 92	lda $809248,x			lda PlayerFrameData.animFrameRate,x				; read the frames speed
3093	.1153	809153	8d d2 00	sta $8000d2			sta TickDowns.playerAnim							; set the anim timer to new speed
3094	.1156	809156	9c c8 00	stz $8000c8			stz PlayerData.frameOffset							; reset to frame zero as new anim may have less frames then current
3095	.1159	809159					_dontchange
3096	.1159	809159	60		rts			rts

3098							.as
3099							.xs
3100	.115a	80915a					setPlayerSpritePtrFromFrameNumber_88
3101	.115a	80915a					_ASSERT_jsr
3102	.115a	80915a					_ASSERT_axy8
3103	.115a	80915a	ae c7 00	ldx $8000c7		ldx PlayerData.currAnim
3104	.115d	80915d	bd 00 92	lda $809200,x		lda PlayerFrameData.animFrameIndexs,x					; get the curent base index for this animation
3105	.1160	809160	18		clc			clc
3106	.1161	809161	6d c8 00	adc $8000c8		adc PlayerData.frameOffset									; offset by current frame
3107	.1164	809164	a8		tay			tay
3108	.1165	809165	b9 0a 92	lda $80920a,y		lda PlayerFrameData.animFrameChar,y						; store the char number
3109	.1168	809168	8d 07 04	sta $800407		sta OAMMirror+2
3110	.116b	80916b	18		clc			clc																; on the off chance this is 16x32 set the lower sprite as well
3111	.116c	80916c	69 20		adc #$20		adc #32															; its faster than checking, the X/Y setting will move
3112	.116e	80916e	8d 0b 04	sta $80040b		sta OAMMirror+6												; it offscreen if not needed
3113	.1171	809171	b9 24 92	lda $809224,y		lda PlayerFrameData.animFrameAttri,y
3114	.1174	809174	8d 08 04	sta $800408		sta OAMMirror+3
3115	.1177	809177	69 00		adc #$00		adc #0															; add carry if we cross boundary
3116	.1179	809179	8d 0c 04	sta $80040c		sta OAMMirror+7
3117	.117c	80917c	60		rts			rts


3120							.as
3121							.xs
3122	.117d	80917d					updatePlayerAnim_88
3123	.117d	80917d					_ASSERT_jsr
3124	.117d	80917d					_ASSERT_axy8
3125							; returns carry clear if anim did not loop
3126							; carry is set if it did
3127	.117d	80917d	ae c7 00	ldx $8000c7		ldx PlayerData.currAnim
3128	.1180	809180	bd ec 91	lda $8091ec,x		lda PlayerFrameData.animTypes,x
3129	.1183	809183	c9 00		cmp #$00		cmp #kSpriteAnimationType.none							; is this a hold frame?
3130	.1185	809185	f0 06		beq $80918d		beq _skip
3131	.1187	809187	ad d2 00	lda $8000d2			lda TickDowns.playerAnim								; time for next frame?
3132	.118a	80918a	f0 02		beq $80918e			beq _itTime
3133	.118c	80918c	18		clc					clc
3134	.118d	80918d					_skip
3135	.118d	80918d	60		rts			rts

3137	.118e	80918e					_itTime
3138	.118e	80918e	ad c8 00	lda $8000c8		lda PlayerData.frameOffset
3139	.1191	809191	18		clc			clc
3140	.1192	809192	69 01		adc #$01		adc #1
3141	.1194	809194	dd 3e 92	cmp $80923e,x		cmp PlayerFrameData.animFrameCount,x					; add and reset to 0 if over
3142	.1197	809197	90 02		bcc $80919b		bcc _store
3143	.1199	809199	a9 00		lda #$00			lda #0
3144	.119b	80919b					_store
3145	.119b	80919b	8d c8 00	sta $8000c8		sta PlayerData.frameOffset
3146	.119e	80919e	08		php			php																; if we overflowed c will be set, else clear
3147	.119f	80919f	bd 48 92	lda $809248,x			lda PlayerFrameData.animFrameRate,x
3148	.11a2	8091a2	8d d2 00	sta $8000d2			sta TickDowns.playerAnim								; reset timer
3149	.11a5	8091a5	20 5a 91	jsr $80915a			jsr setPlayerSpritePtrFromFrameNumber_88			; update the sprite
3150	.11a8	8091a8	28		plp			plp																; restore carry state
3151	.11a9	8091a9	60		rts			rts

3153							.as
3154							.xs
3155	.11aa	8091aa					setPlayerToSpawnPoint_88
3156	.11aa	8091aa					_ASSERT_jsr
3157	.11aa	8091aa					_ASSERT_axy8
3158	.11aa	8091aa	ad ad 00	lda $8000ad		lda LevelData.playerIndex									; get the spwan map index
3159	.11ad	8091ad					setPlayerToIndexA
3160	.11ad	8091ad	48		pha			pha																; save A for Y extration
3161	.11ae	8091ae	0a		asl a				asl a
3162	.11af	8091af	0a		asl a				asl a
3163	.11b0	8091b0	0a		asl a				asl a
3164	.11b1	8091b1	0a		asl a				asl a															; mul X by 16 which also clears out the Y
3165	.11b2	8091b2	8d 96 03	sta $800396			sta mplexBuffer.xpos										; save the X
3166	.11b5	8091b5	9c b7 03	stz $8003b7			stz mplexBuffer.xmsb										; no MSB from a fixed tile
3167	.11b8	8091b8	68		pla			pla																; restore index value
3168	.11b9	8091b9	29 f0		and #$f0		and #$F0															; mask off Y value which is already x16
3169	.11bb	8091bb	8d d8 03	sta $8003d8		sta mplexBuffer.ypos											; save the Y
3170								; make sure the bullet is off the screen
3171	.11be	8091be	a9 e0		lda #$e0		lda #kSpriteEmptyVal
3172	.11c0	8091c0	8d d9 03	sta $8003d9		sta mplexBuffer.ypos+kBulletSpriteOffset
3173	.11c3	8091c3	8d 97 03	sta $800397		sta mplexBuffer.xpos+kBulletSpriteOffset
3174	.11c6	8091c6	60		rts			rts

3176							.as
3177							.xs
3178	.11c7	8091c7					clearPlayerStuct_88
3179	.11c7	8091c7					_ASSERT_jsr
3180	.11c7	8091c7					_ASSERT_axy8
3181	.11c7	8091c7	a2 1c		ldx #$1c		ldx #size(sPlayerData)-1
3182	.11c9	8091c9	9e b4 00	stz $8000b4,x	-	stz PlayerData,x												; just set it all to 0
3183	.11cc	8091cc	ca		dex			dex
3184	.11cd	8091cd	10 fa		bpl $8091c9		bpl -
3185	.11cf	8091cf	60		rts			rts

3187							.as
3188							.xs
3189	.11d0	8091d0					removePickups_88
3190	.11d0	8091d0					_ASSERT_jsr
3191	.11d0	8091d0					_ASSERT_axy8
3192	.11d0	8091d0	9c ba 00	stz $8000ba		stz PlayerData.canFloatNZ
3193	.11d3	8091d3	9c c9 00	stz $8000c9		stz PlayerData.bulletActive
3194	.11d6	8091d6	9c cd 00	stz $8000cd		stz PlayerData.numBulletEgg
3195	.11d9	8091d9	4c 07 a2	jmp $80a207		jmp clearShieldState											; shield has timmers and other state with it
3196								;

3198							.as
3199							.xs
3200	.11dc	8091dc					awardLife_88
3201	.11dc	8091dc					_ASSERT_jsr
3202	.11dc	8091dc					_ASSERT_axy8
3203							;	lda PasswordInfiLives
3204							;	beq +
3205							;		rts
3206	.11dc	8091dc	ee 9a 00	inc $80009a	+	inc GameData.lives
3207	.11df	8091df	4c 68 88	jmp $808868		jmp pltLives


3210							; ----- @Player Animation Data@ -----

3212	.11e2	8091e2					kSpriteType .block
3213	=0							s16x16 = 0
3214	=1							s16x32 = 1
3215	=2							s32x32 = 2
3216							.bend

3218	.11e2	8091e2					kSpriteAnimationType .block
3219	=0							none = 0
3220	=1							loop = 1
3221							.bend

3223	=36						kPlayerSprFlags = kSpri_2 | kSPal_2

3225							; this is all the raw word data for each sprite that makes up the animations
3226	=(9216,)					RightFrames = ( fSprDef(0,0,kPlayerSprFlags), )
3227	=(25600,)					LeftFrames = ( fSprDef(0,0,kPlayerSprFlags|kSFlipX), )
3228	=(9248,9250,9252,9254)				WalkRightFrames = ( fSprDef(0,1,kPlayerSprFlags), fSprDef(1,1,kPlayerSprFlags),fSprDef(2,1,kPlayerSprFlags),fSprDef(3,1,kPlayerSprFlags))
3229	=(25632,25634,25636,25638)			WalkLeftFrames = ( fSprDef(0,1,kPlayerSprFlags|kSFlipX), fSprDef(1,1,kPlayerSprFlags|kSFlipX),fSprDef(2,1,kPlayerSprFlags|kSFlipX),fSprDef(3,1,kPlayerSprFlags|kSFlipX))
3230	=(9280,9282)					JumpRightFrames = ( fSprDef(0,2,kPlayerSprFlags), fSprDef(1,2,kPlayerSprFlags) )
3231	=(25664,25666)					JumpLeftFrames = ( fSprDef(0,2,kPlayerSprFlags|kSFlipX), fSprDef(1,2,kPlayerSprFlags|kSFlipX) )
3232	=(9224,9228)					FlapRightFrames = ( fSprDef(4,0,kPlayerSprFlags), fSprDef(6,0,kPlayerSprFlags) )
3233	=(25608,25612)					FlapLeftFrames = ( fSprDef(4,0,kPlayerSprFlags|kSFlipX), fSprDef(6,0,kPlayerSprFlags|kSFlipX) )
3234	=(9284,9286,9288,9290)				DeadFramesUpper = ( fSprDef(2,2,kPlayerSprFlags), fSprDef(3,2,kPlayerSprFlags),fSprDef(4,2,kPlayerSprFlags),fSprDef(5,2,kPlayerSprFlags))
3235	=(9312,9314,25696,25698)			ExitFrames = ( fSprDef(0,3,kPlayerSprFlags), fSprDef(1,3,kPlayerSprFlags),fSprDef(0,3,kPlayerSprFlags|kSFlipX), fSprDef(1,3,kPlayerSprFlags|kSFlipX) )

3237							; each animation then has data such as the frame size, mode, rate etc
3238							; sizes, animation style, frames, anim X offset, animation frame rate
3239	=[(0,0,(9216,),0,255)]				PlayerFrameSpec :=  [(kSpriteType.s16x16, kSpriteAnimationType.none, RightFrames,		0,		255)]
3240	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255)]	PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.none, LeftFrames,			0,		255)]
3241	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkRightFrames,	0,		8)]
3242	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkLeftFrames,	0,		8)]
3243	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpRightFrames,	0,		8)]
3244	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpLeftFrames,	0,		8)]
3245	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapRightFrames,	0,		8)]
3246	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapLeftFrames,	-16,	8)]
3247	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x32, kSpriteAnimationType.loop, DeadFramesUpper,	0,		8)]
3248	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8),(0,1,(9312,9314,25696,25698),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, ExitFrames,			0,		8)]

3250							; now we extract all the info and do an Array of Structs to Struct of Arraies conversion
3251	.11e2	8091e2					PlayerFrameData .block
3252	>11e2	8091e2	00 00 00 00 00 00 02 02			sizes					.byte PlayerFrameSpec[:,0]		; the size for each animation
	>11ea	8091ea	01 00
3253	>11ec	8091ec	00 00 01 01 01 01 01 01			animTypes			.byte PlayerFrameSpec[:,1]		; if its static or looping
	>11f4	8091f4	01 01
3254	>11f6	8091f6	00 00 00 00 00 00 00 f0			animXOffset			.char PlayerFrameSpec[:,3]		; any player to sprite X offset needed
	>11fe	8091fe	00 00
3255	=[]							_animDataIndex := []										; we need to get all the sprite def words but also
3256	=[]							_frameWords := []											; keep a track of the starting point into the list of all
3257	=[]							_frameCount := []											; off them for each animation, and how long each anim is
3258								.for frames in PlayerFrameSpec[:,2]
3259	=[0]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,)							_frameWords ..= frames								; append this animations frames to the list
3261	=[1]								_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600)							_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1]								_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254)				_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4]							_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4]							_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2]							_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10,12]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2,2]							_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10,12,14]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10,12,14,16]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10,12,14,16,18]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2,2,2,2,4]						_frameCount ..= [len(frames)]						; append the number of frames
3259	=[0,1,2,6,10,12,14,16,18,22]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3260	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290,9312,9314,25696,25698)
									_frameWords ..= frames								; append this animations frames to the list
3261	=[1,1,4,4,2,2,2,2,4,4]						_frameCount ..= [len(frames)]						; append the number of frames
3262								.next
3263	>1200	809200	00 01 02 06 0a 0c 0e 10			animFrameIndexs	.byte (_animDataIndex)			; write all the start indexs for the frames
	>1208	809208	12 16
3264	>120a	80920a	00 00 20 22 24 26 20 22			animFrameChar		.byte <(_frameWords)				; the low of the char number
	>1212	809212	24 26 40 42 40 42 08 0c 08 0c 44 46 48 4a 60 62
	>1222	809222	60 62
3265	>1224	809224	24 64 24 24 24 24 64 64			animFrameAttri		.byte >(_frameWords)				; the high + attributes
	>122c	80922c	64 64 24 24 64 64 24 24 64 64 24 24 24 24 24 24
	>123c	80923c	64 64
3266	>123e	80923e	01 01 04 04 02 02 02 02			animFrameCount		.byte (_frameCount)				; number of frames
	>1246	809246	04 04
3267	>1248	809248	ff ff 08 08 08 08 08 08			animFrameRate		.byte (PlayerFrameSpec[:,4])	; and the rate
	>1250	809250	08 08
3268							.bend

3270							; simple lut to handle normal jumping and floating acceleration rates
3271	>1252	809252	13 00 04 00			PlayerJumpLUT .word kPlayerParams.jumpDeltaAccum, kPlayerParams.jumpDeltaAccumFloat

3273							; for the flash affect, we have a whole two colours, yellow and blue
3274	.1256	809256					PlayerColourLUT .block
3275	=(16250,28144)						_colours = (fRGBToSNES(214,222,123),fRGBToSNES(132,123,222))
3276	>1256	809256	7a f0					lo .byte <(_colours)
3277	>1258	809258	3f 6d					hi .byte >(_colours)
3278							.bend

3280							; ----- @Bullet Routines@ -----

3282	.125a	80925a					startBullet
3283	.125a	80925a					_ASSERT_jsr
3284	.125a	80925a					_ASSERT_axy8
3285	.125a	80925a	a9 01		lda #$01		lda #1
3286	.125c	80925c	8d c9 00	sta $8000c9		sta PlayerData.bulletActive					; we have a bullet there is only 1
3287	.125f	80925f	a9 05		lda #$05		lda #kSFX.bubble
3288	.1261	809261	20 62 bd	jsr $80bd62		jsr playSFX
3289	.1264	809264	9c ca 00	stz $8000ca		stz PlayerData.bulletUD							; it goes up with to start
3290	.1267	809267	9c cc 00	stz $8000cc		stz PlayerData.bulletBurstNZ					; its not dead either
3291	.126a	80926a	ad bf 00	lda $8000bf		lda PlayerData.facingRight
3292	.126d	80926d	8d cb 00	sta $8000cb		sta PlayerData.bulletLR							; make it move forward
3293	.1270	809270	a9 c8		lda #$c8		lda #200
3294	.1272	809272	8d d4 00	sta $8000d4		sta TickDowns.bulletLifeTimer					; it lives for 4 seconds (PAL)
3295	.1275	809275	ad 96 03	lda $800396		lda mplexBuffer.xpos
3296	.1278	809278	8d 97 03	sta $800397		sta mplexBuffer.xpos+kBulletSpriteOffset	; same X as the player
3297	.127b	80927b	ad d8 03	lda $8003d8		lda mplexBuffer.ypos
3298	.127e	80927e	38		sec			sec
3299	.127f	80927f	e9 03		sbc #$03		sbc #3
3300	.1281	809281	8d d9 03	sta $8003d9		sta mplexBuffer.ypos+kBulletSpriteOffset	; 3 above the player
3301	.1284	809284	ad b7 03	lda $8003b7		lda mplexBuffer.xmsb
3302	.1287	809287	8d b8 03	sta $8003b8		sta mplexBuffer.xmsb+kBulletSpriteOffset	; copy players MSB (not really needed on SNES)
3303	.128a	80928a	ad cd 00	lda $8000cd		lda PlayerData.numBulletEgg					; is this a bubble or an egg bullet
3304								;ora PasswordRedBullets
3305	.128d	80928d	f0 04		beq $809293		beq _normal
3306	.128f	80928f	a9 08		lda #$08			lda #kSprites.bulletRed
3307	.1291	809291	80 02		bra $809295			bra _store
3308	.1293	809293					_normal
3309	.1293	809293	a9 00		lda #$00		lda #kSprites.bulletSprite
3310	.1295	809295					_store
3311	.1295	809295	8d a4 02	sta $8002a4		sta bulletFrame
3312	.1298	809298	60		rts			rts

3314	.1299	809299					updateBullet
3315	.1299	809299					_ASSERT_jsr
3316	.1299	809299					_ASSERT_axy8
3317	.1299	809299	ad c9 00	lda $8000c9		lda PlayerData.bulletActive
3318	.129c	80929c	f0 15		beq $8092b3		beq bulletExit
3319	.129e	80929e	ad d4 00	lda $8000d4			lda TickDowns.bulletLifeTimer			; has it expired?
3320	.12a1	8092a1	d0 26		bne $8092c9			bne bulletNotDead
3321									;
3322	.12a3	8092a3					removeBullet
3323	.12a3	8092a3					_ASSERT_jsr
3324	.12a3	8092a3					_ASSERT_axy8
3325	.12a3	8092a3	9c c9 00	stz $8000c9		stz PlayerData.bulletActive				; no longer alive
3326	.12a6	8092a6	ad cd 00	lda $8000cd		lda PlayerData.numBulletEgg				; if I have an egg dec it
3327	.12a9	8092a9	f0 03		beq $8092ae		beq +												; this leads to an exploit, if you fire collect then you loose the egg
3328									;lda PasswordRedBullets
3329									;bne +
3330	.12ab	8092ab	ce cd 00	dec $8000cd				dec PlayerData.numBulletEgg
3331	.12ae	8092ae	a9 e0		lda #$e0	+	lda #kSpriteEmptyVal							; set bullet off screen
3332	.12b0	8092b0	8d d9 03	sta $8003d9		sta mplexBuffer.ypos+kBulletSpriteOffset
3333	.12b3	8092b3					bulletExit
3334	.12b3	8092b3	60		rts			rts

3336	.12b4	8092b4					burstBullet
3337	.12b4	8092b4					_ASSERT_jsr
3338	.12b4	8092b4					_ASSERT_axy8
3339	.12b4	8092b4	a9 06		lda #$06		lda #kSprites.bulletSplat
3340	.12b6	8092b6	8d a4 02	sta $8002a4		sta bulletFrame								; we splat
3341	.12b9	8092b9	a9 10		lda #$10		lda #16
3342	.12bb	8092bb	8d d4 00	sta $8000d4		sta TickDowns.bulletLifeTimer				; hold it for 16 frames
3343	.12be	8092be	a9 01		lda #$01		lda #1
3344	.12c0	8092c0	8d cc 00	sta $8000cc		sta PlayerData.bulletBurstNZ				; mark it as burst
3345	.12c3	8092c3	a9 05		lda #$05		lda #kSFX.bubble
3346	.12c5	8092c5	4c 62 bd	jmp $80bd62		jmp playSFX
3347	.12c8	8092c8	60		rts			rts

3349	.12c9	8092c9					bulletNotDead
3350	.12c9	8092c9					_ASSERT_jsr
3351	.12c9	8092c9					_ASSERT_axy8
3352	.12c9	8092c9	ad cc 00	lda $8000cc		lda PlayerData.bulletBurstNZ
3353	.12cc	8092cc	d0 e5		bne $8092b3		bne bulletExit										; if not burst
3354	.12ce	8092ce	ad cd 00	lda $8000cd			lda PlayerData.numBulletEgg
3355									;ora PasswordRedBullets
3356	.12d1	8092d1	d0 14		bne $8092e7			bne _bulletFull								; are we full?
3357	.12d3	8092d3	ad a4 02	lda $8002a4				lda bulletFrame
3358	.12d6	8092d6	c9 04		cmp #$04				cmp #kSprites.bulletSprite+(2*2)		; have we reached the full size, word index
3359	.12d8	8092d8	f0 0d		beq $8092e7				beq _bulletFull
3360	.12da	8092da	ad d4 00	lda $8000d4					lda TickDowns.bulletLifeTimer		; is it time to update the frame?
3361	.12dd	8092dd	29 07		and #$07					and #$07									; every 8 frames
3362	.12df	8092df	d0 06		bne $8092e7					bne _bulletFull
3363	.12e1	8092e1	ee a4 02	inc $8002a4						inc bulletFrame					; next frame
3364	.12e4	8092e4	ee a4 02	inc $8002a4						inc bulletFrame					; next frame word index
3365	.12e7	8092e7					_bulletFull
3366	.12e7	8092e7	a9 01		lda #$01		lda #kBulletCollisionbox
3367	.12e9	8092e9	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set collision size to the bullets
3368								; lda #kBulletSpriteOffset ; same as kBulletCollisionbox
3369	.12eb	8092eb	85 1d		sta $1d			sta CollideSpriteToCheck
244:1	.12ed	8092ed	c2 20		rep #$20		REP #$20
3371:4	.12ef	8092ef	a9 06 93	lda #$9306		lda #<>UpdateBulletEndYColl
3372	.12f2	8092f2	85 06		sta $06			sta Pointer1										; set post collision callback
240:1	.12f4	8092f4	e2 20		sep #$20		SEP #$20
3374:4	.12f6	8092f6	a9 00		lda #$00		lda #0
3375	.12f8	8092f8	85 05		sta $05			sta CollisionResult
3376	.12fa	8092fa	a8		tay			tay ; ldy #0
3377	.12fb	8092fb	ad ca 00	lda $8000ca		lda PlayerData.bulletUD							; which Y direction are we moving?
3378	.12fe	8092fe	f0 03		beq $809303		beq +
3379	.1300	809300	4c 42 96	jmp $809642			jmp entDown
3380	.1303	809303	4c f6 95	jmp $8095f6	+	jmp entUp

3382	.1306	809306					UpdateBulletEndYColl
3383	.1306	809306					_ASSERT_jsr
3384	.1306	809306					_ASSERT_axy8
3385	.1306	809306	a5 05		lda $05			lda CollisionResult
3386	.1308	809308	f0 0a		beq $809314		beq _updateY										; did the egg hit something
3387	.130a	80930a	ad ca 00	lda $8000ca			lda PlayerData.bulletUD						; yes
3388	.130d	80930d	49 01		eor #$01			eor #1
3389	.130f	80930f	8d ca 00	sta $8000ca			sta PlayerData.bulletUD						; change direction
3390	.1312	809312	10 0a		bpl $80931e		bpl _checkX
3391	.1314	809314					_updateY
3392	.1314	809314	ad d9 03	lda $8003d9		lda mplexBuffer.ypos+kBulletSpriteOffset
3393	.1317	809317	18		clc			clc
3394	.1318	809318	6d 9e 02	adc $80029e		adc checkSpriteToCharData.yDeltaCheck		; update the Y
3395	.131b	80931b	8d d9 03	sta $8003d9		sta mplexBuffer.ypos+kBulletSpriteOffset
3396	.131e	80931e					_checkX
244:1	.131e	80931e	c2 20		rep #$20		REP #$20
3398:4	.1320	809320	a9 37 93	lda #$9337		lda #<>UpdateBulletEndXColl						; set the x collision callback
3399	.1323	809323	85 06		sta $06			sta Pointer1
240:1	.1325	809325	e2 20		sep #$20		SEP #$20
3401:4	.1327	809327	a9 00		lda #$00		lda #$00
3402	.1329	809329	85 05		sta $05			sta CollisionResult								; clear the result
3403	.132b	80932b	a8		tay			tay ;ldy #0
3404	.132c	80932c	ad cb 00	lda $8000cb		lda PlayerData.bulletLR							; which way are we moving?
3405	.132f	80932f	d0 03		bne $809334		bne +
3406	.1331	809331	4c d1 95	jmp $8095d1			jmp entRight
3407	.1334	809334	4c 1b 96	jmp $80961b	+	jmp entLeft

3409							; do some more collision checking here
3410	.1337	809337					UpdateBulletEndXColl
3411	.1337	809337					_ASSERT_jsr
3412	.1337	809337					_ASSERT_axy8
3413	.1337	809337	a5 05		lda $05			lda CollisionResult								; did we hit something?
3414	.1339	809339	f0 0a		beq $809345		beq _updateX
3415	.133b	80933b	ad cb 00	lda $8000cb			lda PlayerData.bulletLR						; go the other way
3416	.133e	80933e	49 01		eor #$01			eor #1
3417	.1340	809340	8d cb 00	sta $8000cb			sta PlayerData.bulletLR
3418	.1343	809343	10 11		bpl $809356			bpl _checkEnts
3419	.1345	809345					_updateX
3420	.1345	809345	a2 01		ldx #$01		ldx #kBulletSpriteOffset
3421	.1347	809347	20 c7 85	jsr $8085c7		jsr addXWithMSBAndClip_88						; move on the X
3422	.134a	80934a	a5 2f		lda $2f			lda DidClipX										; did we hit an edge?
3423	.134c	80934c	f0 08		beq $809356		beq _checkEnts
3424	.134e	80934e	ad cb 00	lda $8000cb			lda PlayerData.bulletLR						; bounce the other way
3425	.1351	809351	49 01		eor #$01			eor #1
3426	.1353	809353	8d cb 00	sta $8000cb			sta PlayerData.bulletLR
3427	.1356	809356					_checkEnts
3428	.1356	809356	20 46 9f	jsr $809f46		jsr collideBulletAgainstRest					; did we hit an enmey
3429	.1359	809359	90 27		bcc $809382		bcc _exit2											; didn't hit one
3430	.135b	80935b	bd e0 00	lda $8000e0,x			lda EntityData.type,x						; yes, is it a boss?
3431	.135e	80935e	20 d8 9b	jsr $809bd8			jsr isTypeBoss
3432	.1361	809361	b0 20		bcs $809383			bcs _boss
3433	.1363	809363	a9 ff		lda #$ff				lda #kEntity.removedFromBullet		; we make an entity removed by bullet
3434	.1365	809365	ac cd 00	ldy $8000cd				ldy PlayerData.numBulletEgg			; so we can put it back latter
3435	.1368	809368	f0 02		beq $80936c				beq +
3436	.136a	80936a	a9 fe		lda #$fe					lda #kEntity.deadFromRedBullet	; if it was red we don't restore them
3437	.136c	80936c	9d a8 01	sta $8001a8,x			+	sta EntityData.entState,x
3438	.136f	80936f	a9 ff		lda #$ff				lda #255										; disable Ent
3439	.1371	809371	9d da 03	sta $8003da,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
3440	.1374	809374	9d 2b 01	sta $80012b,x				sta EntityData.movTimer,x
3441	.1377	809377	1a		inc a					inc a											; 0
3442	.1378	809378	9d 12 01	sta $800112,x				sta EntityData.active,x
3443	.137b	80937b	1a		inc a					inc a											; 1
3444	.137c	80937c	9d 25 02	sta $800225,x				sta EntityData.speed,x
3445	.137f	80937f	4c b4 92	jmp $8092b4				jmp burstBullet
3446	.1382	809382						_exit2
3447	.1382	809382	60		rts				rts
3448	.1383	809383					_boss
3449	.1383	809383	ad cd 00	lda $8000cd		lda PlayerData.numBulletEgg
3450							;	ora PasswordRedBullets
3451	.1386	809386	f0 fa		beq $809382		beq _exit2											; only accept eggs for the boss
3452	.1388	809388	bd e0 00	lda $8000e0,x			lda EntityData.type,x
3453	.138b	80938b	20 e8 9b	jsr $809be8			jsr isTypeBossBounceDetect					; look for the actual bear not the dummies
3454	.138e	80938e	b0 03		bcs $809393			bcs _found
3455	.1390	809390	ca		dex					dex											; doesn't affect C
3456	.1391	809391	80 f0		bra $809383				bra _boss
3457	.1393	809393					_found
3458	.1393	809393	20 f4 9b	jsr $809bf4		jsr hurtBoss
3459	.1396	809396	4c b4 92	jmp $8092b4		jmp burstBullet

3461	=(9420,9422,9452,9454,9676)			PlayerBulletFrames = (fSprDef(6,6,kPlayerSprFlags), fSprDef(7,6,kPlayerSprFlags), fSprDef(6,7,kPlayerSprFlags), fSprDef(7,7,kPlayerSprFlags), fSprDef(6,14,kPlayerSprFlags))
3462	.1399	809399					PlayerBulletAnimData .block
3463	>1399	809399	cc 24 ce 24 ec 24 ee 24			.word <>(PlayerBulletFrames)
	>13a1	8093a1	cc 25
3464							;	lo .byte <(PlayerBulletFrames)
3465							;	hi .byte >(PlayerBulletFrames)
3466							.bend

3468							; ----- @Entity system@ -----

3470							mConvertXToEntSpriteX .macro ; skip past player + bullet
3473							.endm

3475							mRestoreEntSpriteX .macro ; go back past player + bullet
3478							.endm

3480	.13a3	8093a3					kBoss .block
3481	=7							hitPoints = 7
3482	=9							hitPointsOctopuss = 9
3483	=25							deathAnimTime = 25
3484	=0							normal = 0
3485	=1							dead = 1
3486							.bend

3488	.13a3	8093a3					kFishLimits .block
3489	=181							startTwo = 250-21-(8*6) ; 165
3490	=197							maxY = 255-8-50
3491							.bend

3493	.13a3	8093a3					kSpiderValues .block
3494	=2							yFallDelta = 2
3495	=209							rightStartWiggle = 255-32-14 ; 32 pixels but compenstating for the sprite width
3496	=225							rightStartFall = 255-16-14 ; 16 pixels
3497	=46							leftStartWiggle = 32+14
3498	=30							leftStartFall = 16+14
3499	=32							pauseEndFallFrames = 32
3500	=3							riseDelayTime = 3
3501							.bend

3503							.as
3504							.xs
3505	.13a3	8093a3					unpackEntityBytes
3506	.13a3	8093a3					_ASSERT_jsr
3507	.13a3	8093a3					_ASSERT_axy8
3508								; asume we don't have any bosses and reset the sprites back to normal
3509	.13a3	8093a3	a9 62		lda #$62		lda #kDefault_OBSEL
3510	.13a5	8093a5	8d 01 21	sta $802101		sta $802101
3511	.13a8	8093a8	a0 00		ldy #$00		ldy #0
3512	.13aa	8093aa	a2 18		ldx #$18		ldx #kEntity.maxEntities-1				; clear all entities
3513	.13ac	8093ac	9e 5d 01	stz $80015d,x	-	stz EntityData.animBase,x
3514	.13af	8093af	9e 76 01	stz $800176,x		stz EntityData.animFrame,x
3515	.13b2	8093b2	9e a8 01	stz $8001a8,x		stz EntityData.entState,x
3516	.13b5	8093b5	9e 57 02	stz $800257,x		stz EntityData.palleteOffset,x
3517	.13b8	8093b8	ca		dex			dex
3518	.13b9	8093b9	10 f1		bpl $8093ac		bpl -
3519	.13bb	8093bb	b1 00		lda ($00),y		lda (EntityDataPointer),y				; read the number of entities
3520	.13bd	8093bd	85 10		sta $10			sta ZPTemp2									; number of entities
3521	.13bf	8093bf	8d df 00	sta $8000df		sta EntityData.number
3522	.13c2	8093c2	f0 40		beq $809404		beq _e										; check for if we have none, handy while testing layouts etc
3523	.13c4	8093c4	c8		iny				iny										; next byte
3524	.13c5	8093c5	a2 00		ldx #$00			ldx #0
3525	.13c7	8093c7	85 04		sta $04				sta EntNum
3526	.13c9	8093c9						_l
3527	.13c9	8093c9	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read entity tile index for starting pos
3528	.13cb	8093cb	20 bb 8d	jsr $808dbb			jsr convertIndexToEntSpriteXY
3529	.13ce	8093ce	c8		iny				iny			; next byte
3530	.13cf	8093cf	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read TTTTXDDDD T = type X = don't care D = starting direction
3531	.13d1	8093d1	4a		lsr a				lsr a
3532	.13d2	8093d2	4a		lsr a				lsr a
3533	.13d3	8093d3	4a		lsr a				lsr a
3534	.13d4	8093d4	4a		lsr a				lsr a										; extract the type
3535	.13d5	8093d5	9d e0 00	sta $8000e0,x			sta EntityData.type,x				; store it
3536	.13d8	8093d8	c9 08		cmp #$08			cmp #kEntity.Bear						; do we have a bear boss?
3537	.13da	8093da	d0 02		bne $8093de			bne +
3538	.13dc	8093dc	80 51		bra $80942f				gra _BossBear						; handle the custom case
3539	.13de	8093de	c9 09		cmp #$09		+	cmp #kEntity.Octopuss				; same with the octopuss
3540	.13e0	8093e0	d0 03		bne $8093e5			bne +
3541	.13e2	8093e2	4c ba 94	jmp $8094ba				jmp _BossOctopuss
3542	.13e5	8093e5	a5 0f		lda $0f			+	lda ZPTemp								; convertIndexToEntSpriteXY returns the Y in ZPTemp
3543	.13e7	8093e7	9d 8f 01	sta $80018f,x			sta EntityData.originalY,x
3544	.13ea	8093ea	9e a8 01	stz $8001a8,x			stz EntityData.entState,x			; clear the state, and speed all ents are spawned slow
3545	.13ed	8093ed	9e 25 02	stz $800225,x			stz EntityData.speed,x
3546	.13f0	8093f0	b1 00		lda ($00),y			lda (EntityDataPointer),y			; extract the D from the byte
3547	.13f2	8093f2	29 03		and #$03			and #3
3548	.13f4	8093f4	9d f9 00	sta $8000f9,x			sta EntityData.direction,x
3549	.13f7	8093f7	a9 01		lda #$01			lda #1
3550	.13f9	8093f9	9d 12 01	sta $800112,x			sta EntityData.active,x				; it's alive
3551	.13fc	8093fc						_nextEnt
3552	.13fc	8093fc	c8		iny				iny										; next byte
3553	.13fd	8093fd	e8		inx				inx
3554	.13fe	8093fe	c6 10		dec $10				dec ZPTemp2								; have we done all ents?
3555	.1400	809400	a5 10		lda $10				lda ZPTemp2
3556	.1402	809402	d0 c5		bne $8093c9			bne _l
3557	.1404	809404					_e
3558	.1404	809404	ae df 00	ldx $8000df		ldx EntityData.number					; now we can start any bubbles if we need them
3559	.1407	809407	8e 7a 02	stx $80027a		stx EntityData.pipeBubbleStart
3560	.140a	80940a	ad 70 02	lda $800270		lda EntityData.numPipes					; do we need them?
3561	.140d	80940d	f0 1f		beq $80942e		beq _noPipes
3562									.cerror kEntity.maxNumBubblesPerMaker != 2, "need to change code so it handles new mul"
3563	.140f	80940f	0a		asl a				asl a										; times two
3564	.1410	809410	18		clc				clc										; probably not needed as num pipes must be below 128
3565	.1411	809411	6d df 00	adc $8000df			adc EntityData.number
3566	.1414	809414	8d df 00	sta $8000df			sta EntityData.number				; add the bubble ents
3567	.1417	809417						_setupBubbleLoop
3568	.1417	809417	a9 0c		lda #$0c			lda #kEntity.bubble
3569	.1419	809419	9d e0 00	sta $8000e0,x			sta EntityData.type,x				; we have a bubble
3570	.141c	80941c	9e a8 01	stz $8001a8,x			stz EntityData.entState,x			; zero state
3571	.141f	80941f	9e f9 00	stz $8000f9,x			stz EntityData.direction,x			; up
3572	.1422	809422	9e 12 01	stz $800112,x			stz EntityData.active,x				; not active
3573	.1425	809425	9e 57 02	stz $800257,x			stz EntityData.palleteOffset,x	; stock colour
3574	.1428	809428	e8		inx				inx
3575	.1429	809429	ec df 00	cpx $8000df			cpx EntityData.number				; done all of them?
3576	.142c	80942c	d0 e9		bne $809417			bne _setupBubbleLoop
3577	.142e	80942e					_noPipes
3578	.142e	80942e	60		rts			rts
3579								;
3580	.142f	80942f					_BossBear
3581	.142f	80942f	a9 08		lda #$08		lda #kEntity.bear										; bosses are actually 4 entites
3582	.1431	809431	9d e0 00	sta $8000e0,x		sta EntityData.type,x
3583	.1434	809434	a9 0a		lda #$0a		lda #kEntity.bearBody								; the body
3584	.1436	809436	9d e1 00	sta $8000e1,x		sta EntityData.type+1,x
3585	.1439	809439	a9 07		lda #$07		lda #kBoss.hitPoints
3586	.143b	80943b	9d 12 01	sta $800112,x		sta EntityData.active,x								; abuse active as a hit points counter
3587	.143e	80943e	a9 6a		lda #$6a		lda #kDefault_OBSEL|kBossBearBankOR				; enable the bear boss sprite bank
3588	.1440	809440					_sharedBoss
3589	.1440	809440	8d 01 21	sta $802101		sta $802101												; set the sprite bank
3590	.1443	809443	a9 0d		lda #$0d		lda #kEntity.bossDummy
3591	.1445	809445	9d e2 00	sta $8000e2,x		sta EntityData.type+2,x								; 3 and 4 are dumnmy ents
3592	.1448	809448	9d e3 00	sta $8000e3,x		sta EntityData.type+3,x								; which just show a sprite
3593	.144b	80944b	ad df 00	lda $8000df		lda EntityData.number
3594	.144e	80944e	18		clc			clc
3595	.144f	80944f	69 03		adc #$03		adc #3													; insert 3 more ents for the rest of the boss
3596	.1451	809451	8d df 00	sta $8000df		sta EntityData.number
3597	.1454	809454	a9 01		lda #$01		lda #1
3598	.1456	809456	9d 13 01	sta $800113,x		sta EntityData.active+1,x
3599	.1459	809459	9d 14 01	sta $800114,x		sta EntityData.active+2,x
3600	.145c	80945c	9d 15 01	sta $800115,x		sta EntityData.active+3,x							; set all 4 active
3601	.145f	80945f	8a		txa			txa
3602	.1460	809460	9d a9 01	sta $8001a9,x		sta EntityData.entState+1,x						; set the state of the extras to point to the "first"
3603	.1463	809463	9d aa 01	sta $8001aa,x		sta EntityData.entState+2,x
3604	.1466	809466	9d ab 01	sta $8001ab,x		sta EntityData.entState+3,x
3605	.1469	809469	bd b9 03	lda $8003b9,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x		; copy the MSB from the first to the others
3606	.146c	80946c	9d ba 03	sta $8003ba,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+1,x	; which technically doesn't work but mostly works
3607	.146f	80946f	9d bb 03	sta $8003bb,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+2,x	; but this is the SNES so it will be all 0 anyway
3608	.1472	809472	9d bc 03	sta $8003bc,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+3,x
3609	.1475	809475	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; the boss is moved up 9 pixels so the sits on the top of blocks
3610	.1478	809478	38		sec			sec
3611	.1479	809479	e9 09		sbc #$09		sbc #9
3612	.147b	80947b	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3613	.147e	80947e	9d db 03	sta $8003db,x		sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
3614	.1481	809481	18		clc			clc
3615	.1482	809482	69 15		adc #$15		adc #21													; and the bottom sprites are 21 lower (c64 sprits are 24x21)
3616	.1484	809484	9d dc 03	sta $8003dc,x		sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
3617	.1487	809487	9d dd 03	sta $8003dd,x		sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
3618	.148a	80948a	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; we move the sprites -8 from spawn position
3619	.148d	80948d	38		sec			sec
3620	.148e	80948e	e9 08		sbc #$08		sbc #8
3621	.1490	809490	9d 98 03	sta $800398,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3622	.1493	809493	9d 9a 03	sta $80039a,x		sta mplexBuffer.xpos+kEntsSpriteOffset+2,x	; right sprites are 24 over from that
3623	.1496	809496	18		clc			clc
3624	.1497	809497	69 18		adc #$18		adc #24
3625	.1499	809499	9d 99 03	sta $800399,x		sta mplexBuffer.xpos+kEntsSpriteOffset+1,x
3626	.149c	80949c	9d 9b 03	sta $80039b,x		sta mplexBuffer.xpos+kEntsSpriteOffset+3,x
3627	.149f	80949f	9e a8 01	stz $8001a8,x		stz EntityData.entState,x							; the main state is 0
3628	.14a2	8094a2	9e 25 02	stz $800225,x		stz EntityData.speed,x								; slow speed
3629	.14a5	8094a5	b1 00		lda ($00),y		lda (EntityDataPointer),y							; get the type and starting direction
3630	.14a7	8094a7	29 03		and #$03		and #3
3631	.14a9	8094a9	9d f9 00	sta $8000f9,x		sta EntityData.direction,x
3632	.14ac	8094ac	a9 19		lda #$19		lda #25
3633	.14ae	8094ae	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x							; set the move rate, so the boss pauses for a bit before starting
3634	.14b1	8094b1	9d 2c 01	sta $80012c,x		sta EntityData.movTimer+1,x
3635	.14b4	8094b4	e8		inx			inx
3636	.14b5	8094b5	e8		inx			inx
3637	.14b6	8094b6	e8		inx			inx														; x is now + 3 so when nextEnt is called it will be +4
3638	.14b7	8094b7	4c fc 93	jmp $8093fc		jmp _nextEnt
3639								;

3641	.14ba	8094ba					_BossOctopuss
3642	.14ba	8094ba	a9 09		lda #$09		lda #kEntity.octopuss
3643	.14bc	8094bc	9d e0 00	sta $8000e0,x		sta EntityData.type,x								; we are octopuss
3644	.14bf	8094bf	a9 0b		lda #$0b		lda #kEntity.octopussBody
3645	.14c1	8094c1	9d e1 00	sta $8000e1,x		sta EntityData.type+1,x								; and the body
3646	.14c4	8094c4	a9 09		lda #$09		lda #kBoss.hitPointsOctopuss
3647	.14c6	8094c6	9d 12 01	sta $800112,x		sta EntityData.active,x								; and use active for the number of hit points
3648	.14c9	8094c9	a9 72		lda #$72		lda #kDefault_OBSEL|kBossOctoBankOR				; enable the bear boss sprite bank
3649	.14cb	8094cb	4c 40 94	jmp $809440		jmp _sharedBoss

3651							.as
3652							.xs
3653	.14ce	8094ce					setEntitySprites
3654	.14ce	8094ce					_ASSERT_jsr
3655	.14ce	8094ce					_ASSERT_axy8
3656	.14ce	8094ce	ae df 00	ldx $8000df		ldx EntityData.number								; do we have any
3657	.14d1	8094d1	f0 1c		beq $8094ef		beq _exit
3658	.14d3	8094d3						_active
3659	.14d3	8094d3	86 02		stx $02				stx CurrentEntity
3660	.14d5	8094d5	bd e0 00	lda $8000e0,x			lda EntityData.type,x							; what type is it
3661	.14d8	8094d8	c9 08		cmp #$08			cmp #kEntity.bear
3662	.14da	8094da	f0 26		beq $809502			beq _bossBear										; handle boss sprites
3663	.14dc	8094dc	c9 0a		cmp #$0a				cmp #kEntity.bearBody
3664	.14de	8094de	f0 0c		beq $8094ec				beq _nextEnt									; body is done by main
3665	.14e0	8094e0	c9 09		cmp #$09					cmp #kEntity.octopuss					; handle octoposs
3666	.14e2	8094e2	f0 30		beq $809514					beq _bossOctopuss
3667	.14e4	8094e4	c9 0b		cmp #$0b						cmp #kEntity.octopussBody			; again body is done my main
3668	.14e6	8094e6	f0 04		beq $8094ec						beq _nextEnt
3669	.14e8	8094e8	a8		tay				tay
3670	.14e9	8094e9	20 62 9a	jsr $809a62			jsr setEntSpriteForDirection					; set the sprite
3671	.14ec	8094ec						_nextEnt
3672	.14ec	8094ec	ca		dex				dex
3673	.14ed	8094ed	10 e4		bpl $8094d3			bpl _active
3674	.14ef	8094ef					_exit
3675	.14ef	8094ef	ad 70 02	lda $800270		lda EntityData.numPipes								; do we have any pipes
3676	.14f2	8094f2	f0 0d		beq $809501		beq _exit2
3677	.14f4	8094f4	ae 7a 02	ldx $80027a			ldx EntityData.pipeBubbleStart
3678	.14f7	8094f7	a9 ff		lda #$ff			lda #$ff
3679	.14f9	8094f9					_loop
3680	.14f9	8094f9	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x		; set all the bubbles off screen
3681	.14fc	8094fc	e8		inx			inx
3682	.14fd	8094fd	e0 19		cpx #$19		cpx #kEntity.maxEntities
3683	.14ff	8094ff	d0 f8		bne $8094f9		bne _loop
3684	.1501	809501					_exit2
3685	.1501	809501	60		rts			rts
3686								;
3687	.1502	809502					_bossBear
244:1	.1502	809502	c2 20		rep #$20		REP #$20
3689:4	.1504	809504	a9 40 43	lda #$4340		lda #BearEntAnimData[1]<<8 | BearEntAnimData[0]		; set to frame for head right
3690	.1507	809507	9d 5d 01	sta $80015d,x		sta EntityData.animBase,x
3691	.150a	80950a	a9 4c 4e	lda #$4e4c		lda #BearBodyAnimData[1]<<8 | BearBodyAnimData[0]	; set to frame for body right
3692	.150d	80950d	9d 5f 01	sta $80015f,x		sta EntityData.animBase+2,x
240:1	.1510	809510	e2 20		sep #$20		SEP #$20
3694:4	.1512	809512	80 d8		bra $8094ec		bra _nextEnt

3696	.1514	809514					_bossOctopuss
244:1	.1514	809514	c2 20		rep #$20		REP #$20
3698:4	.1516	809516	a9 46 49	lda #$4946		lda #OctopussEntAnimData[1]<<8 |	OctopussEntAnimData[0]		; set to frame for head right
3699	.1519	809519	9d 5d 01	sta $80015d,x		sta EntityData.animBase,x
3700	.151c	80951c	a9 50 52	lda #$5250		lda #OctopussBodyAnimData[1]<<8 | OctopussBodyAnimData[0]	; set to frame for body right
3701	.151f	80951f	9d 5f 01	sta $80015f,x		sta EntityData.animBase+2,x
240:1	.1522	809522	e2 20		sep #$20		SEP #$20
3703:4	.1524	809524	80 c6		bra $8094ec		bra _nextEnt

3705							.as
3706							.xs
3707	.1526	809526					deactivateAllEntities
3708	.1526	809526					_ASSERT_jsr
3709	.1526	809526					_ASSERT_axy8
3710	.1526	809526	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3711	.1528	809528	9e 12 01	stz $800112,x	-	stz EntityData.active,x
3712	.152b	80952b	ca		dex			dex
3713	.152c	80952c	10 fa		bpl $809528		bpl -
3714	.152e	80952e	60		rts			rts

3716							.as
3717							.xs
3718							; build hte collision data for each ent first
3719	.152f	80952f					BuildEntCollisionTable
3720	.152f	80952f					_ASSERT_jsr
3721	.152f	80952f					_ASSERT_axy8
3722	.152f	80952f	a2 18		ldx #$18		ldx # kEntity.maxEntities-1	; for all possible ents
3723	.1531	809531					-
3724	.1531	809531	bd 12 01	lda $800112,x		lda EntityData.active,x			; if it active
3725	.1534	809534	f0 03		beq $809539		beq +
3726	.1536	809536	20 69 a0	jsr $80a069			jsr MakeMinMaxXYForX			; calc the collision box
3727	.1539	809539					+
3728	.1539	809539	ca		dex			dex
3729	.153a	80953a	10 f5		bpl $809531		bpl -
3730	.153c	80953c	60		rts			rts

3732							.as
3733							.xs
3734	.153d	80953d					addYDeltaEnt
3735	.153d	80953d					_ASSERT_jsr
3736	.153d	80953d					_ASSERT_axy8
3737	.153d	80953d	a6 02		ldx $02			ldx CurrentEntity
3738	.153f	80953f	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3739	.1542	809542	18		clc			clc
3740	.1543	809543	6d 9e 02	adc $80029e		adc checkSpriteToCharData.yDeltaCheck
3741	.1546	809546	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3742	.1549	809549	60		rts			rts

3744							.as
3745							.xs
3746	.154a	80954a					updateEntities
3747	.154a	80954a					_ASSERT_jsr
3748	.154a	80954a					_ASSERT_axy8
3749	.154a	80954a	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3750	.154c	80954c					innerEntitiesLoop
3751	.154c	80954c	bd 12 01	lda $800112,x		lda EntityData.active,x												; is it active
3752	.154f	80954f	d0 23		bne $809574		bne EntitiesActive
3753	.1551	809551	bd a8 01	lda $8001a8,x			lda EntityData.entState,x										; if the state is positive then its dead dead
3754	.1554	809554	10 1a		bpl $809570			bpl updateEntitiesLoop
3755	.1556	809556	c9 fe		cmp #$fe				cmp #kEntity.deadFromRedBullet							; is this dead dead?
3756	.1558	809558	f0 16		beq $809570				beq updateEntitiesLoop
3757	.155a	80955a	de 2b 01	dec $80012b,x					dec EntityData.movTimer,x								; count down the respawn timer
3758	.155d	80955d	bd 2b 01	lda $80012b,x					lda EntityData.movTimer,x
3759	.1560	809560	d0 0e		bne $809570					bne updateEntitiesLoop
3760	.1562	809562	bd 8f 01	lda $80018f,x						lda EntityData.originalY,x							; put the enemy back in the visible screen
3761	.1565	809565	9d da 03	sta $8003da,x						sta mplexBuffer.yPos+kEntsSpriteOffset,x
3762	.1568	809568	9e a8 01	stz $8001a8,x						stz EntityData.entState,x							; clear the state
3763	.156b	80956b	a9 01		lda #$01						lda #1
3764	.156d	80956d	9d 12 01	sta $800112,x						sta EntityData.active,x								; make it active again
3765	.1570	809570					updateEntitiesLoop
3766	.1570	809570	ca		dex			dex
3767	.1571	809571	10 d9		bpl $80954c		bpl innerEntitiesLoop
3768	.1573	809573	60		rts			rts

3770								.as
3771							.xs
3772	.1574	809574					EntitiesActive
3773	.1574	809574	86 02		stx $02			stx CurrentEntity
3774	.1576	809576	bd e0 00	lda $8000e0,x		lda EntityData.type,x
3775	.1579	809579	0a		asl a			asl a
3776	.157a	80957a	aa		tax			tax
3777	.157b	80957b	7c 7e 95	jmp ($80957e,x)		jmp (EntUpdateFuncLUT,x)
3778								; this table needs to be in kEntity order
3779	>157e	80957e	9a 95 02 98 9a 95 cd 99		EntUpdateFuncLUT .word <>(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)
	>1586	809586	19 99 c1 96 65 96 89 97 eb 9a eb 9a 36 9a 36 9a
	>1596	809596	3b 9a 36 9a

3781							.as
3782							.xs
3783	.159a	80959a					entNormalMovement								; this if for things that just move and don't stop till dead
3784	.159a	80959a					_ASSERT_jsr
3785	.159a	80959a					_ASSERT_axy8
3786	.159a	80959a	a6 02		ldx $02			ldx CurrentEntity
3787	.159c	80959c	20 7a 9a	jsr $809a7a		jsr updateEntAnimAndSetSprite			; updatge the animation
3788	.159f	80959f	b9 09 9d	lda $809d09,y		lda EntityAnimData.collisionBox,y	; y is the ent type
3789	.15a2	8095a2	85 1e		sta $1e			sta CollideSpriteBoxIndex
3471	.15a4	8095a4	e8		inx			inx
3472	.15a5	8095a5	e8		inx			inx
3791	.15a6	8095a6	86 1d		stx $1d			stx CollideSpriteToCheck
244:1	.15a8	8095a8	c2 20		rep #$20		REP #$20
3793:4	.15aa	8095aa	a9 f2 99	lda #$99f2		lda #<>handleEntCollisionResult		; set the post collision callback
3794	.15ad	8095ad	85 06		sta $06			sta Pointer1
240:1	.15af	8095af	e2 20		sep #$20		SEP #$20
3796:4	.15b1	8095b1	a6 02		ldx $02			ldx CurrentEntity
3797	.15b3	8095b3	bd 25 02	lda $800225,x		lda EntityData.speed,x					; cache the ent move speed in to y
3798	.15b6	8095b6	a8		tay			tay
3799	.15b7	8095b7	bd f9 00	lda $8000f9,x		lda EntityData.direction,x				; dispatch based upon direction
3800	.15ba	8095ba	0a		asl a			asl a
3801	.15bb	8095bb	aa		tax			tax
3802	.15bc	8095bc	64 05		stz $05			stz CollisionResult
3803	.15be	8095be	7c c1 95	jmp ($8095c1,x)		jmp (ENTDirectionCheckFuncLUT,x)
3804	>15c1	8095c1	d1 95 f6 95 1b 96 42 96		ENTDirectionCheckFuncLUT .word <>(entRight,entUp,entLeft,entDown)

3806							; this is ent direction per row and then slow,fast delta values
3807	>15c9	8095c9	02 04				entPositiveTBL		.byte  2, 4
3808	>15cb	8095cb	01 02				entPositiveTBLUD	.byte  1, 2
3809	>15cd	8095cd	fe fc				entNegativeTBL		.char -2,-4
3810	>15cf	8095cf	ff fe				entNegativeTBLUD	.char -1,-2

3812	.15d1	8095d1					entRight
3813	.15d1	8095d1					_ASSERT_axy8
3814	.15d1	8095d1	b9 c9 95	lda $8095c9,y		lda entPositiveTBL,y
3815	.15d4	8095d4	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck
3816	.15d7	8095d7	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
3817	.15da	8095da	a9 00		lda #$00		lda #0
3818	.15dc	8095dc	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck	; set X +ve Y 0
3819	.15df	8095df	8d 9f 02	sta $80029f		sta checkSpriteToCharData.yDeltaCheck.hi
3820	.15e2	8095e2					entRightNoDelta
3821	.15e2	8095e2					_ASSERT_axy8
3822	.15e2	8095e2	20 e9 9f	jsr $809fe9		jsr newCollision								; check it against the world
3823	.15e5	8095e5	a5 22		lda $22			lda CollideCharTRC							; get the Top right character
3824	.15e7	8095e7	20 9d a0	jsr $80a09d		jsr checkSolidTile							; is that solid?
3825	.15ea	8095ea	26 05		rol $05			rol CollisionResult							; store the C flag into the result
3826	.15ec	8095ec	a5 26		lda $26			lda CollideCharBRC							; get the Bottom right character
3827	.15ee	8095ee	20 9d a0	jsr $80a09d		jsr checkSolidTile							; is that solid?
3828	.15f1	8095f1	26 05		rol $05			rol CollisionResult							; store the C flag into the result so we have both
3829	.15f3	8095f3	6c 06 00	jmp ($0006)		jmp (Pointer1)									; call the callback

3831	.15f6	8095f6					entUp
3832	.15f6	8095f6					_ASSERT_axy8
3833	.15f6	8095f6	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck
3834	.15f9	8095f9	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
3835	.15fc	8095fc	b9 cf 95	lda $8095cf,y		lda entNegativeTBLUD,y
3836	.15ff	8095ff	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck	; set X 0 Y -ve
3837	.1602	809602	a9 ff		lda #$ff		lda #$ff
3838	.1604	809604	8d 9f 02	sta $80029f		sta checkSpriteToCharData.yDeltaCheck.hi
3839	.1607	809607					entUpNoDelta
3840	.1607	809607					_ASSERT_axy8
3841	.1607	809607	20 e9 9f	jsr $809fe9		jsr newCollision
3842	.160a	80960a	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3843	.160c	80960c	20 9d a0	jsr $80a09d		jsr checkSolidTile
3844	.160f	80960f	26 05		rol $05			rol CollisionResult
3845	.1611	809611	a5 22		lda $22			lda CollideCharTRC							; check Top Right Char
3846	.1613	809613	20 9d a0	jsr $80a09d		jsr checkSolidTile
3847	.1616	809616	26 05		rol $05			rol CollisionResult
3848	.1618	809618	6c 06 00	jmp ($0006)		jmp (Pointer1)

3850	.161b	80961b					entLeft
3851	.161b	80961b					_ASSERT_axy8
3852	.161b	80961b	b9 cd 95	lda $8095cd,y		lda entNegativeTBL,y
3853	.161e	80961e	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck
3854	.1621	809621	a9 ff		lda #$ff		lda #$ff
3855	.1623	809623	8d 9d 02	sta $80029d		sta checkSpriteToCharData.xDeltaCheck.hi
3856	.1626	809626	a9 00		lda #$00		lda #0
3857	.1628	809628	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck	; set X -ve Y 0
3858	.162b	80962b	8d 9f 02	sta $80029f		sta checkSpriteToCharData.yDeltaCheck.hi
3859	.162e	80962e					entLeftNoDelta
3860	.162e	80962e					_ASSERT_axy8
3861	.162e	80962e	20 e9 9f	jsr $809fe9		jsr newCollision
3862	.1631	809631	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3863	.1633	809633	20 9d a0	jsr $80a09d		jsr checkSolidTile
3864	.1636	809636	26 05		rol $05			rol CollisionResult
3865	.1638	809638	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3866	.163a	80963a	20 9d a0	jsr $80a09d		jsr checkSolidTile
3867	.163d	80963d	26 05		rol $05			rol CollisionResult
3868	.163f	80963f	6c 06 00	jmp ($0006)		jmp (Pointer1)

3870	.1642	809642					entDown
3871	.1642	809642					_ASSERT_axy8
3872	.1642	809642	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck
3873	.1645	809645	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
3874	.1648	809648	b9 cb 95	lda $8095cb,y		lda entPositiveTBLUD,y
3875	.164b	80964b	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck	; set X - Y +ve
3876	.164e	80964e	9c 9f 02	stz $80029f		stz checkSpriteToCharData.yDeltaCheck.hi
3877	.1651	809651					entDownNoDelta
3878	.1651	809651					_ASSERT_axy8
3879	.1651	809651	20 e9 9f	jsr $809fe9		jsr newCollision
3880	.1654	809654	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3881	.1656	809656	20 9d a0	jsr $80a09d		jsr checkSolidTile
3882	.1659	809659	26 05		rol $05			rol CollisionResult
3883	.165b	80965b	a5 26		lda $26			lda CollideCharBRC							; check Bottom Right Char
3884	.165d	80965d	20 9d a0	jsr $80a09d		jsr checkSolidTile
3885	.1660	809660	26 05		rol $05			rol CollisionResult
3886	.1662	809662	6c 06 00	jmp ($0006)		jmp (Pointer1)

3888	.1665	809665					entFishFunc
3889	.1665	809665					_ASSERT_axy8
3890	.1665	809665	a6 02		ldx $02			ldx CurrentEntity
3891	.1667	809667	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x
3892	.166a	80966a	bd 2b 01	lda $80012b,x		lda EntityData.movTimer,x					; time to update ?
3893	.166d	80966d	30 0e		bmi $80967d		bmi _next
3894	.166f	80966f	29 01		and #$01			and #1										; if an even frame skip
3895	.1671	809671	d0 07		bne $80967a			bne _exit
3896	.1673	809673	bd a8 01	lda $8001a8,x				lda EntityData.entState,x			; if we were moved to have to move faster
3897	.1676	809676	f0 02		beq $80967a				beq _exit
3898	.1678	809678	80 17		bra $809691					bra _keepGoing						; move again, aka double the speed
3899	.167a	80967a					_exit
3900	.167a	80967a	4c 36 9a	jmp $809a36		jmp NextEnt
3901								;
3902	.167d	80967d					_next
3903	.167d	80967d	a9 04		lda #$04		lda #4
3904	.167f	80967f	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x
3905	.1682	809682					_moveFish
3906	.1682	809682	bd a8 01	lda $8001a8,x		lda EntityData.entState,x					; in ent state
3907	.1685	809685	18		clc			clc
3908	.1686	809686	69 01		adc #$01		adc #1
3909	.1688	809688	c9 22		cmp #$22		cmp #kSinJumpMax								; move to next in table and clamp highest
3910	.168a	80968a	d0 02		bne $80968e		bne _storeDirect
3911	.168c	80968c	a9 21		lda #$21			lda #kSinJumpMax-1
3912	.168e	80968e					_storeDirect
3913	.168e	80968e	9d a8 01	sta $8001a8,x		sta EntityData.entState,x
3914	.1691	809691					_keepGoing
3915	.1691	809691	a8		tay			tay
3916	.1692	809692	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3917	.1695	809695	18		clc			clc
3918	.1696	809696	79 1f 9d	adc $809d1f,y		adc SinJumpTable,y							; add Y up to to the limit
3919	.1699	809699	c9 c5		cmp #$c5		cmp #kFishLimits.maxY
3920	.169b	80969b	90 0a		bcc $8096a7		bcc _store
3921	.169d	80969d	9e a8 01	stz $8001a8,x			stz EntityData.entState,x				; reset the state
3922	.16a0	8096a0	a9 20		lda #$20			lda #32
3923	.16a2	8096a2	9d 2b 01	sta $80012b,x			sta EntityData.movTimer,x				; pause for a bit while you flip
3924	.16a5	8096a5	a9 c5		lda #$c5			lda #kFishLimits.maxY
3925	.16a7	8096a7					_store
3926	.16a7	8096a7	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3927	.16aa	8096aa	bd a8 01	lda $8001a8,x		lda EntityData.entState,x					; set the anim frame from table index / 4
3928	.16ad	8096ad	4a		lsr a			lsr a
3929	.16ae	8096ae	4a		lsr a			lsr a												; div 4
3930	.16af	8096af	c9 08		cmp #$08		cmp #8
3931	.16b1	8096b1	90 02		bcc $8096b5		bcc _safe
3932	.16b3	8096b3	a9 07		lda #$07			lda #7
3933	.16b5	8096b5					_safe
3934	.16b5	8096b5	18		clc			clc
3935	.16b6	8096b6	69 30		adc #$30		adc #FishRawAnimData[0]						; use the left frame
3936	.16b8	8096b8	9d 5d 01	sta $80015d,x		sta EntityData.animBase,x
3937	.16bb	8096bb	9e 76 01	stz $800176,x		stz EntityData.animFrame,x
3938	.16be	8096be	4c 36 9a	jmp $809a36		jmp nextEnt

3940	.16c1	8096c1					entSpiderFunc
3941	.16c1	8096c1					_ASSERT_axy8
3942	.16c1	8096c1	a6 02		ldx $02			ldx CurrentEntity
3943	.16c3	8096c3	bd a8 01	lda $8001a8,x		lda EntityData.entState,x
3944	.16c6	8096c6	0a		asl a			asl a
3945	.16c7	8096c7	aa		tax			tax
3946	.16c8	8096c8	7c cb 96	jmp ($8096cb,x)		jmp (SpiderEntFuncLUT,x)
3947	>16cb	8096cb	d1 96 26 97 69 97		SpiderEntFuncLUT .word <> (spiderLookPlayer,spiderFall,spiderRise)

3949	.16d1	8096d1					spiderLookPlayer
3950	.16d1	8096d1					_ASSERT_axy8
3951	.16d1	8096d1	a2 00		ldx #$00		ldx #0
3952	.16d3	8096d3	86 10		stx $10			stx ZPTemp2
3953	.16d5	8096d5	ad 96 03	lda $800396		lda mplexBuffer.xpos
3954	.16d8	8096d8	85 0f		sta $0f			sta ZPTemp											; store the player X
3955	.16da	8096da	a6 02		ldx $02			ldx CurrentEntity
3471	.16dc	8096dc	e8		inx			inx
3472	.16dd	8096dd	e8		inx			inx
3957	.16de	8096de	bd 96 03	lda $800396,x		lda mplexBuffer.xpos,x
3958	.16e1	8096e1	e5 0f		sbc $0f			sbc ZPTemp
3959	.16e3	8096e3	85 0f		sta $0f			sta ZPTemp											; my X - playerX
3960	.16e5	8096e5	b0 26		bcs $80970d		bcs _left
3961	.16e7	8096e7	c9 d1		cmp #$d1			cmp #kSpiderValues.rightStartWiggle		; player is to my right but are they in wiggle distance
3962	.16e9	8096e9	90 11		bcc $8096fc			bcc +
3963	.16eb	8096eb	a9 01		lda #$01				lda #1										; yes set animation to wiggle
3964	.16ed	8096ed	85 10		sta $10					sta ZPTemp2
3965	.16ef	8096ef	a5 0f		lda $0f					lda ZPTemp
3966	.16f1	8096f1	c9 e1		cmp #$e1				cmp #kSpiderValues.rightStartFall	; is it it fall distance
3967	.16f3	8096f3	90 07		bcc $8096fc				bcc +
3968	.16f5	8096f5	a9 01		lda #$01					lda #1
3969	.16f7	8096f7	a6 02		ldx $02						ldx CurrentEntity
3970	.16f9	8096f9	9d a8 01	sta $8001a8,x					sta EntityData.entState,x			; set to falling state
3971	.16fc	8096fc	a9 2a		lda #$2a		+	lda #kSprites.spiderRight					; no
3972	.16fe	8096fe						_storeSprite
3973	.16fe	8096fe	a6 02		ldx $02				ldx CurrentEntity
3974	.1700	809700	9d 5d 01	sta $80015d,x			sta EntityData.animBase,x					; store the animation
3975	.1703	809703	a5 10		lda $10				lda ZPTemp2
3976	.1705	809705	f0 03		beq $80970a			beq _noAnim										; are we going to wiggle?
3977	.1707	809707	20 7a 9a	jsr $809a7a				jsr updateEntAnimAndSetSprite
3978	.170a	80970a						_noAnim
3979	.170a	80970a	4c 36 9a	jmp $809a36			jmp nextEnt
3980									;
3981	.170d	80970d					_left
3982	.170d	80970d	c9 2e		cmp #$2e		cmp #kSpiderValues.leftStartWiggle			; left side, are we on the left side
3983	.170f	80970f	b0 11		bcs $809722		bcs +
3984	.1711	809711	a9 01		lda #$01			lda #1
3985	.1713	809713	85 10		sta $10				sta ZPTemp2										; we want wriggle animation
3986	.1715	809715	a5 0f		lda $0f				lda ZPTemp
3987	.1717	809717	c9 1e		cmp #$1e			cmp #kSpiderValues.leftStartFall			; in fall distance
3988	.1719	809719	b0 07		bcs $809722			bcs +
3989	.171b	80971b	a9 01		lda #$01				lda #1
3990	.171d	80971d	a6 02		ldx $02					ldx CurrentEntity							; go the fall difference
3991	.171f	80971f	9d a8 01	sta $8001a8,x				sta EntityData.entState,x
3992	.1722	809722	a9 28		lda #$28	+	lda #kSprites.spiderLeft						; set to left animation
3993	.1724	809724	80 d8		bra $8096fe		bra _storeSprite
3994								;

3996	.1726	809726					spiderFall
3997	.1726	809726					_ASSERT_axy8
3998	.1726	809726	a6 02		ldx $02			ldx CurrentEntity
3999	.1728	809728	20 7a 9a	jsr $809a7a		jsr updateEntAnimAndSetSprite					; update the animation as we are wiggling
4000	.172b	80972b	ad 0e 9d	lda $809d0e		lda EntityAnimData.collisionBox+kEntity.spider
4001	.172e	80972e	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set the collision as we fall till we hit something
4002	.1730	809730	a6 02		ldx $02			ldx CurrentEntity
3471	.1732	809732	e8		inx			inx
3472	.1733	809733	e8		inx			inx
4004	.1734	809734	86 1d		stx $1d			stx CollideSpriteToCheck
4005	.1736	809736	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck
4006	.1739	809739	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
4007	.173c	80973c	a9 02		lda #$02		lda #kSpiderValues.yFallDelta
4008	.173e	80973e	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck		; check below me
4009	.1741	809741	20 e9 9f	jsr $809fe9		jsr newCollision
4010	.1744	809744	a5 24		lda $24			lda CollideCharBLC								; is the bottom left char solid
4011	.1746	809746	20 9d a0	jsr $80a09d		jsr checkSolidTile								; spiders are tile aligned so if you hit the left you hit the right
4012	.1749	809749	90 0f		bcc $80975a		bcc _noColide
4013	.174b	80974b						_collide
4014	.174b	80974b	a9 02		lda #$02			lda #2
4015	.174d	80974d	a6 02		ldx $02				ldx CurrentEntity
4016	.174f	80974f	9d a8 01	sta $8001a8,x			sta EntityData.entState,x					; set to the rise state
4017	.1752	809752	a9 20		lda #$20			lda #kSpiderValues.pauseEndFallFrames
4018	.1754	809754	9d 2b 01	sta $80012b,x			sta EntityData.movTimer,x					; make it stop for a bit first
4019	.1757	809757	4c 36 9a	jmp $809a36			jmp nextEnt
4020									;
4021	.175a	80975a					_noColide
4022	.175a	80975a	a6 02		ldx $02			ldx CurrentEntity
4023	.175c	80975c	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4024	.175f	80975f	c9 b0		cmp #$b0		cmp #kBounds.screenMaxY-16						; make sure we don't go off the bottom of the screen
4025	.1761	809761	b0 e8		bcs $80974b		bcs _collide
4026	.1763	809763	20 3d 95	jsr $80953d			jsr addYDeltaEnt
4027	.1766	809766	4c 36 9a	jmp $809a36			jmp nextEnt

4029	.1769	809769					spiderRise
4030	.1769	809769					_ASSERT_axy8
4031	.1769	809769	a6 02		ldx $02			ldx CurrentEntity
4032	.176b	80976b	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x
4033	.176e	80976e	10 16		bpl $809786		bpl +
4034	.1770	809770	a9 03		lda #$03			lda #kSpiderValues.riseDelayTime				; set to the slower rise time
4035	.1772	809772	9d 2b 01	sta $80012b,x			sta EntityData.movTimer,x
4036	.1775	809775	bd da 03	lda $8003da,x			lda mplexBuffer.ypos+kEntsSpriteOffset,x
4037	.1778	809778	38		sec				sec
4038	.1779	809779	e9 01		sbc #$01			sbc #1
4039	.177b	80977b	9d da 03	sta $8003da,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x	; move up slowly
4040	.177e	80977e	dd 8f 01	cmp $80018f,x			cmp EntityData.originalY,x						; until we hit the spawn height
4041	.1781	809781	d0 03		bne $809786			bne +
4042	.1783	809783	9e a8 01	stz $8001a8,x				stz EntityData.entState,x					; return to wait state
4043	.1786	809786	4c 36 9a	jmp $809a36	+	jmp nextEnt

4045	.1789	809789					circlerFunc
4046	.1789	809789					_ASSERT_axy8
4047	.1789	809789	a6 02		ldx $02			ldx CurrentEntity
4048	.178b	80978b	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x							; time to move?
4049	.178e	80978e	30 03		bmi $809793		bmi _cirActive
4050	.1790	809790	4c 36 9a	jmp $809a36			jmp nextEnt
4051	.1793	809793					_cirActive
4052	.1793	809793	a9 04		lda #$04		lda #4
4053	.1795	809795	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x							; set timer
4054	.1798	809798	bd a8 01	lda $8001a8,x		lda EntityData.entState,x							; state in this case is circle table index
4055	.179b	80979b	a4 02		ldy $02			ldy CurrentEntity
4056	.179d	80979d	aa		tax			tax
4057	.179e	80979e	bd 64 9d	lda $809d64,x		lda CircleJumpTableStart,x
4058	.17a1	8097a1	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck			; set the x Delta
4059	.17a4	8097a4	10 07		bpl $8097ad		bpl +
4060	.17a6	8097a6	a9 ff		lda #$ff			lda #$ff
4061	.17a8	8097a8	8d 9d 02	sta $80029d			sta checkSpriteToCharData.xDeltaCheck.hi
4062	.17ab	8097ab	80 03		bra $8097b0			bra ++
4063	.17ad	8097ad	9c 9d 02	stz $80029d	+	stz checkSpriteToCharData.xDeltaCheck.hi
4064	.17b0	8097b0					+	; add X with MSB offset
4065	.17b0	8097b0	b9 98 03	lda $800398,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4066	.17b3	8097b3	18		clc			clc
4067	.17b4	8097b4	6d 9c 02	adc $80029c		adc checkSpriteToCharData.xDeltaCheck
4068	.17b7	8097b7	85 0f		sta $0f			sta ZPTemp												; get the new X position
4069								; xdelta +ve if this is +ve but original was -ve we have gone over
4070	.17b9	8097b9	ad 9c 02	lda $80029c		lda checkSpriteToCharData.xDeltaCheck
4071	.17bc	8097bc	30 10		bmi $8097ce		bmi _subbedX
4072	.17be	8097be	b9 98 03	lda $800398,y			lda mplexBuffer.xpos+kEntsSpriteOffset,y
4073	.17c1	8097c1	10 19		bpl $8097dc			bpl _loadX
4074										; so last pos in negative >80
4075	.17c3	8097c3	a5 0f		lda $0f					lda ZPTemp
4076	.17c5	8097c5	30 15		bmi $8097dc				bmi _storeX
4077										; new pos is positive 0-80
4078	.17c7	8097c7	a9 01		lda #$01					lda #1			; enable MSB
4079	.17c9	8097c9	99 b9 03	sta $8003b9,y					sta mplexBuffer.xmsb+kEntsSpriteOffset,y ; was >80 now <80 gone over 256
4080	.17cc	8097cc	80 0e		bra $8097dc					bra _storeX
4081	.17ce	8097ce					_subbedX
4082								; xdelta -ve if this is -ve but original was +ve we have gone over
4083	.17ce	8097ce	b9 98 03	lda $800398,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4084	.17d1	8097d1	30 09		bmi $8097dc		bmi _loadX
4085									; last post is positive >80
4086	.17d3	8097d3	a5 0f		lda $0f				lda ZPTemp
4087	.17d5	8097d5	10 05		bpl $8097dc			bpl _storeX
4088	.17d7	8097d7	a9 00		lda #$00				lda #0												; was <80 now > 80 gone under 0
4089	.17d9	8097d9	99 b9 03	sta $8003b9,y				sta mplexBuffer.xmsb+kEntsSpriteOffset,y	; clear msb
4090	.17dc	8097dc					_loadX
4091	.17dc	8097dc					_storeX
4092	.17dc	8097dc	a5 0f		lda $0f			lda ZPTemp
4093	.17de	8097de	99 98 03	sta $800398,y		sta mplexBuffer.xpos+kEntsSpriteOffset,y			; set final X position
4094								; now to do it for the Y
4095	.17e1	8097e1	b9 da 03	lda $8003da,y		lda mplexBuffer.ypos+kEntsSpriteOffset,y
4096	.17e4	8097e4	18		clc			clc
4097	.17e5	8097e5	7d 71 9d	adc $809d71,x		adc CircleJumpTableStart+(CircleJumpTableCount/4)+1,x	; this is basically COS Theta = SIN Theta+90
4098	.17e8	8097e8	99 da 03	sta $8003da,y		sta mplexBuffer.ypos+kEntsSpriteOffset,y					; the table is longer with repeats to avoid needing to wrap
4099	.17eb	8097eb	a6 02		ldx $02			ldx CurrentEntity
4100	.17ed	8097ed	bd a8 01	lda $8001a8,x		lda EntityData.entState,x
4101	.17f0	8097f0	18		clc			clc
4102	.17f1	8097f1	69 01		adc #$01		adc #1
4103	.17f3	8097f3	c9 30		cmp #$30		cmp # CircleJumpTableCount
4104	.17f5	8097f5	d0 02		bne $8097f9		bne _cirStore
4105	.17f7	8097f7	a9 00		lda #$00			lda #0
4106	.17f9	8097f9					_cirStore
4107	.17f9	8097f9	9d a8 01	sta $8001a8,x		sta EntityData.entState,x										; cicle index += 1 and wrap at length
4108	.17fc	8097fc	20 7a 9a	jsr $809a7a		jsr updateEntAnimAndSetSprite
4109	.17ff	8097ff	4c 36 9a	jmp $809a36		jmp nextEnt

4111	.1802	809802					springEntFunc
4112	.1802	809802	a6 02		ldx $02			ldx CurrentEntity
4113	.1804	809804	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x										; time to move?
4114	.1807	809807	30 03		bmi $80980c		bmi _move
4115	.1809	809809	4c 36 9a	jmp $809a36			jmp nextEnt
4116									;
4117	.180c	80980c					_move
4118	.180c	80980c	a9 03		lda #$03		lda #3
4119	.180e	80980e	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x
4120								; update Y component
4121	.1811	809811	bd a8 01	lda $8001a8,x		lda EntityData.entState,x
4122	.1814	809814	85 0f		sta $0f			sta ZPTemp
4123	.1816	809816	a8		tay			tay
4124	.1817	809817	b9 1f 9d	lda $809d1f,y		lda SinJumpTable,y
4125	.181a	80981a	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck						; first we check down on the jump
4126	.181d	80981d	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck
4127	.1820	809820	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
4128	.1823	809823	64 05		stz $05			stz CollisionResult
4129	.1825	809825	a9 02		lda #$02		lda #2																; this might change per frame
4130	.1827	809827	85 1e		sta $1e			sta CollideSpriteBoxIndex										; it hasn't but that is something you might want to improve
3471	.1829	809829	e8		inx			inx
3472	.182a	80982a	e8		inx			inx
4132	.182b	80982b	86 1d		stx $1d			stx CollideSpriteToCheck
244:1	.182d	80982d	c2 20		rep #$20		REP #$20
4134:4	.182f	80982f	a9 48 98	lda #$9848		lda #<>springEntYCollideEnd									; set post collision callback
4135	.1832	809832	85 06		sta $06			sta Pointer1
240:1	.1834	809834	e2 20		sep #$20		SEP #$20
4137:4	.1836	809836	a5 0f		lda $0f			lda ZPTemp
4138	.1838	809838	c9 11		cmp #$11		cmp #kSinJumpFall													; this is the index where the table goes from -ve to +ve
4139	.183a	80983a	b0 07		bcs $809843		bcs _falling
4140									; rising
4141	.183c	80983c	a9 11		lda #$11			lda #kSinJumpFall												; start falling index in case of contact
4142	.183e	80983e	85 10		sta $10				sta ZPTemp2
4143	.1840	809840	4c 07 96	jmp $809607			jmp entUpNoDelta
4144									;
4145	.1843	809843					_falling
4146	.1843	809843	64 10		stz $10			stz ZPTemp2															; hit ground, start jumping
4147	.1845	809845	4c 51 96	jmp $809651		jmp entDownNoDelta
4148								;
4149	.1848	809848					springEntYCollideEnd
4150	.1848	809848					_ASSERT_axy8
4151	.1848	809848	a5 05		lda $05			lda CollisionResult
4152	.184a	80984a	d0 21		bne $80986d		bne _hit
4153	.184c	80984c	20 78 9f	jsr $809f78			jsr collideEntAgainstRest
4154	.184f	80984f	b0 1c		bcs $80986d			bcs _hit
4155	.1851	809851	a6 02		ldx $02					ldx CurrentEntity											; didn't hit so carry on
4156	.1853	809853	bd da 03	lda $8003da,x				lda mplexBuffer.ypos+kEntsSpriteOffset,x
4157										;clc
4158	.1856	809856	6d 9e 02	adc $80029e				adc checkSpriteToCharData.yDeltaCheck
4159	.1859	809859	9d da 03	sta $8003da,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
4160	.185c	80985c	bd a8 01	lda $8001a8,x				lda EntityData.entState,x								; move to next state in the arc
4161	.185f	80985f	18		clc					clc
4162	.1860	809860	69 01		adc #$01				adc #1
4163	.1862	809862	c9 22		cmp #$22				cmp #kSinJumpMax											; clamp to max fall speed
4164	.1864	809864	90 02		bcc $809868				bcc _store
4165	.1866	809866	a9 21		lda #$21					lda #kSinJumpMax-1
4166	.1868	809868					_store
4167	.1868	809868					_ASSERT_A_lt_34
4168	.1868	809868	9d a8 01	sta $8001a8,x		sta EntityData.entState,x
4169	.186b	80986b	80 07		bra $809874		gra springEntHandleX
4170								;
4171	.186d	80986d					_hit
4172	.186d	80986d	a6 02		ldx $02			ldx CurrentEntity
4173	.186f	80986f	a5 10		lda $10			lda ZPTemp2															; this was set to the target jump index pre coll function
4174	.1871	809871						_ASSERT2_A_lt_34
4175	.1871	809871	9d a8 01	sta $8001a8,x		sta EntityData.entState,x
4176	.1874	809874					springEntHandleX
4177	.1874	809874	9c 9e 02	stz $80029e		stz checkSpriteToCharData.yDeltaCheck						; now Y has been delt with, do the X
4178	.1877	809877	64 05		stz $05			stz CollisionResult
244:1	.1879	809879	c2 20		rep #$20		REP #$20
4180:4	.187b	80987b	a9 a1 98	lda #$98a1		lda #<>springEntXCollideEnd									; set the post collision callback
4181	.187e	80987e	85 06		sta $06			sta Pointer1
240:1	.1880	809880	e2 20		sep #$20		SEP #$20
4183:4	.1882	809882	bd f9 00	lda $8000f9,x		lda EntityData.direction,x
4184	.1885	809885	85 0f		sta $0f			sta ZPTemp															; preserve the direction
4185	.1887	809887	18		clc			clc
4186	.1888	809888	69 04		adc #$04		adc #4																; the table is -4 and + 4 values, but indexing is unsinged
4187	.188a	80988a	a8		tay			tay																	; so offset by 4 to make it 0 based
4188	.188b	80988b	b9 17 9d	lda $809d17,y		lda SpringDirectionToDeltaLUT,y
4189	.188e	80988e	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck
4190	.1891	809891	30 06		bmi $809899		bmi _left
4191	.1893	809893	9c 9d 02	stz $80029d			stz checkSpriteToCharData.xDeltaCheck.hi
4192	.1896	809896	4c e2 95	jmp $8095e2			jmp entRightNoDelta
4193									;
4194	.1899	809899					_left
4195	.1899	809899	a9 ff		lda #$ff		lda #$ff
4196	.189b	80989b	8d 9d 02	sta $80029d		sta checkSpriteToCharData.xDeltaCheck.hi
4197	.189e	80989e	4c 2e 96	jmp $80962e		jmp entLeftNoDelta
4198								;
4199	.18a1	8098a1					springEntXCollideEnd
4200	.18a1	8098a1	a6 02		ldx $02			ldx CurrentEntity
4201	.18a3	8098a3	a5 0f		lda $0f			lda ZPTemp
4202	.18a5	8098a5	30 30		bmi $8098d7		bmi springEntXLeft												; is the preserved direction negative
4203	.18a7	8098a7	a5 05		lda $05				lda CollisionResult
4204	.18a9	8098a9	f0 09		beq $8098b4			beq _noCollideRight
4205	.18ab	8098ab							_hit
4206	.18ab	8098ab	a9 ff		lda #$ff				lda #-1
4207	.18ad	8098ad	a6 02		ldx $02					ldx CurrentEntity
4208	.18af	8098af	9d f9 00	sta $8000f9,x				sta EntityData.direction,x								; go the other way slowly at first
4209	.18b2	8098b2	80 54		bra $809908				bra springEndAnimate
4210										;
4211	.18b4	8098b4						_noCollideRight
4212	.18b4	8098b4	20 78 9f	jsr $809f78			jsr collideEntAgainstRest									; did we hit any ents?
4213	.18b7	8098b7	b0 f2		bcs $8098ab			bcs _hit
4214	.18b9	8098b9	a6 02		ldx $02					ldx CurrentEntity
3471	.18bb	8098bb	e8		inx			inx
3472	.18bc	8098bc	e8		inx			inx
4216	.18bd	8098bd	20 c7 85	jsr $8085c7				jsr addXWithMSBAndClip_88								; didn't hit so move x
3476	.18c0	8098c0	ca		dex			dex
3477	.18c1	8098c1	ca		dex			dex
4218	.18c2	8098c2	a5 2f		lda $2f					lda DidClipX												; if we clip then we need to go the other way
4219	.18c4	8098c4	f0 04		beq $8098ca				beq _noclip
4220	.18c6	8098c6	a9 ff		lda #$ff					lda #-1
4221	.18c8	8098c8	30 08		bmi $8098d2					bmi _store
4222	.18ca	8098ca							_noclip
4223	.18ca	8098ca	bd f9 00	lda $8000f9,x				lda EntityData.direction,x								; accelerate right, this gives the spring a sense of interia
4224	.18cd	8098cd	18		clc					clc
4225	.18ce	8098ce	69 01		adc #$01				adc #1
4226	.18d0	8098d0	29 03		and #$03				and #3
4227	.18d2	8098d2							_store
4228	.18d2	8098d2	9d f9 00	sta $8000f9,x				sta EntityData.direction,x
4229	.18d5	8098d5	80 31		bra $809908				gra springEndAnimate
4230										;
4231	.18d7	8098d7					springEntXLeft
4232	.18d7	8098d7	a5 05		lda $05			lda CollisionResult
4233	.18d9	8098d9	f0 09		beq $8098e4		beq _noCollideLeft
4234	.18db	8098db						_hit
4235	.18db	8098db	a9 01		lda #$01			lda #1
4236	.18dd	8098dd	a6 02		ldx $02				ldx CurrentEntity
4237	.18df	8098df	9d f9 00	sta $8000f9,x			sta EntityData.direction,x									; hit wall, so start moving right slowly
4238	.18e2	8098e2	80 24		bra $809908			gra springEndAnimate
4239									;
4240	.18e4	8098e4					_noCollideLeft
4241	.18e4	8098e4	20 78 9f	jsr $809f78		jsr collideEntAgainstRest										; did we hit an ent?
4242	.18e7	8098e7	b0 f2		bcs $8098db		bcs _hit
4243	.18e9	8098e9	a6 02		ldx $02				ldx CurrentEntity												; no move on the X
3471	.18eb	8098eb	e8		inx			inx
3472	.18ec	8098ec	e8		inx			inx
4245	.18ed	8098ed	20 c7 85	jsr $8085c7			jsr addXWithMSBAndClip_88
3476	.18f0	8098f0	ca		dex			dex
3477	.18f1	8098f1	ca		dex			dex
4247	.18f2	8098f2	a5 2f		lda $2f				lda DidClipX													; did we hit a wall?
4248	.18f4	8098f4	f0 04		beq $8098fa			beq _noclip2
4249	.18f6	8098f6	a9 01		lda #$01				lda #1
4250	.18f8	8098f8	80 0b		bra $809905				bra _store2													; start going right slowly then
4251										;
4252	.18fa	8098fa					_noClip2
4253	.18fa	8098fa	bd f9 00	lda $8000f9,x		lda EntityData.direction,x
4254	.18fd	8098fd	38		sec			sec
4255	.18fe	8098fe	e9 01		sbc #$01		sbc #1
4256	.1900	809900	c9 fb		cmp #$fb		cmp #256-5															; accelerate left
4257	.1902	809902	d0 01		bne $809905		bne _store2
4258	.1904	809904	1a		inc a				inc a  ;256-4
4259	.1905	809905					_store2
4260	.1905	809905	9d f9 00	sta $8000f9,x		sta EntityData.direction,x
4261	.1908	809908					springEndAnimate
4262	.1908	809908	a6 02		ldx $02			ldx CurrentEntity
4263	.190a	80990a	bc a8 01	ldy $8001a8,x		ldy EntityData.entState,x
4264	.190d	80990d	b9 42 9d	lda $809d42,y		lda SpringFrameFrameTable,y
4265	.1910	809910	9d 5d 01	sta $80015d,x		sta EntityData.animBase,x										; explicty set the frame
4266	.1913	809913	9e 76 01	stz $800176,x		stz EntityData.animFrame,x										; with no offset
4267	.1916	809916	4c 36 9a	jmp $809a36		jmp nextEnt
4268								;

4270	.1919	809919					entGhostFunc
4271	.1919	809919					_ASSERT_axy8
4272	.1919	809919	a6 02		ldx $02			ldx CurrentEntity
244:1	.191b	80991b	c2 20		rep #$20		REP #$20
4274:4	.191d	80991d	a9 44 99	lda #$9944		lda #<>entGhostXResults											; set post collsion callback
4275	.1920	809920	85 06		sta $06			sta Pointer1
240:1	.1922	809922	e2 20		sep #$20		SEP #$20
3471:4	.1924	809924	e8		inx			inx
3472	.1925	809925	e8		inx			inx
4278	.1926	809926	86 1d		stx $1d			stx CollideSpriteToCheck
4279	.1928	809928	a6 02		ldx $02			ldx CurrentEntity
4280	.192a	80992a	bd 25 02	lda $800225,x		lda EntityData.speed,x
4281	.192d	80992d	a8		tay			tay																	; read the speed and prep it for the call
4282	.192e	80992e	bd f9 00	lda $8000f9,x		lda EntityData.direction,x										; read the direction and clamp it if needed
4283	.1931	809931	c9 04		cmp #$04		cmp #4
4284	.1933	809933	90 05		bcc $80993a		bcc +
4285	.1935	809935	a9 00		lda #$00			lda #0
4286	.1937	809937	9d f9 00	sta $8000f9,x			sta EntityData.direction,x
4287								; 0 00= UpRight
4288								; 1 01= UpLeft
4289	.193a	80993a	29 01		and #$01	+	and #1
4290	.193c	80993c	f0 03		beq $809941		beq ghostLeft
4291							; ghostRight
4292	.193e	80993e	4c d1 95	jmp $8095d1			jmp entRight
4293	.1941	809941					ghostLeft
4294	.1941	809941	4c 1b 96	jmp $80961b		jmp entLeft
4295								;

4297	.1944	809944					entGhostXResults
4298	.1944	809944					_ASSERT_axy8
4299	.1944	809944	a6 02		ldx $02			ldx CurrentEntity
4300	.1946	809946	a5 05		lda $05			lda CollisionResult
4301	.1948	809948	f0 1b		beq $809965		beq _addXDelta
4302	.194a	80994a						_toggleX
4303	.194a	80994a	a6 02		ldx $02				ldx CurrentEntity
4304	.194c	80994c	bd 3e 02	lda $80023e,x			lda EntityData.ignoreColl,x						; this end moves diagionally, which presents issues forf
4305	.194f	80994f	d0 23		bne $809974			bne _ignoreCollision									; choosing the next move direction, as you can hit a corner
4306	.1951	809951	09 01		ora #$01				ora #1												; and need to go both right and down at once
4307	.1953	809953	9d 3e 02	sta $80023e,x				sta EntityData.ignoreColl,x					; I use ignoreColl to hold collision state to make a final decision
4308	.1956	809956						_toggleXForce
4309	.1956	809956	a6 02		ldx $02				ldx CurrentEntity
4310	.1958	809958	bd f9 00	lda $8000f9,x			lda EntityData.direction,x
4311	.195b	80995b	49 01		eor #$01			eor #1
4312	.195d	80995d	9d f9 00	sta $8000f9,x			sta EntityData.direction,x							; toggle the x oomponent
4313	.1960	809960	20 62 9a	jsr $809a62			jsr setEntSpriteForDirection
4314	.1963	809963	80 18		bra $80997d			gra entGhostCheckY
4315									;
4316	.1965	809965					_addXDelta
4317	.1965	809965	20 78 9f	jsr $809f78		jsr collideEntAgainstRest								; do we hit an ent?
4318	.1968	809968	b0 e0		bcs $80994a		bcs _togglex
4319	.196a	80996a	a6 02		ldx $02				ldx CurrentEntity
4320	.196c	80996c	bd 3e 02	lda $80023e,x			lda EntityData.ignoreColl,x
4321	.196f	80996f	29 fe		and #$fe			and #$fe ; clear bit 0
4322	.1971	809971	9d 3e 02	sta $80023e,x			sta EntityData.ignoreColl,x						; we don't worry about flipping on the x anymore as its an ent
4323	.1974	809974					_ignoreCollision
3471	.1974	809974	e8		inx			inx
3472	.1975	809975	e8		inx			inx
4325	.1976	809976	20 c7 85	jsr $8085c7		jsr addXWithMSBAndClip_88								; update the x
4326	.1979	809979	a5 2f		lda $2f			lda DidClipX												; if we clip, got to flip it
4327	.197b	80997b	d0 d9		bne $809956			bne _toggleXForce
4328	.197d	80997d					entGhostCheckY
244:1	.197d	80997d	c2 20		rep #$20		REP #$20
4330:4	.197f	80997f	a9 99 99	lda #$9999		lda #<>entGhostYResults									; set the Y post collision pointer
4331	.1982	809982	85 06		sta $06			sta Pointer1
240:1	.1984	809984	e2 20		sep #$20		SEP #$20
4333:4	.1986	809986	a6 02		ldx $02			ldx CurrentEntity
4334	.1988	809988	bd 25 02	lda $800225,x		lda EntityData.speed,x
4335	.198b	80998b	a8		tay			tay															; cache the speed
4336	.198c	80998c	bd f9 00	lda $8000f9,x		lda EntityData.direction,x								; and dispatch based upon speed
4337	.198f	80998f	29 02		and #$02		and #2
4338							; 2 10= DownRight
4339							; 3 11= DownLeft
4340	.1991	809991	d0 03		bne $809996		bne _down
4341								; up
4342	.1993	809993	82 60 fc	brl $8095f6		gra entUp
4343	.1996	809996					_down
4344	.1996	809996	82 a9 fc	brl $809642		gra entDown
4345								;
4346	.1999	809999					entGhostYResults
4347	.1999	809999					_ASSERT_axy8
4348	.1999	809999	a6 02		ldx $02			ldx CurrentEntity
4349	.199b	80999b	a5 05		lda $05			lda CollisionResult
4350	.199d	80999d	f0 17		beq $8099b6		beq _entGhostCheckSprites
4351	.199f	80999f						_toggleY
4352	.199f	80999f	a6 02		ldx $02				ldx CurrentEntity
4353	.19a1	8099a1	bd 3e 02	lda $80023e,x			lda EntityData.ignoreColl,x
4354	.19a4	8099a4	d0 1f		bne $8099c5			bne _ignoreCollision								; if we already changed
4355	.19a6	8099a6	09 02		ora #$02				ora #2
4356	.19a8	8099a8	9d 3e 02	sta $80023e,x				sta EntityData.ignoreColl,x				; set to make sure we don't again
4357	.19ab	8099ab	bd f9 00	lda $8000f9,x				lda EntityData.direction,x					; toggle the y
4358	.19ae	8099ae	49 02		eor #$02				eor #2
4359	.19b0	8099b0	9d f9 00	sta $8000f9,x				sta EntityData.direction,x
4360	.19b3	8099b3						_entHitAndGoNext
4361	.19b3	8099b3	82 80 00	brl $809a36			gra nextEnt
4362	.19b6	8099b6					_entGhostCheckSprites
4363	.19b6	8099b6	20 78 9f	jsr $809f78		jsr collideEntAgainstRest							; did we hit another ent?
4364	.19b9	8099b9	b0 e4		bcs $80999f		bcs _toggleY											; force toggle
4365	.19bb	8099bb	a6 02		ldx $02				ldx CurrentEntity
4366	.19bd	8099bd	bd 3e 02	lda $80023e,x			lda EntityData.ignoreColl,x					; no, clear the lock flag then
4367	.19c0	8099c0	29 fd		and #$fd			and #%11111101
4368	.19c2	8099c2	9d 3e 02	sta $80023e,x			sta EntityData.ignoreColl,x
4369	.19c5	8099c5					_ignoreCollision
4370	.19c5	8099c5	20 3d 95	jsr $80953d		jsr addYDeltaEnt
4371	.19c8	8099c8	20 7a 9a	jsr $809a7a		jsr updateEntAnimAndSetSprite
4372	.19cb	8099cb	80 69		bra $809a36		gra nextEnt

4374	.19cd	8099cd					entBat
4375	.19cd	8099cd					_ASSERT_axy8
4376	.19cd	8099cd	a6 02		ldx $02			ldx CurrentEntity											; we check to see if we can fall down
4377	.19cf	8099cf	ad 0c 9d	lda $809d0c		lda EntityAnimData.collisionBox+kEntity.bat		; this might change per frame
4378	.19d2	8099d2	85 1e		sta $1e			sta CollideSpriteBoxIndex
3471	.19d4	8099d4	e8		inx			inx
3472	.19d5	8099d5	e8		inx			inx
4380	.19d6	8099d6	86 1d		stx $1d			stx CollideSpriteToCheck
244:1	.19d8	8099d8	c2 20		rep #$20		REP #$20
4382:4	.19da	8099da	a9 e6 99	lda #$99e6		lda #<>entBatYResults									; set post collision callback
4383	.19dd	8099dd	85 06		sta $06			sta Pointer1
240:1	.19df	8099df	e2 20		sep #$20		SEP #$20
4385:4	.19e1	8099e1	a0 01		ldy #$01		ldy #1														; fall fast
4386	.19e3	8099e3	82 5c fc	brl $809642		gra entDown
4387								;
4388	.19e6	8099e6					entBatYResults
4389	.19e6	8099e6	a6 02		ldx $02			ldx CurrentEntity
4390	.19e8	8099e8	a5 05		lda $05			lda CollisionResult
4391	.19ea	8099ea	d0 03		bne $8099ef		bne _dontFall
4392	.19ec	8099ec	20 3d 95	jsr $80953d			jsr addYDeltaEnt										; yes update Y
4393	.19ef	8099ef					_dontFall
4394	.19ef	8099ef	4c 9a 95	jmp $80959a		jmp entNormalMovement									; jump to normal left right update


4397	.19f2	8099f2					handleEntCollisionResult
4398	.19f2	8099f2					_ASSERT_axy8
4399	.19f2	8099f2	a6 02		ldx $02			ldx CurrentEntity
4400	.19f4	8099f4	a5 05		lda $05			lda CollisionResult										; did we hit something
4401	.19f6	8099f6	f0 13		beq $809a0b		beq _addDeltas												; no add deltas and away we go
4402	.19f8	8099f8	80 0c		bra $809a06			bra _skipIgnore										; yes well react to it
4403								;
4404	.19fa	8099fa					_entHitAndGoNext
4405	.19fa	8099fa	a6 02		ldx $02			ldx CurrentEntity
4406	.19fc	8099fc	bd 3e 02	lda $80023e,x		lda EntityData.ignoreColl,x							; does this have ignore flags
4407	.19ff	8099ff	d0 1c		bne $809a1d		bne _ignoreCollision
4408	.1a01	809a01	a9 04		lda #$04			lda #4
4409	.1a03	809a03	9d 3e 02	sta $80023e,x			sta EntityData.ignoreColl,x						; set ignore collision, this is so they don't stick together
4410	.1a06	809a06					_skipIgnore
4411	.1a06	809a06	20 54 9a	jsr $809a54		jsr setNextEntDir
4412	.1a09	809a09	80 2b		bra $809a36		gra nextEnt
4413								;
4414	.1a0b	809a0b					_addDeltas
4415	.1a0b	809a0b	20 78 9f	jsr $809f78		jsr collideEntAgainstRest
4416	.1a0e	809a0e	b0 ea		bcs $8099fa		bcs _entHitAndGoNext
4417	.1a10	809a10	a6 02		ldx $02				ldx CurrentEntity
4418	.1a12	809a12	bd 3e 02	lda $80023e,x			lda EntityData.ignoreColl,x
4419	.1a15	809a15	f0 06		beq $809a1d			beq _ignoreCollision
4420	.1a17	809a17	38		sec					sec													; hasn't collided so clear flag
4421	.1a18	809a18	e9 01		sbc #$01				sbc #1
4422	.1a1a	809a1a	9d 3e 02	sta $80023e,x				sta EntityData.ignoreColl,x					; countdown ignore
4423	.1a1d	809a1d					_ignoreCollision
4424	.1a1d	809a1d	20 3d 95	jsr $80953d		jsr addYDeltaEnt											; will set X to current Ent
3471	.1a20	809a20	e8		inx			inx
3472	.1a21	809a21	e8		inx			inx
4426	.1a22	809a22	20 c7 85	jsr $8085c7		jsr addXWithMSBAndClip_88
4427	.1a25	809a25	a5 2f		lda $2f			lda DidClipX
4428	.1a27	809a27	f0 0d		beq $809a36		beq _skipFlipDueToX
4429	.1a29	809a29	bd 96 03	lda $800396,x			lda mplexBuffer.xpos,x								; x was increased above
4430	.1a2c	809a2c	38		sec				sec
4431	.1a2d	809a2d	ed 9c 02	sbc $80029c			sbc checkSpriteToCharData.xDeltaCheck			; undo the move
4432	.1a30	809a30	9d 96 03	sta $800396,x			sta mplexBuffer.xpos,x
4433	.1a33	809a33	20 54 9a	jsr $809a54			jsr setNextEntDir
4434	.1a36	809a36					_skipFlipDueToX
4435	.1a36	809a36					nextEnt
4436	.1a36	809a36	a6 02		ldx $02			ldx CurrentEntity
4437	.1a38	809a38	4c 70 95	jmp $809570		jmp updateEntitiesLoop

4439	.1a3b	809a3b					entBubble
4440	.1a3b	809a3b					_ASSERT_axy8
4441	.1a3b	809a3b	a6 02		ldx $02			ldx CurrentEntity
4442	.1a3d	809a3d	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x			; bubbles move up
4443	.1a40	809a40	38		sec			sec
4444	.1a41	809a41	e9 01		sbc #$01		sbc #1
4445	.1a43	809a43	c9 f0		cmp #$f0		cmp #240														; have we reached off the top of the screen
4446	.1a45	809a45	d0 05		bne $809a4c		bne _safe
4447	.1a47	809a47	9e 12 01	stz $800112,x			stz EntityData.active,x
4448	.1a4a	809a4a	a9 e0		lda #$e0			lda #kSpriteEmptyVal									; disable sprite
4449	.1a4c	809a4c					_safe
4450	.1a4c	809a4c	9d da 03	sta $8003da,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
4451	.1a4f	809a4f	20 7a 9a	jsr $809a7a		jsr updateEntAnimAndSetSprite
4452	.1a52	809a52	80 e2		bra $809a36		gra nextEnt
4453								;

4455	.1a54	809a54					setNextEntDir
4456	.1a54	809a54					_ASSERT_axy8
4457	.1a54	809a54	20 6c 9a	jsr $809a6c		jsr getEntTableIndex
4458	.1a57	809a57	b9 a1 9d	lda $809da1,y		lda NextDirectionLUT,y									; look up the direction based upon current direction
4459	.1a5a	809a5a	9d f9 00	sta $8000f9,x		sta EntityData.direction,x
4460	.1a5d	809a5d	05 0f		ora $0f			ora ZPTemp													; add the ent type offset to it
4461	.1a5f	809a5f	a8		tay			tay
4462	.1a60	809a60	80 03		bra $809a65		gra setEntFrameForDir									; update the animation
4463								;

4465	.1a62	809a62					setEntSpriteForDirection
4466	.1a62	809a62					_ASSERT_jsr
4467	.1a62	809a62					_ASSERT_axy8
4468	.1a62	809a62	20 6c 9a	jsr $809a6c		jsr getEntTableIndex
4469								; fall through
4470	.1a65	809a65					setEntFrameForDir
4471	.1a65	809a65					_ASSERT_axy8
4472	.1a65	809a65	b9 c1 9d	lda $809dc1,y		lda BaseAnimeFrameForDir,y
4473	.1a68	809a68	9d 5d 01	sta $80015d,x		sta EntityData.animBase,x
4474	.1a6b	809a6b	60		rts			rts

4476	.1a6c	809a6c					getEntTableIndex
4477	.1a6c	809a6c					_ASSERT_jsr
4478	.1a6c	809a6c					_ASSERT_axy8
4479	.1a6c	809a6c	a6 02		ldx $02			ldx CurrentEntity
4480	.1a6e	809a6e	bd e0 00	lda $8000e0,x		lda EntityData.type,x				; newDirection = table[ent*4+direction]
4481	.1a71	809a71	0a		asl a			asl a
4482	.1a72	809a72	0a		asl a			asl a
4483	.1a73	809a73	85 0f		sta $0f			sta ZPTemp
4484	.1a75	809a75	1d f9 00	ora $8000f9,x		ora EntityData.direction,x
4485	.1a78	809a78	a8		tay			tay
4486	.1a79	809a79	60		rts			rts

4488	.1a7a	809a7a					updateEntAnimAndSetSprite
4489	.1a7a	809a7a					_ASSERT_jsr
4490	.1a7a	809a7a					_ASSERT_axy8
4491	.1a7a	809a7a	bd e0 00	lda $8000e0,x		lda EntityData.type,x						; get the type for latter
4492	.1a7d	809a7d	a8		tay			tay
4493	.1a7e	809a7e	fe 44 01	inc $800144,x		inc EntityData.animTimer,x					; inc frame timer
4494	.1a81	809a81	bd 44 01	lda $800144,x		lda EntityData.animTimer,x
4495	.1a84	809a84	d9 ed 9c	cmp $809ced,y		cmp EntityAnimData.frameRate,y
4496	.1a87	809a87	d0 11		bne $809a9a		bne _notAnimUpdate							; nope rts
4497	.1a89	809a89	9e 44 01	stz $800144,x			stz EntityData.animTimer,x				; clear timer
4498	.1a8c	809a8c	fe 76 01	inc $800176,x			inc EntityData.animFrame,x				; inc and loop frame if needed
4499	.1a8f	809a8f	bd 76 01	lda $800176,x			lda EntityData.animFrame,x
4500	.1a92	809a92	d9 df 9c	cmp $809cdf,y			cmp EntityAnimData.frameCount,y
4501	.1a95	809a95	d0 03		bne $809a9a			bne _notAnimUpdate
4502	.1a97	809a97	9e 76 01	stz $800176,x				stz EntityData.animFrame,x
4503	.1a9a	809a9a					_notAnimUpdate
4504	.1a9a	809a9a	60		rts			rts


4507	.1a9b	809a9b					updateBubbles
4508	.1a9b	809a9b					_ASSERT_jsr
4509	.1a9b	809a9b					_ASSERT_axy8
4510	.1a9b	809a9b	ae 70 02	ldx $800270		ldx EntityData.numPipes								; does this level have any bubble spawners?
4511	.1a9e	809a9e	f0 4a		beq $809aea		beq _exit
4512	.1aa0	809aa0	ad d7 00	lda $8000d7			lda TickDowns.bubbleTimer
4513	.1aa3	809aa3	d0 45		bne $809aea			bne _exit
4514	.1aa5	809aa5	ae 7a 02	ldx $80027a				ldx EntityData.pipeBubbleStart			; run through the ents looking for a free slot to use
4515	.1aa8	809aa8					_findFreeEnt
4516	.1aa8	809aa8	bd 12 01	lda $800112,x		lda EntityData.active,x
4517	.1aab	809aab	f0 08		beq $809ab5		beq _foundOne
4518	.1aad	809aad	e8		inx				inx
4519	.1aae	809aae	ec df 00	cpx $8000df			cpx EntityData.number
4520	.1ab1	809ab1	d0 f5		bne $809aa8			bne _findFreeEnt
4521	.1ab3	809ab3	80 35		bra $809aea				bra _exit										; no free slots
4522	.1ab5	809ab5					_foundOne
4523	.1ab5	809ab5	86 10		stx $10			stx ZPTemp2												; bubble ent number
4524	.1ab7	809ab7	a9 01		lda #$01		lda #1
4525	.1ab9	809ab9	9d 12 01	sta $800112,x		sta EntityData.active,x								; mark it active
4526	.1abc	809abc	ac 79 02	ldy $800279		ldy EntityData.lastPipeUsed
4527	.1abf	809abf	b9 71 02	lda $800271,y		lda EntityData.pipeIndex,y
4528	.1ac2	809ac2	20 bb 8d	jsr $808dbb		jsr convertIndexToEntSpriteXY						; spawn at the next pipe
4529	.1ac5	809ac5	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; bubbles are 24 wide so -4 from spawn pos to centre it
4530	.1ac8	809ac8	38		sec			sec
4531	.1ac9	809ac9	e9 04		sbc #$04		sbc #4
4532	.1acb	809acb	9d 98 03	sta $800398,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
4533	.1ace	809ace	b0 05		bcs $809ad5		bcs +
4534	.1ad0	809ad0	a9 03		lda #$03			lda #3
4535	.1ad2	809ad2	9d b9 03	sta $8003b9,x			sta mplexBuffer.xmsb+kEntsSpriteOffset,x	; handle MSB which is important for the fist slot only
4536	.1ad5	809ad5	a9 1e		lda #$1e	+	lda #kTimers.spawnBubble
4537	.1ad7	809ad7	8d d7 00	sta $8000d7		sta TickDowns.bubbleTimer							; reset the timer
4538	.1ada	809ada	ad 79 02	lda $800279		lda EntityData.lastPipeUsed
4539	.1add	809add	18		clc			clc
4540	.1ade	809ade	69 01		adc #$01		adc #1
4541	.1ae0	809ae0	cd 70 02	cmp $800270		cmp EntityData.numPipes								; move to the next pipe
4542	.1ae3	809ae3	d0 02		bne $809ae7		bne _store
4543	.1ae5	809ae5	a9 00		lda #$00			lda #0												; wrap as needed
4544	.1ae7	809ae7					_store
4545	.1ae7	809ae7	8d 79 02	sta $800279		sta EntityData.lastPipeUsed
4546	.1aea	809aea					_exit
4547	.1aea	809aea	60		rts			rts

4549	.1aeb	809aeb					entBoss
4550	.1aeb	809aeb					_ASSERT_axy8
4551	.1aeb	809aeb	a6 02		ldx $02			ldx CurrentEntity
4552	.1aed	809aed	bd a8 01	lda $8001a8,x		lda EntityData.entState,x
4553	.1af0	809af0	0a		asl a			asl a
4554	.1af1	809af1	aa		tax			tax
4555	.1af2	809af2	7c f5 9a	jmp ($809af5,x)		jmp (BossLUT,x)
4556	>1af5	809af5	f9 9a 64 9b			BossLut .word <>(BossNormal,BossDeath)

4558	.1af9	809af9					BossNormal
4559	.1af9	809af9					_ASSERT_axy8
4560	.1af9	809af9	a6 02		ldx $02			ldx CurrentEntity
4561	.1afb	809afb	bd 2c 01	lda $80012c,x		lda EntityData.movTimer+1,x											; Ent + 1 timer is used as a flash timer
4562	.1afe	809afe	f0 0f		beq $809b0f		beq _notFlash
4563	.1b00	809b00	de 2c 01	dec $80012c,x			dec EntityData.movTimer+1,x
4564	.1b03	809b03	d0 0a		bne $809b0f			bne _notFlash
244:1	.1b05	809b05	c2 20		rep #$20		REP #$20
4566:4	.1b07	809b07	9e 57 02	stz $800257,x				stz EntityData.palleteOffset,x								; clear palette shift on all 4 sub ents
4567	.1b0a	809b0a	9e 59 02	stz $800259,x				stz EntityData.palleteOffset+2,x
240:1	.1b0d	809b0d	e2 20		sep #$20		SEP #$20
4569:4	.1b0f	809b0f					_notFlash
4570	.1b0f	809b0f	20 af 9b	jsr $809baf		jsr AnimateUpperHalfBoss												; make it look left or right for player tracking
4571	.1b12	809b12	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x												; time to move?
4572	.1b15	809b15	f0 3f		beq $809b56		beq _doneMove
4573	.1b17	809b17	bd 2b 01	lda $80012b,x			lda EntityData.movTimer,x											; the boses move and pause and move the pause
4574	.1b1a	809b1a	c9 10		cmp #$10			cmp #16																	; bears are 50/50 while the octopus is 66/33
4575	.1b1c	809b1c	b0 41		bcs $809b5f			bcs _noMove
4576	.1b1e	809b1e	20 99 9b	jsr $809b99				jsr AnimateLowerHalfBoss
4577	.1b21	809b21	bd f9 00	lda $8000f9,x				lda EntityData.direction,x
4578	.1b24	809b24	d0 1b		bne $809b41				bne _left
4579	.1b26	809b26	de 98 03	dec $800398,x					dec mplexBuffer.xpos+kEntsSpriteOffset,x
4580	.1b29	809b29	de 99 03	dec $800399,x					dec mplexBuffer.xpos+kEntsSpriteOffset+1,x
4581	.1b2c	809b2c	de 9a 03	dec $80039a,x					dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4582	.1b2f	809b2f	de 9b 03	dec $80039b,x					dec mplexBuffer.xpos+kEntsSpriteOffset+3,x		; move all 4 sub ents left
4583	.1b32	809b32	bd 98 03	lda $800398,x					lda mplexBuffer.xpos+kEntsSpriteOffset,x
4584											; cmp #kBounds.screenMinX this is now 0
4585											.cerror kBounds.screenMinX != 0, "put cmp back"
4586	.1b35	809b35	d0 28		bne $809b5f					bne _noMove
4587	.1b37	809b37									_toggleDir
4588	.1b37	809b37	bd f9 00	lda $8000f9,x						lda EntityData.direction,x
4589	.1b3a	809b3a	49 02		eor #$02						eor #2														; switch from 0 & 2
4590	.1b3c	809b3c	9d f9 00	sta $8000f9,x						sta EntityData.direction,x
4591	.1b3f	809b3f	80 1e		bra $809b5f						bra _noMove
4592	.1b41	809b41						_left
4593	.1b41	809b41	fe 98 03	inc $800398,x			inc mplexBuffer.xpos+kEntsSpriteOffset,x
4594	.1b44	809b44	fe 99 03	inc $800399,x			inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; move all 4 sub ents right
4595	.1b47	809b47	fe 9a 03	inc $80039a,x			inc mplexBuffer.xpos+kEntsSpriteOffset+2,x
4596	.1b4a	809b4a	fe 9b 03	inc $80039b,x			inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4597	.1b4d	809b4d	bd 99 03	lda $800399,x			lda mplexBuffer.xpos+kEntsSpriteOffset+1,x					; get the Top Right sprite
4598	.1b50	809b50	c9 e7		cmp #$e7			cmp #$ff-24
4599	.1b52	809b52	f0 e3		beq $809b37			beq _toggleDir
4600	.1b54	809b54	80 09		bra $809b5f				bra _noMove
4601	.1b56	809b56					_doneMove
4602	.1b56	809b56	bc e0 00	ldy $8000e0,x		ldy EntityData.type,x
4603	.1b59	809b59	b9 5a 9b	lda $809b5a,y		lda BossMoveTimerLut - kEntity.bear,y							; octopuss is the next ent after the bear so '- bear'
4604	.1b5c	809b5c	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x											; make y effectily 0 or 1
4605	.1b5f	809b5f					_noMove
4606	.1b5f	809b5f	4c 36 9a	jmp $809a36		jmp nextEnt

4608	>1b62	809b62	20 18				BossMoveTimerLut .byte 32,24

4610	.1b64	809b64					BossDeath
4611	.1b64	809b64					_ASSERT_jsr
4612	.1b64	809b64					_ASSERT_axy8
4613	.1b64	809b64	a6 02		ldx $02			ldx CurrentEntity
4614	.1b66	809b66	de da 03	dec $8003da,x		dec mplexBuffer.ypos+kEntsSpriteOffset,x
4615	.1b69	809b69	de db 03	dec $8003db,x		dec mplexBuffer.ypos+kEntsSpriteOffset+1,x					; left sprites to the left
4616	.1b6c	809b6c	fe dc 03	inc $8003dc,x		inc mplexBuffer.ypos+kEntsSpriteOffset+2,x					; right sprites to the right
4617	.1b6f	809b6f	fe dd 03	inc $8003dd,x		inc mplexBuffer.ypos+kEntsSpriteOffset+3,x
4618	.1b72	809b72	de 98 03	dec $800398,x		dec mplexBuffer.xpos+kEntsSpriteOffset,x						; upper sprites up
4619	.1b75	809b75	de 9a 03	dec $80039a,x		dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4620	.1b78	809b78	fe 99 03	inc $800399,x		inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; bottom sprites down
4621	.1b7b	809b7b	fe 9b 03	inc $80039b,x		inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4622	.1b7e	809b7e	de 2b 01	dec $80012b,x		dec EntityData.movTimer,x											; time up?
4623	.1b81	809b81	d0 13		bne $809b96		bne _exit
244:1	.1b83	809b83	c2 20		rep #$20		REP #$20
4625:4	.1b85	809b85	9e 12 01	stz $800112,x			stz EntityData.active,x											; disable all 4 sprites
4626	.1b88	809b88	9e 14 01	stz $800114,x			stz EntityData.active+2,x
4627	.1b8b	809b8b	a9 e0 e0	lda #$e0e0			lda #kSpriteEmptyVal<<8|kSpriteEmptyVal
4628	.1b8e	809b8e	9d da 03	sta $8003da,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x					; put them offscreen
4629	.1b91	809b91	9d dc 03	sta $8003dc,x			sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
240:1	.1b94	809b94	e2 20		sep #$20		SEP #$20
4631:4	.1b96	809b96					_exit
4632	.1b96	809b96	4c 36 9a	jmp $809a36		jmp nextEnt

4634	.1b99	809b99					AnimateLowerHalfBoss
4635	.1b99	809b99					_ASSERT_jsr
4636	.1b99	809b99					_ASSERT_axy8
4637	.1b99	809b99	de 44 01	dec $800144,x		dec EntityData.animTimer,x											; first ent sprite is the anim timer
4638	.1b9c	809b9c	d0 10		bne $809bae		bne _exit
4639	.1b9e	809b9e	a9 04		lda #$04			lda #4
4640	.1ba0	809ba0	9d 44 01	sta $800144,x			sta EntityData.animTimer,x
4641	.1ba3	809ba3	bd 78 01	lda $800178,x			lda EntityData.animFrame+2,x									; toggle the anim frame number for the lower
4642	.1ba6	809ba6	49 01		eor #$01			eor #1																; two ents
4643	.1ba8	809ba8	9d 78 01	sta $800178,x			sta EntityData.animFrame+2,x
4644	.1bab	809bab	9d 79 01	sta $800179,x			sta EntityData.animFrame+3,x
4645	.1bae	809bae					_exit
4646	.1bae	809bae	60		rts			rts

4648							;<<<<<24--0--24>>>>>
4649	.1baf	809baf					AnimateUpperHalfBoss
4650	.1baf	809baf					_ASSERT_jsr
4651	.1baf	809baf					_ASSERT_axy8
4652	.1baf	809baf	86 0f		stx $0f			stx ZPTemp
3471	.1bb1	809bb1	e8		inx			inx
3472	.1bb2	809bb2	e8		inx			inx
4654	.1bb3	809bb3	bd 96 03	lda $800396,x		lda mplexBuffer.xpos,x
4655	.1bb6	809bb6	85 10		sta $10			sta ZPTemp2							; Ent's X pos
4656	.1bb8	809bb8	ad 96 03	lda $800396		lda mplexBuffer.xpos				; player
4657	.1bbb	809bbb	85 11		sta $11			sta ZPTemp3							; Player's X pos
4658	.1bbd	809bbd	c5 10		cmp $10			cmp ZPTemp2							; Ent's X pos
4659	.1bbf	809bbf	90 0c		bcc $809bcd		bcc _playerLeft
4660	.1bc1	809bc1	e5 10		sbc $10				sbc ZPTemp2						; carry is already set
4661	.1bc3	809bc3	c9 18		cmp #$18			cmp #24							; if PlayerX - EntX  < 24
4662	.1bc5	809bc5	90 03		bcc $809bca			bcc _under
4663	.1bc7	809bc7	a9 02		lda #$02				lda #2						; look right
4664	>1bc9	809bc9	2c							.byte $2c					; bit XXXX
4665	.1bca	809bca						_under
4666	.1bca	809bca	a9 01		lda #$01			lda #1							; look straight ahead
4667	>1bcc	809bcc	2c						.byte $2c						; bit XXXX
4668	.1bcd	809bcd					_playerLeft
4669	.1bcd	809bcd	a9 00		lda #$00		lda #0								; look left
4670	.1bcf	809bcf	a6 0f		ldx $0f			ldx ZPTemp							; the ent number we called it with
4671	.1bd1	809bd1	9d 76 01	sta $800176,x		sta EntityData.animFrame,x		; set both upper sprites to the frame
4672	.1bd4	809bd4	9d 77 01	sta $800177,x		sta EntityData.animFrame+1,x
4673	.1bd7	809bd7	60		rts			rts

4675							.as
4676							.xs
4677	.1bd8	809bd8					isTypeBoss
4678							; return C = 0 for not and C = 1 for is
4679	.1bd8	809bd8					_ASSERT_jsr
4680	.1bd8	809bd8					_ASSERT_axy8
4681	.1bd8	809bd8	c9 08		cmp #$08		cmp #kEntity.bear					; is there a bear in there?
4682	.1bda	809bda	90 08		bcc $809be4		bcc _notBoss
4683	.1bdc	809bdc	c9 0c		cmp #$0c		cmp #kEntity.octopussBody+1	; well is the number <bear or >OctopussBody
4684	.1bde	809bde	90 06		bcc $809be6		bcc _boss
4685	.1be0	809be0	c9 0d		cmp #$0d		cmp #kEntity.bossDummy			; and not the dummy?
4686	.1be2	809be2	f0 02		beq $809be6		beq _boss
4687	.1be4	809be4					_notBoss
4688	.1be4	809be4	18		clc				clc
4689	.1be5	809be5	60		rts				rts
4690	.1be6	809be6					_boss
4691	.1be6	809be6	38		sec			sec
4692	.1be7	809be7	60		rts			rts

4694							.as
4695							.xs
4696	.1be8	809be8					isTypeBossBounceDetect
4697							; bounce detection is handled by the collision rect of only 1 of the 4
4698							; so we need to get just bear or just ocotpuss and not the other 3
4699							; C = 0 yes, C = 1 no
4700	.1be8	809be8					_ASSERT_jsr
4701	.1be8	809be8					_ASSERT_axy8
4702	.1be8	809be8	c9 08		cmp #$08		cmp #kEntity.bear
4703	.1bea	809bea	f0 06		beq $809bf2		beq _yes
4704	.1bec	809bec	c9 09		cmp #$09			cmp #kEntity.octopuss
4705	.1bee	809bee	f0 02		beq $809bf2			beq _yes
4706	.1bf0	809bf0	18		clc					clc
4707	.1bf1	809bf1	60		rts					rts
4708	.1bf2	809bf2					_yes
4709	.1bf2	809bf2	38		sec			sec
4710	.1bf3	809bf3	60		rts			rts

4712							.as
4713							.xs
4714	.1bf4	809bf4					hurtBoss
4715	.1bf4	809bf4					_ASSERT_jsr
4716	.1bf4	809bf4					_ASSERT_axy8
4717	.1bf4	809bf4	bd a8 01	lda $8001a8,x		lda EntityData.entState,x				; can't hurt if it already dead
4718	.1bf7	809bf7	c9 01		cmp #$01		cmp #kBoss.dead
4719	.1bf9	809bf9	f0 21		beq $809c1c		beq _exit
4720	.1bfb	809bfb	bd 2c 01	lda $80012c,x			lda EntityData.movTimer+1,x		; the flash acts a count down, other wise if you have the shield you can
4721	.1bfe	809bfe	d0 1c		bne $809c1c			bne _exit								; jump into body, get pushed up and Quick Kill them in one jump
4722	.1c00	809c00	de 12 01	dec $800112,x				dec EntityData.active,x			; this is abused to hold "life points"
4723	.1c03	809c03	bd 12 01	lda $800112,x				lda EntityData.active,x
4724	.1c06	809c06	c9 01		cmp #$01				cmp #1								; 1 is "dead" as the must remain active for the death animation
4725	.1c08	809c08	f0 13		beq $809c1d				beq _killedBoss
4726											; we need to flash them so the player knows they did something
244:1	.1c0a	809c0a	c2 20		rep #$20		REP #$20
4728:4	.1c0c	809c0c	a9 02 02	lda #$0202					lda #kSPal_1<<8|kSPal_1		; next pal
4729	.1c0f	809c0f	9d 57 02	sta $800257,x					sta EntityData.palleteOffset,x
4730	.1c12	809c12	9d 59 02	sta $800259,x					sta EntityData.palleteOffset+2,x
240:1	.1c15	809c15	e2 20		sep #$20		SEP #$20
4732:4	.1c17	809c17	a9 10		lda #$10					lda #16							; store the flash timer in the 2nd sprite
4733	.1c19	809c19	9d 2c 01	sta $80012c,x					sta EntityData.movTimer+1,x
4734	.1c1c	809c1c					_exit
4735	.1c1c	809c1c	60		rts			rts
4736	.1c1d	809c1d					_killedBoss										; well just killed the boss
4737	.1c1d	809c1d	a9 01		lda #$01		lda #kBoss.dead
4738	.1c1f	809c1f	9d a8 01	sta $8001a8,x		sta EntityData.entState,x				; got to death state
4739	.1c22	809c22	a9 19		lda #$19		lda #kBoss.deathAnimTime
4740	.1c24	809c24	9d 2b 01	sta $80012b,x		sta EntityData.movTimer,x				; set death animation timer
4741	.1c27	809c27	86 0f		stx $0f			stx ZPTemp
4742	.1c29	809c29	a9 03		lda #$03		lda #kScoreIndex.boss					; award points
4743	.1c2b	809c2b	20 fd 85	jsr $8085fd		jsr giveScore
4744	.1c2e	809c2e	a6 0f		ldx $0f			ldx ZPTemp									; restore X, which holds the current ent number
4745	.1c30	809c30	60		rts			rts

4747	=32						kESprFlags = kSPri_2|kSPal_0

4749							; ----- @Entity Data@ -----

4751							; fSprDef takes a sprite 16x16 grid x,y and the attributes data and makes a "word" for OAM bytes 3 and 4
4752							; note newer versions of 64tass don't support multiline so keep each def on one line
4753	=(8320,8322,8324,8326,8352,8354,8356,8358)	HeliRawFrames = (fSprDef(0,4,kESprFlags),fSprDef(1,4,kESprFlags),fSprDef(2,4,kESprFlags),fSprDef(3,4,kESprFlags),fSprDef(0,5,kESprFlags),fSprDef(1,5,kESprFlags),fSprDef(2,5,kESprFlags),fSprDef(3,5,kESprFlags))
4754	=(8320,8322,8324,8326,8352,8354,8356,8358)	allEntFrames := HeliRawFrames
4755														; ent frames index left
4756															; ent frames index right
4757																; number of frames
4758																	; anim frame rate
4759																		; anim frame size
4760																			; collision bounding box index
4761							; heli only has 1 8 frame animation for all directions
4762	=(0,0,8,8,0,0)					HeliRawAnimData =  (0,0,len(HeliRawFrames),8,kSpriteType.s16x16,0)

4764	=(8268,8270,8328,8330,8332,8334,8392,8394)	SpringRawFrames = (fSprDef(6,2,kESprFlags),fSprDef(7,2,kESprFlags),fSprDef(4,4,kESprFlags),fSprDef(5,4,kESprFlags),fSprDef(6,4,kESprFlags),fSprDef(7,4,kESprFlags),fSprDef(4,6,kESprFlags),fSprDef(5,6,kESprFlags))
4765							; again the spring is a rather complex entity that transends left and right concepts
4766	=(8,8,8,2,1,0)					SpringRawAnimData = (len(allEntFrames),len(allEntFrames),len(SpringRawFrames),2,kSpriteType.s16x32,0)
4767	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394)
							allEntFrames ..= SpringRawFrames

4769							;the worm has a Left and a Right set
4770	=(8384,8386,8388,8390)				WormRawFramesLeft = (fSprDef(0,6,kESprFlags),fSprDef(1,6,kESprFlags),fSprDef(2,6,kESprFlags),fSprDef(3,6,kESprFlags))
4771	=(8416,8418,8420,8422)				WormRawFramesRight = (fSprDef(0,7,kESprFlags),fSprDef(1,7,kESprFlags),fSprDef(2,7,kESprFlags),fSprDef(3,7,kESprFlags))

4773	=(16,20,4,8,0,0)				WormRawAnimData = (len(allEntFrames), len(allEntFrames)+len(WormRawFramesLeft),len(WormRawFramesLeft),8,kSpriteType.s16x16,0)
4774	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390)
							allEntFrames ..= WormRawFramesLeft
4775	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422)
							allEntFrames ..= WormRawFramesRight

4777	=(8448,8450,8452,8454)				BatRawAnimDataLeft = (fSprDef(0,8,kESprFlags),fSprDef(1,8,kESprFlags),fSprDef(2,8,kESprFlags),fSprDef(3,8,kESprFlags))
4778	=(24832,24834,24836,24838)			BatRawAnimDataRight = (fSprDef(0,8,kESprFlags|kSFlipX),fSprDef(1,8,kESprFlags|kSFlipX),fSprDef(2,8,kESprFlags|kSFlipX),fSprDef(3,8,kESprFlags|kSFlipX))
4779	=(24,28,4,8,0,0)				BatRawAnimData = (len(allEntFrames), len(allEntFrames)+len(BatRawAnimDataLeft),len(BatRawAnimDataLeft),8,kSpriteType.s16x16,0)
4780	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454)
							allEntFrames ..= BatRawAnimDataLeft
4781	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838)
							allEntFrames ..= BatRawAnimDataRight

4783	=(8480,8482,8484,8486)				GhostRawFramesLeft = (fSprDef(0,9,kESprFlags),fSprDef(1,9,kESprFlags),fSprDef(2,9,kESprFlags),fSprDef(3,9,kESprFlags))
4784	=(24864,24866,24868,24870)			GhostRawFramesRight = (fSprDef(0,9,kESprFlags|kSFlipX),fSprDef(1,9,kESprFlags|kSFlipX),fSprDef(2,9,kESprFlags|kSFlipX),fSprDef(3,9,kESprFlags|kSFlipX))
4785	=(32,36,4,8,0,0)				GhostRawAnimData = (len(allEntFrames), len(allEntFrames)+len(GhostRawFramesLeft),len(GhostRawFramesLeft),8,kSpriteType.s16x16,0)
4786	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486)
							allEntFrames ..= GhostRawFramesLeft
4787	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870)
							allEntFrames ..= GhostRawFramesRight

4789							; spider needs 4 animations, for waiting and for falling.
4790							; I could be tempted to make the falling the next entity type to keep the structure
4791							; however can't be bothered to change the code too much, just going to make a define
4792							; to handle the offset
4793	=(8512,8514)					SpiderRawFramesWaitLeft = (fSprDef(0,10,kESprFlags),fSprDef(1,10,kESprFlags))
4794	=(8516,8518)					SpiderRawFramesWaitRight = (fSprDef(2,10,kESprFlags),fSprDef(3,10,kESprFlags))
4795	=(8544,8546)					SpiderRawFramesFallLeft = (fSprDef(0,11,kESprFlags),fSprDef(1,11,kESprFlags))
4796	=(8548,8550)					SpiderRawFramesFallRight = (fSprDef(2,11,kESprFlags),fSprDef(3,11,kESprFlags))
4797	=(40,42,2,8,0,0)				SpiderRawAnimData = (len(allEntFrames), len(allEntFrames)+len(SpiderRawFramesWaitLeft),len(SpiderRawFramesWaitLeft),8,kSpriteType.s16x16,0)
4798	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514)
							allEntFrames ..= SpiderRawFramesWaitLeft
4799	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518)
							allEntFrames ..= SpiderRawFramesWaitRight
4800	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546)
							allEntFrames ..= SpiderRawFramesFallLeft
4801	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550)
							allEntFrames ..= SpiderRawFramesFallRight
4802	=4						kSpiderFallAnimOffset = len(SpiderRawFramesWaitLeft) + len(SpiderRawFramesWaitRight)

4804	=(8576,8578,8580,8582)				FishRawFramesUp = (fSprDef(0,12,kESprFlags),fSprDef(1,12,kESprFlags),fSprDef(2,12,kESprFlags),fSprDef(3,12,kESprFlags))
4805	=(8608,8610,8612,8614)				FishRawFramesDown = (fSprDef(0,13,kESprFlags),fSprDef(1,13,kESprFlags),fSprDef(2,13,kESprFlags),fSprDef(3,13,kESprFlags))
4806	=(48,52,4,1,0,0)				FishRawAnimData = (len(allEntFrames), len(allEntFrames)+len(FishRawFramesUp), len(FishRawFramesUp),1,kSpriteType.s16x16,0)
4807	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582)
							allEntFrames ..= FishRawFramesUp
4808	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614)
							allEntFrames ..= FishRawFramesDown

4810	=(8640,8642,8644,8646)				CirclerRawFramesLeft = (fSprDef(0,14,kESprFlags),fSprDef(1,14,kESprFlags),fSprDef(2,14,kESprFlags),fSprDef(3,14,kESprFlags))
4811	=(8672,8674,8676,8678)				CirclerRawFramesRight = (fSprDef(0,15,kESprFlags),fSprDef(1,15,kESprFlags),fSprDef(2,15,kESprFlags),fSprDef(3,15,kESprFlags))
4812	=(56,60,4,2,0,0)				CirclerRawAnimData = (len(allEntFrames), len(allEntFrames)+len(CirclerRawFramesLeft),len(CirclerRawFramesLeft),2,kSpriteType.s16x16,0)
4813	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646)
							allEntFrames ..= CirclerRawFramesLeft
4814	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678)
							allEntFrames ..= CirclerRawFramesRight

4816	=(8448,8452,8456)				BearRawFramesLeft = (fSprDef(0,16,kESprFlags),fSprDef(2,16,kESprFlags),fSprDef(4,16,kESprFlags))
4817	=(8460,8512,8516)				BearRawFramesRight = (fSprDef(6,16,kESprFlags),fSprDef(0,18,kESprFlags),fSprDef(2,18,kESprFlags))
4818	=(64,67,3,4,2,4)				BearEntAnimData = (len(allEntFrames), len(allEntFrames)+len(BearRawFramesLeft),len(BearRawFramesLeft),4,kSpriteType.s32x32,4)
4819	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456)
							allEntFrames ..= BearRawFramesLeft
4820	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= BearRawFramesRight

4822	=(8448,8452,8456)				OctopussRawFramesLeft = (fSprDef(0,24,kESprFlags),fSprDef(2,24,kESprFlags),fSprDef(4,24,kESprFlags))
4823	=(8460,8512,8516)				OctopussRawFramesRight = (fSprDef(6,24,kESprFlags),fSprDef(0,26,kESprFlags),fSprDef(2,26,kESprFlags))
4824	=(70,73,3,4,2,4)				OctopussEntAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussRawFramesLeft),len(OctopussRawFramesLeft),4,kSpriteType.s32x32,4)
4825	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456)
							allEntFrames ..= OctopussRawFramesLeft
4826	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= OctopussRawFramesRight

4828	=(8520,8524)					BearBodyRawFramesLeft = (fSprDef(4,18,kESprFlags), fSprDef(6,18,kESprFlags))
4829	=(8576,8580)					BearBodyRawFramesRight = (fSprDef(0,20,kESprFlags), fSprDef(2,20,kESprFlags))
4830	=(76,78,2,4,2,5)				BearBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(BearBodyRawFramesLeft),len(BearBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4831	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524)
							allEntFrames ..= BearBodyRawFramesLeft
4832	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580)
							allEntFrames ..= BearBodyRawFramesRight

4834	=(8520,8524)					OctopussBodyRawFramesLeft = (fSprDef(4,26,kESprFlags), fSprDef(6,26,kESprFlags))
4835	=(8576,8580)					OctopussBodyRawFramesRight = (fSprDef(0,28,kESprFlags), fSprDef(2,28,kESprFlags))
4836	=(80,82,2,4,2,5)				OctopussBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussBodyRawFramesLeft),len(OctopussBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4837	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524)
							allEntFrames ..= OctopussBodyRawFramesLeft
4838	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580)
							allEntFrames ..= OctopussBodyRawFramesRight

4840	=(8456,8460,8520)				BubbleRawFrames = (fSprDef(4,8,kESprFlags), fSprDef(6,8,kESprFlags), fSprDef(4,10,kESprFlags))
4841	=(84,84,3,12,2,7)				BubbleAnimData = (len(allEntFrames),len(allEntFrames),len(BubbleRawFrames),12,kSpriteType.s32x32,7)
4842	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580,8456,8460,8520)
							allEntFrames ..= BubbleRawFrames
4843							; this one doesn't matter so much, its more for the collision frame number which is basically blowing a lot of bytes for one, but oh well
4844	=(87,87,2,12,2,6)				BossDummyAnimData = (len(allEntFrames),len(allEntFrames),len(BearBodyRawFramesLeft),12,kSpriteType.s32x32,6)

4846							;this has to be in kEntity order
4847							; older 64tass versions let you spread a single define across multiple lines
4848							; newer versions removed this feature so I'm using := and ..= to split over multiple lines
4849	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0))
							AllAnimData  := (HeliRawAnimData,SpringRawAnimData,WormRawAnimData,BatRawAnimData)
4850	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0))
							AllAnimData ..= (GhostRawAnimData,SpiderRawAnimData,FishRawAnimData,CirclerRawAnimData)
4851	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5))
							AllAnimData ..= (BearEntAnimData,OctopussEntAnimData,BearBodyAnimData,OctopussBodyAnimData)
4852	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5),(84,84,3,12,2,7),(87,87,2,12,2,6))
							AllAnimData ..= (BubbleAnimData,BossDummyAnimData)

4854	.1c31	809c31					EntityFrameData .block
4855	>1c31	809c31	80 82 84 86 a0 a2 a4 a6			lo .byte <(allEntFrames)						; this is 3rd byte of OAM for each frame
	>1c39	809c39	4c 4e 88 8a 8c 8e c8 ca c0 c2 c4 c6 e0 e2 e4 e6
	>1c49	809c49	00 02 04 06 00 02 04 06 20 22 24 26 20 22 24 26
	>1c59	809c59	40 42 44 46 60 62 64 66 80 82 84 86 a0 a2 a4 a6
	>1c69	809c69	c0 c2 c4 c6 e0 e2 e4 e6 00 04 08 0c 40 44 00 04
	>1c79	809c79	08 0c 40 44 48 4c 80 84 48 4c 80 84 08 0c 48
4856	>1c88	809c88	20 20 20 20 20 20 20 20			hi .byte >(allEntFrames)						; this is 4th byte of OAM for each frame
	>1c90	809c90	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
	>1ca0	809ca0	21 21 21 21 61 61 61 61 21 21 21 21 61 61 61 61
	>1cb0	809cb0	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1cc0	809cc0	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1cd0	809cd0	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
4857							.bend

4859	.1cdf	809cdf					EntityAnimData .block
4860	>1cdf	809cdf	08 08 04 04 04 02 04 04			frameCount		.byte (AllAnimData[:,2])	; number of frames each animation has
	>1ce7	809ce7	03 03 02 02 03 02
4861	>1ced	809ced	08 02 08 08 08 08 01 02			frameRate		.byte (AllAnimData[:,3])	; the rate for the animation
	>1cf5	809cf5	04 04 04 04 0c 0c
4862	>1cfb	809cfb	00 01 00 00 00 00 00 00			frameSize		.byte (AllAnimData[:,4])	; the sprite size for the animation
	>1d03	809d03	02 02 02 02 02 02
4863	>1d09	809d09	00 00 00 00 00 00 00 00			collisionBox	.byte (AllAnimData[:,5])	; the index in collisionboxes this animation wants
	>1d11	809d11	04 04 05 05 07 06
4864							.bend

4866	.1d17	809d17					kSprites .block
4867	=48							fish				= AllAnimData[kEntity.fish,0]			; the anim frame data index for the start of the fish frames
4868	=40							spiderLeft		= AllAnimData[kEntity.spider,0]		; like wise for spider left
4869	=42							spiderRight		= AllAnimData[kEntity.spider,1]
4870	=8							springNormal	= AllAnimData[kEntity.spring,0]
4871	=9							springCompress = AllAnimData[kEntity.spring,0]+1
4872	=10							springExpand	= AllAnimData[kEntity.spring,0]+2
4873	=11							springFull		= AllAnimData[kEntity.spring,0]+3
4874	=12							springFall		= AllAnimData[kEntity.spring,0]+4
4875	=84							bubbles			= AllAnimData[kEntity.bubble,0]
4876	=0							bulletSprite	= 0											; these are frame deltas for parts of the bullet
4877	=6							bulletSplat		= 3*2
4878	=8							bulletRed		= 4*2											; convert to word index
4879							.bend

4881	.1d17	809d17					SpringDirectionToDeltaLUT
4882	>1d17	809d17	fe ff ff ff 01 01 01 02		.char -2,-1,-1,-1, 1, 1, 1, 2									; this is the springs X deltas, used to give it a sense of intertia

4884	.1d1f	809d1f					SinJumpTable														; this is the sin table the springs use to jump
4885	>1d1f	809d1f	fb fb fc fc fb fd		.char -5, -5, -4, -4, -5, -3
4886	>1d25	809d25	fc fd fe fd ff fe ff 00		.char -4, -3, -2, -3, -1, -2, -1, 0, -1, -1, 0
	>1d2d	809d2d	ff ff 00
4887	=17						kSinJumpFall = * - SinJumpTable								; this is the index the table flips from up to down
4888	>1d30	809d30	01 02 01 03 02 03 04		.char  1,  2,  1,  3,  2,  3,  4
4889	>1d37	809d37	03 05 04 05 06 05 06 06		.char  3,  5,  4,  5,  6,  5, 6,  6, 7, 8, 8
	>1d3f	809d3f	07 08 08
4890	=34						kSinJumpMax = * - SinJumpTable - 1

4892	.1d42	809d42					SpringFrameFrameTable											; this is the frame it should use for said index into the sin table
4893	>1d42	809d42	09 09 09 09 09			.byte kSprites.(springCompress,springCompress,springCompress,springCompress,springCompress)
4894	>1d47	809d47	0a 0a 0a 0a 08 08 0b 0b		.byte kSprites.(springExpand,springExpand,springExpand,springExpand,springNormal,springNormal,springFull,springFull,springFull,springFull,springFull)
	>1d4f	809d4f	0b 0b 0b
4895	>1d52	809d52	0c 0d 0e 0f 0e 0d 0c		.byte kSprites.(springFall,springFall,springFall,springFall,springFall,springFall,springFall)+(0,1,2,3,2,1,0)
4896	>1d59	809d59	0b 0b 0b 0b 0b 0b 0b 0b		.byte kSprites.(springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull)
	>1d61	809d61	0b 0b 0b
4897							.cerror (*-SpringFrameFrameTable) != kSinJumpMax, "under by " , kSinJumpMax-(*-SpringFrameFrameTable)

4899							; this is the table used by the circler to go in a circle
4900	.1d64	809d64					CircleJumpTableStart
4901	>1d64	809d64	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0,-1,-1,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5
	>1d6c	809d6c	02 02 01 01 00 ff ff fe fe fd fc fc fc fb fb fb
	>1d7c	809d7c	fb
4902	>1d7d	809d7d	fb fb fb fc fc fc fd fd		.char -5,-5,-5,-4,-4,-4,-3,-3,-2,-1,-1, 0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5
	>1d85	809d85	fe ff ff 00 01 01 02 03 03 04 04 04 05 05 05
4903	=48						CircleJumpTableCount = * - CircleJumpTableStart	; table ends here
4904	>1d94	809d94	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0		; duplicate to save wrapping the index on the phase shift
	>1d9c	809d9c	02 02 01 01 00
4905																							; the code would be smaller but since this is idential it compresses better than

4907							; given my current direction, and I hit something which way do I go next
4908							; i.e heli going up with index of 1 is to go 3 which is down while heli 3 returns 1
4909	.1da1	809da1					NextDirectionLUT
4910	>1da1	809da1	03 03 01 01			.byte 3,3,1,1 ; heli
4911	>1da5	809da5	00 00 00 00			.byte 0,0,0,0 ; spring
4912	>1da9	809da9	02 02 00 00			.byte 2,2,0,0 ; worm
4913	>1dad	809dad	02 02 00 00			.byte 2,2,0,0 ; bat
4914	>1db1	809db1	03 00 01 02			.byte 3,0,1,2 ; ghost
4915	>1db5	809db5	03 03 01 01			.byte 3,3,1,1 ; spider
4916	>1db9	809db9	00 00 00 00			.byte 0,0,0,0 ; fish - not used
4917	>1dbd	809dbd	00 00 00 00			.byte 0,0,0,0 ; flying thing - not used
4918	.1dc1	809dc1					BaseAnimeFrameForDir
4919							; 0 = right, 1 = up, 2 = left, 3 = down
4920	>1dc1	809dc1	00 00 00 00			.byte HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0]		; heli
4921	>1dc5	809dc5	08 08 08 08			.byte SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0]		; spring
4922	>1dc9	809dc9	14 14 10 10			.byte WormRawAnimData[1],		WormRawAnimData[1],		WormRawAnimData[0],		WormRawAnimData[0]		; worm
4923	>1dcd	809dcd	1c 1c 18 18			.byte BatRawAnimData[1],		BatRawAnimData[1],		BatRawAnimData[0],		BatRawAnimData[0]			; bat
4924	>1dd1	809dd1	20 24 20 24			.byte GhostRawAnimData[0],		GhostRawAnimData[1],		GhostRawAnimData[0],		GhostRawAnimData[1]		; ghost
4925	>1dd5	809dd5	28 28 28 28			.byte SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0]		; spider
4926	>1dd9	809dd9	30 30 34 34			.byte FishRawAnimData[0],		FishRawAnimData[0],		FishRawAnimData[1],		FishRawAnimData[1]		; fish
4927	>1ddd	809ddd	3c 3c 38 38			.byte CirclerRawAnimData[1],	CirclerRawAnimData[1],	CirclerRawAnimData[0],	CirclerRawAnimData[0]	; flying thing
4928	>1de1	809de1	00 00 00 00			.byte 0,0,0,0 ; bear
4929	>1de5	809de5	00 00 00 00			.byte 0,0,0,0 ; other bear
4930	>1de9	809de9	00 00 00 00			.byte 0,0,0,0 ; octopus
4931	>1ded	809ded	00 00 00 00			.byte 0,0,0,0 ; other octopus
4932	>1df1	809df1	54 54 54 54			.byte BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0]			; bubble


4935							; ----- @Collision system@ -----


4938							.as
4939							.xs
4940	.1df5	809df5					checkSpriteToCharCollision_88
4941	.1df5	809df5					_ASSERT_JSR
4942	.1df5	809df5					_ASSERT_axy8
244:1	.1df5	809df5	c2 20		rep #$20		REP #$20
4944:4	.1df7	809df7	ad 9e 02	lda $80029e		lda checkSpriteToCharData.yDeltaCheck
4945	.1dfa	809dfa	8d a2 02	sta $8002a2		sta checkSpriteToCharData.yDeltaBackup
4946	.1dfd	809dfd	ad 9c 02	lda $80029c		lda checkSpriteToCharData.xDeltaCheck
4947	.1e00	809e00	8d a0 02	sta $8002a0		sta checkSpriteToCharData.xDeltaBackup			; cache the deltas
4948	.1e03	809e03	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck			; check just Y first
240:1	.1e06	809e06	e2 20		sep #$20		SEP #$20
4950:4	.1e08	809e08	64 1d		stz $1d			stz CollideSpriteToCheck
4951	.1e0a	809e0a	64 1e		stz $1e			stz CollideSpriteBoxIndex							; clear results
4952	.1e0c	809e0c	20 75 9e	jsr $809e75		jsr CSTCCY												; Check Sprite To Char Collision Y
4953	.1e0f	809e0f	a5 23		lda $23			lda CollideCharBLI									; get bottom left index
4954	.1e11	809e11	85 15		sta $15			sta ActiveTileIndex
4955	.1e13	809e13	a5 24		lda $24			lda CollideCharBLC									; and the actual tile
4956	.1e15	809e15	85 16		sta $16			sta ActiveTile
4957	.1e17	809e17	20 c2 a0	jsr $80a0c2		jsr checkOnDissTile									; do I stand on a diss tile?
4958	.1e1a	809e1a	a5 23		lda $23			lda CollideCharBLI
4959	.1e1c	809e1c	c5 25		cmp $25			cmp CollideCharBRI									; are both sides of me on the same tile
4960	.1e1e	809e1e	f0 0b		beq $809e2b		beq _otherIsSame										; so we don't diss twice as fast sometimes
4961	.1e20	809e20	a5 25		lda $25				lda CollideCharBRI								; no check the right index as well
4962	.1e22	809e22	85 15		sta $15				sta ActiveTileIndex
4963	.1e24	809e24	a5 26		lda $26				lda CollideCharBRC
4964	.1e26	809e26	85 16		sta $16				sta ActiveTile
4965	.1e28	809e28	20 c2 a0	jsr $80a0c2			jsr checkOnDissTile
4966	.1e2b	809e2b					_otherIsSame
244:1	.1e2b	809e2b	c2 20		rep #$20		REP #$20
4968:4	.1e2d	809e2d	ad a0 02	lda $8002a0		lda checkSpriteToCharData.xDeltaBackup			; Y done, lets check the X
4969	.1e30	809e30	8d 9c 02	sta $80029c		sta checkSpriteToCharData.xDeltaCheck			; restore X
4970	.1e33	809e33	9c 9e 02	stz $80029e		stz checkSpriteToCharData.yDeltaCheck			; clear Y
240:1	.1e36	809e36	e2 20		sep #$20		SEP #$20
4972:4	.1e38	809e38	20 e0 9e	jsr $809ee0		jsr CSTCCX												; Check Sprite To Char Collision X
244:1	.1e3b	809e3b	c2 20		rep #$20		REP #$20
4974:4	.1e3d	809e3d	ad a2 02	lda $8002a2		lda checkSpriteToCharData.yDeltaBackup			; restore Y
4975	.1e40	809e40	8d 9e 02	sta $80029e		sta checkSpriteToCharData.yDeltaCheck
240:1	.1e43	809e43	e2 20		sep #$20		SEP #$20
4977:4	.1e45	809e45	a6 1f		ldx $1f			ldx CollideCharTLI
4978	.1e47	809e47	a5 20		lda $20			lda CollideCharTLC
4979	.1e49	809e49	20 14 a1	jsr $80a114		jsr checkActionTile									; is the Top Left an action tile?
4980	.1e4c	809e4c	a5 21		lda $21			lda CollideCharTRI
4981	.1e4e	809e4e	c5 1f		cmp $1f			cmp CollideCharTLI									; is top right and top left the same tile?
4982	.1e50	809e50	f0 06		beq $809e58		beq _skipTR
4983	.1e52	809e52	aa		tax				tax
4984	.1e53	809e53	a5 22		lda $22				lda CollideCharTRC
4985	.1e55	809e55	20 14 a1	jsr $80a114			jsr checkActionTile								; no check the right one as well
4986	.1e58	809e58					_skipTR
4987	.1e58	809e58	a5 23		lda $23			lda CollideCharBLI									; check bottom left if different
4988	.1e5a	809e5a	c5 1f		cmp $1f			cmp CollideCharTLI
4989	.1e5c	809e5c	f0 06		beq $809e64		beq _skipBL
4990	.1e5e	809e5e	aa		tax				tax
4991	.1e5f	809e5f	a5 24		lda $24				lda CollideCharBLC
4992	.1e61	809e61	20 14 a1	jsr $80a114			jsr checkActionTile
4993	.1e64	809e64					_skipBL
4994	.1e64	809e64	a5 25		lda $25			lda CollideCharBRI
4995	.1e66	809e66	c5 21		cmp $21			cmp CollideCharTRI									; check bottom right if different
4996	.1e68	809e68	f0 0a		beq $809e74		beq _skipBR
4997	.1e6a	809e6a	c5 23		cmp $23				cmp CollideCharBLI
4998	.1e6c	809e6c	f0 06		beq $809e74			beq _skipBR
4999	.1e6e	809e6e	aa		tax					tax
5000	.1e6f	809e6f	a5 26		lda $26					lda CollideCharBRC
5001	.1e71	809e71	20 14 a1	jsr $80a114				jsr checkActionTile
5002	.1e74	809e74					_skipBR
5003	.1e74	809e74	60		rts			rts

5005							.as
5006							.xs
5007	.1e75	809e75					CSTCCY															; Check Sprite To Char Collision Y
5008	.1e75	809e75					_ASSERT_jsr
5009	.1e75	809e75					_ASSERT_axy8
5010	.1e75	809e75	a2 00		ldx #$00		ldx #0
5011	.1e77	809e77	86 0f		stx $0f			stx ZPTemp													; clear the 4 tile solid flags
5012	.1e79	809e79	86 10		stx $10			stx ZPTemp2
5013	.1e7b	809e7b	86 11		stx $11			stx ZPTemp3
5014	.1e7d	809e7d	86 12		stx $12			stx ZPTemp4
5015	.1e7f	809e7f	a0 00		ldy #$00		ldy #0
5016	.1e81	809e81	20 e9 9f	jsr $809fe9		jsr newCollision											; perform collsion
5017	.1e84	809e84	a5 20		lda $20			lda CollideCharTLC
5018	.1e86	809e86	20 9d a0	jsr $80a09d		jsr checkSolidTile
5019	.1e89	809e89	26 0f		rol $0f			rol ZPTemp													; roll the C into variable
5020	.1e8b	809e8b	a5 22		lda $22			lda CollideCharTRC
5021	.1e8d	809e8d	20 9d a0	jsr $80a09d		jsr checkSolidTile										; C = 0 clear, C = 1 solid
5022	.1e90	809e90	26 10		rol $10			rol ZPTemp2
5023	.1e92	809e92	a5 24		lda $24			lda CollideCharBLC
5024	.1e94	809e94	20 9d a0	jsr $80a09d		jsr checkSolidTile
5025	.1e97	809e97	26 11		rol $11			rol ZPTemp3
5026	.1e99	809e99	a5 26		lda $26			lda CollideCharBRC
5027	.1e9b	809e9b	20 9d a0	jsr $80a09d		jsr checkSolidTile
5028	.1e9e	809e9e	26 12		rol $12			rol ZPTemp4													; for all 4
5029	.1ea0	809ea0	ad 9e 02	lda $80029e		lda checkSpriteToCharData.yDeltaCheck
5030	.1ea3	809ea3	10 25		bpl $809eca		bpl _checkDown
5031									; check up
5032	.1ea5	809ea5	a5 0f		lda $0f				lda ZPTemp
5033	.1ea7	809ea7	05 10		ora $10				ora ZPTemp2												; if top left or top right
5034	.1ea9	809ea9	f0 34		beq $809edf			beq _exit												; if nothing solid 0
5035										; abort jump
5036	.1eab	809eab	ad c3 00	lda $8000c3				lda PlayerData.hitBubbleNum					; unless I hit a bubble
5037	.1eae	809eae	f0 04		beq $809eb4				beq _startFall										; at which point just start falling
5038	.1eb0	809eb0	9c a2 02	stz $8002a2					stz checkSpriteToCharData.yDeltaBackup	; clear the Y delta in this case
5039	.1eb3	809eb3	60		rts						rts
5040											;
5041	.1eb4	809eb4						_startFall
5042	.1eb4	809eb4	a9 01		lda #$01			lda #1
5043	.1eb6	809eb6	8d be 00	sta $8000be			sta PlayerData.isFallingNZ							; set falling
5044	.1eb9	809eb9	1a		inc a				inc a ;  #2
5045	.1eba	809eba	8d c5 00	sta $8000c5			sta PlayerData.yDeltaAccum.lo						; set delta to 2.0078125 aka 2
5046	.1ebd	809ebd	8d c6 00	sta $8000c6			sta PlayerData.yDeltaAccum.hi
5047	.1ec0	809ec0	60		rts				rts
5048									;
5049	.1ec1	809ec1						_onGround
5050	.1ec1	809ec1	9c a2 02	stz $8002a2			stz checkSpriteToCharData.yDeltaBackup			; can't fall anymore
5051	.1ec4	809ec4	9c 9e 02	stz $80029e			stz checkSpriteToCharData.yDeltaCheck
5052	.1ec7	809ec7	4c e8 90	jmp $8090e8			jmp enterOnGround
5053									;
5054	.1eca	809eca					_checkDown
5055	.1eca	809eca	ad c3 00	lda $8000c3		lda PlayerData.hitBubbleNum							; is it a bubble
5056	.1ecd	809ecd	d0 10		bne $809edf		bne _exit
5057	.1ecf	809ecf	a5 11		lda $11				lda ZPTemp3												; no
5058	.1ed1	809ed1	05 12		ora $12				ora ZPTemp4												; check bottom two
5059	.1ed3	809ed3	d0 ec		bne $809ec1			bne _onGround											; if solid stand on ground
5060	.1ed5	809ed5	ae bc 00	ldx $8000bc				ldx PlayerData.OnGroundNZ
5061	.1ed8	809ed8	9c bc 00	stz $8000bc				stz PlayerData.OnGroundNZ						; if we were on the ground, i.e just walked off the ledge
5062	.1edb	809edb	e0 00		cpx #$00				cpx #0
5063	.1edd	809edd	d0 d5		bne $809eb4				bne _startFall										; we need to start falling
5064	.1edf	809edf					_exit
5065	.1edf	809edf	60		rts			rts

5067							.as
5068							.xs
5069	.1ee0	809ee0					CSTCCX													; Check Sprite To Char Collision X
5070	.1ee0	809ee0					_ASSERT_jsr
5071	.1ee0	809ee0					_ASSERT_axy8
5072	.1ee0	809ee0	a2 00		ldx #$00		ldx #0
5073	.1ee2	809ee2	86 0f		stx $0f			stx ZPTemp
5074	.1ee4	809ee4	86 10		stx $10			stx ZPTemp2
5075	.1ee6	809ee6	86 11		stx $11			stx ZPTemp3
5076	.1ee8	809ee8	86 12		stx $12			stx ZPTemp4											; clear the solid char flags
5077	.1eea	809eea	a0 00		ldy #$00		ldy #0
5078	.1eec	809eec	20 e9 9f	jsr $809fe9		jsr newCollision									; do collision
5079	.1eef	809eef	a5 20		lda $20			lda CollideCharTLC								; check if each point is solid and store in ZP Temps
5080	.1ef1	809ef1	20 9d a0	jsr $80a09d		jsr checkSolidTile								; C = 0 not solid, C = 1 solid
5081	.1ef4	809ef4	26 0f		rol $0f			rol ZPTemp
5082	.1ef6	809ef6	a5 22		lda $22			lda CollideCharTRC
5083	.1ef8	809ef8	20 9d a0	jsr $80a09d		jsr checkSolidTile
5084	.1efb	809efb	26 10		rol $10			rol ZPTemp2
5085	.1efd	809efd	a5 24		lda $24			lda CollideCharBLC
5086	.1eff	809eff	20 9d a0	jsr $80a09d		jsr checkSolidTile
5087	.1f02	809f02	26 11		rol $11			rol ZPTemp3
5088	.1f04	809f04	a5 26		lda $26			lda CollideCharBRC
5089	.1f06	809f06	20 9d a0	jsr $80a09d		jsr checkSolidTile
5090	.1f09	809f09	26 12		rol $12			rol ZPTemp4
5091	.1f0b	809f0b	ad 9c 02	lda $80029c		lda checkSpriteToCharData.xDeltaCheck		; do I actually want to move sidways?
5092	.1f0e	809f0e	f0 15		beq $809f25		beq _exit
5093	.1f10	809f10	10 0d		bpl $809f1f		bpl _checkRight
5094									; left
5095	.1f12	809f12	a5 0f		lda $0f				lda ZPtemp
5096	.1f14	809f14	05 11		ora $11				ora ZPtemp3										; the top left or bottom left solid?
5097	.1f16	809f16	f0 0d		beq $809f25			beq _exit										; no exit
5098	.1f18	809f18					_noX
5099	.1f18	809f18	9c 9c 02	stz $80029c		stz checkSpriteToCharData.xDeltaCheck		; clear X movement
5100	.1f1b	809f1b	9c 9d 02	stz $80029d		stz checkSpriteToCharData.xDeltaCheck.hi
5101	.1f1e	809f1e	60		rts			rts
5102								;
5103	.1f1f	809f1f					_checkRight
5104	.1f1f	809f1f	a5 10		lda $10			lda ZPtemp2
5105	.1f21	809f21	05 12		ora $12			ora ZPtemp4											; the top right and bottom right solid?
5106	.1f23	809f23	d0 f3		bne $809f18		bne _noX
5107	.1f25	809f25					_exit
5108	.1f25	809f25	60		rts			rts

5110							; these are the collision boxes for the sprites, each animation indexes into this table
5111	>1f26	809f26	02 02 02 04 00 e8 0c 04		CollisionBoxesX .char 02,02,02,04,00,-24,12,04
5112	>1f2e	809f2e	0d 0d 0d 10 30 30 01 10		CollisionBoxesW .char 13,13,13,16,48, 48,01,16
5113	>1f36	809f36	02 02 00 04 00 0c 0c 01		CollisionBoxesY .char 02,02,00,04,00, 12,12,01
5114	>1f3e	809f3e	0c 10 14 10 0c 1e 01 08		CollisionBoxesH .char 12,16,20,16,12, 30,01,08

5116							.as
5117							.xs
5118	.1f46	809f46					collideBulletAgainstRest
5119	.1f46	809f46					_ASSERT_jsr
5120	.1f46	809f46					_ASSERT_axy8
5121	.1f46	809f46	a0 03		ldy #$03		ldy #3								; bullet uses 4th collision box
5122	.1f48	809f48	a2 01		ldx #$01		ldx #1								; and is sprite 1
5123	.1f4a	809f4a	80 04		bra $809f50		bra collideAgainstRestEntry
5124								;
5125	.1f4c	809f4c					collidePlayerAgainstRest
5126	.1f4c	809f4c					_ASSERT_jsr
5127	.1f4c	809f4c					_ASSERT_axy8
5128	.1f4c	809f4c	a2 00		ldx #$00		ldx #0								; player uses 1st collision box
5129	.1f4e	809f4e	a0 00		ldy #$00		ldy #0								; and is sprite 0
5130	.1f50	809f50					collideAgainstRestEntry
5131	.1f50	809f50	bd d8 03	lda $8003d8,x		lda mplexBuffer.ypos,x
5132	.1f53	809f53	18		clc			clc
5133	.1f54	809f54	79 36 9f	adc $809f36,y		adc CollisionBoxesY,y
5134	.1f57	809f57	85 0a		sta $0a			sta Pointer3.lo					; Pointer3.lo = testingSprite.y+CollisionBoxY
5135	.1f59	809f59	85 19		sta $19			sta TestingSprY1
5136	.1f5b	809f5b	18		clc			clc
5137	.1f5c	809f5c	79 3e 9f	adc $809f3e,y		adc CollisionBoxesH,y			; += CollisionBoxHeight
5138	.1f5f	809f5f	85 0b		sta $0b			sta Pointer3.hi
5139	.1f61	809f61	85 1a		sta $1a			sta TestingSprY2
5140	.1f63	809f63	bd 96 03	lda $800396,x		lda mplexBuffer.xpos,x
5141	.1f66	809f66	18		clc			clc
5142	.1f67	809f67	79 26 9f	adc $809f26,y		adc CollisionBoxesX,y
5143	.1f6a	809f6a	85 17		sta $17			sta TestingSprX1					; = testingSprite.x+CollisionBoxX
5144	.1f6c	809f6c	18		clc			clc
5145	.1f6d	809f6d	79 2e 9f	adc $809f2e,y		adc CollisionBoxesW,y			; += CollisionBoxWidth
5146	.1f70	809f70	85 18		sta $18			sta TestingSprX2
5147	.1f72	809f72	a9 ff		lda #$ff		lda #$FF
5148	.1f74	809f74	85 02		sta $02			sta CurrentEntity					; so we don't skip any
5149	.1f76	809f76	80 28		bra $809fa0		bra collideAgainstEntPlayerEntry
5150								;
5151	.1f78	809f78					collideEntAgainstRest
5152	.1f78	809f78					_ASSERT_jsr
5153	.1f78	809f78					_ASSERT_axy8
5154								; start at the mplex y + 1 and check to see if the Y is in Range
5155								; to do this we need to know which collsiion box the ent we are is using
5156								; and the one that the other is using
5157								; a hit is if my x1 <= y2 && y1 <= x2
5158								; where x1 = my Ent Y, x2 = my Ent Y+Height
5159								; y1 = Other Ent Y, y2 = other Ent Y+Height
5160	.1f78	809f78	a6 02		ldx $02			ldx CurrentEntity
5161	.1f7a	809f7a	a0 00		ldy #$00		ldy #0
5162	.1f7c	809f7c	bd c1 01	lda $8001c1,x		lda EntityData.collisionX1,x
5163	.1f7f	809f7f	18		clc			clc
5164	.1f80	809f80	6d 9c 02	adc $80029c		adc checkSpriteToCharData.xDeltaCheck	; move the ent sprite off by the movement deltas
5165	.1f83	809f83	85 17		sta $17			sta TestingSprX1
5166	.1f85	809f85	bd da 01	lda $8001da,x		lda EntityData.collisionX2,x				; as their collision X1/2 Y1/2 are pre caculated
5167	.1f88	809f88	18		clc			clc
5168	.1f89	809f89	6d 9c 02	adc $80029c		adc checkSpriteToCharData.xDeltaCheck
5169	.1f8c	809f8c	85 18		sta $18			sta TestingSprX2
5170	.1f8e	809f8e	bd f3 01	lda $8001f3,x		lda EntityData.collisionY1,x
5171	.1f91	809f91	18		clc			clc
5172	.1f92	809f92	6d 9e 02	adc $80029e		adc checkSpriteToCharData.yDeltaCheck
5173	.1f95	809f95	85 19		sta $19			sta TestingSprY1
5174	.1f97	809f97	bd 0c 02	lda $80020c,x		lda EntityData.collisionY2,x
5175	.1f9a	809f9a	18		clc			clc
5176	.1f9b	809f9b	6d 9e 02	adc $80029e		adc checkSpriteToCharData.yDeltaCheck
5177	.1f9e	809f9e	85 1a		sta $1a			sta TestingSprY2
5178	.1fa0	809fa0					collideAgainstEntPlayerEntry
5179	.1fa0	809fa0					_ASSERT_axy8
5180	.1fa0	809fa0	a0 02		ldy #$02		ldy #2 ; other slot
5181	.1fa2	809fa2	a2 00		ldx #$00		ldx #0
5182	.1fa4	809fa4	e4 02		cpx $02		-	cpx CurrentEntity
5183	.1fa6	809fa6	f0 1f		beq $809fc7		beq Ent_Ent_Coll_skipSelf				; don't collide against one self
5184	.1fa8	809fa8	bd 12 01	lda $800112,x			lda EntityData.active,x
5185	.1fab	809fab	f0 1a		beq $809fc7			beq Ent_Ent_Coll_skipSelf			; don't collide against in-active or "dead" entities
5186	.1fad	809fad	30 18		bmi $809fc7			bmi Ent_Ent_Coll_skipSelf			; if there active is 0 or - don't collide
5187	.1faf	809faf	64 0f		stz $0f					stz ZPTemp
5188	.1fb1	809fb1	a5 19		lda $19					lda TestingSprY1
5189	.1fb3	809fb3	dd 0c 02	cmp $80020c,x				cmp EntityData.collisionY2,x	; test my Y1 against their Y2
5190	.1fb6	809fb6	20 93 a0	jsr $80a093				jsr doMinMaxBitTest
5191	.1fb9	809fb9	bd f3 01	lda $8001f3,x				lda EntityData.collisionY1,x	; and thier Y1 against my Y2
5192	.1fbc	809fbc	c5 1a		cmp $1a					cmp TestingSprY2
5193	.1fbe	809fbe	20 93 a0	jsr $80a093				jsr doMinMaxBitTest
5194	.1fc1	809fc1	a5 0f		lda $0f					lda ZPTemp							; if my.Y1 < their.Y2 && their.Y1 < my.Y2 we collide
5195	.1fc3	809fc3	29 03		and #$03				and #3								; both tests pass
5196	.1fc5	809fc5	f0 08		beq $809fcf				beq hitY								; then are Y are in range
5197	.1fc7	809fc7					Ent_Ent_Coll_skipSelf
5198	.1fc7	809fc7	e8		inx			inx
5199	.1fc8	809fc8	ec df 00	cpx $8000df		cpx EntityData.number
5200	.1fcb	809fcb	d0 d7		bne $809fa4		bne -
5201	.1fcd	809fcd	18		clc			clc
5202	.1fce	809fce	60		rts			rts

5204							.as
5205							.xs
5206	.1fcf	809fcf					hitY												; now we need to do the same thing but for the X
5207	.1fcf	809fcf					_ASSERT_axy8
5208	.1fcf	809fcf	64 0f		stz $0f			stz ZPTemp									; clear the flags
5209	.1fd1	809fd1	a5 17		lda $17			lda TestingSprX1
5210	.1fd3	809fd3	dd da 01	cmp $8001da,x		cmp EntityData.collisionX2,x			; my X1 vs their X2
5211	.1fd6	809fd6	20 93 a0	jsr $80a093		jsr doMinMaxBitTest
5212	.1fd9	809fd9	bd c1 01	lda $8001c1,x		lda EntityData.collisionX1,x			; their X1 vs my X2
5213	.1fdc	809fdc	c5 18		cmp $18			cmp TestingSprX2
5214	.1fde	809fde	20 93 a0	jsr $80a093		jsr doMinMaxBitTest
5215	.1fe1	809fe1	a5 0f		lda $0f			lda ZPTemp									; if my.X1 < their.X2 && their.X1 < my.X2 we collide
5216	.1fe3	809fe3	29 03		and #$03		and #3
5217	.1fe5	809fe5	d0 e0		bne $809fc7		bne Ent_Ent_Coll_skipSelf
5218	.1fe7	809fe7					hitX
5219	.1fe7	809fe7	38		sec			sec
5220	.1fe8	809fe8	60		rts			rts

5222							.as
5223							.xs
5224	.1fe9	809fe9					newCollision									; there was an original but its all gone now
5225	.1fe9	809fe9					_ASSERT_jsr
5226	.1fe9	809fe9					_ASSERT_axy8
5227	.1fe9	809fe9	a6 1d		ldx $1d			ldx CollideSpriteToCheck
5228	.1feb	809feb	a4 1e		ldy $1e			ldy CollideSpriteBoxIndex				; get the ent and the collision box
5229								; calc the final Xs
5230	.1fed	809fed	bd 96 03	lda $800396,x		lda mplexBuffer.xpos,x
5231	.1ff0	809ff0	18		clc			clc
5232	.1ff1	809ff1	79 26 9f	adc $809f26,y		adc CollisionBoxesX,y
5233	.1ff4	809ff4	6d 9c 02	adc $80029c		adc checkSpriteToCharData.xDeltaCheck
5234	.1ff7	809ff7	85 27		sta $27			sta CollideInternalSprTLX				; TLX = X + collisionBoxX + XDelta
5235	.1ff9	809ff9	18		clc			clc
5236	.1ffa	809ffa	79 2e 9f	adc $809f2e,y		adc CollisionBoxesW,y					; BRX = X + collisionBoxX + XDelta + collisionBoxWidth
5237	.1ffd	809ffd	85 28		sta $28			sta CollideInternalSprBRX
5238								; calc the final Ys
5239	.1fff	809fff	bd d8 03	lda $8003d8,x		lda mplexBuffer.ypos,x
5240	.2002	80a002	18		clc			clc
5241	.2003	80a003	79 36 9f	adc $809f36,y		adc CollisionBoxesY,y
5242	.2006	80a006	6d 9e 02	adc $80029e		adc checkSpriteToCharData.yDeltaCheck
5243	.2009	80a009	20 ee 85	jsr $8085ee		jsr ClipY									; we need to clip it because odd things happen in the exlucsion zone
5244	.200c	80a00c	85 29		sta $29			sta CollideInternalSprTLY				; TLY = clip(Y + CollisionBoxY + YDelta)
5245	.200e	80a00e	18		clc			clc
5246	.200f	80a00f	79 3e 9f	adc $809f3e,y		adc CollisionBoxesH,y
5247	.2012	80a012	20 ee 85	jsr $8085ee		jsr ClipY
5248	.2015	80a015	85 2a		sta $2a			sta CollideInternalSprBRY				; TLY = clip(Y + CollisionBoxY + YDelta + collisionBoxHeight)
5249								; calc the tile index
5250	.2017	80a017	a2 01		ldx #$01		ldx #1
5251	.2019	80a019	b5 27		lda $27,x	-	lda CollideInternalSprTLX,x			; sprite Test Left X and Right X
5252	.201b	80a01b	4a		lsr a			lsr a
5253	.201c	80a01c	4a		lsr a			lsr a
5254	.201d	80a01d	4a		lsr a			lsr a
5255	.201e	80a01e	4a		lsr a			lsr a											; /16
5256	.201f	80a01f	95 2b		sta $2b,x		sta CollideInternalTTLX,x				; Tile Test Left X and Right X
5257	.2021	80a021	ca		dex			dex
5258	.2022	80a022	10 f5		bpl $80a019		bpl -
5259	.2024	80a024	a5 2b		lda $2b			lda CollideInternalTTLX
5260	.2026	80a026	c5 2c		cmp $2c			cmp CollideInternalTBRX					; make sure right has not wrapped and is not < left
5261	.2028	80a028	90 02		bcc $80a02c		bcc +
5262	.202a	80a02a	85 2c		sta $2c				sta CollideInternalTBRX				; clamp the Right to be the same as the left if it has wrapped.
5263	.202c	80a02c					+													; this stop being able to pick up things on the left of the map from the right
5264	.202c	80a02c	a5 29		lda $29			lda CollideInternalSprTLY
5265	.202e	80a02e	29 f0		and #$f0		and #$f0
5266	.2030	80a030	85 2d		sta $2d			sta CollideInternalTTLY					; convert SpriteY to Tile Y which is /16*16 or mask upper 4 bits
5267	.2032	80a032	a5 2a		lda $2a			lda CollideInternalSprBRY
5268	.2034	80a034	29 f0		and #$f0		and #$f0
5269	.2036	80a036	85 2e		sta $2e			sta CollideInternalTBRY					; same with the bottom
5270								; convert the tile X,Y into a the index and pull Char
5271	.2038	80a038	a5 2d		lda $2d			lda CollideInternalTTLY
5272	.203a	80a03a	05 2b		ora $2b			ora CollideInternalTTLX
5273	.203c	80a03c	85 1f		sta $1f			sta CollideCharTLI						; calc index
5274	.203e	80a03e	aa		tax			tax
5275	.203f	80a03f	bd a6 02	lda $8002a6,x		lda tileMapTemp,x							; read tile from map
5276	.2042	80a042	85 20		sta $20			sta CollideCharTLC

5278	.2044	80a044	a5 2d		lda $2d			lda CollideInternalTTLY					; do for all 4 points
5279	.2046	80a046	05 2c		ora $2c			ora CollideInternalTBRX
5280	.2048	80a048	85 21		sta $21			sta CollideCharTRI
5281	.204a	80a04a	aa		tax			tax
5282	.204b	80a04b	bd a6 02	lda $8002a6,x		lda tileMapTemp,x
5283	.204e	80a04e	85 22		sta $22			sta CollideCharTRC

5285	.2050	80a050	a5 2e		lda $2e			lda CollideInternalTBRY
5286	.2052	80a052	05 2b		ora $2b			ora CollideInternalTTLX
5287	.2054	80a054	85 23		sta $23			sta CollideCharBLI
5288	.2056	80a056	aa		tax			tax
5289	.2057	80a057	bd a6 02	lda $8002a6,x		lda tileMapTemp,x
5290	.205a	80a05a	85 24		sta $24			sta CollideCharBLC

5292	.205c	80a05c	a5 2e		lda $2e			lda CollideInternalTBRY
5293	.205e	80a05e	05 2c		ora $2c			ora CollideInternalTBRX
5294	.2060	80a060	85 25		sta $25			sta CollideCharBRI
5295	.2062	80a062	aa		tax			tax
5296	.2063	80a063	bd a6 02	lda $8002a6,x		lda tileMapTemp,x
5297	.2066	80a066	85 26		sta $26			sta CollideCharBRC
5298	.2068	80a068	60		rts			rts

5300	.2069	80a069					makeMinMaxXYForX
5301	.2069	80a069					_ASSERT_jsr
5302	.2069	80a069					_ASSERT_axy8
5303	.2069	80a069	bc e0 00	ldy $8000e0,x		ldy EntityData.type,x								; get the type
5304	.206c	80a06c	b9 09 9d	lda $809d09,y		lda EntityAnimData.collisionBox,y				; get the collision box we want to use
5305	.206f	80a06f	a8		tay			tay
5306	.2070	80a070	bd 98 03	lda $800398,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; get the ents X position
5307	.2073	80a073	18		clc			clc
5308	.2074	80a074	79 26 9f	adc $809f26,y		adc CollisionBoxesX,y								; offset by Box X
5309	.2077	80a077	9d c1 01	sta $8001c1,x		sta EntityData.collisionX1,x						; store it
5310	.207a	80a07a	18		clc			clc
5311	.207b	80a07b	79 2e 9f	adc $809f2e,y		adc CollisionBoxesW,y								; add the width
5312	.207e	80a07e	9d da 01	sta $8001da,x		sta EntityData.collisionX2,x						; store it
5313	.2081	80a081	bd da 03	lda $8003da,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; get the Y
5314	.2084	80a084	18		clc			clc
5315	.2085	80a085	79 36 9f	adc $809f36,y		adc CollisionBoxesY,y								; offset by the Box Y
5316	.2088	80a088	9d f3 01	sta $8001f3,x		sta EntityData.collisionY1,x						; store it
5317	.208b	80a08b	18		clc			clc
5318	.208c	80a08c	79 3e 9f	adc $809f3e,y		adc CollisionBoxesH,y								; add the height
5319	.208f	80a08f	9d 0c 02	sta $80020c,x		sta EntityData.collisionY2,x						; store it
5320	.2092	80a092	60		rts			rts

5322	.2093	80a093					doMinMaxBitTest
5323	.2093	80a093					_ASSERT_jsr
5324	.2093	80a093					_ASSERT_axy8
5325	.2093	80a093	f0 04		beq $80a099		beq _secPass
5326	.2095	80a095	90 02		bcc $80a099		bcc _secPass					; <= Pass
5327	.2097	80a097	b0 01		bcs $80a09a			bcs _secFail				; C = 1 and return fall
5328	.2099	80a099					_secPass
5329	.2099	80a099	18		clc			clc								; needed as BEQ will have C = 1
5330	.209a	80a09a					_secFail
5331	.209a	80a09a	26 0f		rol $0f			rol ZPTemp						; record bit
5332	.209c	80a09c	60		rts			rts

5334							.as
5335							.xs
5336							; carry set = not safe, clear = safe
5337	.209d	80a09d					checkSolidTile
5338	.209d	80a09d					_ASSERT_jsr
5339	.209d	80a09d					_ASSERT_axy8
5340	.209d	80a09d	ae a9 00	ldx $8000a9		ldx GameData.exitOpenNZ				; closed doors are solid, open ones are not
5341	.20a0	80a0a0	d0 04		bne $80a0a6		bne _skipDoorCheck
5342	.20a2	80a0a2	c9 11		cmp #$11			cmp #kTiles.exit
5343	.20a4	80a0a4	f0 14		beq $80a0ba			beq _notSafe
5344	.20a6	80a0a6					_skipDoorCheck
5345	.20a6	80a0a6	c9 13		cmp #$13		cmp #kTiles.pipe						; is it a pipe?
5346	.20a8	80a0a8	f0 10		beq $80a0ba		beq _notSafe
5347	.20aa	80a0aa	c9 21		cmp #$21			cmp #kTiles.dissNoColide		; an empty dissolve char?
5348	.20ac	80a0ac	f0 12		beq $80a0c0			beq _exitSafe
5349	.20ae	80a0ae	c9 14		cmp #$14			cmp #kTiles.diss
5350	.20b0	80a0b0	b0 0a		bcs $80a0bc				bcs _checkNotShadow			; > diss solid?
5351	.20b2	80a0b2	c9 01		cmp #$01					cmp #kTiles.wall
5352	.20b4	80a0b4	90 0a		bcc $80a0c0					bcc _exitSafe				; < wall ?
5353	.20b6	80a0b6	c9 06		cmp #$06						cmp #kTiles.spike		; >= spike?
5354	.20b8	80a0b8	b0 06		bcs $80a0c0						bcs _exitSafe
5355	.20ba	80a0ba					_notsafe
5356	.20ba	80a0ba	38		sec			sec
5357	.20bb	80a0bb	60		rts			rts
5358								;
5359	.20bc	80a0bc					_checkNotShadow
5360	.20bc	80a0bc	c9 21		cmp #$21		cmp #kTiles.dissNoColide
5361	.20be	80a0be	90 fa		bcc $80a0ba		bcc _notsafe
5362	.20c0	80a0c0					_exitSafe
5363	.20c0	80a0c0	18		clc				clc
5364	.20c1	80a0c1	60		rts				rts
5365									;


5368							.as
5369							.xs
5370	.20c2	80a0c2					checkOnDissTile
5371	.20c2	80a0c2					_ASSERT_jsr
5372	.20c2	80a0c2					_ASSERT_axy8
5373	.20c2	80a0c2	ad bc 00	lda $8000bc		lda PlayerData.OnGroundNZ						; can't be on it if I'm not on the ground
5374	.20c5	80a0c5	d0 01		bne $80a0c8		bne _c
5375	.20c7	80a0c7					_exit
5376	.20c7	80a0c7	60		rts				rts
5377									;
5378	.20c8	80a0c8					_c	; get the tile below the player
5379	.20c8	80a0c8	ad d1 00	lda $8000d1		lda TickDowns.dissBlocks						; is it time to dissolve some more?
5380	.20cb	80a0cb	d0 fa		bne $80a0c7		bne _exit
5381	.20cd	80a0cd	a5 16		lda $16				lda ActiveTile
5382	.20cf	80a0cf	c9 14		cmp #$14			cmp #kTiles.diss								; is the active tile < diss?
5383	.20d1	80a0d1	90 f4		bcc $80a0c7			bcc _exit
5384	.20d3	80a0d3	c9 21		cmp #$21				cmp #kTiles.dissNoColide				; >- diss noColide
5385	.20d5	80a0d5	b0 f0		bcs $80a0c7				bcs _exit
5386	.20d7	80a0d7	a9 08		lda #$08					lda #kTimers.dissBlocksValue		; no, then we are on a diss tile
5387	.20d9	80a0d9	8d d1 00	sta $8000d1					sta TickDowns.dissBlocks			; reset the count down
5388	.20dc	80a0dc	a6 15		ldx $15						ldx ActiveTileIndex					; get the index
5389	.20de	80a0de	fe a6 02	inc $8002a6,x					inc tileMapTemp,x						; disolve it 1 bit more
5390	.20e1	80a0e1	bd a6 02	lda $8002a6,x					lda tileMapTemp,x
5391	.20e4	80a0e4	c9 20		cmp #$20					cmp #kTiles.dissNoColide-1			; until done
5392	.20e6	80a0e6	08		php						php										; save compare
5393	.20e7	80a0e7	20 4d 8d	jsr $808d4d						jsr pltSingleTile					; update the tile in question on the screen mirror
5394	.20ea	80a0ea	28		plp						plp										; restore compare
5395	.20eb	80a0eb	d0 da		bne $80a0c7					bne _exit								; not final tile, exit
5396	.20ed	80a0ed					CheckForShadowPlots
5397	.20ed	80a0ed					_ASSERT_axy8
5398	.20ed	80a0ed	a2 01		ldx #$01		ldx #1
5399	.20ef	80a0ef	20 f9 a0	jsr $80a0f9		jsr _checkRemoveTile								; when one removes a tile, one must check to the right
5400	.20f2	80a0f2	a2 10		ldx #$10		ldx #16
5401	.20f4	80a0f4	20 f9 a0	jsr $80a0f9		jsr _checkRemoveTile								; below it
5402	.20f7	80a0f7	a2 11		ldx #$11		ldx #17
5403	.20f9	80a0f9					_checkRemoveTile										; and bellow to the right for new shadow pieces
5404	.20f9	80a0f9	86 0f		stx $0f			stx ZPTemp											; store the offset we want
5405	.20fb	80a0fb	a5 15		lda $15			lda ActiveTileIndex								; get the main tile
5406	.20fd	80a0fd	48		pha			pha													; save it
5407	.20fe	80a0fe	18		clc				clc
5408	.20ff	80a0ff	65 0f		adc $0f				adc ZPTemp										; offset it
5409	.2101	80a101	c9 c0		cmp #$c0			cmp #kLevelSizeMax							; still on the map?
5410	.2103	80a103	b0 0b		bcs $80a110			bcs _exit2
5411	.2105	80a105	85 15		sta $15					sta ActiveTileIndex						; make it the active for now
5412	.2107	80a107	a8		tay					tay
5413	.2108	80a108	20 ae 8c	jsr $808cae				jsr tileIsSafeToChange_88				; is it something we need to add shadow to?
5414	.210b	80a10b	90 03		bcc $80a110				bcc _exit2
5415	.210d	80a10d	20 3e 8d	jsr $808d3e					jsr clearTile							; "clear" it
5416	.2110	80a110					_exit2
5417	.2110	80a110	68		pla			pla													; restore the actual active tile
5418	.2111	80a111	85 15		sta $15			sta ActiveTileIndex
5419	.2113	80a113	60		rts			rts

5421							.as
5422							.xs
5423	.2114	80a114					checkActionTile
5424	.2114	80a114					_ASSERT_jsr
5425	.2114	80a114					_ASSERT_axy8
5426	.2114	80a114	85 16		sta $16			sta ActiveTile										; for later
5427	.2116	80a116	86 15		stx $15			stx ActiveTileIndex								; for later
5428	.2118	80a118	a0 00		ldy #$00		ldy #0
5429	.211a	80a11a	d9 2b a1	cmp $80a12b,y	-	cmp TileFuncLookup,y								; does this tile have a function to handle it?
5430	.211d	80a11d	f0 06		beq $80a125		beq _found
5431	.211f	80a11f	c8		iny				iny
5432	.2120	80a120	c0 0c		cpy #$0c			cpy # size(TileFuncLookup)
5433	.2122	80a122	d0 f6		bne $80a11a			bne -
5434	.2124	80a124	60		rts				rts												; no, no action then
5435									;
5436	.2125	80a125					_found
5437	.2125	80a125					_ASSERT_Y_LT_12
5438	.2125	80a125	98		tya			tya
5439	.2126	80a126	0a		asl a			asl a													; dispatch the function then
5440	.2127	80a127	aa		tax			tax
5441	.2128	80a128	7c 37 a1	jmp ($80a137,x)		jmp (TileFuncLUT,x)


5444	>212b	80a12b	08 07 09 0a 0b 0c 06 0e		TileFuncLookup .byte kTiles.fruit,kTiles.flower,kTiles.key1,kTiles.key2,kTiles.key3,kTiles.key4,kTiles.spike,kTiles.spring,kTiles.potion,kTiles.shield,kTiles.exit,kTiles.egg
	>2133	80a133	0f 0d 11 10
5445	>2137	80a137	4f a1 5d a1 7d a1 7d a1		TileFuncLUT .word <>(fruitFunc, flowerFunc, keyFunc, keyFunc, keyFunc, keyFunc, spikeFunc, springFunc, potionFunc, shildFunction, exitFunc, eggFunc)
	>213f	80a13f	7d a1 7d a1 ad a1 b3 a1 c1 a1 e5 a1 14 a2 2a a2

5447							.as
5448							.xs
5449	.214f	80a14f					fruitFunc
5450	.214f	80a14f					_ASSERT_jsr
5451	.214f	80a14f					_ASSERT_axy8
5452	.214f	80a14f	20 3e 8d	jsr $808d3e		jsr clearTile					; fruit, remove it
5453	.2152	80a152	a9 00		lda #$00		lda #kScoreIndex.Fruit		; give some points
5454	.2154	80a154	20 fd 85	jsr $8085fd		jsr giveScore
5455	.2157	80a157	a9 02		lda #$02		lda #kSFX.coins
5456	.2159	80a159	4c 62 bd	jmp $80bd62		jmp playSFX
5457	.215c	80a15c	60		rts			rts

5459							.as
5460							.xs
5461	.215d	80a15d					flowerFunc
5462	.215d	80a15d					_ASSERT_jsr
5463	.215d	80a15d					_ASSERT_axy8
5464	.215d	80a15d	20 3e 8d	jsr $808d3e		jsr clearTile				; flower, remove it
5465	.2160	80a160	a9 00		lda #$00		lda #kScoreIndex.fruit	; give same amount of points as fruit
5466	.2162	80a162	20 fd 85	jsr $8085fd		jsr giveScore
5467	.2165	80a165	a9 03		lda #$03		lda #kSFX.flower
5468	.2167	80a167	20 62 bd	jsr $80bd62		jsr playSFX
5469	.216a	80a16a	ee 9b 00	inc $80009b		inc GameData.flowers		; add 1 flower to collection
5470	.216d	80a16d	ad 9b 00	lda $80009b		lda GameData.flowers
5471	.2170	80a170	c9 08		cmp #$08		cmp #8						; enough for a life?
5472	.2172	80a172	d0 06		bne $80a17a		bne _exit
5473	.2174	80a174	9c 9b 00	stz $80009b			stz GameData.flowers	; trade them all in
5474	.2177	80a177	20 dc 91	jsr $8091dc			jsr awardLife_88		; get life
5475	.217a	80a17a					_exit
5476	.217a	80a17a	4c 88 88	jmp $808888		jmp pltFlowers				; update the HUD

5478							.as
5479							.xs
5480	.217d	80a17d					keyFunc
5481	.217d	80a17d					_ASSERT_axy8
5482	.217d	80a17d	20 3e 8d	jsr $808d3e		jsr clearTile					; key, remove it
5483	.2180	80a180	a9 02		lda #$02		lda #kScoreIndex.key			; give points
5484	.2182	80a182	20 fd 85	jsr $8085fd		jsr giveScore
5485	.2185	80a185	ce ab 00	dec $8000ab		dec LevelData.numKeysLeft	; count down total number of keys left
5486	.2188	80a188	a5 16		lda $16			lda ActiveTile
5487	.218a	80a18a	20 93 8e	jsr $808e93		jsr countTempMapTile_88		; do we have any more of these keys still ( there are actually 4 keys )
5488	.218d	80a18d	d0 08		bne $80a197		bne _done						; yes
5489	.218f	80a18f	a5 16		lda $16				lda ActiveTile				; no remove all the walls that match the key number
5490	.2191	80a191	38		sec				sec
5491	.2192	80a192	e9 07		sbc #$07			sbc #kKeyToWallDelta
5492	.2194	80a194	20 a4 8e	jsr $808ea4			jsr removeAllTilesOf_88
5493	.2197	80a197					_done
5494	.2197	80a197	ad ab 00	lda $8000ab		lda LevelData.numKeysLeft	; do we have any keys left
5495	.219a	80a19a	f0 06		beq $80a1a2		beq _changeDoor				; no, open the door
5496	.219c	80a19c	a9 02		lda #$02			lda #kSFX.coins
5497	.219e	80a19e	4c 62 bd	jmp $80bd62			jmp playSFX
5498	.21a1	80a1a1	60		rts				rts ; above is now jmp
5499	.21a2	80a1a2					_changeDoor
5500	.21a2	80a1a2	a9 01		lda #$01		lda #1
5501	.21a4	80a1a4	8d a9 00	sta $8000a9		sta GameData.exitOpenNZ		; set door to open
5502	.21a7	80a1a7	a9 01		lda #$01		lda #kSFX.DOOROPEN
5503	.21a9	80a1a9	4c 62 bd	jmp $80bd62		jmp playSFX
5504	.21ac	80a1ac	60		rts			rts ; above is now jmp

5506							.as
5507							.xs
5508	.21ad	80a1ad					spikeFunc
5509	.21ad	80a1ad					_ASSERT_axy8
5510	.21ad	80a1ad	a9 01		lda #$01		lda #1
5511	.21af	80a1af	8d b6 00	sta $8000b6		sta PlayerData.deadNZ	; hit spike, you die
5512	.21b2	80a1b2	60		rts			rts

5514							.as
5515							.xs
5516	.21b3	80a1b3					springFunc
5517	.21b3	80a1b3					_ASSERT_axy8
5518	.21b3	80a1b3	20 3e 8d	jsr $808d3e		jsr clearTile					; remove the tile
5519	.21b6	80a1b6	a9 06		lda #$06		lda #kSFX.powerup
5520	.21b8	80a1b8	20 62 bd	jsr $80bd62		jsr playSFX
5521	.21bb	80a1bb	a9 01		lda #$01		lda #1
5522	.21bd	80a1bd	8d ba 00	sta $8000ba		sta PlayerData.canFloatNZ	; give float power
5523	.21c0	80a1c0	60		rts			rts

5525							.as
5526							.xs
5527	.21c1	80a1c1					potionFunc
5528	.21c1	80a1c1					_ASSERT_axy8
5529	.21c1	80a1c1	20 3e 8d	jsr $808d3e		jsr clearTile					; remove tile
5530	.21c4	80a1c4	a2 00		ldx #$00		ldx #0
5531	.21c6	80a1c6	86 15		stx $15			stx ActiveTileIndex			; start at top left
5532	.21c8	80a1c8					_loop
5533	.21c8	80a1c8	bd a6 02	lda $8002a6,x		lda tileMapTemp,x
5534	.21cb	80a1cb	c9 06		cmp #$06		cmp #kTiles.spike				; is this a spike ?
5535	.21cd	80a1cd	d0 08		bne $80a1d7		bne _next
5536	.21cf	80a1cf	a9 08		lda #$08			lda #kTiles.fruit			; its is now fruit
5537	.21d1	80a1d1	9d a6 02	sta $8002a6,x			sta tileMapTemp,x
5538	.21d4	80a1d4	20 4d 8d	jsr $808d4d			jsr pltSingleTile			; update screen mirror
5539	.21d7	80a1d7					_next
5540	.21d7	80a1d7	e6 15		inc $15			inc ActiveTileIndex
5541	.21d9	80a1d9	a6 15		ldx $15			ldx ActiveTileIndex
5542	.21db	80a1db	e0 c0		cpx #$c0		cpx #kLevelSizeMax			; until all are scanned
5543	.21dd	80a1dd	d0 e9		bne $80a1c8		bne _loop
5544	.21df	80a1df	a9 06		lda #$06		lda #kSFX.powerup
5545	.21e1	80a1e1	4c 62 bd	jmp $80bd62		jmp playSFX
5546	.21e4	80a1e4	60		rts			rts ; above is now jmp

5548							.as
5549							.xs
5550	.21e5	80a1e5					shildFunction
5551	.21e5	80a1e5					_ASSERT_axy8
5552	.21e5	80a1e5	20 3e 8d	jsr $808d3e		jsr clearTile									; remove the tile
5553	.21e8	80a1e8	a9 01		lda #$01		lda #1
5554	.21ea	80a1ea	8d b7 00	sta $8000b7		sta PlayerData.hasShieldNZ					; give the shield power
5555	.21ed	80a1ed	a9 06		lda #$06		lda #kSFX.powerup
5556	.21ef	80a1ef	20 62 bd	jsr $80bd62		jsr playSFX
5557	.21f2	80a1f2	a9 f4		lda #$f4		lda #<kShieldTimer
5558	.21f4	80a1f4	8d b8 00	sta $8000b8		sta PlayerData.shieldTimer.lo				; reset the timer
5559	.21f7	80a1f7	a9 01		lda #$01		lda #>kShieldTimer
5560	.21f9	80a1f9	8d b9 00	sta $8000b9		sta PlayerData.shieldTimer.hi
5561	.21fc	80a1fc	a9 32		lda #$32		lda #50
5562	.21fe	80a1fe	8d d6 00	sta $8000d6		sta TickDowns.shieldFlashTimerSpeedUp	; and the speed up timer value
5563	.2201	80a201	a9 10		lda #$10		lda #16
5564	.2203	80a203	8d d0 00	sta $8000d0		sta PlayerData.baseFlashTimeDelta		; and the base delta
5565	.2206	80a206	60		rts			rts

5567							.as
5568							.xs
5569	.2207	80a207					clearShieldState
5570	.2207	80a207					_ASSERT_jsr
5571	.2207	80a207					_ASSERT_axy8
5572	.2207	80a207	9c b7 00	stz $8000b7		stz PlayerData.hasShieldNZ					; no power
5573	.220a	80a20a	9c cf 00	stz $8000cf		stz PlayerData.flashColour					; no flash
5574	.220d	80a20d	9c b8 00	stz $8000b8		stz PlayerData.shieldTimer.lo				; timer is 0
5575	.2210	80a210	9c b9 00	stz $8000b9		stz PlayerData.shieldTimer.hi
5576	.2213	80a213	60		rts			rts

5578							.as
5579							.xs
5580	.2214	80a214					exitFunc
5581	.2214	80a214					_ASSERT_jsr
5582	.2214	80a214					_ASSERT_axy8
5583	.2214	80a214	ad a9 00	lda $8000a9		lda GameData.exitOpenNZ						; it is open right?
5584	.2217	80a217	f0 10		beq $80a229		beq _notOpen
5585	.2219	80a219	9c a9 00	stz $8000a9			stz GameData.exitOpenNZ					; its closed now then
5586	.221c	80a21c	a5 15		lda $15				lda ActiveTileIndex
5587	.221e	80a21e	8d ce 00	sta $8000ce			sta PlayerData.exitAtIndex				; set the exit position ( there are up to 2 per level )
5588	.2221	80a221	a9 04		lda #$04			lda #kPlayerState.exit					; set player to exit state
5589	.2223	80a223	8d b4 00	sta $8000b4			sta PlayerData.state
5590	.2226	80a226	8d b5 00	sta $8000b5			sta PlayerData.minorState				; set minor to "entering death state"
5591	.2229	80a229					_notOpen
5592	.2229	80a229	60		rts			rts

5594							.as
5595							.xs
5596	.222a	80a22a					eggFunc
5597	.222a	80a22a					_ASSERT_jsr
5598	.222a	80a22a					_ASSERT_axy8
5599	.222a	80a22a	20 3e 8d	jsr $808d3e		jsr clearTile								; remove tile
5600	.222d	80a22d	ee cd 00	inc $8000cd		inc PlayerData.numBulletEgg			; give 1 more bullet egg
5601	.2230	80a230	a9 06		lda #$06		lda #kSFX.powerup
5602	.2232	80a232	4c 62 bd	jmp $80bd62		jmp playSFX
5603								;rts ; above is now jmp

5605							.as
5606							.xs
5607	.2235	80a235					animateDoor_88
5608	.2235	80a235					_ASSERT_jsr
5609	.2235	80a235					_ASSERT_axy8
5610	.2235	80a235	ad a9 00	lda $8000a9		lda GameData.exitOpenNZ					; its open right?
5611	.2238	80a238	f0 1c		beq $80a256		beq aDexit
5612	.223a	80a23a	ad d3 00	lda $8000d3			lda TickDowns.doorAnim				; time for next frame?
5613	.223d	80a23d	d0 17		bne $80a256			bne aDexit
5614	.223f	80a23f	a9 0a		lda #$0a				lda #kTimers.DoorAnimeRate
5615	.2241	80a241	8d d3 00	sta $8000d3				sta TickDowns.doorAnim			; reset timer
5616	.2244	80a244	ad ae 00	lda $8000ae				lda LevelData.exitIndex			; set the tile index
5617	.2247	80a247	85 15		sta $15					sta ActiveTileIndex
5618	.2249	80a249	20 57 a2	jsr $80a257				jsr animateInternal_88			; animate it
5619	.224c	80a24c	ad af 00	lda $8000af				lda LevelData.exitIndex+1		; do we have two doors?
5620	.224f	80a24f	c9 ff		cmp #$ff				cmp #$ff
5621	.2251	80a251	f0 03		beq $80a256				beq aDexit
5622	.2253	80a253	85 15		sta $15						sta ActiveTileIndex			; yes, animate it too
5623	.2255	80a255	f0		beq						gne animateInternal_88
5624	.2256	80a256					aDexit
5625	.2256	80a256	60		rts			rts

5627							.as
5628							.xs
5629	.2257	80a257					animateInternal_88
5630	.2257	80a257					_ASSERT_jsr
5631	.2257	80a257					_ASSERT_axy8
5632	.2257	80a257	ad b0 00	lda $8000b0		lda LevelData.exitFrame
5633	.225a	80a25a	cd b1 00	cmp $8000b1		cmp LevelData.exitTargetFrame			; have we reached the target frame
5634	.225d	80a25d	f0 f7		beq $80a256		beq aDexit									; which is either fully open or fully closed
5635	.225f	80a25f	18		clc			clc
5636	.2260	80a260	6d b2 00	adc $8000b2		adc LevelData.exitFrameDelta			; move to next frames (1 or -1)
5637	.2263	80a263	8d b0 00	sta $8000b0		sta LevelData.exitFrame
5638	.2266	80a266	82 e8 ea	brl $808d51		gra pltSingleTileNoLookup				; draw it

5640							.as
5641							.xs
5642	.2269	80a269					setAnimateDoorToOpen_88
5643	.2269	80a269					_ASSERT_jsr
5644	.2269	80a269					_ASSERT_axy8
5645	.2269	80a269	a9 0a		lda #$0a		lda #kDoorClosed
5646	.226b	80a26b	8d b0 00	sta $8000b0		sta LevelData.exitFrame					; we start at the closed frame
5647	.226e	80a26e	a9 0e		lda #$0e		lda #kDoorOpen
5648	.2270	80a270	8d b1 00	sta $8000b1		sta LevelData.exitTargetFrame			; end on open
5649	.2273	80a273	a9 01		lda #$01		lda #1
5650	.2275	80a275	8d b2 00	sta $8000b2		sta LevelData.exitFrameDelta			; +1 to get to next frame
5651	.2278	80a278	60		rts			rts

5653							.as
5654							.xs
5655	.2279	80a279					setAnimateDoorToClose_88
5656	.2279	80a279					_ASSERT_jsr
5657	.2279	80a279					_ASSERT_axy8
5658	.2279	80a279	a9 0e		lda #$0e		lda #kDoorOpen
5659	.227b	80a27b	8d b0 00	sta $8000b0		sta LevelData.exitFrame					; we state at open frame
5660	.227e	80a27e	a9 0a		lda #$0a		lda #kDoorClosed
5661	.2280	80a280	8d b1 00	sta $8000b1		sta LevelData.exitTargetFrame			; end of closed
5662	.2283	80a283	a9 ff		lda #$ff		lda #-1
5663	.2285	80a285	8d b2 00	sta $8000b2		sta LevelData.exitFrameDelta			; -1 to get to next frame
5664	.2288	80a288	60		rts			rts


5667							; ----- @Level Data@ -----

5669	>2289	80a289	c7 a2 94 a3 61 a4 2c a5		LevelTable .word <>(fileTileMap,Level02,Level03,Level04,Level05,Level06,Level07,Level08,Level09,Level10,Level11,Level12,Level13,Level14,Level15,Level16,Level17,Level18,Level19,Level20,Level21,Level22,Level23,Level24,Level25,Level26,Level27,Level28,Level29,Level30,Level31)
	>2291	80a291	fb a5 c2 a6 93 a7 66 a8 2f a9 00 aa c7 aa 96 ab
	>22a1	80a2a1	65 ac 36 ad 09 ae d2 ae a1 af 72 b0 43 b1 12 b2
	>22b1	80a2b1	db b2 ac b3 77 b4 42 b5 15 b6 e0 b6 b1 b7 84 b8
	>22c1	80a2c1	51 b9 22 ba ed ba

5671	>22c7	80a2c7	c4 00 c4 00 00 00 00 00		fileTileMap	.binary "../levels/01.bin"
	>22cf	80a2cf	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>22df	80a2df	00 01 01 01 01 01 00 00 00 00 00 00 08 08 08 08
	>22ef	80a2ef	08 09 00 00 00 09 08 08 00 00 00 00 01 01 01 01
	>22ff	80a2ff	01 01 00 00 00 01 01 01 00 00 00 00 07 07 07 01
	>230f	80a30f	00 00 00 00 00 00 00 01 08 08 00 00 07 07 07 01
	>231f	80a31f	00 00 00 00 00 00 00 01 01 01 00 00 08 08 08 03
	>232f	80a32f	00 0a 00 00 00 00 00 02 07 02 09 12 14 14 14 01
	>233f	80a33f	01 01 00 00 00 01 01 01 14 01 01 01 06 06 06 06
	>234f	80a34f	06 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00
	>235f	80a35f	00 01 01 00 01 01 00 00 00 00 00 01 00 00 00 00
	>236f	80a36f	00 00 00 00 00 00 00 00 10 00 00 11 01 01 01 01
	>237f	80a37f	01 01 01 01 01 01 01 01 01 01 01 01 04 a7 30 47
	>238f	80a38f	20 8a 03 6a 01
5672	>2394	80a394	c4 00 c4 00 00 00 00 00		Level02		.binary "../levels/02.bin"
	>239c	80a39c	00 00 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>23ac	80a3ac	00 08 08 08 08 08 08 00 00 00 00 00 12 00 09 00
	>23bc	80a3bc	00 08 08 08 08 08 08 00 00 09 00 00 01 01 01 00
	>23cc	80a3cc	00 08 08 08 08 08 08 00 00 01 01 11 00 00 00 00
	>23dc	80a3dc	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 00
	>23ec	80a3ec	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 09
	>23fc	80a3fc	00 00 08 08 08 08 00 00 09 00 00 00 01 01 01 01
	>240c	80a40c	00 00 00 01 01 00 00 00 01 01 01 01 00 00 00 00
	>241c	80a41c	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>242c	80a42c	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>243c	80a43c	09 00 00 08 08 00 00 09 00 00 00 00 00 01 01 01
	>244c	80a44c	01 00 00 08 08 00 00 01 01 01 01 00 04 2f 10 60
	>245c	80a45c	10 a2 03 ad 03
5673	>2461	80a461	c4 00 c4 00 00 00 00 00		Level03		.binary "../levels/03.bin"
	>2469	80a469	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00
	>2479	80a479	00 00 00 00 00 00 00 00 00 00 00 07 08 00 00 00
	>2489	80a489	00 00 00 00 00 00 00 00 00 00 00 07 01 00 01 01
	>2499	80a499	01 00 09 00 00 09 00 01 01 01 14 14 00 00 01 00
	>24a9	80a4a9	00 00 00 00 00 00 00 00 00 01 08 08 00 01 01 00
	>24b9	80a4b9	00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 00
	>24c9	80a4c9	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>24d9	80a4d9	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>24e9	80a4e9	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>24f9	80a4f9	00 00 00 00 00 00 00 00 00 06 00 00 07 12 01 00
	>2509	80a509	00 00 00 00 00 00 00 00 0f 06 06 06 13 01 01 01
	>2519	80a519	01 01 13 01 01 13 01 01 01 01 01 11 03 94 10 9b
	>2529	80a529	12 23 20
5674	>252c	80a52c	c4 00 c4 00 09 00 00 00		Level04		.binary "../levels/04.bin"
	>2534	80a534	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>2544	80a544	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08
	>2554	80a554	08 08 00 00 00 00 08 08 08 00 12 00 00 01 01 01
	>2564	80a564	01 01 00 00 00 00 01 01 01 01 01 00 09 00 00 00
	>2574	80a574	00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00
	>2584	80a584	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 07
	>2594	80a594	00 00 00 00 00 00 00 00 07 00 00 00 02 02 01 01
	>25a4	80a5a4	00 00 00 00 00 00 00 00 01 01 02 02 00 00 00 01
	>25b4	80a5b4	01 14 01 07 07 01 14 01 01 00 00 00 11 00 00 00
	>25c4	80a5c4	03 00 06 00 00 06 00 03 00 00 00 11 01 00 0a 00
	>25d4	80a5d4	03 00 0b 00 00 0b 00 03 00 0a 00 01 01 01 01 01
	>25e4	80a5e4	01 01 01 01 01 01 01 01 01 01 01 01 05 67 22 1b
	>25f4	80a5f4	22 14 20 81 03 8e 03
5675	>25fb	80a5fb	c4 00 c4 00 00 00 00 00		Level05		.binary "../levels/04boss01.bin"
	>2603	80a603	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>2613	80a613	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>2623	80a623	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2633	80a633	00 00 00 00 00 00 00 00 00 00 00 00 09 00 0d 00
	>2643	80a643	00 00 00 09 09 00 00 00 00 0e 00 09 01 01 01 00
	>2653	80a653	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2663	80a663	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>2673	80a673	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>2683	80a683	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2693	80a693	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>26a3	80a6a3	00 00 00 09 09 00 00 00 00 00 00 11 01 01 01 01
	>26b3	80a6b3	00 00 01 01 01 01 00 00 01 01 01 01 01 67 82
5676	>26c2	80a6c2	c4 00 c4 00 00 00 00 00		Level06		.binary "../levels/05.bin"
	>26ca	80a6ca	00 00 00 00 00 00 00 00 00 00 08 08 00 00 00 00
	>26da	80a6da	00 00 00 00 00 00 00 00 00 00 08 08 12 09 00 00
	>26ea	80a6ea	00 00 00 00 00 00 00 00 00 09 08 08 01 01 00 00
	>26fa	80a6fa	00 01 07 07 07 01 00 00 00 01 01 01 00 00 00 09
	>270a	80a70a	00 00 00 00 00 00 00 09 00 00 00 00 0f 00 00 01
	>271a	80a71a	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
	>272a	80a72a	00 09 00 00 00 09 00 00 00 00 00 00 00 00 00 00
	>273a	80a73a	00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00
	>274a	80a74a	00 00 00 09 00 00 00 00 00 00 00 00 14 14 14 01
	>275a	80a75a	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01
	>276a	80a76a	00 00 00 00 00 00 00 00 00 00 00 11 06 06 06 01
	>277a	80a77a	01 01 01 01 01 01 01 01 01 01 01 01 06 22 20 4c
	>278a	80a78a	20 6b 20 8a 23 71 02 ad 40
5677	>2793	80a793	c4 00 c4 00 00 00 00 00		Level07		.binary "../levels/06.bin"
	>279b	80a79b	00 09 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>27ab	80a7ab	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>27bb	80a7bb	00 08 08 08 08 08 08 00 00 00 00 00 01 02 02 02
	>27cb	80a7cb	02 01 01 01 01 01 01 03 03 03 03 01 00 00 00 00
	>27db	80a7db	00 00 00 00 00 00 00 00 00 00 00 00 0b 01 00 00
	>27eb	80a7eb	00 00 0b 00 00 0b 00 00 00 00 01 0b 00 00 00 00
	>27fb	80a7fb	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>280b	80a80b	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>281b	80a81b	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>282b	80a82b	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
	>283b	80a83b	00 00 08 08 08 08 00 00 00 00 00 00 00 01 01 01
	>284b	80a84b	01 01 01 01 01 01 01 01 01 01 11 00 07 b0 61 bf
	>285b	80a85b	62 2d 22 87 20 4b 73 75 01 7a 03
5678	>2866	80a866	c4 00 c4 00 09 00 00 09		Level08		.binary "../levels/07.bin"
	>286e	80a86e	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>287e	80a87e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>288e	80a88e	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>289e	80a89e	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>28ae	80a8ae	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>28be	80a8be	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>28ce	80a8ce	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>28de	80a8de	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>28ee	80a8ee	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>28fe	80a8fe	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>290e	80a90e	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>291e	80a91e	01 01 13 01 01 13 01 01 13 01 01 01 02 a0 22 3e
	>292e	80a92e	20
5679	>292f	80a92f	c4 00 c4 00 06 00 00 00		Level09		.binary "../levels/08.bin"
	>2937	80a937	00 06 00 00 00 00 06 00 00 00 00 09 00 00 00 00
	>2947	80a947	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>2957	80a957	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>2967	80a967	01 01 01 01 01 01 01 01 01 00 00 00 09 00 00 00
	>2977	80a977	08 00 00 00 00 00 00 01 00 00 00 00 01 00 00 00
	>2987	80a987	01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 12
	>2997	80a997	01 11 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>29a7	80a9a7	01 01 01 14 14 01 01 01 01 00 00 00 09 00 00 00
	>29b7	80a9b7	00 00 00 00 00 00 07 01 00 00 00 09 01 00 00 00
	>29c7	80a9c7	00 00 00 00 00 00 00 01 00 00 00 01 08 00 00 00
	>29d7	80a9d7	00 00 00 00 00 00 0f 01 00 00 00 00 01 01 01 01
	>29e7	80a9e7	01 01 01 14 14 01 01 01 06 06 06 06 06 a3 03 a6
	>29f7	80a9f7	03 a9 03 5f 02 2f 22 4a 22
5680	>2a00	80aa00	c4 00 c4 00 00 00 00 00		Level10		.binary "../levels/08boss02.bin"
	>2a08	80aa08	09 00 06 06 06 06 00 09 00 00 00 00 09 0d 10 00
	>2a18	80aa18	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>2a28	80aa28	00 00 00 00 00 00 00 00 00 01 01 01 06 06 00 00
	>2a38	80aa38	00 00 00 00 00 00 00 00 00 00 06 06 00 00 00 09
	>2a48	80aa48	00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00
	>2a58	80aa58	00 01 14 14 14 14 01 00 00 00 00 00 00 00 00 00
	>2a68	80aa68	00 00 06 06 06 06 00 00 00 00 00 00 09 10 10 00
	>2a78	80aa78	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>2a88	80aa88	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>2a98	80aa98	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2aa8	80aaa8	00 00 00 00 00 00 00 00 00 0f 00 11 01 01 01 00
	>2ab8	80aab8	01 01 01 00 00 01 01 01 00 01 01 01 01 87 90
5681	>2ac7	80aac7	c4 00 c4 00 12 00 00 00		Level11		.binary "../levels/09.bin"
	>2acf	80aacf	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00
	>2adf	80aadf	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
	>2aef	80aaef	01 01 01 00 00 01 01 01 01 01 01 01 09 00 00 00
	>2aff	80aaff	00 00 06 00 00 06 00 00 00 00 00 0f 00 00 00 00
	>2b0f	80ab0f	00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00
	>2b1f	80ab1f	00 00 07 00 00 07 00 00 00 00 00 00 00 00 01 00
	>2b2f	80ab2f	00 00 07 00 00 07 00 00 00 01 00 00 00 00 00 00
	>2b3f	80ab3f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
	>2b4f	80ab4f	01 01 01 08 08 01 01 01 01 01 00 00 00 00 00 00
	>2b5f	80ab5f	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2b6f	80ab6f	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2b7f	80ab7f	00 01 01 06 06 01 01 00 01 01 01 01 05 1f 30 a1
	>2b8f	80ab8f	40 97 20 52 20 6e 03
5682	>2b96	80ab96	c4 00 c4 00 00 11 00 00		Level12		.binary "../levels/10.bin"
	>2b9e	80ab9e	00 00 00 00 00 00 00 00 00 00 12 00 00 01 00 00
	>2bae	80abae	00 00 09 00 00 09 00 00 00 00 01 00 00 00 00 00
	>2bbe	80abbe	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2bce	80abce	00 00 08 08 08 08 00 00 00 01 00 00 00 00 00 00
	>2bde	80abde	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>2bee	80abee	00 00 01 00 00 01 00 00 01 00 00 00 00 00 00 00
	>2bfe	80abfe	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2c0e	80ac0e	00 00 08 00 00 08 00 00 00 01 00 00 00 00 00 00
	>2c1e	80ac1e	00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
	>2c2e	80ac2e	00 00 07 07 07 07 00 00 00 00 01 00 09 00 00 00
	>2c3e	80ac3e	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2c4e	80ac4e	01 01 01 06 06 01 01 01 01 01 01 01 05 2e 20 6e
	>2c5e	80ac5e	22 41 20 81 22 7c 40
5683	>2c65	80ac65	c4 00 c4 00 00 00 00 00		Level13		.binary "../levels/11.bin"
	>2c6d	80ac6d	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 08
	>2c7d	80ac7d	00 00 01 00 00 09 00 00 01 00 00 07 00 00 00 00
	>2c8d	80ac8d	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 01
	>2c9d	80ac9d	00 00 09 00 00 01 00 00 06 00 00 01 12 00 00 00
	>2cad	80acad	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 09
	>2cbd	80acbd	00 00 01 00 00 0a 00 00 01 00 00 0b 00 00 00 00
	>2ccd	80accd	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 01
	>2cdd	80acdd	00 00 0a 00 00 01 00 00 0b 00 00 01 00 00 00 00
	>2ced	80aced	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 06
	>2cfd	80acfd	00 00 01 00 00 0b 00 00 01 00 00 08 00 00 00 00
	>2d0d	80ad0d	00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 01
	>2d1d	80ad1d	00 00 0b 00 00 01 00 00 08 00 00 11 06 09 22 49
	>2d2d	80ad2d	22 89 22 a6 20 66 20 26 20
5684	>2d36	80ad36	c4 00 c4 00 00 00 00 00		Level14		.binary "../levels/12.bin"
	>2d3e	80ad3e	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2d4e	80ad4e	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 00
	>2d5e	80ad5e	00 00 01 01 01 01 00 00 00 01 01 01 00 00 00 00
	>2d6e	80ad6e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2d7e	80ad7e	0a 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 01
	>2d8e	80ad8e	01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00
	>2d9e	80ad9e	00 00 00 00 00 00 00 00 00 00 00 12 0b 00 00 00
	>2dae	80adae	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>2dbe	80adbe	00 00 06 06 06 06 00 00 00 01 01 01 00 00 00 00
	>2dce	80adce	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2dde	80adde	0c 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 01
	>2dee	80adee	01 01 00 00 00 00 01 01 01 00 00 00 07 b6 61 b9
	>2dfe	80adfe	61 94 03 9b 02 1d 30 12 32 58 40
5685	>2e09	80ae09	c4 00 c4 00 00 00 00 00		Level15		.binary "../levels/12boss03.bin"
	>2e11	80ae11	06 00 06 00 00 06 00 06 00 00 00 00 09 0d 10 00
	>2e21	80ae21	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>2e31	80ae31	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>2e41	80ae41	09 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00
	>2e51	80ae51	01 00 00 09 09 00 00 01 00 00 00 00 00 00 00 00
	>2e61	80ae61	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
	>2e71	80ae71	09 00 00 00 00 00 00 09 00 00 00 00 09 10 10 00
	>2e81	80ae81	01 00 00 00 00 00 00 01 00 10 10 09 01 01 01 00
	>2e91	80ae91	00 00 06 00 00 06 00 00 00 01 01 01 00 00 00 00
	>2ea1	80aea1	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2eb1	80aeb1	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>2ec1	80aec1	01 00 01 01 01 01 00 01 01 01 01 01 02 87 80 27
	>2ed1	80aed1	82
5686	>2ed2	80aed2	c4 00 c4 00 09 00 00 00		Level16		.binary "../levels/13.bin"
	>2eda	80aeda	00 00 00 00 01 01 01 06 06 06 00 06 01 00 00 00
	>2eea	80aeea	00 00 00 00 01 07 01 00 00 00 00 0a 00 00 00 00
	>2efa	80aefa	00 00 00 00 02 07 02 00 00 00 00 00 00 00 14 00
	>2f0a	80af0a	00 00 00 00 02 07 02 00 00 00 0a 00 00 00 00 00
	>2f1a	80af1a	00 00 00 00 01 07 01 00 00 00 00 00 01 00 00 00
	>2f2a	80af2a	01 01 01 00 01 01 01 00 00 0a 00 06 09 08 08 08
	>2f3a	80af3a	01 00 00 00 00 00 01 00 00 00 00 00 01 01 01 00
	>2f4a	80af4a	01 00 00 00 00 00 01 00 0a 00 00 00 07 07 01 00
	>2f5a	80af5a	01 00 00 14 00 00 01 00 00 00 00 00 00 00 01 00
	>2f6a	80af6a	01 00 00 00 00 00 01 0a 00 00 00 00 12 00 00 00
	>2f7a	80af7a	11 00 00 00 00 00 00 08 08 08 08 00 01 01 01 13
	>2f8a	80af8a	01 01 01 06 01 01 01 13 13 13 13 00 05 24 22 42
	>2f9a	80af9a	20 86 01 88 03 1d 32
5687	>2fa1	80afa1	c4 00 c4 00 00 00 06 00		Level17		.binary "../levels/14.bin"
	>2fa9	80afa9	00 00 06 00 00 00 06 00 00 00 00 00 09 00 00 00
	>2fb9	80afb9	07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00
	>2fc9	80afc9	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
	>2fd9	80afd9	01 00 00 00 01 00 00 00 01 01 00 00 00 00 00 00
	>2fe9	80afe9	00 00 00 00 00 00 00 00 00 06 12 00 01 01 06 01
	>2ff9	80aff9	01 01 06 01 01 01 06 01 00 01 01 01 00 00 00 00
	>3009	80b009	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>3019	80b019	09 00 00 00 09 00 00 00 09 11 00 00 00 00 00 00
	>3029	80b029	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3039	80b039	00 00 00 00 00 00 00 00 00 00 00 00 14 14 14 14
	>3049	80b049	14 14 14 14 14 14 14 14 14 01 00 0f 06 06 06 06
	>3059	80b059	06 06 06 06 06 06 06 06 06 01 00 01 06 21 20 41
	>3069	80b069	20 72 03 76 03 7a 03 6d 22
5688	>3072	80b072	c4 00 c4 00 01 06 06 06		Level18		.binary "../levels/15.bin"
	>307a	80b07a	01 01 01 00 01 01 01 01 01 01 01 00 01 09 00 00
	>308a	80b08a	08 00 08 00 00 00 00 00 00 0a 01 00 01 00 00 00
	>309a	80b09a	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>30aa	80b0aa	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>30ba	80b0ba	08 12 08 00 00 00 00 00 00 00 01 00 01 08 01 01
	>30ca	80b0ca	01 01 01 01 01 08 01 01 01 01 01 00 01 08 01 00
	>30da	80b0da	00 00 00 00 06 00 06 11 00 00 00 00 01 08 01 00
	>30ea	80b0ea	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 00
	>30fa	80b0fa	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 08
	>310a	80b10a	01 01 01 0a 01 00 06 01 01 01 01 01 01 08 08 08
	>311a	80b11a	01 0f 03 00 01 00 06 06 06 06 06 06 01 01 01 01
	>312a	80b12a	01 00 01 01 01 00 00 00 00 00 00 00 06 2a 10 22
	>313a	80b13a	20 76 03 74 01 7c 03 7e 01
5689	>3143	80b143	c4 00 c4 00 09 00 09 00		Level19		.binary "../levels/16.bin"
	>314b	80b14b	09 00 00 07 07 00 00 09 00 09 00 09 00 00 00 00
	>315b	80b15b	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>316b	80b16b	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 06
	>317b	80b17b	00 06 00 00 00 00 06 00 06 00 06 00 00 00 00 00
	>318b	80b18b	00 00 00 00 00 00 00 00 00 00 00 00 13 00 13 00
	>319b	80b19b	13 00 00 00 00 00 00 13 00 13 00 13 01 00 01 00
	>31ab	80b1ab	01 00 00 00 00 00 00 01 00 01 00 01 08 00 00 00
	>31bb	80b1bb	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>31cb	80b1cb	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>31db	80b1db	00 00 00 00 00 00 12 00 00 00 00 08 09 00 00 00
	>31eb	80b1eb	00 00 13 00 00 13 11 00 00 00 00 09 01 01 01 00
	>31fb	80b1fb	01 01 01 08 08 01 01 01 01 01 01 01 05 9d 71 92
	>320b	80b20b	71 a4 01 ae 42 42 20
5690	>3212	80b212	c4 00 c4 00 00 00 00 00		Level20		.binary "../levels/16boss04.bin"
	>321a	80b21a	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>322a	80b22a	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>323a	80b23a	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>324a	80b24a	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>325a	80b25a	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 00
	>326a	80b26a	06 00 00 01 01 00 00 06 00 01 01 01 00 00 00 00
	>327a	80b27a	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>328a	80b28a	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>329a	80b29a	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>32aa	80b2aa	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>32ba	80b2ba	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>32ca	80b2ca	14 14 00 01 01 00 14 14 00 01 01 01 02 67 90 07
	>32da	80b2da	92
5691	>32db	80b2db	c4 00 c4 00 00 00 00 00		Level21		.binary "../levels/17.bin"
	>32e3	80b2e3	00 0a 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>32f3	80b2f3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3303	80b303	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3313	80b313	00 00 00 01 01 00 00 00 00 00 00 00 09 06 00 0f
	>3323	80b323	00 00 00 00 00 00 00 00 07 00 06 09 00 06 00 01
	>3333	80b333	01 00 00 00 00 00 00 01 01 00 06 00 00 06 00 00
	>3343	80b343	00 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00
	>3353	80b353	01 01 00 00 00 00 01 01 00 00 06 00 00 06 00 00
	>3363	80b363	00 0b 00 00 00 00 0b 00 00 00 06 00 00 06 00 00
	>3373	80b373	00 01 01 08 08 01 01 00 00 00 06 00 00 00 00 00
	>3383	80b383	00 00 00 00 00 00 00 00 00 00 00 12 01 01 01 01
	>3393	80b393	01 01 01 01 01 01 01 01 01 01 01 11 06 63 53 6c
	>33a3	80b3a3	53 a8 22 67 20 01 10 2c 42
5692	>33ac	80b3ac	c4 00 c4 00 09 00 00 09		Level22		.binary "../levels/18.bin"
	>33b4	80b3b4	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>33c4	80b3c4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>33d4	80b3d4	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>33e4	80b3e4	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>33f4	80b3f4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3404	80b404	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3414	80b414	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3424	80b424	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>3434	80b434	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>3444	80b444	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3454	80b454	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>3464	80b464	01 01 13 01 01 13 01 01 13 01 01 01 03 ad 22 4d
	>3474	80b474	22 52 20
5693	>3477	80b477	c4 00 c4 00 09 00 00 00		Level23		.binary "../levels/19.bin"
	>347f	80b47f	00 09 00 00 00 00 09 00 00 00 00 09 12 00 00 00
	>348f	80b48f	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>349f	80b49f	00 01 00 07 07 00 01 00 08 08 00 01 0a 00 00 00
	>34af	80b4af	00 0a 00 00 00 00 0a 00 00 00 00 0a 00 00 00 00
	>34bf	80b4bf	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>34cf	80b4cf	00 01 00 07 07 00 01 00 08 08 00 01 0b 00 00 00
	>34df	80b4df	00 0b 00 00 00 00 0b 00 00 00 00 0b 00 00 00 00
	>34ef	80b4ef	00 00 00 00 00 00 00 00 00 00 00 00 11 00 08 08
	>34ff	80b4ff	00 01 00 07 07 00 01 00 08 08 00 01 0c 00 00 00
	>350f	80b50f	00 0c 00 00 00 00 0c 00 00 00 00 0c 00 00 00 00
	>351f	80b51f	00 00 00 00 00 00 00 00 00 00 00 00 01 13 01 01
	>352f	80b52f	13 01 13 01 01 13 01 13 01 01 13 01 03 4f 22 af
	>353f	80b53f	22 70 20
5694	>3542	80b542	c4 00 c4 00 00 00 00 00		Level24		.binary "../levels/20.bin"
	>354a	80b54a	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>355a	80b55a	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>356a	80b56a	00 01 01 01 01 01 01 01 01 01 00 00 01 01 01 14
	>357a	80b57a	14 01 00 00 00 00 00 00 00 01 00 0a 00 00 00 00
	>358a	80b58a	00 00 00 00 00 00 00 00 00 01 14 01 00 00 00 00
	>359a	80b59a	00 00 00 00 04 04 04 00 00 00 00 01 00 00 08 08
	>35aa	80b5aa	08 08 00 00 02 0f 03 00 00 12 00 01 00 00 01 06
	>35ba	80b5ba	06 01 00 00 01 01 01 00 00 01 14 01 00 00 01 00
	>35ca	80b5ca	00 01 00 00 00 00 00 00 00 00 00 0c 00 01 01 00
	>35da	80b5da	00 01 01 01 00 00 00 05 00 00 00 00 00 08 08 00
	>35ea	80b5ea	00 07 0b 11 00 00 00 05 00 00 00 00 01 01 01 01
	>35fa	80b5fa	01 01 01 01 01 00 01 01 01 01 06 06 07 37 53 3b
	>360a	80b60a	53 10 20 40 20 89 20 9d 70 94 03
5695	>3615	80b615	c4 00 c4 00 00 00 00 00		Level25		.binary "../levels/20boss05.bin"
	>361d	80b61d	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>362d	80b62d	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>363d	80b63d	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>364d	80b64d	00 00 00 00 00 00 00 00 00 00 00 00 10 00 09 00
	>365d	80b65d	00 0d 00 00 00 00 0e 00 00 09 00 10 01 00 01 00
	>366d	80b66d	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>367d	80b67d	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>368d	80b68d	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>369d	80b69d	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>36ad	80b6ad	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>36bd	80b6bd	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>36cd	80b6cd	00 01 00 00 00 00 01 00 00 01 01 01 03 97 80 67
	>36dd	80b6dd	82 37 80
5696	>36e0	80b6e0	c4 00 c4 00 0b 00 00 0a		Level26		.binary "../levels/21.bin"
	>36e8	80b6e8	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00
	>36f8	80b6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3708	80b708	00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 04
	>3718	80b718	06 06 06 02 00 00 00 03 03 03 03 00 00 00 00 00
	>3728	80b728	00 00 00 00 00 00 00 0c 00 00 00 00 14 14 14 14
	>3738	80b738	14 14 02 14 14 14 14 14 05 01 05 00 00 00 00 00
	>3748	80b748	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>3758	80b758	00 00 00 00 00 00 00 00 00 01 00 00 09 00 00 00
	>3768	80b768	00 00 00 00 00 00 00 00 00 0a 00 00 14 00 00 14
	>3778	80b778	00 00 14 00 00 14 00 00 05 05 11 00 00 00 00 00
	>3788	80b788	00 00 00 00 00 00 00 00 00 00 12 00 06 06 06 06
	>3798	80b798	06 06 00 06 06 06 06 06 05 00 01 05 06 26 22 65
	>37a8	80b7a8	22 86 20 a5 20 7f 03 46 30
5697	>37b1	80b7b1	c4 00 c4 00 00 00 00 00		Level27		.binary "../levels/22.bin"
	>37b9	80b7b9	00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 00
	>37c9	80b7c9	00 00 00 00 00 00 00 00 00 00 00 0f 01 01 00 09
	>37d9	80b7d9	00 00 00 00 00 09 00 00 00 00 01 01 00 00 00 14
	>37e9	80b7e9	00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00
	>37f9	80b7f9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3809	80b809	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00
	>3819	80b819	00 00 14 08 08 00 00 00 14 00 00 00 00 00 00 00
	>3829	80b829	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>3839	80b839	00 00 00 00 00 09 00 00 00 00 00 00 00 00 00 14
	>3849	80b849	00 00 00 00 00 14 00 00 00 00 00 00 07 07 00 00
	>3859	80b859	00 00 00 00 00 00 00 00 00 00 00 11 01 01 06 06
	>3869	80b869	06 00 06 06 06 06 00 06 06 06 01 01 07 b5 61 ba
	>3879	80b879	61 04 53 0b 53 4f 22 70 20 1e 10
5698	>3884	80b884	c4 00 c4 00 00 00 00 00		Level28		.binary "../levels/23.bin"
	>388c	80b88c	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>389c	80b89c	00 00 00 00 00 00 00 00 00 00 00 11 01 00 00 00
	>38ac	80b8ac	00 00 00 00 00 00 00 00 00 00 00 01 00 09 00 00
	>38bc	80b8bc	00 0a 00 00 00 0b 00 00 00 0c 00 00 00 00 00 00
	>38cc	80b8cc	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>38dc	80b8dc	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>38ec	80b8ec	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00
	>38fc	80b8fc	00 06 00 00 00 06 00 00 00 06 00 00 00 00 00 00
	>390c	80b90c	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>391c	80b91c	00 00 00 00 00 00 00 00 00 00 00 00 07 06 07 00
	>392c	80b92c	08 06 08 00 08 06 08 00 07 06 07 07 01 01 01 13
	>393c	80b93c	01 01 01 13 01 01 01 13 01 01 01 01 04 50 10 55
	>394c	80b94c	13 59 11 5e 12
5699	>3951	80b951	c4 00 c4 00 00 00 00 00		Level29		.binary "../levels/24.bin"
	>3959	80b959	00 00 02 03 04 05 02 03 04 05 00 11 00 12 00 00
	>3969	80b969	14 14 14 14 14 14 14 14 14 14 14 01 01 01 00 00
	>3979	80b979	06 06 06 06 06 06 06 06 06 06 06 01 01 00 00 00
	>3989	80b989	00 00 00 00 00 00 00 00 0b 00 00 01 01 00 00 14
	>3999	80b999	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>39a9	80b9a9	00 00 00 09 00 00 00 00 00 00 00 01 01 00 00 00
	>39b9	80b9b9	00 00 00 14 14 00 00 00 0c 00 00 01 01 00 00 14
	>39c9	80b9c9	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>39d9	80b9d9	00 00 00 0a 00 00 00 00 00 00 00 01 01 00 00 00
	>39e9	80b9e9	00 00 00 14 14 00 00 00 00 00 00 01 01 00 00 00
	>39f9	80b9f9	00 00 00 00 00 00 00 00 00 00 00 01 01 01 13 01
	>3a09	80ba09	01 01 01 01 01 01 01 01 01 01 01 01 06 04 20 45
	>3a19	80ba19	10 7a 10 75 10 4a 10 aa 32
5700	>3a22	80ba22	c4 00 c4 00 00 00 00 00		Level30		.binary "../levels/24boss06.bin"
	>3a2a	80ba2a	00 00 00 00 00 00 00 00 00 00 00 00 0c 0d 10 00
	>3a3a	80ba3a	00 00 00 14 14 00 00 00 00 10 0e 0b 05 05 05 00
	>3a4a	80ba4a	00 00 00 00 00 00 00 00 00 04 04 04 00 00 00 00
	>3a5a	80ba5a	0a 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 00
	>3a6a	80ba6a	14 00 00 0c 0c 00 00 14 00 00 00 00 00 00 00 00
	>3a7a	80ba7a	00 00 00 14 14 00 00 00 00 00 00 00 00 00 00 00
	>3a8a	80ba8a	0a 00 00 00 00 00 00 0b 00 00 00 00 09 10 10 00
	>3a9a	80ba9a	14 00 00 00 00 00 00 14 00 10 10 0a 02 02 02 00
	>3aaa	80baaa	00 00 00 00 00 00 00 00 00 03 03 03 00 00 00 00
	>3aba	80baba	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>3aca	80baca	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>3ada	80bada	00 01 01 06 06 01 01 00 01 01 01 01 03 97 90 67
	>3aea	80baea	92 27 90
5701	>3aed	80baed	c4 00 c4 00 12 00 00 00		Level31		.binary "../levels/end.bin"
	>3af5	80baf5	00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00
	>3b05	80bb05	07 00 07 07 00 07 00 00 00 07 01 00 07 00 00 00
	>3b15	80bb15	07 00 07 00 00 07 00 00 00 07 00 01 07 00 00 00
	>3b25	80bb25	07 00 07 07 00 07 00 00 00 07 00 00 07 00 07 00
	>3b35	80bb35	07 00 07 00 00 07 00 00 00 07 00 00 00 07 00 07
	>3b45	80bb45	00 00 07 07 00 07 07 07 00 07 07 07 00 00 00 00
	>3b55	80bb55	00 00 00 00 00 00 00 00 00 00 00 00 08 08 00 00
	>3b65	80bb65	00 08 00 00 08 00 08 00 08 08 08 00 08 00 08 00
	>3b75	80bb75	08 00 08 00 08 08 08 00 08 00 00 00 08 00 08 00
	>3b85	80bb85	08 00 08 00 08 08 08 00 08 08 00 09 08 00 08 00
	>3b95	80bb95	08 00 08 00 08 08 08 00 08 00 00 11 08 08 00 00
	>3ba5	80bba5	00 08 00 00 08 00 08 00 08 08 08 01 01 1f 03

5703							; ----- @Titlescreen Data@ -----

5705	.3bb4	80bbb4					TitleScreenData .block

5707	.3bb4	80bbb4					SpriteStruct .block
5708	=12620							_QDef = fSprDef(6,10, kSPri_3|kSPal_0)
5709	=12680							_WDef = fSprDef(4,12, kSPri_3|kSPal_0)
5710	=12684							_ADef = fSprDef(6,12, kSPri_3|kSPal_0)
5711	=12744							_KDef = fSprDef(4,14, kSPri_3|kSPal_0)
5712								; this is set up so I can just loop copy to OAM
5713	>3bb4	80bbb4	3f 0a 4c 31				sprites	.byte 63 ,10, <_QDef, >_QDef
5714	>3bb8	80bbb8	62 0a 88 31							.byte	98,10, <_WDef, >_WDef
5715	>3bbc	80bbbc	85 0a 8c 31							.byte 133,10, <_ADef, >_ADef
5716	>3bc0	80bbc0	a8 0a c8 31							.byte	168,10, <_KDef, >_KDef
5717	=$aa							kUpper = %10101010 ; all Large and no MSB
5718							.bend

5720							; each string has the ID, X char, Y char
5721	=(26,8,4)					Version = (kStrings.version,8,4)
5722	=(2,0,6)					Original = (kStrings.original,0,6)
5723	=(4,3,8)					Ported = (kStrings.cx16port,3,8)
5724	=(6,7,10)					Code = (kStrings.program,7,10)
5725	=(8,7,11)					Art = (kStrings.art,7,11)
5726	=(10,7,12)					Music = (kStrings.music,7,12)
5727	=(12,6,14)					Special = (kStrings.specialThanks,6,14)
5728	=(14,7,16)					Soci = (kStrings.soci,7,16)
5729	=(16,10,17)					Didi = (kStrings.didi,10,17)
5730	=(18,13,11)					Saul1 = (kStrings.saul,13,11)
5731	=(18,13,12)					Saul2 = (kStrings.saul,13,12)
5732	=(32,12,18)					Optiroc = (kStrings.optiroc,12,18)
5733	=(24,7,22)					Both = (kStrings.both,7,22)
5734	=(10,15,22)					Music2 = (kStrings.music,15,22)
5735	=(20,24,22)					SFX = (kStrings.sfx,24,22)
5736	=(22,30,22)					None = (kStrings.none,30,22)
5737	=(28,5,19)					Password = (kStrings.password,5,19)
5738	=(30,14,20)					PasswordBlank = (kStrings.passwordBlank,14,20)
5739	=(34,2,13)					MusicSNES = (kStrings.snesMusic,2,13)

5741							; merge all the strings into one, this time I don't use := but make multiple and merge down
5742	=((26,8,4),(2,0,6),(4,3,8),(6,7,10))		G1 = (Version,Original,Ported,Code)
5743	=((8,7,11),(10,7,12),(12,6,14),(14,7,16))	G2 = (Art,Music,Special,Soci)
5744	=((16,10,17),(18,13,11),(18,13,12),(34,2,13),(32,12,18))
							G3 = (Didi,Saul1,Saul2,MusicSNES,Optiroc)
5745							; G4 = (Both, Music2,SFX,None,Password)	; SNES version doesn't need these string yet
5746							; G5 = (PasswordBlank,)
5747	=((26,8,4),(2,0,6),(4,3,8),(6,7,10),(8,7,11),(10,7,12),(12,6,14),(14,7,16),(16,10,17),(18,13,11),(18,13,12),(34,2,13),(32,12,18))
							AllStrings = G1 .. G2 .. G3 ; .. G4 .. G5

5749							; this has the index into the String Ptr LUT to draw this string
5750	>3bc4	80bbc4	1a 00 02 00 04 00 06 00		string .word AllStrings[:,0]..(kStrings.gameOver,)	; tack the Game over on the end so len(AllStrings) gives the index
	>3bcc	80bbcc	08 00 0a 00 0c 00 0e 00 10 00 12 00 12 00 22 00
	>3bdc	80bbdc	20 00 00 00
5751							; convert the X,Y char to address to copy string to on Screen Mirror
5752	=(8464,8576,8710,8846,8910,8974,9100,9230,9300,8922,8986,9028,9368,8982)
							allPos = (fGetMemoryForScreenChar(<>ScreenMirror,AllStrings[:,1],AllStrings[:,2]))..(fGetMemoryForScreenChar(<>ScreenMirror,11,12),)
5753							; get the dest pointers lo/hi
5754	.3be0	80bbe0					stringPos .block
5755	>3be0	80bbe0	10 21 80 21 06 22 8e 22			.word <>(allPos)
	>3be8	80bbe8	ce 22 0e 23 8c 23 0e 24 54 24 da 22 1a 23 44 23
	>3bf8	80bbf8	98 24 16 23
5756							.bend

5758							;spriteCol	.byte 7,13,14,10 ; reference by commneted out code

5760							; used for the menu which currently is not in the SNES version
5761							;menuOffsetsStart	.byte (30,23,15,7)*2
5762							;menuOffsetsEnd		.byte (37,30,22,14)*2

5764							.bend ; titlescreendata

5766							; This converts ASICII to the font layout I use in QWAK which is actually mostly just PETSCII order offset
5767							; {{{
5768							.enc "qwak" ;define an ascii->petscii encoding
5769							.cdef "@@", 128
5770							.cdef "AZ", 129
5771							.edef "[",  155
5772							.edef "<U+FFFD>",  156 ; this is the britsh pound smybol if it is corrupt you need to reopen the file as Windows1252 encoding
5773							.edef "]",  157 ; or retype the pound in your current encoding, everything else is UTF-8 safe.
5774							.edef "^",  158
5775							.edef "|",  159;->
5776							.edef " ",  160
5777							.edef "!",  161
5778							.edef "`",  162;"
5779							.edef "#",  163
5780							.edef "~",  164 ;heart
5781							.edef "%",  165
5782							.edef "&",  166
5783							.edef "'",  167
5784							.edef "(",  168
5785							.edef ")",  169
5786							.edef "*",  170
5787							.edef "+",  171
5788							.edef ",",  172
5789							.edef "-",  173
5790							.edef ".",  174
5791							.edef "/",  175
5792							.cdef "09", 176
5793							.edef ":",  186
5794							.edef ";",  187
5795							.edef "<",  188
5796							.edef "=",  189
5797							.edef ">",  190
5798							.edef "?",  191
5799							; }}}

5801							; the index here must match bellow and is use to set the string data in the string,pos
5802	.3bfc	80bbfc					kStrings .block
5803	=0							gameOver = 0*2
5804	=2							original = 1*2
5805	=4							cx16port = 2*2
5806	=6							program = 3*2
5807	=8							art = 4*2
5808	=10							music = 5*2
5809	=12							specialThanks = 6*2
5810	=14							soci = 7*2
5811	=16							didi = 8*2
5812	=18							saul = 9*2
5813	=20							sfx = 10*2
5814	=22							none = 11*2
5815	=24							both = 12*2
5816	=26							version = 13*2
5817	=28							password = 14*2
5818	=30							passwordBlank = 15*2
5819	=32							optiroc = 16*2
5820	=34							snesMusic = 17*2
5821							.bend

5823							;StringTableLUTLo .byte <GAMEOVER,<ORIGINAL,<CX16PORT,<PROGRAM,<ART,<MUSIC,<SPECIALTHANKS,<SOCI,<MARTINPIPER,<SAUL,<SFX,<NONE,<BOTH,<VERSION,<PASSWORD,<PASSWORDBLANK,<OPTIROC
5824							;StringTableLUTHi .byte >GAMEOVER,>ORIGINAL,>CX16PORT,>PROGRAM,>ART,>MUSIC,>SPECIALTHANKS,>SOCI,>MARTINPIPER,>SAUL,>SFX,>NONE,>BOTH,>VERSION,>PASSWORD,>PASSWORDBLANK,>OPTIROC

5826	>3bfc	80bbfc	20 bc 2a bc 4b bc 66 bc		StringTableLUT .word <>(GAMEOVER,ORIGINAL,CX16PORT,PROGRAM,ART,MUSIC,SPECIALTHANKS,SOCI,MARTINPIPER,SAUL,SFX,NONE,BOTH,VERSION,PASSWORD,PASSWORDBLANK,OPTIROC,SNESMUSIC)
	>3c04	80bc04	79 bc 8a bc 9e bc b3 bc c6 bc 7d bc 90 bc 94 bc
	>3c14	80bc14	99 bc db bc ec bc 0b bd d3 bc 18 bd

5828							.enc "qwak"
5829	>3c20	80bc20	87 81 8d 85 a0 8f 96 85		GAMEOVER			.text "GAME OVER",$ff
	>3c28	80bc28	92 ff
5830	>3c2a	80bc2a	8f 92 89 87 89 8e 81 8c		ORIGINAL			.text "ORIGINAL CONCEPT JAMIE WOODHOUSE",$ff
	>3c32	80bc32	a0 83 8f 8e 83 85 90 94 a0 8a 81 8d 89 85 a0 97
	>3c42	80bc42	8f 8f 84 88 8f 95 93 85 ff
5831	>3c4b	80bc4b	90 8f 92 94 85 84 a0 94		CX16PORT			.text "PORTED TO THE SUPER NES BY",$ff
	>3c53	80bc53	8f a0 94 88 85 a0 93 95 90 85 92 a0 8e 85 93 a0
	>3c63	80bc63	82 99 ff
5832	>3c66	80bc66	83 8f 84 85 a0 a0 ba a0		PROGRAM			.text "CODE  : OZIPHANTOM",$ff
	>3c6e	80bc6e	8f 9a 89 90 88 81 8e 94 8f 8d ff
5833	>3c79	80bc79	81 92 94 ff			ART				.text "ART",$ff
5834	>3c7d	80bc7d	ba a0 93 81 95 8c a0 83		SAUL				.text ": SAUL CROSS",$ff
	>3c85	80bc85	92 8f 93 93 ff
5835	>3c8a	80bc8a	8d 95 93 89 83 ff		MUSIC				.text "MUSIC",$ff
5836	>3c90	80bc90	93 86 98 ff			SFX				.text "SFX",$ff
5837	>3c94	80bc94	8e 8f 8e 85 ff			NONE				.text "NONE",$ff
5838	>3c99	80bc99	82 8f 94 88 ff			BOTH				.text "BOTH",$ff
5839	>3c9e	80bc9e	93 90 85 83 89 81 8c a0		SPECIALTHANKS	.text "SPECIAL THANKS GO TO",$ff
	>3ca6	80bca6	94 88 81 8e 8b 93 a0 87 8f a0 94 8f ff
5840	>3cb3	80bcb3	93 8f 83 89 ac a0 8d 81		SOCI				.text "SOCI, MARTIN PIPER",$ff
	>3cbb	80bcbb	92 94 89 8e a0 90 89 90 85 92 ff
5841	>3cc6	80bcc6	84 89 84 89 ac a0 94 88		MARTINPIPER		.text "DIDI, THERYK",$ff
	>3cce	80bcce	85 92 99 8b ff
5842	>3cd3	80bcd3	8f 90 94 89 92 8f 83 ff		OPTIROC			.text "OPTIROC",$ff
5843	>3cdb	80bcdb	93 8e 85 93 a0 85 84 89		VERSION			.text "SNES EDITION 1.3",$ff
	>3ce3	80bce3	94 89 8f 8e a0 b1 ae b3 ff
5844	>3cec	80bcec	94 99 90 85 a0 90 81 93		PASSWORD			.text "TYPE PASSWORD : SPACE TO CLEAR",$ff
	>3cf4	80bcf4	93 97 8f 92 84 a0 ba a0 93 90 81 83 85 a0 94 8f
	>3d04	80bd04	a0 83 8c 85 81 92 ff
5845	>3d0b	80bd0b	ad ad ad ad ad ad ad ad		PASSWORDBLANK	.text "------------",$ff
	>3d13	80bd13	ad ad ad ad ff
5846	>3d18	80bd18	93 8e 85 93 a0 8d 95 93		SNESMUSIC		.text "SNES MUSIC : CRISPS",$FF
	>3d20	80bd20	89 83 a0 ba a0 83 92 89 93 90 93 ff

5848							; the Cheat password bytes not used in SNES yet, left for cribbing, execise to the user etc
5849	>3d2c	80bd2c	88 8f 94 8f 90 81 81 83		PASSWORD_LIVES		.byte $88,$8f,$94,$8f,$90,$81,$81,$83,$92,$8f,$93,$93 ; hotopaacross
	>3d34	80bd34	92 8f 93 93
5850	>3d38	80bd38	89 93 88 8f 8f 94 92 85		PASSWORD_RED		.byte $89,$93,$88,$8f,$8f,$94,$92,$85,$84,$81,$8c,$8c ; ishootredall
	>3d40	80bd40	84 81 8c 8c
5851	>3d44	80bd44	8d 81 99 84 81 99 8d 81		PASSWORD_SPRING	.byte $8d,$81,$99,$84,$81,$99,$8d,$81,$99,$84,$81,$99 ; maydaymayday
	>3d4c	80bd4c	99 84 81 99
5852	>3d50	80bd50	93 94 85 90 90 85 84 8f		PASSWORD_LEVEL		.byte $93,$94,$85,$90,$90,$85,$84,$8f,$96,$85,$92,$81 ; steppedovera
	>3d58	80bd58	96 85 92 81

5854	>3d5c	80bd5c	04 09 0e 13 18 1d		BossLevels 		.byte 4,4+5,4+10,4+15,4+20,4+25

5856	.3d62	80bd62					kSFX .block
5857	=0							DOORCLOSE	= 0
5858	=1							DOOROPEN		= 1
5859	=2							COINS			= 2
5860	=3							FLOWER		= 3
5861	=4							HURT			= 4
5862	=5							BUBBLE		= 5
5863	=6							POWERUP		= 6
5864	=7							JUMP			= 7
5865							.bend

5867	.3d62	80bd62					kMus .block
5868	=0							TITLE		= 0
5869	=1							THEME_1	= 1
5870	=2							THEME_2	= 2
5871	=3							BOSS		= 3
5872	=4							THEME_3	= 4
5873							.bend

5875	.3d62	80bd62					playSFX
5876	.3d62	80bd62	a2 7f		ldx #$7f		ldx #127 ; max vol
5877	.3d64	80bd64	a0 07		ldy #$07		ldy #7	; always channel 7
5878	.3d66	80bd66	22 20 bf 80	jsl $80bf20		jsl SFX_Play_Center
5879	.3d6a	80bd6a	60		rts			rts

5881	.3d6b	80bd6b					playMusic
5882	.3d6b	80bd6b	08		php			php
240:1	.3d6c	80bd6c	e2 20		sep #$20		SEP #$20
5884:4	.3d6e	80bd6e	9c 00 42	stz $804200			stz $4200,b 		; turn off NMI and joypad
5885	.3d71	80bd71	0a		asl a				asl a
264:1	.3d72	80bd72	c2 30		rep #$30		REP #$30
5887:4	.3d74	80bd74	29 ff 00	and #$00ff			and #$00ff
5888	.3d77	80bd77	aa		tax				tax
5889	.3d78	80bd78	bd 8b bd	lda $80bd8b,x			lda MusTable,x
5890	.3d7b	80bd7b	a2 82 00	ldx #$0082			ldx #`music_1		; all music in one bank
5891	.3d7e	80bd7e	22 4f be 80	jsl $80be4f			jsl SPC_Play_Song
240:1	.3d82	80bd82	e2 20		sep #$20		SEP #$20
5893:4	.3d84	80bd84	a9 81		lda #$81			lda #$81 			; enable NMI and joypad
5894	.3d86	80bd86	8d 00 42	sta $804200			sta $4200,b
5895	.3d89	80bd89	28		plp			plp
5896	.3d8a	80bd8a	60		rts			rts

5898	>3d8b	80bd8b	40 af 6b be 7d c5 c7 d0		MusTable .word <>(music_1,music_2,music_3,music_4,music_5)
	>3d93	80bd93	8e d6
5899							.include "../music/music.asm"

:6	;******  Processing file: ../music/music.asm

1							;music code for snesgss
2							;written by Shiru
3							;modified to work with ca65 by Doug Fraker 2020-2021
4							;modified to work on 64tass by Oziphantom 2023
5							;streaming audio has been removed and
6							;the spc code has been patched to fix a bug - and add echo
7							;now called snesgssQ.exe -

9							;version 5
10							;update 11/2021
11							;added SPC_All_Echo to set all echo parameters
12							;using a single table of values


15	=1						LOROM = 1
16							;set to zero, if HIROM

18							;notes
19							;cmdStereo, param 8 bit, 0 or 1
20							;cmdGlobalVolume, param L = vol 0-127, H = how quickly volume fades, 1-255
21							;cmdChannelVolume, param L = vol 0-127, H = which channel (bit field)*
22							;cmdMusicPlay, no param
23							;cmdStopAllSounds, no param
24							;cmdMusicStop, no param
25							;cmdMusicPause, param 8 bit, 0 or 1
26							;cmdSfxPlay, 4 params, vol 0-127, sfx #, pan, channel 0-7
27							;cmdLoad, params= apu address, size, src address
28							;stream, removed.

30							;*bitfield for channel volume, if channel volume command will set
31							; a max volume for a specific channel
32							;0000 0001 channel 1
33							;0000 0010 channel 2
34							;0000 0100 channel 3
35							;0000 1000 channel 4
36							;0001 0000 channel 5
37							;0010 0000 channel 6
38							;0100 0000 channel 7
39							;1000 0000 channel 8


42	=127						kFULL_VOL	=  127
43	=128						kPAN_CENTER = 128
44	=0						kPAN_LEFT	= 0
45	=255						kPAN_RIGHT	= 255


48	=$2140						kAPU0		= $2140
49	=$2141						kAPU1		= $2141
50	=$2140						kAPU01	= $2140
51	=$2142						kAPU2		= $2142
52	=$2143						kAPU3		= $2143
53	=$2142						kAPU23	= $2142

55							;to send a command
56							;although 8 bit values, A should be 16 bit when you
57							;lda #SCMD_INITIALIZE
58	=$00						kSCMD_NONE					= $00
59	=$01						kSCMD_INITIALIZE			= $01
60	=$02						kSCMD_LOAD					= $02
61	=$03						kSCMD_STEREO				= $03
62	=$04						kSCMD_GLOBAL_VOLUME		= $04
63	=$05						kSCMD_CHANNEL_VOLUME		= $05
64	=$06						kSCMD_MUSIC_PLAY 			= $06
65	=$07						kSCMD_MUSIC_STOP 			= $07
66	=$08						kSCMD_MUSIC_PAUSE 		= $08
67	=$09						kSCMD_SFX_PLAY				= $09
68	=$0a						kSCMD_STOP_ALL_SOUNDS	= $0a
69	=$0b						kSCMD_STREAM_START		= $0b
70	=$0c						kSCMD_STREAM_STOP			= $0c
71	=$0d						kSCMD_STREAM_SEND			= $0d
72	=$0b						kSCMD_ECHO_VOL				= $0b
73	=$0c						kSCMD_ECHO_ADDR			= $0c
74	=$0d						kSCMD_ECHO_FB_FIR			= $0d



78							.section sDP
79	>0037						spc_temp					.word ?
80	>0039						gss_param				.word ?
81	>003b						gss_command				.word ?
82	>003d						save_stack				.word ?
83	>003f						spc_pointer				.dword ?
84	>0043						spc_music_load_adr	.word ?
85	>0045						echo_pointer			.dword ?
86							.send ; sDP


89							;notes:
90							; code loads to $200
91							; stereo, 0 is off (mono), 1 is on;
92							; volume 127 = max
93							; pan 128 = center
94							; music_1.bin is song 1
95							; and spc700.bin is the code and brr samples
96							; sounds.h and sounds.asm are only useful in that
97							; they tell you the number value of each song
98							; and sfx. they are meant for tools other than ca65



102							;nmi should be disabled
103							;AXY16
104							;lda # address of spc700.bin
105							;ldx # bank of spc700.bin
106							;jsl SPC_Init
107							.al
108							.xl
109	.3d95	80bd95					SPC_Init

111							;note, first 2 bytes of bin are size
112							;increment the data address by 2

114	.3d95	80bd95	08		php			php
264:1	.3d96	80bd96	c2 30		rep #$30		REP #$30
116:6	.3d98	80bd98	85 3f		sta $3f			sta spc_pointer 			;address of music code
117	.3d9a	80bd9a	86 41		stx $41			stx spc_pointer+2 		;bank of music code

119	.3d9c	80bd9c	ba		tsx			tsx
120	.3d9d	80bd9d	86 3d		stx $3d			stx save_stack
121	.3d9f	80bd9f	a0 0e 00	ldy #$000e		ldy #14 						;bytes 14-15 is the address to load the song
122	.3da2	80bda2	b7 3f		lda [$3f],y		lda [spc_pointer], y 	;address to load the song
123	.3da4	80bda4	85 43		sta $43			sta spc_music_load_adr	;save for later

125	.3da6	80bda6	a5 41		lda $41			lda spc_pointer+2			;bank of music code
126	.3da8	80bda8	48		pha			pha
127	.3da9	80bda9	a5 3f		lda $3f			lda spc_pointer			;address of music code
128	.3dab	80bdab	1a		inc a			inc a
129	.3dac	80bdac	1a		inc a			inc a							;actual code is address +2
130	.3dad	80bdad	48		pha			pha
131	.3dae	80bdae	a7 3f		lda [$3f]		lda [spc_pointer]			;1st 2 bytes are the size
132	.3db0	80bdb0	48		pha			pha
133	.3db1	80bdb1	a9 00 02	lda #$0200		lda #$0200					;address in apu
134	.3db4	80bdb4	48		pha			pha
135	.3db5	80bdb5	22 c6 bd 80	jsl $80bdc6		jsl SPC_Load_Data
136	.3db9	80bdb9	a6 3d		ldx $3d			ldx save_stack
137	.3dbb	80bdbb	9a		txs			txs 							;8

139	.3dbc	80bdbc	a9 01 00	lda #$0001		lda #kSCMD_INITIALIZE
140	.3dbf	80bdbf	85 3b		sta $3b			sta gss_command
141	.3dc1	80bdc1	64 39		stz $39			stz gss_param
142							;	jsl SPC_Command_ASM
143							;	;default is mono
144							;	plp
145							;	rtl
146	.3dc3	80bdc3	4c f4 bf	jmp $80bff4		jmp SPC_Common_End


149							;stack relative
150							;5 = addr in apu, last pha
151							;7 = size
152							;9 = src l
153							;11 = src h
154							.al
155							.xl
156	.3dc6	80bdc6					SPC_Load_Data

158	.3dc6	80bdc6	08		php			php
264:1	.3dc7	80bdc7	c2 30		rep #$30		REP #$30

161:6	.3dc9	80bdc9	78		sei			sei
162							; make sure no irq's fire during this transfer

240:1	.3dca	80bdca	e2 20		sep #$20		SEP #$20
165:6	.3dcc	80bdcc	a9 aa		lda #$aa		lda #$aa
166	.3dce	80bdce	cf 40 21 00	cmp $002140	-	cmp kAPU0
167	.3dd2	80bdd2	d0 fa		bne $80bdce		bne -
244:1	.3dd4	80bdd4	c2 20		rep #$20		REP #$20
169:6	.3dd6	80bdd6	a3 0b		lda $0b,s		lda 11,s					;src h
170	.3dd8	80bdd8	85 41		sta $41			sta spc_pointer+2
171	.3dda	80bdda	a3 09		lda $09,s		lda 9,s					;src l
172	.3ddc	80bddc	85 3f		sta $3f			sta spc_pointer+0
173	.3dde	80bdde	a3 07		lda $07,s		lda 7,s					;size
174	.3de0	80bde0	aa		tax			tax
175	.3de1	80bde1	a3 05		lda $05,s		lda 5,s					;adr
176	.3de3	80bde3	8f 42 21 00	sta $002142		sta kAPU23
240:1	.3de7	80bde7	e2 20		sep #$20		SEP #$20
178:6	.3de9	80bde9	a9 01		lda #$01		lda #$01
179	.3deb	80bdeb	8f 41 21 00	sta $002141		sta kAPU1
180	.3def	80bdef	a9 cc		lda #$cc		lda #$cc
181	.3df1	80bdf1	8f 40 21 00	sta $002140		sta kAPU0
182	.3df5	80bdf5	cf 40 21 00	cmp $002140	-	cmp kAPU0
183	.3df9	80bdf9	d0 fa		bne $80bdf5		bne -
184	.3dfb	80bdfb	a0 00 00	ldy #$0000		ldy #0
185	.3dfe	80bdfe					_load_loop
186							;A8
187							;	xba ;unneccessary
188	.3dfe	80bdfe	a7 3f		lda [$3f]		lda [spc_pointer] ;,y
189	.3e00	80be00	eb		xba			xba
190	.3e01	80be01	98		tya			tya

244:1	.3e02	80be02	c2 20		rep #$20		REP #$20
193:6	.3e04	80be04	8f 40 21 00	sta $002140		sta kAPU01
240:1	.3e08	80be08	e2 20		sep #$20		SEP #$20

196:6	.3e0a	80be0a	cf 40 21 00	cmp $002140	-	cmp kAPU0
197	.3e0e	80be0e	d0 fa		bne $80be0a		bne -

199	.3e10	80be10	c8		iny			iny
244:1	.3e11	80be11	c2 20		rep #$20		REP #$20
201:6	.3e13	80be13	e6 3f		inc $3f			inc spc_pointer
202	.3e15	80be15	d0 07		bne $80be1e		bne +
203	.3e17	80be17	e6 41		inc $41			inc spc_pointer+2

205							.if LOROM == 1
206	.3e19	80be19	a9 00 80	lda #$8000		lda #$8000
207	.3e1c	80be1c	85 3f		sta $3f			sta spc_pointer

209							.endif
210	.3e1e	80be1e					+
240:1	.3e1e	80be1e	e2 20		sep #$20		SEP #$20
211:6	.3e20	80be20	ca		dex			dex
212	.3e21	80be21	d0 db		bne $80bdfe		bne _load_loop

214	.3e23	80be23	eb		xba			xba
215	.3e24	80be24	a9 00		lda #$00		lda #$00
216	.3e26	80be26	eb		xba			xba
217	.3e27	80be27	18		clc			clc
218	.3e28	80be28	69 02		adc #$02		adc #$02
244:1	.3e2a	80be2a	c2 20		rep #$20		REP #$20
220:6	.3e2c	80be2c	aa		tax			tax

222	.3e2d	80be2d	a9 00 02	lda #$0200		lda #$0200			;loaded code starting address
223	.3e30	80be30	8f 42 21 00	sta $002142		sta kAPU23

225	.3e34	80be34	8a		txa			txa
226	.3e35	80be35	8f 40 21 00	sta $002140		sta kAPU01
240:1	.3e39	80be39	e2 20		sep #$20		SEP #$20

229:6	.3e3b	80be3b	cf 40 21 00	cmp $002140	-	cmp kAPU0
230	.3e3f	80be3f	d0 fa		bne $80be3b		bne -

244:1	.3e41	80be41	c2 20		rep #$20		REP #$20
233:6	.3e43	80be43	af 40 21 00	lda $002140	-	lda kAPU0			;wait until SPC700 clears all communication ports, confirming that code has started
234	.3e47	80be47	0f 42 21 00	ora $002142		ora kAPU2
235	.3e4b	80be4b	d0 f6		bne $80be43		bne -

237							;	cli					;enable IRQ
238							;this is covered with the plp
239	.3e4d	80be4d	28		plp			plp
240	.3e4e	80be4e	6b		rtl			rtl




245							;nmi should be disabled
246							;AXY16
247							;lda # address of song
248							;ldx # bank of song
249							;jsl SPC_Play_Song

251							;1st 2 bytes of song are size, then song+2 is address of song data
252							.al
253							.xl
254	.3e4f	80be4f					SPC_Play_Song

256	.3e4f	80be4f	08		php			php
264:1	.3e50	80be50	c2 30		rep #$30		REP #$30
258:6	.3e52	80be52	85 3f		sta $3f			sta spc_pointer
259	.3e54	80be54	86 41		stx $41			stx spc_pointer+2

261	.3e56	80be56	22 f6 be 80	jsl $80bef6		jsl Music_Stop

263	.3e5a	80be5a	a9 02 00	lda #$0002		lda #kSCMD_LOAD
264	.3e5d	80be5d	85 3b		sta $3b			sta gss_command
265	.3e5f	80be5f	64 39		stz $39			stz gss_param
266	.3e61	80be61	22 89 be 80	jsl $80be89		jsl SPC_Command_ASM

264:1	.3e65	80be65	c2 30		rep #$30		REP #$30
269:6	.3e67	80be67	ba		tsx			tsx
270	.3e68	80be68	86 3d		stx $3d			stx save_stack
271	.3e6a	80be6a	a5 41		lda $41			lda spc_pointer+2			;#^music_code ; bank
272	.3e6c	80be6c	48		pha			pha
273	.3e6d	80be6d	a5 3f		lda $3f			lda spc_pointer			;#.loword(music_code)
274	.3e6f	80be6f	1a		inc a			inc a
275	.3e70	80be70	1a		inc a			inc a 						;actual data at data+2
276	.3e71	80be71	48		pha			pha
277	.3e72	80be72	a7 3f		lda [$3f]		lda [spc_pointer] 		;first 2 bytes of data are size
278	.3e74	80be74	48		pha			pha
279							;saved at init
280	.3e75	80be75	a5 43		lda $43			lda spc_music_load_adr 	;address in apu
281	.3e77	80be77	48		pha			pha
282	.3e78	80be78	22 c6 bd 80	jsl $80bdc6		jsl SPC_Load_Data
283	.3e7c	80be7c	a6 3d		ldx $3d			ldx save_stack
284	.3e7e	80be7e	9a		txs			txs 							;8

286	.3e7f	80be7f	64 39		stz $39			stz gss_param ;zero
287	.3e81	80be81	a9 06 00	lda #$0006		lda #kSCMD_MUSIC_PLAY
288	.3e84	80be84	85 3b		sta $3b			sta gss_command
289							;	jsl SPC_Command_ASM
290							;	plp
291							;	rtl
292	.3e86	80be86	4c f4 bf	jmp $80bff4		jmp SPC_Common_End



296							;send a command to the SPC driver
297							;A16
298							;lda #command
299							;sta gss_command
300							;lda #parameter
301							;sta gss_param
302							;jsl SPC_Command_ASM
303							.al
304	.3e89	80be89					SPC_Command_ASM

306	.3e89	80be89	08		php			php
240:1	.3e8a	80be8a	e2 20		sep #$20		SEP #$20
308:6	.3e8c	80be8c	af 40 21 00	lda $002140	-	lda kAPU0
309	.3e90	80be90	d0 fa		bne $80be8c		bne -

244:1	.3e92	80be92	c2 20		rep #$20		REP #$20
312:6	.3e94	80be94	a5 39		lda $39			lda gss_param
313	.3e96	80be96	8f 42 21 00	sta $002142		sta kAPU23
314	.3e9a	80be9a	a5 3b		lda $3b			lda gss_command
240:1	.3e9c	80be9c	e2 20		sep #$20		SEP #$20
316:6	.3e9e	80be9e	eb		xba			xba
317	.3e9f	80be9f	8f 41 21 00	sta $002141		sta kAPU1
318	.3ea3	80bea3	eb		xba			xba
319	.3ea4	80bea4	8f 40 21 00	sta $002140		sta kAPU0

321	.3ea8	80bea8	c9 02		cmp #$02		cmp #kSCMD_LOAD	;don't wait acknowledge
322	.3eaa	80beaa	f0 06		beq $80beb2		beq +

324	.3eac	80beac	af 40 21 00	lda $002140	-	lda kAPU0
325	.3eb0	80beb0	f0 fa		beq $80beac		beq -

327	.3eb2	80beb2	28		plp		+	plp
328	.3eb3	80beb3	6b		rtl			rtl



332							;void SPC_Stereo(unsigned int stereo);
333							;A8 or A16
334							;lda #0 (mono) or 1 (stereo)
335							;jsl SPC_Stereo
336							.al
337							.xl
338	.3eb4	80beb4					SPC_Stereo

340	.3eb4	80beb4	08		php			php
264:1	.3eb5	80beb5	c2 30		rep #$30		REP #$30
342:6	.3eb7	80beb7	29 ff 00	and #$00ff		and #$00ff
343	.3eba	80beba	85 39		sta $39			sta gss_param

345	.3ebc	80bebc	a9 03 00	lda #$0003		lda #kSCMD_STEREO
346	.3ebf	80bebf	85 3b		sta $3b			sta gss_command

348							;	jsl SPC_Command_ASM
349							;	plp
350							;	rtl
351	.3ec1	80bec1	4c f4 bf	jmp $80bff4		jmp SPC_Common_End



355							;void SPC_Global_Volume(unsigned int volume,unsigned int speed);
356							;AXY8 or AXY16
357							;lda #speed, how quickly the volume fades, 1-255*
358							;ldx #volume, 0-127
359							;jsl SPC_Global_Volume

361							;*255 is default = instant (any value >= 127 is instant)
362							;speed = 7 is about 2 seconds, and is a medium fade in/out
363							.al
364							.xl
365	.3ec4	80bec4					SPC_Global_Volume

367	.3ec4	80bec4	08		php			php
264:1	.3ec5	80bec5	c2 30		rep #$30		REP #$30
369:6	.3ec7	80bec7	eb		xba			xba
370	.3ec8	80bec8	29 00 ff	and #$ff00		and #$ff00		;speed
371	.3ecb	80becb	85 39		sta $39			sta gss_param
372	.3ecd	80becd	8a		txa			txa
373	.3ece	80bece	29 ff 00	and #$00ff		and #$00ff		;volume
374	.3ed1	80bed1	05 39		ora $39			ora gss_param
375	.3ed3	80bed3	85 39		sta $39			sta gss_param

377	.3ed5	80bed5	a9 04 00	lda #$0004		lda #kSCMD_GLOBAL_VOLUME
378	.3ed8	80bed8	85 3b		sta $3b			sta gss_command

380							;	jsl SPC_Command_ASM
381							;	plp
382							;	rtl
383	.3eda	80beda	4c f4 bf	jmp $80bff4		jmp SPC_Common_End



387							;void SPC_Channel_Volume(unsigned int channels,unsigned int volume);
388							;AXY8 or AXY16
389							;lda #channels (bit field), see above
390							;ldx #volume   0-127
391							;jsl SPC_Channel_Volume
392							.al
393							.xl
394	.3edd	80bedd					SPC_Channel_Volume

396	.3edd	80bedd	08		php			php
264:1	.3ede	80bede	c2 30		rep #$30		REP #$30
398:6	.3ee0	80bee0	eb		xba			xba
399	.3ee1	80bee1	29 00 ff	and #$ff00		and #$ff00 ;channel
400	.3ee4	80bee4	85 39		sta $39			sta gss_param
401	.3ee6	80bee6	8a		txa			txa
402	.3ee7	80bee7	29 ff 00	and #$00ff		and #$00ff ;volume
403	.3eea	80beea	05 39		ora $39			ora gss_param
404	.3eec	80beec	85 39		sta $39			sta gss_param

406	.3eee	80beee	a9 05 00	lda #$0005		lda #kSCMD_CHANNEL_VOLUME
407	.3ef1	80bef1	85 3b		sta $3b			sta gss_command

409							;	jsl SPC_Command_ASM
410							;	plp
411							;	rtl
412	.3ef3	80bef3	4c f4 bf	jmp $80bff4		jmp SPC_Common_End



416							;void Music_Stop(void);
417							;jsl Music_Stop
418							.al
419							.xl
420	.3ef6	80bef6					Music_Stop

422	.3ef6	80bef6	08		php			php
264:1	.3ef7	80bef7	c2 30		rep #$30		REP #$30

425:6	.3ef9	80bef9	a9 07 00	lda #$0007		lda #kSCMD_MUSIC_STOP
426	.3efc	80befc	85 3b		sta $3b			sta gss_command
427	.3efe	80befe	64 39		stz $39			stz gss_param

429							;	jsl SPC_Command_ASM
430							;	plp
431							;	rtl
432	.3f00	80bf00	4c f4 bf	jmp $80bff4		jmp SPC_Common_End



436							;void Music_Pause(unsigned int pause);
437							;A8 or A16
438							;lda #0 (unpause) or 1 (pause)
439							;jsl Music_Pause
440							.al
441							.xl
442	.3f03	80bf03					Music_Pause

444	.3f03	80bf03	08		php			php
264:1	.3f04	80bf04	c2 30		rep #$30		REP #$30
446:6	.3f06	80bf06	29 ff 00	and #$00ff		and #$00ff
447	.3f09	80bf09	85 39		sta $39			sta gss_param

449	.3f0b	80bf0b	a9 08 00	lda #$0008		lda #kSCMD_MUSIC_PAUSE
450	.3f0e	80bf0e	85 3b		sta $3b			sta gss_command

452							;	jsl SPC_Command_ASM
453							;	plp
454							;	rtl
455	.3f10	80bf10	4c f4 bf	jmp $80bff4		jmp SPC_Common_End


458							;void Sound_Stop_All(void);
459							;jsl Sound_Stop_All
460							.al
461							.xl
462	.3f13	80bf13					Sound_Stop_All

464	.3f13	80bf13	08		php			php
264:1	.3f14	80bf14	c2 30		rep #$30		REP #$30

467:6	.3f16	80bf16	a9 0a 00	lda #$000a		lda #kSCMD_STOP_ALL_SOUNDS
468	.3f19	80bf19	85 3b		sta $3b			sta gss_command
469	.3f1b	80bf1b	64 39		stz $39			stz gss_param

471							;	jsl SPC_Command_ASM
472							;	plp
473							;	rtl
474	.3f1d	80bf1d	4c f4 bf	jmp $80bff4		jmp SPC_Common_End


477							.al
478							.xl
479	.3f20	80bf20					SFX_Play_Center
480							;AXY8 or AXY16
481							;in a= sfx #
482							;	x= volume 0-127
483							;	y= sfx channel 0-7, needs to be > than max song channel
484							;pan center

486	.3f20	80bf20	08		php			php
260:1	.3f21	80bf21	e2 30		sep #$30		SEP #$30
488:6	.3f23	80bf23	85 37		sta $37			sta spc_temp
489	.3f25	80bf25	86 38		stx $38			stx spc_temp+1

264:1	.3f27	80bf27	c2 30		rep #$30		REP #$30
492:6	.3f29	80bf29	ba		tsx			tsx
493	.3f2a	80bf2a	86 3d		stx $3d			stx save_stack

495	.3f2c	80bf2c	a9 80 00	lda #$0080		lda #128			;pan center
496	.3f2f	80bf2f	48		pha			pha
497	.3f30	80bf30					SFX_Play_common
498	.3f30	80bf30	a5 38		lda $38			lda spc_temp+1 ;volume 0-127
499	.3f32	80bf32	29 ff 00	and #$00ff		and #$00ff
500	.3f35	80bf35	48		pha			pha
501	.3f36	80bf36	a5 37		lda $37			lda spc_temp	;sfx #
502	.3f38	80bf38	29 ff 00	and #$00ff		and #$00ff
503	.3f3b	80bf3b	48		pha			pha
504	.3f3c	80bf3c	98		tya			tya 				;channel, needs to be > the song channels
505	.3f3d	80bf3d	29 07 00	and #$0007		and #$0007
506	.3f40	80bf40	48		pha			pha
507	.3f41	80bf41	22 70 bf 80	jsl $80bf70		jsl SFX_Play
508	.3f45	80bf45	a6 3d		ldx $3d			ldx save_stack
509	.3f47	80bf47	9a		txs			txs
510	.3f48	80bf48	28		plp			plp
511	.3f49	80bf49	6b		rtl			rtl


514							.al
515							.xl
516	.3f4a	80bf4a					SFX_Play_Left
517							;AXY8 or AXY16
518							;in a= sfx #
519							;	x= volume 0-127
520							;	y= sfx channel 0-7, needs to be > than max song channel
521							;pan left

523	.3f4a	80bf4a	08		php			php
260:1	.3f4b	80bf4b	e2 30		sep #$30		SEP #$30
525:6	.3f4d	80bf4d	85 37		sta $37			sta spc_temp
526	.3f4f	80bf4f	86 38		stx $38			stx spc_temp+1

264:1	.3f51	80bf51	c2 30		rep #$30		REP #$30
529:6	.3f53	80bf53	ba		tsx			tsx
530	.3f54	80bf54	86 3d		stx $3d			stx save_stack

532	.3f56	80bf56	a9 00 00	lda #$0000		lda #0 ;pan left
533	.3f59	80bf59	48		pha			pha
534	.3f5a	80bf5a	4c 30 bf	jmp $80bf30		jmp SFX_Play_common


537							.al
538							.xl
539	.3f5d	80bf5d					SFX_Play_Right
540							;AXY8 or AXY16
541							;in a= sfx #
542							;	x= volume 0-127
543							;	y= sfx channel 0-7, needs to be > than max song channel
544							;pan right

546	.3f5d	80bf5d	08		php			php
260:1	.3f5e	80bf5e	e2 30		sep #$30		SEP #$30
548:6	.3f60	80bf60	85 37		sta $37			sta spc_temp
549	.3f62	80bf62	86 38		stx $38			stx spc_temp+1

264:1	.3f64	80bf64	c2 30		rep #$30		REP #$30
552:6	.3f66	80bf66	ba		tsx			tsx
553	.3f67	80bf67	86 3d		stx $3d			stx save_stack

555	.3f69	80bf69	a9 ff 00	lda #$00ff		lda #255 ;pan right
556	.3f6c	80bf6c	48		pha			pha
557	.3f6d	80bf6d	4c 30 bf	jmp $80bf30		jmp SFX_Play_common




562							;void SFX_Play(unsigned int chn,unsigned int sfx,unsigned int vol,int pan);
563							;stack relative
564							;5 = chn last in
565							;7 = volume
566							;9 = sfx
567							;11 = pan
568							;NOTE - use the other functions above
569							.al
570							.xl
571	.3f70	80bf70					SFX_Play

573	.3f70	80bf70	08		php			php
264:1	.3f71	80bf71	c2 30		rep #$30		REP #$30

576:6	.3f73	80bf73	a3 0b		lda $0b,s		lda 11,s			;pan
577	.3f75	80bf75	10 03		bpl $80bf7a		bpl +
578	.3f77	80bf77	a9 00 00	lda #$0000			lda #0
579	.3f7a	80bf7a	c9 ff 00	cmp #$00ff	+	cmp #255
580	.3f7d	80bf7d	90 03		bcc $80bf82		bcc +
581	.3f7f	80bf7f	a9 ff 00	lda #$00ff			lda #255
582	.3f82	80bf82	eb		xba		+	xba
583	.3f83	80bf83	29 00 ff	and #$ff00		and #$ff00
584	.3f86	80bf86	85 39		sta $39			sta gss_param

586	.3f88	80bf88	a3 07		lda $07,s		lda 7,s				;sfx number
587	.3f8a	80bf8a	29 ff 00	and #$00ff		and #$00ff
588	.3f8d	80bf8d	05 39		ora $39			ora gss_param
589	.3f8f	80bf8f	85 39		sta $39			sta gss_param

591	.3f91	80bf91	a3 09		lda $09,s		lda 9,s				;volume
592	.3f93	80bf93	eb		xba			xba
593	.3f94	80bf94	29 00 ff	and #$ff00		and #$ff00
594	.3f97	80bf97	85 3b		sta $3b			sta gss_command

596	.3f99	80bf99	a3 05		lda $05,s		lda 5,s				;chn
597	.3f9b	80bf9b	0a		asl a			asl a
598	.3f9c	80bf9c	0a		asl a			asl a
599	.3f9d	80bf9d	0a		asl a			asl a
600	.3f9e	80bf9e	0a		asl a			asl a
601	.3f9f	80bf9f	29 70 00	and #$0070		and #$0070
602	.3fa2	80bfa2	09 09 00	ora #$0009		ora #kSCMD_SFX_PLAY
603	.3fa5	80bfa5	05 3b		ora $3b			ora gss_command
604	.3fa7	80bfa7	85 3b		sta $3b			sta gss_command

606							;	jsl SPC_Command_ASM
607							;	plp
608							;	rtl
609	.3fa9	80bfa9	4c f4 bf	jmp $80bff4		jmp SPC_Common_End






616							;void SPC_Stream_Update(void);
617							.al
618							.xl
619	.3fac	80bfac					SPC_Stream_Update

621							; streaming functions have been removed



625							;adding some echo functions - doug fraker 2021

627							;AXY8 or AXY16
628							;lda #echo volume 0-$7f or ($80-ff negative), (0 = off)
629							;ldx #which channels on? (bit field, each bit = a channel)
630							;jsl Echo_Vol
631							.al
632							.xl
633	.3fac	80bfac					Echo_Vol
634	.3fac	80bfac	08		php			php
264:1	.3fad	80bfad	c2 30		rep #$30		REP #$30
636:6	.3faf	80bfaf	29 ff 00	and #$00ff		and #$00ff 		;***** changed v5
637	.3fb2	80bfb2	85 37		sta $37			sta spc_temp
638	.3fb4	80bfb4	8a		txa			txa
639	.3fb5	80bfb5	29 ff 00	and #$00ff		and #$00ff 		;which channels
640	.3fb8	80bfb8	eb		xba			xba
641	.3fb9	80bfb9	05 37		ora $37			ora spc_temp
642	.3fbb	80bfbb	85 39		sta $39			sta gss_param
643	.3fbd	80bfbd	a9 0b 00	lda #$000b		lda #kSCMD_ECHO_VOL
644	.3fc0	80bfc0	85 3b		sta $3b			sta gss_command
645							;	jsl SPC_Command_ASM
646							;	plp
647							;	rtl
648	.3fc2	80bfc2	4c f4 bf	jmp $80bff4		jmp SPC_Common_End




653							;AXY8 or AXY16
654							;lda #echo start address highbyte
655							;ldx #echo delay (0-$f), should be 0-5
656							;jsl Echo_Addr

658							; this is very important! echo vol must be off before changing this
659							; echo address needs to be > the last spc file byte
660							; delay is $800 bytes x val, and needs to be small enough
661							; to fit in the remaining RAM space (and shouldn't use
662							; that last $800 since it's part of the boot loader ROM)
663							; Note: a delay of 0 does actually function as a VERY short
664							; echo delay, but probably won't sound very good.
665							.al
666							.xl
667	.3fc5	80bfc5					Echo_Addr
668	.3fc5	80bfc5	08		php			php
264:1	.3fc6	80bfc6	c2 30		rep #$30		REP #$30
670:6	.3fc8	80bfc8	29 ff 00	and #$00ff		and #$00ff
671	.3fcb	80bfcb	85 37		sta $37			sta spc_temp
672	.3fcd	80bfcd	8a		txa			txa
673	.3fce	80bfce	29 ff 00	and #$00ff		and #$00ff
674	.3fd1	80bfd1	eb		xba			xba
675	.3fd2	80bfd2	05 37		ora $37			ora spc_temp
676	.3fd4	80bfd4	85 39		sta $39			sta gss_param
677	.3fd6	80bfd6	a9 0c 00	lda #$000c		lda #kSCMD_ECHO_ADDR
678	.3fd9	80bfd9	85 3b		sta $3b			sta gss_command
679							;	jsl SPC_Command_ASM
680							;	plp
681							;	rtl
682	.3fdb	80bfdb	4c f4 bf	jmp $80bff4		jmp SPC_Common_End


685							;AXY8 or AXY16
686							;lda #FIR filter settings (0-3)
687							;  0 = simple echo
688							;  1 = multi tap echo
689							;  2 = low pass echo
690							;  3 = high pass echo
691							;ldx #echo feedback volume (0-$7f) or ($80-ff negative)
692							;jsl Echo_Fb_Fir
693							.al
694							.xl
695	.3fde	80bfde					Echo_Fb_Fir
696	.3fde	80bfde	08		php			php
264:1	.3fdf	80bfdf	c2 30		rep #$30		REP #$30
698:6	.3fe1	80bfe1	29 03 00	and #$0003		and #$0003 ;fir
699	.3fe4	80bfe4	85 37		sta $37			sta spc_temp
700	.3fe6	80bfe6	8a		txa			txa
701	.3fe7	80bfe7	29 ff 00	and #$00ff		and #$00ff ;***** changed v5
702	.3fea	80bfea	eb		xba			xba
703	.3feb	80bfeb	05 37		ora $37			ora spc_temp
704	.3fed	80bfed	85 39		sta $39			sta gss_param
705	.3fef	80bfef	a9 0d 00	lda #$000d		lda #kSCMD_ECHO_FB_FIR
706	.3ff2	80bff2	85 3b		sta $3b			sta gss_command
707							;	jsl SPC_Command_ASM
708							;	plp
709							;	rtl
710							;	jmp SPC_Common_End --- fall through ---


713							.al
714							.xl
715	.3ff4	80bff4					SPC_Common_End
716	.3ff4	80bff4	22 89 be 80	jsl $80be89		jsl SPC_Command_ASM
717	.3ff8	80bff8	28		plp			plp
718	.3ff9	80bff9	6b		rtl			rtl


721							;sets all the echo functions AND global volume
722							;output from Echo4GSS is a 14 byte array
723							;
724							;1 = which channels have echo enabled
725							;2 = echo start address
726							;3 = echo size / delay
727							;4 = echo volume
728							;5 = echo feedback
729							;6-13 = FIR filter values
730							;14 = global (main) volume

732							;AXY16
733							;lda # address of echo data
734							;ldx # bank of echo data
735							;jsl SPC_All_Echo
736							.al
737							.xl
738	.3ffa	80bffa					SPC_All_Echo
739	.3ffa	80bffa	08		php			php
264:1	.3ffb	80bffb	c2 30		rep #$30		REP #$30
741:6	.3ffd	80bffd	85 45		sta $45			sta echo_pointer ;pointer to the data
742	.3fff	80bfff	86 47		stx $47			stx echo_pointer+2 ;bank

744	.4001	80c001	22 13 bf 80	jsl $80bf13		jsl Sound_Stop_All

746							;first send the FIR, overwrite FIR set #0
747							;	AXY16
748	.4005	80c005	a9 02 00	lda #$0002		lda #kSCMD_LOAD
749	.4008	80c008	85 3b		sta $3b			sta gss_command
750	.400a	80c00a	64 39		stz $39			stz gss_param
751	.400c	80c00c	22 89 be 80	jsl $80be89		jsl SPC_Command_ASM
752	.4010	80c010	ba		tsx			tsx
753	.4011	80c011	86 3d		stx $3d			stx save_stack
754							;	lda #^TEST_FIR ;source bank
755	.4013	80c013	a5 47		lda $47			lda echo_pointer+2
756	.4015	80c015	48		pha			pha
757							;	lda #.loword(TEST_FIR) ;source address
758	.4016	80c016	a5 45		lda $45			lda echo_pointer
759	.4018	80c018	18		clc			clc
760	.4019	80c019	69 05 00	adc #$0005		adc #5
761	.401c	80c01c	48		pha			pha
762	.401d	80c01d	a9 08 00	lda #$0008		lda #8 ;size
763	.4020	80c020	48		pha			pha
764	.4021	80c021	a9 aa 03	lda #$03aa		lda #$03aa ;SPC address to patch (= the FIR table)
765	.4024	80c024	48		pha			pha
766	.4025	80c025	22 c6 bd 80	jsl $80bdc6		jsl SPC_Load_Data
767	.4029	80c029	a6 3d		ldx $3d			ldx save_stack
768	.402b	80c02b	9a		txs			txs

260:1	.402c	80c02c	e2 30		sep #$30		SEP #$30
771:6	.402e	80c02e	a0 04		ldy #$04		ldy #4
772	.4030	80c030	b7 45		lda [$45],y		lda [echo_pointer], y ;echo feedback
773	.4032	80c032	aa		tax			tax
774	.4033	80c033	a9 00		lda #$00		lda #0 ;FIR Set 0
775	.4035	80c035	22 de bf 80	jsl $80bfde		jsl Echo_Fb_Fir

777	.4039	80c039	a9 00		lda #$00		lda #0 ;echo volume 0 before we change
778	.403b	80c03b	aa		tax			tax    ;the echo start address
779	.403c	80c03c	22 ac bf 80	jsl $80bfac		jsl Echo_Vol

781	.4040	80c040	a0 02		ldy #$02		ldy #2
782	.4042	80c042	b7 45		lda [$45],y		lda [echo_pointer], y ;size / delay
783	.4044	80c044	29 0f		and #$0f		and #$0f ;should be 0-f
784	.4046	80c046	aa		tax			tax
785	.4047	80c047	88		dey			dey ;y = 1
786	.4048	80c048	b7 45		lda [$45],y		lda [echo_pointer], y ;start address
787	.404a	80c04a	22 c5 bf 80	jsl $80bfc5		jsl Echo_Addr

789	.404e	80c04e	a0 0d		ldy #$0d		ldy #13
790	.4050	80c050	b7 45		lda [$45],y		lda [echo_pointer], y ;global volume
791	.4052	80c052	aa		tax			tax ;right away
792	.4053	80c053	22 c4 be 80	jsl $80bec4		jsl SPC_Global_Volume

794	.4057	80c057	a7 45		lda [$45]		lda [echo_pointer] ;which echo channels active
795	.4059	80c059	aa		tax			tax
796	.405a	80c05a	a0 03		ldy #$03		ldy #3
797	.405c	80c05c	b7 45		lda [$45],y		lda [echo_pointer], y ;echo volume
798	.405e	80c05e	22 ac bf 80	jsl $80bfac		jsl Echo_Vol

800	.4062	80c062	28		plp			plp
801	.4063	80c063	6b		rtl			rtl
















:4	;******  Return to file: Bank80.asm



:1	;******  Return to file: QWAKSNES.asm

185							.send

187							.section sBank81
188	>8000	818000	07 7d 20 cd ef bd 2f 13		spc700_code_1 .binary "../music/spc700.bin"
	>8008	818008	2f 06 72 0b 7d 7e 07 7f 3f b9 06 cd 01 d8 02 1d
	>8018	818018	3f 4f 04 e8 32 c4 fa e8 81 c4 f1 3f 19 07 e4 f4
	>8028	818028	f0 0f c4 f4 fd 28 0f 1c 5d dd 9f 28 0f fd 1f e9
	>8038	818038	08 3f 05 07 e4 fd f0 e6 3f 2a 08 3f df 04 2f de
	>8048	818048	3f 19 07 3f b9 06 2f e9 e4 f6 c4 02 3f 19 07 2f
	>8058	818058	e0 e4 f6 f8 f7 3f 19 07 68 7f 90 02 e8 7f 1c c4
	>8068	818068	16 d8 18 2f cc e4 f6 f8 f7 3f 19 07 68 7f 90 02
	>8078	818078	e8 7f 1c fd 7d cd 00 7c 90 02 db 30 3d c8 08 d0
	>8088	818088	f6 3f 17 08 2f ab 3f 19 07 cd 00 d8 13 3f 4f 04
	>8098	818098	5f 37 02 3f 19 07 e8 08 c4 12 2f 0a 3f 19 07 e4
	>80a8	8180a8	12 d0 03 5f 37 02 e8 00 2d 3f 26 07 f8 07 e8 00
	>80b8	8180b8	d4 50 3f 8d 08 ae bc 8b 12 d0 ed 3f cb 08 3f b1
	>80c8	8180c8	08 5f 37 02 e4 f6 c4 13 3f 19 07 3f 17 08 5f 37
	>80d8	8180d8	02 7e 12 b0 06 3f 19 07 5f 37 02 cb 11 f8 f5 d8
	>80e8	8180e8	0b e4 f6 f8 f7 d8 0a 3f 19 07 8d 00 77 14 b0 11
	>80f8	8180f8	1c fd fc f7 14 c4 0c fc f7 14 c4 0d f8 11 3f 82
	>8108	818108	04 5f 37 02 3f 19 07 3f d8 03 cd 00 d8 08 1d d8
	>8118	818118	09 3f cb 08 cd ef bd 5f c9 ff 3f 19 07 e8 00 c4
	>8128	818128	25 c4 24 3f 3c 04 3f e8 03 e8 ff c4 20 cd ca 8d
	>8138	818138	0a 3f d4 08 e8 00 c5 7e 00 e8 7f c5 7f 00 3f 17
	>8148	818148	08 5f 37 02 3f 19 07 3f d8 03 5f 37 02 e4 20 f0
	>8158	818158	06 e4 25 64 24 d0 0a e8 00 c4 f6 3f 19 07 5f 37
	>8168	818168	02 e8 01 c4 f6 3f 19 07 cd 01 3f 05 07 3e f4 d0
	>8178	818178	f9 eb 21 f7 22 28 03 04 f5 d7 22 fc e4 f6 d7 22
	>8188	818188	fc e4 f7 d7 22 fc 3d d8 f4 3f 05 07 3e f4 d0 f9
	>8198	818198	e4 f5 d7 22 fc e4 f6 d7 22 fc e4 f7 d7 22 fc 3d
	>81a8	8181a8	d8 f4 3f 05 07 3e f4 d0 f9 e4 f5 d7 22 fc e4 f6
	>81b8	8181b8	d7 22 fc e4 f7 d7 22 fc 3f 19 07 e8 00 c4 f6 cb
	>81c8	8181c8	21 ad fc d0 0a e4 25 bc 28 07 c4 25 3f 3c 04 5f
	>81d8	8181d8	37 02 e8 00 c4 20 e8 5c c4 f2 e8 c0 c4 f3 3f 17
	>81e8	8181e8	08 6f cd 00 e8 1c c4 11 e8 c0 d5 e4 f6 d5 e0 f7
	>81f8	8181f8	d5 dc f8 d5 d8 f9 d5 d4 fa d5 d0 fb d5 cc fc d5
	>8208	818208	c8 fd d5 c4 fe 3d e8 00 8d 08 d5 e4 f6 d5 e0 f7
	>8218	818218	d5 dc f8 d5 d8 f9 d5 d4 fa d5 d0 fb d5 cc fc d5
	>8228	818228	c8 fd d5 c4 fe 3d dc d0 e1 8b 11 d0 bb e8 c3 c5
	>8238	818238	bb fe c5 b7 ff 6f 1c 5d f5 8d 0a c5 22 00 f5 8e
	>8248	818248	0a c5 23 00 e8 00 c4 21 6f e5 0c 02 c4 0c e5 0d
	>8258	818258	02 c4 0d 8d 00 f7 0c c4 12 d0 03 5f 37 02 c4 11
	>8268	818268	fc 4d 7d 3f 26 07 6d 3f ad 04 e8 80 d4 38 ee ce
	>8278	818278	3d c8 08 b0 06 fc fc 8b 11 d0 e6 6f 8d 00 f7 0c
	>8288	818288	c4 11 fc 4d 7d 3f 26 07 6d 3f ad 04 e4 0b 68 7f
	>8298	818298	90 00 1c d4 30 e4 0a d4 38 ee ce 3d c8 08 b0 06
	>82a8	8182a8	fc fc 8b 11 d0 dd 6f 3f 8d 08 3f cb 08 f8 07 e8
	>82b8	8182b8	00 d4 68 d4 70 d4 98 d4 a0 d4 80 d4 88 d4 90 d4
	>82c8	8182c8	a8 d4 b0 d4 b8 d4 60 e8 04 d4 58 e8 7f d4 78 f7
	>82d8	8182d8	0c d4 48 fc f7 0c d4 50 6f 3f 6f 08 e8 00 2d f8
	>82e8	8182e8	13 f0 04 64 12 90 0d 3f 26 07 e8 00 c4 0e 3f 25
	>82f8	8182f8	05 3f 7b 07 ae bc 68 08 d0 e4 3f cb 08 3f 97 08
	>8308	818308	3f b1 08 6f 8d 00 f7 0c 3a 0c 2d f8 07 f4 b8 f0
	>8318	818318	0c 9b b8 d0 08 f4 c0 c4 0c f4 c8 c4 0d ae 6f f8
	>8328	818328	07 f4 50 d0 01 6f c4 0d f4 48 c4 0c f4 a8 c4 0e
	>8338	818338	f0 0e 28 0f 60 94 b0 68 c0 90 03 80 a8 c0 d4 b0
	>8348	818348	f4 90 d0 0d f4 88 d0 03 5f d5 05 c4 0e 30 6b 2f
	>8358	818358	4e f4 70 74 a0 d0 04 f4 68 74 98 f0 72 b0 1b ab
	>8368	818368	0e f4 68 60 94 90 d4 68 f4 70 88 00 d4 70 74 a0
	>8378	818378	d0 04 f4 68 74 98 b0 1d 2f 55 ab 0e f4 68 80 b4
	>8388	818388	90 d4 68 f4 70 a8 00 d4 70 74 a0 d0 04 f4 68 74
	>8398	818398	98 90 02 2f 3a f4 98 d4 68 f4 a0 d4 70 2f 30 f4
	>83a8	8183a8	68 60 94 88 d4 68 f4 70 88 00 d4 70 68 40 90 1f
	>83b8	8183b8	e8 3f d4 70 e8 30 d4 68 2f 15 f4 68 60 94 88 d4
	>83c8	8183c8	68 f4 70 88 ff d4 70 b0 06 e8 00 d4 70 d4 68 f4
	>83d8	8183d8	58 d0 06 f4 60 f0 0b 9b 60 9b 58 f4 58 14 60 f0
	>83e8	8183e8	01 6f 3f d6 07 3f 0a 05 68 95 90 40 68 f5 f0 37
	>83f8	8183f8	90 3e 68 f6 f0 49 68 f7 f0 51 68 f8 f0 57 68 f9
	>8408	818408	f0 5d 68 fa f0 63 68 fb f0 67 68 fc f0 6b 68 fd
	>8418	818418	f0 6f 68 fe d0 03 5f a5 06 3f 0c 05 2d 3f 0c 05
	>8428	818428	c4 0d ae c4 0c 2f be 3f 8d 08 2f b9 d4 58 2f 78
	>8438	818438	80 a8 96 3f 59 07 f4 90 d0 ab 3f 83 08 2f a6 3f
	>8448	818448	0c 05 d4 58 3f 0c 05 d4 60 2f 5d 3f 0c 05 d4 78
	>8458	818458	3f d6 07 2f 90 3f 0c 05 d4 38 3f d6 07 2f 86 3f
	>8468	818468	0c 05 d4 80 ab 0e 5f eb 05 3f 0c 05 d4 88 5f eb
	>8478	818478	05 3f 0c 05 d4 90 5f eb 05 3f 0c 05 d4 a8 5f eb
	>8488	818488	05 3f 0c 05 2d 3f 0c 05 2d 3f 0c 05 d4 b8 e4 0c
	>8498	818498	d4 c0 e4 0d d4 c8 ae c4 0d ae c4 0c 5f eb 05 3f
	>84a8	8184a8	0c 05 3f 2f 07 5f eb 05 f8 07 e4 0c d4 48 e4 0d
	>84b8	8184b8	d4 50 6f cd 00 d8 08 d8 09 d8 02 d8 12 d8 13 d8
	>84c8	8184c8	20 d8 19 d8 17 cd ff d8 16 d8 18 cd 9d 8d 0a 3f
	>84d8	8184d8	d4 08 e5 08 02 c4 04 e5 09 02 c4 05 e5 0a 02 c4
	>84e8	8184e8	14 e5 0b 02 c4 15 cd 00 e8 00 d4 50 e8 80 d4 38
	>84f8	8184f8	e8 ff d4 30 d4 d0 3d c8 08 d0 ed 3f e8 03 6f e8
	>8508	818508	7c c4 f2 e4 f3 28 40 f0 09 c4 f3 e4 24 bc 28 07
	>8518	818518	c4 24 6f 2d e8 91 c4 f1 e8 00 c4 f4 c4 f5 ae 6f
	>8528	818528	c4 07 1c 1c 1c 1c c4 06 6f fd f8 07 74 d0 f0 22
	>8538	818538	d4 d0 e4 06 08 04 5d dd 3f 73 08 1c fd e4 06 08
	>8548	818548	05 5d f7 04 3f 73 08 e4 06 08 06 5d fc f7 04 3f
	>8558	818558	73 08 6f 1c fd f8 07 f6 05 09 d4 98 f6 06 09 d4
	>8568	818568	a0 f4 90 f0 05 68 63 f0 01 6f f4 98 d4 68 f4 a0
	>8578	818578	d4 70 ab 0e 6f e4 0e d0 01 6f f8 07 f4 68 60 94
	>8588	818588	80 c4 0f f4 70 88 00 c4 10 f4 a8 f0 2e 28 f0 fd
	>8598	818598	f4 b0 5d f5 c5 09 30 0f cf dd 60 84 0f c4 0f e4
	>85a8	8185a8	10 88 00 c4 10 2f 14 48 ff bc cf dd c4 11 e4 0f
	>85b8	8185b8	80 a4 11 c4 0f e4 10 a8 00 c4 10 e4 06 08 03 5d
	>85c8	8185c8	e4 10 3f 73 08 e4 06 08 02 5d e4 0f 3f 73 08 6f
	>85d8	8185d8	f8 07 3e 12 b0 08 e4 13 f0 04 e8 00 2f 02 f4 30
	>85e8	8185e8	fb 78 cf cb 0b e4 02 d0 06 e4 0b 2d 2d 2f 0f f4
	>85f8	8185f8	38 48 ff fd e4 0b cf 6d fb 38 e4 0b cf 6d e4 06
	>8608	818608	08 01 5d ae 3f 73 08 e4 06 08 00 5d ae 3f 73 08
	>8618	818618	6f e8 00 2d 3f 26 07 3f d6 07 ae bc 68 08 d0 f3
	>8628	818628	3f 97 08 6f ab 19 e4 19 28 07 f0 07 e4 18 68 ff
	>8638	818638	f0 01 6f e4 17 64 16 f0 20 b0 10 84 18 90 04 e4
	>8648	818648	16 2f 16 64 16 90 12 e4 16 2f 0e a4 18 b0 04 e4
	>8658	818658	16 2f 06 64 16 b0 02 e4 16 c4 17 5c cd 0c d8 f2
	>8668	818668	c4 f3 cd 1c d8 f2 c4 f3 6f 8f 00 03 6f 2d 7d f8
	>8678	818678	03 d5 04 01 3d ae d5 04 01 3d d8 03 6f f8 07 f5
	>8688	818688	85 0a 04 08 c4 08 6f f8 07 f5 85 0a 04 09 c4 09
	>8698	818698	6f e4 03 f0 15 cd 00 f5 04 01 c4 f2 3d f5 04 01
	>86a8	8186a8	c4 f3 3d 3e 03 d0 f0 8f 00 03 6f e4 08 48 ff 24
	>86b8	8186b8	09 cd 5c d8 f2 c4 09 c4 f3 e8 4c c4 f2 e4 08 8f
	>86c8	8186c8	00 08 c4 f3 6f e8 5c c4 f2 e4 09 c4 f3 6f d8 0c
	>86d8	8186d8	cb 0d 8d 00 f7 0c f0 0a c4 f2 fc f7 0c c4 f3 fc
	>86e8	8186e8	2f f2 6f 00 00 46 02 0a 03 4e 02 57 02 6b 02 8c
	>86f8	8186f8	02 a2 02 ca 02 d7 02 99 02 20 03 4a 03 53 03 42
	>8708	818708	00 46 00 4a 00 4f 00 54 00 59 00 5e 00 64 00 6a
	>8718	818718	00 70 00 77 00 7e 00 85 00 8d 00 95 00 9e 00 a8
	>8728	818728	00 b2 00 bc 00 c8 00 d4 00 e0 00 ee 00 fc 00 0b
	>8738	818738	01 1b 01 2b 01 3d 01 50 01 64 01 79 01 90 01 a8
	>8748	818748	01 c1 01 dc 01 f8 01 16 02 36 02 57 02 7b 02 a1
	>8758	818758	02 c9 02 f3 02 20 03 50 03 82 03 b8 03 f0 03 2c
	>8768	818768	04 6c 04 af 04 f6 04 42 05 92 05 e7 05 41 06 a0
	>8778	818778	06 05 07 70 07 e1 07 59 08 d8 08 5f 09 ed 09 85
	>8788	818788	0a 25 0b ce 0b 82 0c 41 0d 0a 0e e0 0e c3 0f b3
	>8798	818798	10 b1 11 be 12 db 13 0a 15 4a 16 9d 17 05 19 82
	>87a8	8187a8	1a 15 1c c1 1d 86 1f 66 21 62 23 7d 25 b7 27 14
	>87b8	8187b8	2a 95 2c 3b 2f 0a 32 04 35 2b 38 82 3b 0c 3f 00
	>87c8	8187c8	04 08 0c 10 14 18 1c 20 24 28 2c 30 34 38 3b 3f
	>87d8	8187d8	43 46 49 4d 50 53 56 59 5c 5f 62 64 67 69 6b 6d
	>87e8	8187e8	70 71 73 75 76 78 79 7a 7b 7c 7d 7d 7e 7e 7e 7f
	>87f8	8187f8	7e 7e 7e 7d 7d 7c 7b 7a 79 78 76 75 73 71 70 6d
	>8808	818808	6b 69 67 64 62 5f 5c 59 56 53 50 4d 49 46 43 3f
	>8818	818818	3b 38 34 30 2c 28 24 20 1c 18 14 10 0c 08 04 00
	>8828	818828	fc f8 f4 f0 ec e8 e4 e0 dc d8 d4 d0 cc c8 c5 c1
	>8838	818838	bd ba b7 b3 b0 ad aa a7 a4 a1 9e 9c 99 97 95 93
	>8848	818848	90 8f 8d 8b 8a 88 87 86 85 84 83 83 82 82 82 81
	>8858	818858	82 82 82 83 83 84 85 86 87 88 8a 8b 8d 8f 90 93
	>8868	818868	95 97 99 9c 9e a1 a4 a7 aa ad b0 b3 b7 ba bd c1
	>8878	818878	c5 c8 cc d0 d4 d8 dc e0 e4 e8 ec f0 f4 f8 fc 01
	>8888	818888	02 04 08 10 20 40 80 e4 f6 e0 f7 dc f8 d8 f9 d4
	>8898	818898	fa d0 fb cc fc c8 fd 6c 60 0c 00 1c 00 2d 00 3d
	>88a8	8188a8	00 6d 01 7d 00 0d 00 0f 7f 1f 00 2f 00 3f 00 4f
	>88b8	8188b8	00 5f 00 6f 00 7f 00 4d 00 2c 00 3c 00 5c ff 5d
	>88c8	8188c8	0b 6c 20 00 75 00 77 1f 72 00 73 08 62 00 63 08
	>88d8	8188d8	74 00 64 08 4c c0 00 00 00 00 00 00 00 00 00 00
	>88e8	8188e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>88f8	8188f8	00 00 00 00 00 00 00 00 00 00 e4 f6 e4 f6 e0 f7
	>8908	818908	e0 f7 dc f8 dc f8 d8 f9 d8 f9 d4 fa d4 fa d0 fb
	>8918	818918	d0 fb cc fc cc fc c8 fd c8 fd c4 fe c4 fe b4 0b
	>8928	818928	4d 0c a7 0c a7 0c a1 12 a1 12 26 18 26 18 0f 20
	>8938	818938	18 20 f6 23 f6 23 4e 29 9c 2c cf 2f d8 2f ea 2f
	>8948	818948	e9 36 b9 39 6d 3a 91 3a be 3a f4 3a e4 3e 1a 3f
	>8958	818958	1a 3f 20 42 20 42 07 46 10 46 34 46 34 46 fc 4a
	>8968	818968	fc 4a de 4d de 4d 31 52 31 52 63 5c 63 5c 65 60
	>8978	818978	db 62 13 67 16 6d 64 70 28 76 a8 7a a8 7a bf 8f
	>8988	818988	ff e0 ff e0 ff e0 fa ee ff e0 ff f2 ef b6 ff f3
	>8998	818998	ff 6e bf 6f 8f 0e ff e0 ff e0 ef bc ff e0 ff e0
	>89a8	8189a8	ff e0 ff e0 ff e0 ff ef bf 35 ff f2 ff e0 02 00
	>89b8	8189b8	00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 b7
	>89c8	8189c8	22 52 10 d0 f1 b0 e2 ec c6 32 dd 0f 01 20 0f fa
	>89d8	8189d8	41 d9 56 04 ee 61 e1 c1 51 61 91 8a 01 f0 11 ee
	>89e8	8189e8	44 c0 e5 58 96 25 14 60 77 05 19 3d e3 96 df 3a
	>89f8	8189f8	ae cd da cc ab de 7e e5 08 6e 95 cc 7e a5 ff 76
	>8a08	818a08	1e d5 1f 31 15 e1 60 24 66 c7 5b 45 d6 0c 5e d6
	>8a18	818a18	be 76 5f f4 0f 2e 04 f0 20 03 76 d0 41 e3 ef 4d
	>8a28	818a28	e6 0f 0d 66 07 cf 40 44 c2 31 31 f5 7e 1e c2 50
	>8a38	818a38	ee 11 ec 24 1e 7e aa e9 af 11 2a b0 13 62 8a 1f
	>8a48	818a48	ce d2 66 57 5f fd 11 7e 01 00 10 14 3d fc bd cc
	>8a58	818a58	6a 62 44 43 4f fc d0 dc 01 5e aa af 31 90 60 ab
	>8a68	818a68	d5 39 5a 2f da 91 29 10 fd 98 c5 6e f0 00 0a e0
	>8a78	818a78	23 ed 20 ee 6a f0 4f de fe 0d f4 79 bf 66 0d c0
	>8a88	818a88	55 2b d1 20 02 31 7a d1 26 dd fe e4 24 2e cc 7e
	>8a98	818a98	bf 0d dd bc ad c7 7f fc af f0 01 f2 02 03 11 10
	>8aa8	818aa8	00 00 00 00 00 00 00 00 00 00 70 cc cc bb cc b0
	>8ab8	818ab8	c9 eb 8a a4 00 0f 10 f2 0e f0 35 8e b0 0c 25 ed
	>8ac8	818ac8	01 d0 3e f1 0f a0 df 61 be c1 5b c2 11 1e b0 dd
	>8ad8	818ad8	15 2e de f0 01 10 c0 a0 79 d5 1b 17 9c 3d f4 3c
	>8ae8	818ae8	a0 ae 2f f3 ee 0c d4 7a c5 a0 db 03 cc 2e 25 eb
	>8af8	818af8	f2 d1 a4 39 02 00 1f f1 32 80 5e a0 bf 7c b5 0b
	>8b08	818b08	c0 22 2e f0 a0 bf 41 bd 20 d0 6f ad 3f a0 d1 1e
	>8b18	818b18	ef e0 7d a3 ec 27 a0 d9 3e e3 2d d2 fe 0d f1 a0
	>8b28	818b28	e1 2e ee ff 11 d0 ed 7f a0 81 3d b5 2c ff e0 31
	>8b38	818b38	ef 90 8a 72 01 8f 5c dd bd 76 a0 a0 0b 21 d1 2f
	>8b48	818b48	cf ee 43 a4 cd 5d d7 1c e4 ed 24 fb a0 12 da 24
	>8b58	818b58	af 4f df 2f fd a0 b6 3a f3 fb 02 f2 fb e2 90 5e
	>8b68	818b68	a0 4e de dd ef 13 1b a4 4e b4 5d 96 5c a4 5c c2
	>8b78	818b78	90 61 aa 12 00 be 39 26 99 90 14 0f db 32 ab 22
	>8b88	818b88	af 1d a0 10 de 42 af 1c e3 40 cc 90 f3 62 99 d1
	>8b98	818b98	63 b9 ef de a0 34 9f 3b e5 3b d1 e1 0d 90 30 a4
	>8ba8	818ba8	fb 0b e6 58 85 b0 a0 5b c1 fd 26 bd 3e f2 0c 90
	>8bb8	818bb8	c2 24 19 8e 32 ff 1d ae a0 30 d1 fe 00 ee 1d f6
	>8bc8	818bc8	dd a4 5d d3 5c e1 d0 54 ab 34 a0 1f ff fe ff 13
	>8bd8	818bd8	db 10 01 a4 ed 37 8c 63 ce 3e f2 02 a0 1b f3 1d
	>8be8	818be8	e0 d0 2f 0f e0 a0 ed 04 0c 1d c5 2d f1 dc 90 73
	>8bf8	818bf8	cf bd 44 eb d2 da 43 90 b9 12 e4 f8 d0 34 fa b1
	>8c08	818c08	a4 ef 34 ba 7e e6 1a d4 3f 90 1e cb b4 7a d1 c0
	>8c18	818c18	1e f0 a4 fd 4f e7 da 16 db 62 df 94 f0 1f 34 eb
	>8c28	818c28	d2 05 49 f0 a4 e5 0b 01 21 1d c4 1f 10 a0 ec 22
	>8c38	818c38	ef 0e d1 1e e2 0a a4 55 db 23 ef 10 10 fe 3f a0
	>8c48	818c48	c2 2d c3 4a e1 e1 1f f0 90 0d cd e1 42 c9 e2 d0
	>8c58	818c58	2f 90 9d 3d 44 8d 3e b2 4b d0 90 e0 1e b2 3d d1
	>8c68	818c68	1c c0 2e 90 de bd 47 a8 1b 17 db f1 94 b3 39 23
	>8c78	818c78	e1 3f 83 4d 11 90 ef de 3f c0 2c a4 fd 30 80 89
	>8c88	818c88	50 9d 9e 70 a9 ab 16 94 c0 0d 32 df 01 2c 17 ac
	>8c98	818c98	90 e2 fe 2b b2 4e c1 ca 15 94 bb 40 f1 d2 4e b1
	>8ca8	818ca8	5f c0 80 40 8a f1 0f cb ed ef aa 90 15 b9 31 cd
	>8cb8	818cb8	2f d1 fe ff 80 de f0 0d e8 97 39 9d f1 94 2b c4
	>8cc8	818cc8	30 f2 bc 55 ec 02 90 fc f3 2b b1 21 db 11 ce 94
	>8cd8	818cd8	5e a3 1d 33 ed f1 12 fe 94 3c 05 dd 11 11 e2 dd
	>8ce8	818ce8	53 90 0b 00 ce 21 bd 22 fd dc 80 13 c2 18 9e 0f
	>8cf8	818cf8	30 9d dd 80 0e df dc e0 0e cc ee 84 90 3c d1 1d
	>8d08	818d08	ff c3 2a e1 0c 80 10 81 0a 01 db fc 8f 72 90 bc
	>8d18	818d18	01 ff 0e cf 2f ee cf 80 31 9e 3b d0 bd ed 20 aa
	>8d28	818d28	80 d3 4b 9c da 07 ca eb b1 90 2e e0 cd 00 01 0b
	>8d38	818d38	d1 11 80 c8 01 ca f0 c9 27 d8 c1 80 ae 3c 90 6b
	>8d48	818d48	8e 9f 50 ba 8c 20 5c 87 2b 02 20 0f dc 84 05 5d
	>8d58	818d58	c0 f2 1f 00 ec 67 80 c8 ef 12 e8 c2 cd 21 8b 80
	>8d68	818d68	4e ad fe e0 0e dc cb c7 80 18 0c b3 1b ae de 3d
	>8d78	818d78	bd 80 a1 5b be df ec e0 fd 0c 80 91 fb f2 c8 3e
	>8d88	818d88	91 2c 91 84 fc 3e e2 1e 05 ad 6f e1 80 0d be 1f
	>8d98	818d98	cd cb d5 18 cd 80 d5 f8 c1 b9 53 a9 f0 ef 80 dc
	>8da8	818da8	ed ce 20 bb ec b5 29 80 b0 d9 21 bf fc af db 50
	>8db8	818db8	84 93 f2 5d c0 2f f2 1e e1 84 2e d7 f9 22 f0 1e
	>8dc8	818dc8	e6 fb 84 f4 fd 51 be 31 e2 0e 0e 80 cf 10 ec 9d
	>8dd8	818dd8	41 bb dd e0 74 19 95 7f 95 08 14 0e 13 74 28 a5
	>8de8	818de8	43 db 01 02 1d c2 84 10 d3 29 44 ad 63 81 3c 74
	>8df8	818df8	45 dc 21 d1 1d c6 59 c3 80 0d df cb f4 da ed e0
	>8e08	818e08	fd 8c 11 f4 db 43 0d f0 2e 22 80 0d ce dd ff ed
	>8e18	818e18	dc e2 bb 80 3c bf ec e1 cd 0b c1 fb 74 27 fd cd
	>8e28	818e28	74 ae 0f 22 fe 80 eb b2 fc fd ce 0e ce ce 74 59
	>8e38	818e38	b4 7c d1 fc 17 fc ef 74 14 28 c7 1b 07 c9 6e d3
	>8e48	818e48	80 1e b0 dc fd d0 0b b0 fd 88 11 3d b6 1c f3 1f
	>8e58	818e58	fe 06 74 fb 4e d2 3d d4 de 50 ce 70 ca a1 e9 ad
	>8e68	818e68	b9 b0 e8 dc 80 ce 0e bd fe fe dd dc d2 74 88 76
	>8e78	818e78	b9 7e b5 ff 3f ce 74 32 ff fe f0 60 82 1d 30 70
	>8e88	818e88	aa fe 8d d9 ce cb db 89 70 01 98 ac fe ba bb ce
	>8e98	818e98	da 70 8c eb ad e9 ac bf e9 ab 64 14 cc fb 77 b9
	>8ea8	818ea8	e2 04 18 70 bc 99 f2 88 cb 9e 2a 9b 74 f2 1e d3
	>8eb8	818eb8	0a 34 dd 03 1e 64 cf e3 4d 90 6d f2 bc 27 74 ff
	>8ec8	818ec8	0d 00 c6 5b 91 4d 33 74 bb 25 0c e2 f0 2f f0 fc
	>8ed8	818ed8	70 a0 fb 9c ab fb ad cb cc 7c e3 19 63 ad 53 94
	>8ee8	818ee8	3a 02 64 2c 35 bb 02 2f c0 f0 4a 64 04 ac 36 ce
	>8ef8	818ef8	2b e2 11 0c 64 0e f3 fd e7 e8 6d c5 fd 70 ce a8
	>8f08	818f08	fc ac cb cd ba bc 70 cc ab dd 9a ec ab f9 9f 64
	>8f18	818f18	e8 e3 1f fd f2 4c b1 20 70 bb cd c9 ae fa 8d da
	>8f28	818f28	bd 68 bc 7b 35 8a 57 af 68 d3 64 61 e0 ee f3 cd
	>8f38	818f38	7e c0 10 54 cd c2 6b f2 ad fd 50 a6 6c bd 35 0b
	>8f48	818f48	e0 31 1d c6 c0 64 50 bc 61 a1 ff 4f cd 12 6c fe
	>8f58	818f58	f0 10 3e 87 4b f0 11 68 fe 03 dd 42 ce 5d a7 1c
	>8f68	818f68	64 c0 31 bf 1d 03 1c e0 02 7c fe 2f 01 1f c4 0c
	>8f78	818f78	51 db 64 33 a6 19 0f 13 ec f3 ee 6c 68 24 86 3b
	>8f88	818f88	d4 1d 02 fe 54 03 ed ef e1 48 c4 dd 12 54 ee ef
	>8f98	818f98	cf 7c a1 c1 5b c0 64 1d 12 b1 2b e4 49 e2 c2 64
	>8fa8	818fa8	4f af 1d 53 9e 01 00 0e 6c f2 2c 31 ce 33 b4 09
	>8fb8	818fb8	42 54 d4 1b cd f2 20 ca e4 58 54 c3 b0 40 9c 30
	>8fc8	818fc8	ff 0c e2 54 a2 69 c1 18 27 9a 34 ac 44 50 bc d0
	>8fd8	818fd8	0d ea d7 98 21 54 ef 0d df 21 eb d2 48 d7 54 cb
	>8fe8	818fe8	10 e1 0a d3 2f bb 40 54 b5 ca 31 cd 4e b0 f1 1a
	>8ff8	818ff8	54 f2 dd 14 bb 00 2f ce ff 54 e4 18 ff d3 4d 80
	>9008	819008	2c e3 5c eb 20 e4 0d ff 11 4b a5 54 11 2c b0 d2
	>9018	819018	5a de f0 20 6c d2 0e 6d a4 10 00 d0 4d 4c a7 5d
	>9028	819028	ad 62 af 11 d3 29 5c f2 00 ff f4 ea 53 dc 32 44
	>9038	819038	9e fc ff ce 0d af 0e df 4c fd d5 4c ae 7b 42 80
	>9048	819048	2c 58 03 fd e0 2f ef 5c b1 5e 4c 84 1d 00 0e 1e
	>9058	819058	f5 cc 23 44 0b a1 29 c1 fc ee a0 3b 44 dd be 22
	>9068	819068	8c fd 0f ce dd 4c f3 1e 83 5a 31 cd 14 fd 3c ef
	>9078	819078	e4 1c c1 28 27 9f 0a 3c 42 bf 0d 01 1c b4 2b 95
	>9088	819088	34 6a 89 cf d9 ba db cf 9b 3c f0 2d c1 3a e5 eb
	>9098	819098	f1 0f a9 00 00 00 00 00 00 00 00 00 00 00 00 00
	>90a8	8190a8	00 00 00 00 80 bf 98 42 ef 58 78 3b 4f 90 12 f2
	>90b8	8190b8	e1 01 d4 b4 e0 0e 80 fb 62 97 8c 0d cb 2a a9 b0
	>90c8	8190c8	0f f0 ff ff de c2 88 70 c4 b5 4f b4 00 d2 a5 ed
	>90d8	8190d8	16 c0 db 40 92 0b 2e 14 bf 5f c0 23 51 34 27 34
	>90e8	8190e8	60 65 32 b4 32 d5 df f2 2a 4e f3 af b4 3d e3 c2
	>90f8	8190f8	cd 1d 23 85 bd b4 68 10 e2 df 0f 1f 0f 10 b4 e1
	>9108	819108	10 f1 10 03 d0 6e f3 a4 1a 77 f2 14 21 42 13 41
	>9118	819118	8c 72 3f 41 12 11 20 12 f0 94 22 00 0f e3 be 29
	>9128	819128	00 8e a4 f2 eb 13 cc ff df dd 0e 9c a7 dd 2d f2
	>9138	819138	fa 41 94 2b 94 85 bd fe e0 ea 2f c0 fe 74 fc 80
	>9148	819148	e9 2b 00 c3 f0 32 98 0f 01 d4 28 32 1f 2e e5 8c
	>9158	819158	6a c6 16 0e c5 52 ef 71 88 e3 7d 74 d1 76 b5 4f
	>9168	819168	53 8c 1f 13 2b 33 2a 22 2e f1 88 f3 2e 22 df 32
	>9178	819178	ef 0d 4b 88 05 8f 1d c6 81 de fb 01 88 90 ce fc
	>9188	819188	0c b0 eb 0e b1 84 c9 0a dd de cf ce c0 0c 74 fd
	>9198	819198	e0 e1 c4 0e 01 5d 4b 84 3f 32 e5 f1 23 2f 41 30
	>91a8	8191a8	88 4f e5 c4 e1 4a 7d 3f 20 7c e6 f0 13 1c 42 2d
	>91b8	8191b8	2f 50 7c f2 1f 20 5e 03 d5 1e 6a 7c 6f 07 97 c6
	>91c8	8191c8	e5 a7 e3 03 8c e3 0f 3f c7 ef 2f 03 b6 74 2d d7
	>91d8	8191d8	b3 20 80 40 fc b0 84 1e 0f cf 0e d0 0a f0 ef 7c
	>91e8	8191e8	db 6c e1 ef f2 ad 6c ec 7c 1e fe 38 2d ff c3 eb
	>91f8	8191f8	0e 7c d2 eb fd 1d ef c0 d0 a3 7c d0 cb 30 a1 0b
	>9208	819208	1e a7 af 74 ba bd 9c fb eb ef eb 1e 6c b7 d0 97
	>9218	819218	fc 6c 1e 7b 7c 78 12 d0 4f 00 22 02 02 06 8c e3
	>9228	819228	00 10 03 f2 ff 7c f5 8c 0e 41 d5 ff 4e 21 f2 2e
	>9238	819238	7c 5e 32 20 4e 15 01 00 4c 74 76 07 34 35 24 32
	>9248	819248	45 e4 74 62 f2 43 11 22 03 22 23 74 e0 5f e2 d0
	>9258	819258	5a f1 a2 1a 74 00 bf ec fc ee 1a c1 d9 7c 15 92
	>9268	819268	fc 2d 3c d7 91 fb 88 12 92 0e 0e e2 dd 00 0b 7c
	>9278	819278	20 b2 a2 1a ed 3b ee 2a 7c e1 cf de 0f be 3d a0
	>9288	819288	f1 7c 84 be 3b c2 0a 2f d0 39 84 cf af da 1d de
	>9298	819298	dd e1 dc 88 5a f0 b6 da 5e ee 1c 4e 88 ef 1f 00
	>92a8	8192a8	c6 b2 2c 12 d3 88 f4 a3 59 60 e6 d2 1f 6d 8c 14
	>92b8	8192b8	e3 f1 f6 0d 7e e7 fe 8c 50 11 12 d5 00 6a 50 3f
	>92c8	8192c8	84 15 61 55 24 17 3f 73 04 84 33 5d 45 2f 26 d3
	>92d8	8192d8	11 2e 84 40 c6 ee 1e 20 df 0e ef 8c 0f 00 2c 4d
	>92e8	8192e8	e4 ec 50 86 74 18 1b f8 a4 8a 29 9f a9 74 3d 8d
	>92f8	8192f8	ad ad f8 f0 8d ea 7c e4 db 3f b3 ec 02 a1 ff 7c
	>9308	819308	e1 d9 7c d1 ec 2d a7 ba 88 39 2f ec 1e e1 da 5c
	>9318	819318	fb 8c 4e 97 e8 70 91 1f 0d 1e 7c 00 87 f8 22 95
	>9328	819328	ce 11 97 74 be fc d3 9e e1 b0 0f 0d 8c 4d f2 38
	>9338	819338	70 e0 12 fe 32 8c d1 12 0d 41 0f f5 f0 20 7c d6
	>9348	819348	f4 d5 11 50 b7 7c 03 98 20 e4 f2 f3 01 10 1f 50
	>9358	819358	84 e5 51 45 04 54 24 43 34 88 11 4f 22 4e 41 06
	>9368	819368	c4 4d 7c 7d 45 86 4a 7b 7e f3 f1 74 20 2a 65 80
	>9378	819378	03 ce 49 d1 84 eb 1d ed fe c2 a9 4c af 88 0b f1
	>9388	819388	f0 fe c5 ad 3e d0 8c 0c f4 92 fd 3d c2 1b fe 94
	>9398	819398	0d ed ee fe d2 ea 1e cf 9c fe 2e 0d 22 a3 0d 3e
	>93a8	8193a8	d5 84 b0 ce fb 0e ef fe df ee 84 ee ff b3 be 2d
	>93b8	8193b8	00 b2 0b 84 10 fd 2e a4 1a 30 e1 10 8c d6 ef 03
	>93c8	8193c8	e0 3f e6 df 4d 88 32 c6 ff 4f 21 03 12 e7 8c ff
	>93d8	8193d8	33 c4 2e 23 f1 5d f5 84 64 32 74 27 06 41 36 13
	>93e8	8193e8	84 64 f7 31 60 42 16 f3 51 74 45 70 57 e6 41 06
	>93f8	8193f8	4f 53 7c c6 fb 6c 50 d1 b7 0b 32 8c c3 fd 4d e4
	>9408	819408	ed 11 d0 2a 88 5c e4 91 1d 0d e3 cd 0e 7c fd 1a
	>9418	819418	1c b3 f9 f4 8d 01 7c 84 e9 2e ea 20 c1 bc 3f 7c
	>9428	819428	a3 cd 58 1d 3a 02 db 2e 7c 2b 03 b1 a4 0d 0f e3
	>9438	819438	df 7c 3a 31 f2 95 0b 60 b1 3e 74 2f 42 2f 17 f3
	>9448	819448	2e 44 79 74 75 36 32 45 52 55 46 56 78 01 5f 44
	>9458	819458	f0 6e 70 23 07 7c e2 59 73 e3 4e 03 2f 40 7c 03
	>9468	819468	e7 ef 40 12 10 12 f4 74 22 35 00 53 10 32 f6 d1
	>9478	819478	74 4f c3 0f e1 0c 10 be 3c 7c 00 02 a1 3c 11 a2
	>9488	819488	49 1f 78 e1 ec 12 bd 2d fd 1d a3 78 1d 9f 7b a1
	>9498	819498	f0 a0 0d fe 7c 49 f7 b1 d0 30 c0 2e 10 64 a2 2b
	>94a8	8194a8	00 b7 bb 3b 5d c4 64 ca 6e a1 bd 29 ad 1a fb 74
	>94b8	8194b8	d1 cf e9 1d cf b1 ac fd 78 fe 00 cc 5f 90 1e df
	>94c8	8194c8	0c 6c f1 ee c2 95 9c 5d df b1 74 df bb 2d cb 2f
	>94d8	8194d8	a2 eb 2f 74 d3 cc 70 c4 20 21 50 14 74 5e 53 16
	>94e8	8194e8	12 72 24 35 44 8c f2 02 0d 25 c1 2f 11 00 7c 3f
	>94f8	8194f8	14 c7 c0 7b 44 a4 4d 78 15 20 14 02 6d 31 21 30
	>9508	819508	74 21 50 23 30 07 e1 31 02 64 32 5f 17 4a 57 b3
	>9518	819518	5f c4 74 0e f1 ff fe 00 ce 0e b0 74 eb fd fb f0
	>9528	819528	9a 28 de 9b 6c 2b de fe da 2b c3 82 ab 7c 1e 0b
	>9538	819538	2e ee 1f b1 00 a1 6c 2b cf e3 8f 2b f4 82 38 64
	>9548	819548	c2 eb 2e e0 34 a4 42 23 64 52 55 17 61 67 56 53
	>9558	819558	76 68 20 30 4d 74 97 79 62 34 78 04 e2 30 2d 62
	>9568	819568	e5 c3 6c 7c f4 3d f3 1d 6d e5 d0 21 74 d0 6b f5
	>9578	819578	df fd 3e c0 ed 74 df 0c dd fb d0 bd ec 0b 6c e7
	>9588	819588	ce 1c 1d fd 1c 2c f3 74 ea 2e 92 f9 0e d0 df ef
	>9598	819598	64 18 f0 b1 9e ed 18 1e 82 64 8e 2e a0 3a 85 c0
	>95a8	8195a8	dd d4 74 ed 04 bf 6c c3 1e 11 1e 74 10 22 d2 4f
	>95b8	8195b8	22 22 03 30 6c 7c 5d 43 d0 07 fc 7b 52 68 b7 f5
	>95c8	8195c8	0f 23 30 e5 12 10 64 e3 4a 32 e2 e0 ef 1f f2 64
	>95d8	8195d8	fb f2 a1 fa 20 ad 1e c0 68 ef f1 d2 1d 0f 0f e4
	>95e8	8195e8	84 6c 29 5f d3 d1 e2 0c 3c 3d 54 c0 83 9c fd ef
	>95f8	8195f8	ac 0b 90 54 eb 2b d5 9c 4d ad 6b a2 54 fd 1d ed
	>9608	819608	ff 0c ed 3e 94 5c af 02 fb 7b e2 1f b7 bf 4c 60
	>9618	819618	93 e2 94 29 02 e1 fd b9 00 00 00 00 00 00 00 00
	>9628	819628	00 00 00 00 00 00 00 00 00 8c 96 00 f1 f1 f1 fe
	>9638	819638	ae 11 b4 ff f0 f0 f3 d8 31 10 f0 b0 ab dd 0f 76
	>9648	819648	92 12 2e 85 b4 35 f1 00 00 4b d4 00 01 c0 22 70
	>9658	819658	8c 03 0f d1 61 be c0 31 0a f1 dc cd e1 12 c9 c0
	>9668	819668	9f 35 61 a0 37 6c 53 d3 c0 47 54 24 33 57 73 17
	>9678	819678	2a c0 30 30 c2 5c bd f1 d4 ee cc 0f 1f 1f 30 93
	>9688	819688	03 b4 31 c0 2a ef 10 10 15 3b d4 3f c0 01 60 6e
	>9698	819698	23 4f df cf 13 b0 64 34 73 89 a8 f1 11 f6 cc c0
	>96a8	8196a8	d4 1e 00 1e 11 11 74 cc 41 1e ec 7e 0f 49 24 28
	>96b8	8196b8	c0 e3 f1 13 12 14 3f 3a d1 c0 42 ed d2 e0 ff ff
	>96c8	8196c8	f4 e8 c4 13 4f ee d4 11 f0 e1 00 c4 12 0d c2 4b
	>96d8	8196d8	23 23 9d 32 c4 69 d4 02 f3 eb 4f e6 a0 b0 23 32
	>96e8	8196e8	10 00 0f ff e0 7e c0 aa e0 01 1c e1 3a df 2e c0
	>96f8	8196f8	e0 11 ce 00 50 d1 b0 15 b0 df 3c 2b cf 33 20 7d
	>9708	819708	80 b0 25 8f 5d c8 9f 01 0e 0e c4 d3 1a 6d d4 1e
	>9718	819718	1f 22 73 a0 b0 10 10 ee 2b a1 03 23 c0 14 eb 01
	>9728	819728	20 11 10 4d e0 c0 11 12 f0 01 00 3a d0 2f c4 04
	>9738	819738	ce 14 bf 30 1f 13 9e b0 b1 f2 10 28 c2 be 04 f9
	>9748	819748	b0 e3 3a 0e 53 81 5b 9f 1f b4 07 9b 53 ab 61 2f
	>9758	819758	ff 2c c0 01 b0 e0 1c f0 0f f0 ff b0 f0 11 3c 9c
	>9768	819768	46 db f1 21 b4 00 5a b6 1c 20 7b b7 9e b0 25 ec
	>9778	819778	d1 56 ba 0d f0 00 b0 0f ff 58 9e ff 0f 3d dd b0
	>9788	819788	bf e2 ec 0f 50 b9 90 12 b0 ff f0 0f 0f e1 5b 8d
	>9798	819798	01 b0 22 4b 9e 11 ef ff 04 e8 b0 cf 0f f1 4c c4
	>97a8	8197a8	ca 0f 01 b0 00 04 39 f8 e1 64 df c1 b4 f0 2d f3
	>97b8	8197b8	ee 44 c9 6f 2f b0 3d 20 af f1 2f df ff 31 b0 ee
	>97c8	8197c8	8b 21 a0 02 dc 0e ef b0 1c 21 8b e0 02 d3 08 de
	>97d8	8197d8	b0 13 2a c1 1c ff 33 9d f0 b0 00 0f 0f 0f 34 8c
	>97e8	8197e8	2e d3 b0 fe 15 dc f4 dc 00 13 4b b0 db e1 11 03
	>97f8	8197f8	3a ef 00 00 b4 00 13 81 11 11 3c a1 32 a4 00 f0
	>9808	819808	0d 10 13 d9 a7 41 b0 14 bd 1f bb ff 32 fb c0 a4
	>9818	819818	c4 86 03 48 cd 55 a3 f3 a0 06 fa 9a dd 20 1f 0f
	>9828	819828	ff a0 ff e0 f4 4a cb f0 ad 31 a0 7b 90 5e f3 de
	>9838	819838	9f 74 aa a0 a2 d5 5e 98 01 01 0f 1f bc 04 db 33
	>9848	819848	1e 0f 10 39 f7 a0 b1 6c 8e f0 ff ff 5a ae b4 01
	>9858	819858	b4 f3 e0 f2 0c 3d 01 a4 45 99 6f 5d e2 3c f5 ae
	>9868	819868	a0 d4 ab 00 20 51 9e 3a b2 a0 5b c0 f4 1c e3 eb
	>9878	819878	0f 0f a4 1f 2e 05 8e 4e 45 84 de a0 ce fc 21 10
	>9888	819888	ec ef 42 8a a0 e0 00 06 e9 80 49 ce 00 a4 0f f0
	>9898	819898	0f 1f 10 e0 25 8a a0 c5 ed d9 0e 41 8e e3 ec a4
	>98a8	8198a8	20 22 e9 7c 05 a6 fc d7 a0 cf 02 2b 0f 40 db e4
	>98b8	8198b8	db ac 5f f1 d5 91 04 ef 41 c9 a0 ff 00 3e c5 ba
	>98c8	8198c8	e4 ef ea a0 00 3a ef 0f ff fe ee fe a0 fe 0e 02
	>98d8	8198d8	8b e0 00 ff fe a0 ee ee fe fe 3d a2 9c e0 a0 24
	>98e8	8198e8	bd ae 5b fe c0 f3 0b 94 07 23 9e 6d 7e 8e 31 0b
	>98f8	8198f8	a0 f3 e3 fb d0 01 f4 1b de a0 1b ff 10 0f ff ff
	>9908	819908	f3 18 a4 51 2e 2d 5b c6 3a c5 01 a0 0f ff f1 29
	>9918	819918	ae f0 23 b9 a0 f1 be ff 0f 1d de d1 0b a0 be f0
	>9928	819928	ff ff fe fe ff 4d a0 90 0d ef f0 f2 db f0 12 a0
	>9938	819938	db ed 00 01 1d e1 3c cb 90 e0 11 f0 f3 48 ac dc
	>9948	819948	72 a0 bc f4 df ed 01 3a ef ef a8 1f 97 3d a3 31
	>9958	819958	f1 b0 06 90 4c 94 9c e5 a9 df 09 0b 90 cd 2d a8
	>9968	819968	e4 08 c2 aa fe a0 12 bc ff 11 bd ff 20 af 90 fe
	>9978	819978	ef f2 68 8f cf f2 6c 90 8c bd 03 49 1f 8e f5 cb
	>9988	819988	94 f1 40 0f 0f 00 f1 f6 a9 90 3d 99 ef 1f fe 39
	>9998	819998	90 09 90 d1 d9 ee 00 38 83 d8 9d a8 0f a7 e1 f0
	>99a8	8199a8	f4 bd 60 0e 90 fe ee ed f3 da 81 8c f0 90 ff fe
	>99b8	8199b8	e0 28 bf 21 9e e8 90 ff 0f 0e ee e0 39 ac ff 90
	>99c8	8199c8	ff ff 13 8d d4 ba 3e 93 90 e8 ef 01 de f1 08 19
	>99d8	8199d8	af 98 fb a7 3e 0e 12 ea 33 3d 94 01 02 aa 51 20
	>99e8	8199e8	0f e1 f5 a4 fb 21 10 00 f0 00 00 0f 90 fe 1d a0
	>99f8	8199f8	cc ae cf f0 f2 94 da 43 de 7b df 40 21 eb 94 5e
	>9a08	819a08	e2 c1 22 04 b9 32 20 94 2a f3 5a c4 3b 32 83 11
	>9a18	819a18	94 00 1f ec 41 58 d3 11 11 90 bd de ee d1 e9 d0
	>9a28	819a28	1a aa 94 40 21 da 31 23 ac 35 cf 90 0a 0d de f2
	>9a38	819a38	fb cc bf 2f 94 c0 20 10 00 48 e3 11 00 9c 11 84
	>9a48	819a48	6e 94 03 0b 11 3d 90 ff 2d be ef ee ee 20 8c 94
	>9a58	819a58	11 00 0f 4d de 21 30 a5 94 a1 21 00 f0 3a f1 21
	>9a68	819a68	2e 90 9b ee ef ff fb db ce ef 94 02 92 14 bf 2d
	>9a78	819a78	11 2f c2 94 10 2d e2 13 83 1c 30 12 90 eb ee fe
	>9a88	819a88	11 ca b0 0c ee 98 10 ff c6 1e 0f 3d c3 30 84 23
	>9a98	819a98	a8 70 c1 21 5b 81 47 90 cc ee fe ee 2d ac ef 1e
	>9aa8	819aa8	80 9a 9b 92 ba d8 b1 98 d0 84 ea 1f f3 15 9f b6
	>9ab8	819ab8	1b 6e 80 99 cb ed c0 89 0d aa a9 84 20 02 f3 bc
	>9ac8	819ac8	42 ec 4e 3a 80 9c de 1d 80 c9 d8 ad ee 84 f4 d8
	>9ad8	819ad8	35 f8 44 ce 3f 23 84 8e 6e d3 28 12 10 1d 4c 80
	>9ae8	819ae8	8e 8a cd dd 18 ae 9a 90 80 9d ba bc dc fe b8 a8
	>9af8	819af8	cd 74 e3 c9 7b 20 0e 1f 01 02 84 af 2f f3 02 19
	>9b08	819b08	30 a3 20 84 13 ad 06 bf 3f 10 2c c4 84 e2 fd 20
	>9b18	819b18	2a 43 cc 33 0c 74 fa 43 1f ff ff 0f f0 01 84 e4
	>9b28	819b28	ad 40 4d ce 33 1b ff 84 2e 11 0f 01 38 e3 02 02
	>9b38	819b38	84 a2 b2 20 0f 0f 20 a3 2b 84 11 00 0f 00 00 4a
	>9b48	819b48	b3 12 84 f0 f0 f4 f9 04 1b 31 c4 84 df 21 39 e0
	>9b58	819b58	51 bf 03 f2 84 ce 22 2a 10 0e 10 ff 22 74 8f 15
	>9b68	819b68	08 ff e1 30 0e 0f 74 1d 5c 91 c4 21 f0 0c f0 84
	>9b78	819b78	00 f2 1b ff 21 00 f0 f1 84 f3 a0 3b 21 2d f2 fe
	>9b88	819b88	10 74 00 f2 fd cd 6e 5f 84 a4 8c e1 19 61 a5 f1
	>9b98	819b98	d2 00 c4 74 04 fc ff f3 28 21 4e cd 74 e1 31 2b
	>9ba8	819ba8	cf 24 fa e2 20 74 fd 1f 0f 4a d3 f5 e8 15 74 cf
	>9bb8	819bb8	d1 20 01 18 02 f0 c2 74 4c 0d e2 00 0f 4c 86 fe
	>9bc8	819bc8	74 01 3c ee e4 3d a3 02 2b 7c 14 fe 3b 5f 0e 10
	>9bd8	819bd8	38 05 74 12 f0 f1 ff 18 12 10 12 74 ad e2 20 f2
	>9be8	819be8	18 f2 01 f2 74 eb 5b 00 e1 31 ae 3e e2 74 2f a3
	>9bf8	819bf8	0e 1f b5 fc 01 00 74 ff 0f f0 f0 04 ac 11 11 78
	>9c08	819c08	09 42 e2 d1 e0 11 0f c3 64 95 e5 d8 10 00 f2 28
	>9c18	819c18	81 74 12 ff f3 da 5e e1 01 2b 64 97 de 1f ed 2f
	>9c28	819c28	b4 e0 fe 74 0f 3d a2 01 f0 f0 02 9f 64 56 8a 30
	>9c38	819c38	33 88 32 48 d2 74 3c ef f1 10 ff 3d a3 0f 78 20
	>9c48	819c48	93 5b 3c f5 a4 d2 f0 78 00 a5 3b 00 f2 1c 3f b5
	>9c58	819c58	64 28 12 0e 48 c3 f1 ef ff 74 f0 f0 02 be 10 11
	>9c68	819c68	0a 10 7c 11 94 10 f2 a3 20 d1 f0 64 1f 0b 30 10
	>9c78	819c78	8f 1f 00 1c 64 a5 a2 2c ee 2e fe d4 0c 68 01 40
	>9c88	819c88	80 12 3d be 5f b6 68 d0 e1 28 03 39 7d a0 60 64
	>9c98	819c98	9f 2e 0f ff ff fe 11 bc 64 f3 3a b3 00 fb 4e ce
	>9ca8	819ca8	e3 64 f0 19 0f 21 82 0b 2f 2d 64 e2 ae 4d ef d1
	>9cb8	819cb8	21 ae d2 68 d1 c3 ea 43 d4 8d 5f 3c 64 3d 92 e0
	>9cc8	819cc8	d1 f0 fe f0 38 64 e2 c2 f3 cb 3b 01 2f be 6c 03
	>9cd8	819cd8	e2 87 b6 af 42 cb 6f 68 0f 28 12 3e b2 20 ea 22
	>9ce8	819ce8	64 12 09 01 29 00 10 b0 e0 64 2d c0 2c e1 1c e1
	>9cf8	819cf8	f2 e9 54 40 eb b1 0f ee 1a b2 82 54 bb 30 fa ff
	>9d08	819d08	fe ec da 3b 5c 23 c2 94 1e 3e 92 f5 e0 6c f1 fd
	>9d18	819d18	2d 22 f1 eb 35 cd 64 ef 10 2a ff ef 0f 2f ce 54
	>9d28	819d28	e0 3a a2 d1 eb ee ef 29 6c 2e 12 e2 cf 30 19 50
	>9d38	819d38	1a 54 c0 10 83 cb ed 4a 00 9e 58 00 86 d0 f0 90
	>9d48	819d48	6b e0 a7 58 fd 85 58 d1 e5 da 2f c3 6c 2d d3 00
	>9d58	819d58	f0 f0 01 0b 30 54 de f3 bb 1e 38 c0 e3 bb 54 b1
	>9d68	819d68	0b f1 be 3a bf e0 1e 54 8d f1 19 b1 ff ef 18 bf
	>9d78	819d78	54 00 19 be 3d dc d0 19 ff 54 e0 18 c2 cd ef fe
	>9d88	819d88	ee d2 54 c8 3c ec 00 90 e3 b9 1d 54 4a be fe 10
	>9d98	819d98	8e e0 0c c0 54 dd d1 dd fe 00 8f b1 1a 54 e1 0a
	>9da8	819da8	dc 00 ee de f1 ab 54 0a 3f af ff ed 1c af ef 5c
	>9db8	819db8	d2 f0 f3 ac 61 ea 43 ce 5c f3 18 52 be 3f e2 fd
	>9dc8	819dc8	1f 58 0e 0f ff e0 0a 2f f1 c0 5c 3d d3 b2 20 a1
	>9dd8	819dd8	2f f0 0e 5c 2e b3 3d ff f3 95 f0 e0 5c 01 93 3e
	>9de8	819de8	df 21 ec 4f c3 44 0a 81 e8 a9 1c 9d d9 dd 58 fe
	>9df8	819df8	2d a4 fe 1e c3 ef e0 5c 01 94 d3 0b 31 dd 3f 0f
	>9e08	819e08	b9 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00
	>9e18	819e18	00 00 ae 3b cd 11 55 fc be 12 46 ae dd be 12 55
	>9e28	819e28	dc bf 21 64 ae cd bf 14 44 cc b1 04 53 a6 2e 9c
	>9e38	819e38	d1 67 2e 9b e2 76 ae cc c2 06 40 cb d2 15 5e ae
	>9e48	819e48	cc d2 24 6c db f1 25 4e ae bb 02 16 3d cb 02 25
	>9e58	819e58	4b aa cc 21 37 fc cb 32 36 fb ae cc 3f 56 fb dc
	>9e68	819e68	3f 65 fb ae cd 21 73 eb cf 12 64 cc aa c0 23 53
	>9e78	819e78	bb d0 32 61 cb a6 9c d1 76 2d 9c e2 76 1c ae d2
	>9e88	819e88	15 5e cb e3 06 4d da ae 01 26 3d cb 01 36 1e bb
	>9e98	819e98	ae 21 26 1e ac 21 36 0c cc aa 31 54 ec cd 40 55
	>9ea8	819ea8	cd a0 ae 3f 73 eb cf 30 72 dc b1 ae 12 71 cc c1
	>9eb8	819eb8	22 7f db c3 a6 e2 75 1c ad e3 75 0b ae ae 05 4e
	>9ec8	819ec8	cb f3 15 3d cb 12 a6 06 62 e9 cf 16 62 c9 df ae
	>9ed8	819ed8	26 fd ae 31 36 cf 9e 50 aa 45 bc b0 6f 53 bd a2
	>9ee8	819ee8	5f a6 67 2d 9c 00 75 2c 9d 01 aa 6e cb d5 22 6c
	>9ef8	819ef8	cb f5 13 ae 5d ca 05 04 4c d9 16 f5 ae 3b da 25
	>9f08	819f08	f7 0b e9 44 07 aa db dc 62 16 cd af 52 33 ae ec
	>9f18	819f18	af 60 44 be 90 7f 61 ae be a1 60 51 bd a3 50 7e
	>9f28	819f28	aa bd b6 31 6c cb e6 22 5b ae da e6 23 4b e8 16
	>9f38	819f38	14 3a a6 e8 a2 16 70 d8 b2 17 60 aa cc 55 f7 cb
	>9f48	819f48	dc 64 06 bc ae bd 72 16 bd af 70 43 be ae 91 61
	>9f58	819f58	33 ae a2 51 50 af ae 94 50 6e be 97 22 5e bc ae
	>9f68	819f68	c6 31 6b db e6 22 4c da ae 05 23 3b e9 17 f5 2a
	>9f78	819f78	ea aa 36 05 fa ea 64 06 cc ea ae 63 15 eb db 72
	>9f88	819f88	16 be bd ae 62 33 cd bf 52 42 be a1 aa 60 41 bd
	>9f98	819f98	a5 40 5f be a6 a2 ac 47 74 b9 ad 47 72 9a a6 03
	>9fa8	819fa8	73 0a 90 04 72 fa a0 a6 05 62 f9 a1 15 61 e9 b1
	>9fb8	819fb8	ae 05 0d d9 52 16 fc da 61 ae 25 ed cb 70 34 de
	>9fc8	819fc8	bd 60 a6 37 3f ab f0 47 2f aa 00 a6 56 2e 9c 01
	>9fd8	819fd8	55 2d 9d 01 a6 65 1d 9d 01 74 0d 9e 02 a6 64 0c
	>9fe8	819fe8	9f 03 63 0c 9f 03 a2 47 60 bb af 57 6f bb b0 ae
	>9ff8	819ff8	1e da 23 14 1e cb 24 f6 ae 0d db 32 16 ee cc 41
	>a008	81a008	24 a6 41 ca e0 25 41 c9 f0 26 aa ec b1 31 33 dd
	>a018	81a018	b1 4f 52 ae de a2 20 43 de a1 31 41 a6 3e ad f0
	>a028	81a028	55 2e ac f1 64 aa eb e3 12 5e eb e3 12 6d aa db
	>a038	81a038	02 13 4e db f4 04 3d a6 1b be f3 73 0a ce f4 63
	>a048	81a048	ae da 21 16 1d ea 21 25 1d a6 ea de 06 52 ea de
	>a058	81a058	16 51 aa ce 22 25 ee af 22 34 ed a2 2d a9 c3 77
	>a068	81a068	1d a9 d4 77 ae a1 02 53 dd b1 03 43 dd a6 9d d0
	>a078	81a078	66 2e ac e0 75 2d aa d3 12 7d ea e3 14 4e db a2
	>a088	81a088	da 9c 37 72 da 9d 47 71 a2 c9 9e 57 70 c9 9f 67
	>a098	81a098	7f aa 41 26 0c db 31 35 0c cc aa 4f 55 ed bd 40
	>a0a8	81a0a8	54 de af aa 30 63 dd bf 31 53 dd 92 a6 d0 47 30
	>a0b8	81a0b8	9c d0 57 20 8c ae 13 51 dc a4 03 60 cc c3 ae 04
	>a0c8	81a0c8	6e db d3 05 5e d9 02 a6 e5 73 19 be f5 73 f9 cd
	>a0d8	81a0d8	ae 27 1c da 30 37 fd cb 31 aa 36 dd cb 6f 64 dc
	>a0e8	81a0e8	cd 5f ae 73 ed 90 30 72 dd a1 20 a6 77 2e 9c e0
	>a0f8	81a0f8	76 2d 9d e1 aa 7c eb b7 f4 7a eb e4 06 aa 4b db
	>a108	81a108	03 16 3a db 15 f7 aa 1b d9 52 17 fc bc 51 26 ae
	>a118	81a118	fd bb 6f 46 eb cd 50 46 aa 9f af 6f 72 ad c0 50
	>a128	81a128	70 aa bd a4 31 6f cc b5 22 6d aa cc c7 f4 6b cd
	>a138	81a138	c7 04 4c aa cb f7 f5 3a ea 17 e6 1b aa db 25 06
	>a148	81a148	0a db 53 07 eb ae cb 53 07 dd bc 61 35 cd ae cc
	>a158	81a158	70 44 be be 60 53 bd a6 9a 10 76 1d 9b 11 76 0c
	>a168	81a168	aa c5 40 6d cb d7 12 5c da ae e6 04 4c db e7 f5
	>a178	81a178	3b ea a6 92 06 70 e9 a2 07 60 d8 ae 35 06 ed bc
	>a188	81a188	44 07 cd cc ae 53 16 be bd 70 35 af ae a6 20 57
	>a198	81a198	1f 8a 20 66 0f 8c aa 5f 6f bd b5 40 6c dc d5 ae
	>a1a8	81a1a8	30 7c ea d6 21 6c da f6 aa 03 4a ea 17 e6 1a f9
	>a1b8	81a1b8	44 a6 15 70 e8 c2 07 50 d8 e1 aa f7 dc cd 62 06
	>a1c8	81a1c8	cd bf 52 a6 27 30 9a 00 47 2f 9b 01 a6 47 1f 8b
	>a1d8	81a1d8	20 56 1e 8d 01 ae 51 bd a5 30 6f bd c5 12 ae 6d
	>a1e8	81a1e8	cc d5 22 5c da 14 04 a3 67 6e aa b0 77 5d aa c1
	>a1f8	81a1f8	00 00 00 00 00 00 00 00 00 90 ee ee ee ee ee ee
	>a208	81a208	de d7 b4 30 00 79 11 8c 10 de f1 a4 6c 22 74 13
	>a218	81a218	44 1f 89 22 bc ed 71 fd 6b e7 81 30 fa a4 da 02
	>a228	81a228	1b 9b bc ed e2 e5 b8 0d 2e 1f 14 cf 4d e0 41 b8
	>a238	81a238	e3 d2 e0 03 01 d2 0b 5e ac ed 43 a2 1d 40 87 03
	>a248	81a248	41 a4 13 0c 3e 73 43 f4 36 21 a4 12 ef 0c 2e 92
	>a258	81a258	df 22 81 ac 0c 97 dd 7b 4c 3c 41 10 90 a2 45 26
	>a268	81a268	63 ff 3d b3 d0 ac 2f 3a 43 95 fc c5 b2 fe a8 1f
	>a278	81a278	11 ff 11 d5 ef f1 d1 9c 28 5c 2c 34 81 1c 2f 6e
	>a288	81a288	ac 11 1e 02 df 40 d0 0d e3 a4 fd 31 00 10 e4 13
	>a298	81a298	34 3d 94 75 5f 1f ba a8 9d 94 3a 94 ac 7d 74 13
	>a2a8	81a2a8	43 c5 e2 9e ac f2 00 00 1f 10 5c 15 b1 ac f3 e2
	>a2b8	81a2b8	d1 2d 0c 5d 2e 03 ac 81 20 01 f3 ff f4 de 30 9c
	>a2c8	81a2c8	c7 82 ec 61 01 fe 36 e0 94 5e 76 22 73 2c eb cd
	>a2d8	81a2d8	fd 9c 1e da 70 b3 68 b4 ff 50 98 92 ff a5 ef e3
	>a2e8	81a2e8	d4 19 53 a4 13 04 33 35 f2 d3 10 3e 98 40 b6 6c
	>a2f8	81a2f8	ff e2 c5 cd 59 94 f8 0b ad 4c 01 11 bd f1 a4 11
	>a308	81a308	2f 34 14 21 35 06 41 94 d1 3e 44 fc 50 ae 29 ee
	>a318	81a318	9c 87 fe c3 fe 02 c6 82 a2 ac 2f 00 e2 f2 1e 5e
	>a328	81a328	f1 e3 a8 f1 1e 5f f0 f1 11 0f 04 94 a1 1f 0c 1b
	>a338	81a338	fd ba ba 9c 9c ec 12 dd 3f 25 b0 20 d1 8c 26 01
	>a348	81a348	18 34 6d 44 d3 d6 a4 f5 1f 23 00 2f 1f 0e 00 9c
	>a358	81a358	c2 2a 39 2c 40 df 1d e0 9c 2f f3 d2 d0 25 e4 f3
	>a368	81a368	dc 94 70 50 65 72 54 16 d1 23 94 1e 00 e0 fd fe
	>a378	81a378	ee 39 cb 88 ce 03 e4 a2 c0 a5 bd 7c 98 b1 2e 20
	>a388	81a388	d0 4c 1e 5c 05 8c a4 17 9f 26 2a f2 2a 7d 88 05
	>a398	81a398	bf 30 ee 7d a0 2b 04 88 b5 18 ef 0e c6 0c 1c 0b
	>a3a8	81a3a8	88 37 96 e8 7a 12 10 7c 24 84 13 75 54 07 4c be
	>a3b8	81a3b8	3b cd 84 08 1a 89 0a 9b fa 91 90 8c dd 13 db 5d
	>a3c8	81a3c8	79 32 78 21 98 c5 d1 12 dd 7b 24 a5 d2 84 75 54
	>a3d8	81a3d8	1f b3 5e df c2 28 8c f5 18 40 87 38 14 e9 1f 74
	>a3e8	81a3e8	3e aa 0d f0 1b 11 86 70 9c 31 e2 2c 3f 10 2d 20
	>a3f8	81a3f8	f1 84 d2 26 e5 0a 10 de 4c cc 8c d1 0f ec 54 ab
	>a408	81a408	53 c8 70 8c 0c 02 c7 cf 11 e7 c1 3c 88 16 cf 7c
	>a418	81a418	f6 c0 31 f5 0b 84 42 e3 e1 cd ed cc cc c8 8c 12
	>a428	81a428	94 b5 00 2c 04 bc 3e 88 0b 22 f2 b1 d4 ff 12 2a
	>a438	81a438	88 4d 40 02 d4 f1 e7 1d 1c 84 d1 10 d0 fc b8 20
	>a448	81a448	0d d9 8c d4 20 c0 fa 3e 0f 2f 21 84 ff 2f 27 11
	>a458	81a458	30 14 26 71 88 43 c1 4d f5 5b 1c 7d 5c 88 34 c0
	>a468	81a468	ff 6f 0a 5f e2 e1 8c e0 d1 b7 dc 2f 3b 2f f7 8c
	>a478	81a478	c1 c1 2e 01 10 2f e5 4b 88 7d 1f f2 01 30 e1 4e
	>a488	81a488	0f 7c 64 e8 2e 50 de 2e de c4 88 fe 0f 0e 28 2f
	>a498	81a498	2d d4 f0 78 ad 97 eb 42 f8 79 06 4f 8c d6 c3 0e
	>a4a8	81a4a8	23 2d e3 d0 2f 84 34 1f cd e2 ff bd 90 ba 7c 10
	>a4b8	81a4b8	2b 1b 2a 00 c4 c2 91 7c 06 06 ad 23 0c 60 b5 6c
	>a4c8	81a4c8	7c 54 f0 20 22 79 62 fd 2f 78 7d 4e eb 42 23 ce
	>a4d8	81a4d8	7d 0b 78 1f c2 f9 1d 3c b0 c1 af 84 0f 00 e1 12
	>a4e8	81a4e8	10 55 34 62 84 32 41 43 36 16 33 45 22 7c 5b 1c
	>a4f8	81a4f8	3e df 48 3f d2 f9 84 ab ad bf 9f ba eb fc fd 7c
	>a508	81a508	0f 20 e6 0f c4 05 29 70 7c e6 c0 7f 23 5f e1 4e
	>a518	81a518	05 8c e0 00 f1 0f 11 b0 1d 2f 7c a2 ed ff 1c 10
	>a528	81a528	b0 ed 11 7c fe 0c 4a 61 58 74 11 d2 78 f5 c7 87
	>a538	81a538	0c 73 23 01 3e 84 23 11 0e ff ed dd dd b0 7c 8e
	>a548	81a548	dc 0d 48 40 df c0 1c 7c 2d 33 de f1 04 f3 12 c5
	>a558	81a558	78 1f 04 94 22 6c 4d 70 50 7c f1 d3 dd e5 d4 d3
	>a568	81a568	bd 0b 7c d1 09 3e 0f d0 fb 4c 2b 68 29 af 0a ee
	>a578	81a578	f1 1a 38 14 78 02 e5 b0 7e 36 cf 52 f2 6c 0e 54
	>a588	81a588	80 e0 0d 1e fa ce 7c e1 fb 20 b2 ee 0e ee fe 7c
	>a598	81a598	4d 0e 00 03 00 6f c6 ff 7c 3f 6f 3c b5 14 31 1e
	>a5a8	81a5a8	30 6c 21 7b c2 c3 df aa 5f bd 68 d0 a4 0f a2 92
	>a5b8	81a5b8	ae 0a b5 78 9d 0d 1e 0f e1 cf 2d 5e 78 1e ee 44
	>a5c8	81a5c8	01 e4 e0 05 02 7c f2 0c 2e 13 01 de 39 5d 78 e3
	>a5d8	81a5d8	c0 3d fd 0e 03 ae 1c 68 bf db f3 a0 dd ed f3 db
	>a5e8	81a5e8	7c 12 e0 6d 13 d5 e5 21 fe 6c 6f ff 23 f0 2c 7d
	>a5f8	81a5f8	c4 cc 68 1b 40 9f 28 02 c4 1b bd 68 e8 fd ea 86
	>a608	81a608	a0 90 d0 f1 68 5b 7b ee e3 6e 20 79 36 6c c2 4f
	>a618	81a618	00 2e 42 d1 ec 22 68 e1 fc 00 b3 bf d3 8f 1c 6c
	>a628	81a628	b3 fc 2b 3e 3f 00 b5 e3 6c f3 3e e4 6e 3d 36 02
	>a638	81a638	22 6c 13 d1 2f 32 ef d1 d1 2b 6c 42 ae c0 db 4d
	>a648	81a648	e0 eb 1e 6c fe cf 1e db 1e 43 10 c0 68 e0 3b 7b
	>a658	81a658	d3 0e 21 11 6b 6c 24 b2 6f 01 dd 13 20 fe 68 04
	>a668	81a668	6d bf 0d e5 df 0a 19 68 2f d0 db 01 9d 0f ec e8
	>a678	81a678	68 5c 12 b3 0c fd 30 31 f1 68 21 f4 e2 52 1e 41
	>a688	81a688	b4 12 5c 7a 26 db 89 4f b8 f8 d1 5c ad 01 c8 0f
	>a698	81a698	d8 af a1 13 68 c0 cd 41 2a 29 01 03 f4 68 f1 ef
	>a6a8	81a6a8	50 34 d2 20 53 11 5c bd c7 dd 18 ca b0 83 e8 58
	>a6b8	81a6b8	e9 f1 c0 ad c8 99 9b ff 68 d1 f8 3b 2f 10 d3 0d
	>a6c8	81a6c8	f1 5c 32 6f 44 4a 23 4d 58 51 58 e2 7f 70 2f a2
	>a6d8	81a6d8	97 a3 c1 5c ad dd dd 93 fc 49 da 3e 58 81 dd 0b
	>a6e8	81a6e8	c2 8e 3b 5d cf 68 00 13 f4 2e 2e 20 02 30 5c 78
	>a6f8	81a6f8	ed 6c 34 ad f8 1c 00 5c ab 1a eb 4c d2 8f 3e d9
	>a708	81a708	5c 7d d2 e1 f2 b1 12 21 f7 48 8f d4 3b 31 76 a0
	>a718	81a718	47 68 54 42 21 00 f5 91 5d 00 ac 58 ba 10 b2 ee
	>a728	81a728	df cf 0d ac 5c 09 2d e1 3e c3 b0 05 21 4c 56 0a
	>a738	81a738	f7 44 4f 7c a7 77 5c 10 11 a2 03 ff 1f 1d e0 a9
	>a748	81a748	00 00 01 f0 00 1f 00 01 02 00 00 00 00 00 00 00
	>a758	81a758	00 82 00 00 00 00 00 00 cb ca a2 de ee 00 bd 4d
	>a768	81a768	fe 0f ee 96 5c 3e 2d 4d 1e fd 7d f0 92 c1 fe 84
	>a778	81a778	14 0b 2a fe 19 a2 0d 0b d1 f2 fc 00 fd 00 92 28
	>a788	81a788	cd da 8a 11 8d a8 af a6 f0 e3 30 a1 fe 3d 5f fd
	>a798	81a798	a6 40 2e fc 31 ff fd f4 0d ae 4d 69 15 b3 e3 e2
	>a7a8	81a7a8	ee 5d a2 3f ef 1f ed ec bf aa c0 a6 7c 2f ff ff
	>a7b8	81a7b8	1f db 5f cd a6 f7 e4 03 fd 7d e0 60 be a6 20 dc
	>a7c8	81a7c8	60 bb 04 e2 22 0c a6 21 0b 26 20 af 20 d7 1c a6
	>a7d8	81a7d8	d1 f4 09 02 0f 0f fe 14 a2 4d ad 20 d2 01 de 1f
	>a7e8	81a7e8	e0 a2 0d e1 c8 ad ef ba 1f d1 a2 01 1f 20 01 fd
	>a7f8	81a7f8	13 1b bb a2 ee c9 bc de 0e 04 fe 0f a6 10 b6 3b
	>a808	81a808	c4 c0 6f ce 4e a2 1b 94 3b e1 2c ef 1c e0 a2 82
	>a818	81a818	e2 fb fd f0 e1 12 3d a2 fc f1 ef cb f9 cf bc ea
	>a828	81a828	a2 12 8f d0 5f 92 35 2c 15 a2 2c f4 b0 ff 00 8b
	>a838	81a838	bd f1 a2 8b ac d1 ad 0f 96 ca 3c a2 5d 11 06 05
	>a848	81a848	fd ef c2 1c b6 f3 1e b5 3b f1 41 84 4d b2 d9 26
	>a858	81a858	f9 f3 1a 02 fe c0 b2 50 d4 d2 fc 01 e0 04 da b2
	>a868	81a868	24 ea 91 2f c1 10 be 22 a2 9b 00 0f 80 1d 0b c4
	>a878	81a878	0a b2 e3 e2 cf 00 1f a2 03 a0 a2 0c 30 d4 bc d3
	>a888	81a888	4e c1 60 b2 9f 0e e3 bf dd e3 df be b2 05 9e f5
	>a898	81a898	f0 24 4c b4 3c b2 ec 43 ab 2f cd 22 dc c2 b2 6e
	>a8a8	81a8a8	b2 3c c5 0a 02 1f c2 b2 02 f1 ff eb 14 ae d0 38
	>a8b8	81a8b8	b2 fe 3c d6 38 0f 4d f1 10 b2 d0 e1 2d c3 bc d1
	>a8c8	81a8c8	42 a1 b6 19 05 48 22 f1 fc 43 df a2 e4 22 13 39
	>a8d8	81a8d8	cd 05 88 71 b2 bf e0 b1 a4 18 d1 4d fe b2 16 cc
	>a8e8	81a8e8	72 af 32 b0 3f ee b2 10 dc e3 fd 83 3f 8f 10 c6
	>a8f8	81a8f8	fe 42 bd 7e f0 1d 3f 00 b2 2e 2d 4d a5 f0 cf 4f
	>a908	81a908	df b2 14 b9 e4 5a cd 40 bb 62 b2 cd 15 cb 27 dc
	>a918	81a918	e5 e0 12 b6 08 34 e2 f0 d6 eb 02 f1 b2 c3 39 c4
	>a928	81a928	be c7 d2 0c 5f b2 c2 d0 0c f2 6b 86 3f dc b2 30
	>a938	81a938	c4 1f d1 a2 4a b3 e2 c2 f0 1e d2 30 92 2d ef 2e
	>a948	81a948	b2 d3 d6 83 df 10 c5 ea 30 c6 0f 01 1d f3 4a f2
	>a958	81a958	10 f0 b2 93 2b 10 ec 40 38 1d 5b c6 21 0c 21 67
	>a968	81a968	02 3d 2f 1c b2 20 a5 df 29 74 eb 24 be b6 2f a2
	>a978	81a978	61 a2 d2 4e 1a 35 b2 eb 4d 5b e1 4b 4f df 7c b2
	>a988	81a988	2c 30 0e 0d c4 ad 12 c8 b2 32 01 83 58 12 fc 2e
	>a998	81a998	10 b2 8f 4b 3e f0 c2 13 1d b6 b2 30 eb 10 bf 28
	>a9a8	81a9a8	03 81 39 b2 31 13 0c e2 2c 3a f2 3b b2 d2 f0 3a
	>a9b8	81a9b8	4d 0f 2a 49 ef b2 3c ef f0 5c c1 0f 5c c7 b2 da
	>a9c8	81a9c8	2f d3 dc 4c f0 2c 3c b2 0e 10 0b f4 ef 1e cb 6e
	>a9d8	81a9d8	c6 2a 43 ef 1d 21 0b 6d 0e b2 43 ec f1 20 1a 0e
	>a9e8	81a9e8	e2 c0 c2 ed 2f 4b e1 2d 21 0d 21 b2 a6 cd 2b 13
	>a9f8	81a9f8	28 fe 4c f1 b2 86 e0 ed 5e b3 3f bd 25 c6 08 51
	>aa08	81aa08	f1 f1 0d 4b 7b 10 b2 4a 2b 2c e0 5a b4 f1 d5 c2
	>aa18	81aa18	b0 01 0e c1 02 d1 f0 10 b2 d2 4b f1 f2 bb 60 69
	>aa28	81aa28	b2 b2 04 e9 2c 1f b2 29 c5 0e b2 f1 d6 ed ef 06
	>aa38	81aa38	1f cd 3b b2 6c fe e1 3f b9 42 ce 3f b2 82 3c 1c
	>aa48	81aa48	c5 e3 be 53 ed b2 c4 3a e3 d1 c0 e0 09 e1 c6 49
	>aa58	81aa58	f5 c7 af 5d f2 ff 3e b2 1f ef 2f d1 3b c0 22 1c
	>aa68	81aa68	b2 a2 20 ec ff c4 de fd f4 c2 0f 00 1f 1c 1f f1
	>aa78	81aa78	d4 db b2 75 0e c4 c4 fe 1e c5 e4 b2 b4 85 ee fb
	>aa88	81aa88	4e a2 1b f0 c2 01 e1 d5 01 f2 de 40 0e b2 f0 b0
	>aa98	81aa98	c3 ca 79 dc f2 ec b2 6b d1 41 96 b6 dd 6e d2 c2
	>aaa8	81aaa8	03 a0 3e 1d 1d 00 ff ff b2 df 13 2a 95 4e f8 6e
	>aab8	81aab8	5e b2 82 2d f7 cc 0c 13 3f 9a c6 7b 2c 01 6b f2
	>aac8	81aac8	c3 49 30 c2 1e e0 30 ea 23 2f b2 00 b2 e4 d2 c2
	>aad8	81aad8	a7 df e1 e2 b2 b6 c2 f2 a5 d6 eb f3 21 0a c6 f5
	>aae8	81aae8	0d d4 64 61 c3 1d 05 c2 d2 c0 10 0f ed 05 a1 a4
	>aaf8	81aaf8	c2 20 cf 4d 00 d1 2b 1f 20 b6 b3 6d b3 f3 39 14
	>ab08	81ab08	a1 4f b2 fa d7 0a 1f 0c 22 d0 df c6 11 df 3e 3e
	>ab18	81ab18	f3 df 7b f0 c6 f2 2b 3f 1f 01 03 bd 46 c2 0d e2
	>ab28	81ab28	e0 d2 12 b3 d2 0d b2 3e 1f fb 6a 12 ff 0d a3 c2
	>ab38	81ab38	2f 0a 4b 41 df 1e 0f 4c c2 0c 4f 4d a2 5e d0 1e
	>ab48	81ab48	ff b2 11 ca 33 de ed e2 3a cd b2 6b 4c b3 5a c3
	>ab58	81ab58	58 43 3d b2 2c 6f ee 2f 0d ee 10 9e b2 6a c1 15
	>ab68	81ab68	ac 22 0e 90 7b c2 a5 2f ee 21 1c 00 3f ff b2 dd
	>ab78	81ab78	4d d2 b0 85 10 bd c7 c2 f1 b1 e3 f1 f1 ff e6 dc
	>ab88	81ab88	b2 32 0e 11 86 2a 1c b2 3f b2 3b c0 5c 0d b5 2f
	>ab98	81ab98	fd f2 c2 d2 02 82 e4 11 a0 51 df b2 01 ed 36 8b
	>aba8	81aba8	f1 7a dc 25 c2 f0 d1 0e 11 0d c6 f0 c0 b2 33 ec
	>abb8	81abb8	10 e4 05 b9 6c 6e b2 ad 40 93 d8 62 39 91 1f c2
	>abc8	81abc8	3e 0c 20 2d 2f e1 03 bc b2 72 0c fb 5d 10 cc d7
	>abd8	81abd8	ef c6 c6 c5 fb 4e 00 5c f0 01 b2 13 e9 e6 2c fc
	>abe8	81abe8	20 2c 69 b6 4e 45 83 a4 4f b2 3b 4e c2 2e f3 a5
	>abf8	81abf8	ef 12 a3 11 fe b2 e1 0f d0 04 e9 20 ee c7 b2 be
	>ac08	81ac08	f2 1c 5f a1 12 87 83 c2 11 fd e5 d1 e3 0f e1 1e
	>ac18	81ac18	c2 d0 03 b0 d2 2e e1 1d 22 c2 cf 10 3c 1e 10 0f
	>ac28	81ac28	00 a3 c6 c2 1b f5 3e 76 12 d1 d4 c2 2b 24 ff c1
	>ac38	81ac38	31 0e d2 ff c6 4f 76 21 b1 2f 1d 30 e3 b2 c0 1b
	>ac48	81ac48	4d b5 2c 49 4f c3 b2 2b 69 5c b2 3f 8f 10 4b c6
	>ac58	81ac58	10 66 51 1e d1 6c ff 03 c2 20 d1 02 1b 22 eb 51
	>ac68	81ac68	ee b2 fe ef 7a da 30 1c 0e 01 b2 0d 0f b4 b7 92
	>ac78	81ac78	2b 14 18 b2 06 fa e3 2c f0 3e fd bf b2 2d 4d fd
	>ac88	81ac88	e0 c7 a3 df 02 b2 01 e3 f5 81 02 d1 e3 90 b2 86
	>ac98	81ac98	7d ac 17 8e d4 08 4e c2 1e d3 e1 0f d1 3f a4 ff
	>aca8	81aca8	b2 2d ff 0e 30 df e1 c1 69 c6 6c f4 0d e6 ef d2
	>acb8	81acb8	66 53 c2 c1 ff 20 e1 00 ff 3d d6 c2 c1 f1 d1 3e
	>acc8	81acc8	fa 4f f1 ef c2 10 f0 2e ec 25 fb 02 0e c2 10 e2
	>acd8	81acd8	d1 d6 dd e2 3e ee b2 22 3a 6d 92 e3 1c 2a 1e b2
	>ace8	81ace8	7d cb 24 08 7c c2 c4 e2 c2 dd 20 39 4f d1 02 e0
	>acf8	81acf8	0f c2 10 0d f5 d0 f1 0a 32 fd b2 a0 23 fa d5 1b
	>ad08	81ad08	a5 4c df c2 4d 1e 03 00 c0 01 0b 3f c2 2d 2b 4f
	>ad18	81ad18	0c 00 1e c1 10 b2 90 2f 20 97 1c 4d d4 dc b2 e7
	>ad28	81ad28	82 0f df 3e 09 7c b4 b2 d1 12 aa 7e 38 d4 3c ed
	>ad38	81ad38	c2 4e 1d 1f 1f b5 0f df 2f b2 2a 1d 3d 2c 1e c5
	>ad48	81ad48	92 12 b2 a1 09 78 53 0a c5 3a 4c b2 10 0e c4 ce
	>ad58	81ad58	ef 78 ce 17 c2 ec f5 0d e4 f1 a4 0f ee b2 51 c1
	>ad68	81ad68	be 54 be 04 ee 3d b2 87 db df e1 0e c1 1a 41 b2
	>ad78	81ad78	39 d2 71 84 1d e5 0b c2 c6 2a 05 97 c2 e1 2b 40
	>ad88	81ad88	10 c2 de 14 fd 0e 40 d1 f1 a1 b2 61 f8 30 3f fa
	>ad98	81ad98	f5 fd 1c b2 ef 4d e2 be 5d 79 e5 e0 b2 d0 e0 d1
	>ada8	81ada8	1e d1 22 09 24 c2 b1 10 e1 2c ee 6d d3 ef c6 10
	>adb8	81adb8	f0 3a 6b 42 92 4f 18 b2 58 78 5e f4 ad 40 f8 51
	>adc8	81adc8	b7 b2 3d c6 3d e0 c3 5e 0d 02 00 00 00 00 00 00
	>add8	81add8	00 00 7a a4 41 10 01 ff ff ef ee 7f bb dc df 00
	>ade8	81ade8	14 25 46 47 02 00 00 00 00 00 00 00 00 52 00 00
	>adf8	81adf8	00 00 01 f7 55 3f 5e 5d 3d 3d 4a 10 33 fd ed aa
	>ae08	81ae08	01 0d 06 ed 1e 51 82 18 b6 01 21 a4 50 34 13 fe
	>ae18	81ae18	0b a6 a3 9f 81 2e 20 54 dc 2a b6 d2 f1 d5 31 22
	>ae28	81ae28	72 e0 0b b6 d0 fd b4 1e 10 60 c2 ed b6 d1 1d c7
	>ae38	81ae38	11 31 71 d2 0b be 23 08 47 a3 f1 4b d5 bc be 61
	>ae48	81ae48	08 66 a3 03 1c e4 cc b6 11 08 05 e1 14 3f f1 ca
	>ae58	81ae58	b6 10 08 24 e2 16 30 12 cb b6 21 f8 52 d1 14 20
	>ae68	81ae68	10 bb b6 20 d9 61 d2 24 21 22 be b2 22 f9 00 e0
	>ae78	81ae78	15 66 77 1f b6 2f bb 6f e0 34 11 20 b0 b6 20 bc
	>ae88	81ae88	5e 00 34 11 20 a0 b2 22 b8 db ab d1 23 65 01 ba
	>ae98	81ae98	0f a4 78 21 21 e1 0e c5 be 1d b4 5a 11 31 d2 1c
	>aea8	81aea8	e4 b2 21 ab ec bc e2 25 75 13 be fe a7 2a 30 22
	>aeb8	81aeb8	d2 0c f5 b6 1e 82 2e f1 33 13 2e e2 b2 63 be fc
	>aec8	81aec8	cc f1 24 62 02 b6 1d 93 0e f1 42 13 2d f2 b6 1d
	>aed8	81aed8	93 0d 00 31 13 2c 01 b6 1c a4 fe f1 41 23 2d f2
	>aee8	81aee8	b2 50 bf ec cd 01 36 62 23 b6 1a b4 ee 01 41 23
	>aef8	81aef8	1c 12 be f9 27 a1 11 2e 21 dd 40 be fa 26 b0 21
	>af08	81af08	2e 21 dd 41 b6 09 f3 df 02 30 33 fd 11 b2 3b bd
	>af18	81af18	ba ad 00 36 41 34 ba ea 72 b2 11 1e 21 a1 30 b6
	>af28	81af28	e9 11 d0 02 21 33 de 22 b2 2b de cc df 22 57 42
	>af38	81af38	34 b6 da 20 d0 03 21 32 df 12 b6 cb 20 e0 03 21
	>af48	81af48	32 cf 21 b2 fa dc ab bf 01 56 22 34 b6 cb 3f e0
	>af58	81af58	13 11 41 c0 11 be a1 5d 01 03 e1 2e c3 10 b6 ad
	>af68	81af68	3e f0 13 12 30 d0 11 be 93 4c 11 12 e1 2d d3 1f
	>af78	81af78	be a4 3c 11 12 e2 1c f2 2d b6 af 2d 00 22 12 3f
	>af88	81af88	e0 2f b2 cc eb bc e0 14 64 23 42 be b6 1c 21 11
	>af98	81af98	e3 0c 02 1c b6 b1 0e 00 22 13 2e e1 2d be d6 fe
	>afa8	81afa8	20 2f 11 0b 22 0c ba e7 df 20 2e 11 0b 22 0b a6
	>afb8	81afb8	84 ec 01 52 37 2b f3 28 a6 94 cd 11 52 36 1b f3
	>afc8	81afc8	18 b2 ce cb bd f0 25 52 24 4f b2 df dc ce 01 25
	>afd8	81afd8	52 23 3d ae 76 83 13 1e 42 9d 53 b8 ae 73 94 03
	>afe8	81afe8	1f 23 8e 61 b8 be 41 d2 02 0f 21 cf 31 dc a6 20
	>aff8	81aff8	b0 04 31 64 cd 24 a8 a6 10 b0 04 22 64 ce 33 98
	>b008	81b008	a6 3f cf 14 22 63 ce 32 99 a6 3e c0 14 22 72 cf
	>b018	81b018	32 8a a6 4c d0 24 13 62 bf 41 8a a6 3c d0 24 13
	>b028	81b028	70 c0 31 8b ae 7a 12 22 d4 2b b5 3c 85 ae 59 21
	>b038	81b038	40 e4 2a d4 3b 97 ae 2b 21 30 f4 0b d5 2a a7 a6
	>b048	81b048	1c e1 33 15 5d d2 3c 81 a6 0c 00 42 25 4d d2 3a
	>b058	81b058	82 a6 fc f1 42 26 3d d3 39 a3 a6 ed f2 32 35 3c
	>b068	81b068	e2 29 a2 a6 ec 02 32 26 2c f3 18 c3 a6 dd 02 41
	>b078	81b078	36 1b f3 08 c3 a6 ce 02 31 46 0c 04 f8 d3 aa 92
	>b088	81b088	21 2d 32 ad 44 aa 73 ae a2 22 1e 41 bd 43 aa 72
	>b098	81b098	ae a3 12 1e 50 ae 51 ac 7f a6 cf 12 31 64 ed 14
	>b0a8	81b0a8	b9 10 a6 cf 13 22 63 ed 23 a9 2f a6 cf 13 21 63
	>b0b8	81b0b8	de 32 aa 2e ae e3 13 e1 5c b1 5e 90 7b ae f3 12
	>b0c8	81b0c8	f1 4d b1 5e 82 6b aa 03 11 e3 2c b3 5c 94 5b a6
	>b0d8	81b0d8	d0 13 14 51 df 4f 9e 1c ae 21 21 f3 2b d3 3c 96
	>b0e8	81b0e8	2a ae 31 21 e5 1a f2 4a b5 2b aa 22 20 e5 fb e4
	>b0f8	81b0f8	2b b7 1b ae 22 20 f5 fc e4 1a d6 fc ae 31 20 04
	>b108	81b108	fb f4 19 e6 ed ae 31 20 f6 eb f5 09 e7 dd a6 00
	>b118	81b118	31 26 3e e3 1b a1 ec aa 31 2f 04 dc 04 08 25 de
	>b128	81b128	a6 00 31 36 2e e3 1a b1 dd aa 21 3d 23 cd 05 e9
	>b138	81b138	26 b0 ae 21 3e 23 dd 04 e9 25 b0 a6 00 40 45 2e
	>b148	81b148	f3 0a d1 ce a6 01 31 36 1e f3 f9 e0 ce ae 12 2d
	>b158	81b158	42 ce 13 da 42 c1 aa 21 1e 40 dc 33 cb 51 d1 a2
	>b168	81b168	8a dd 27 74 47 5e de a9 aa 12 0e 5f dd 24 ac 61
	>b178	81b178	b3 aa 12 0e 5f ce 32 bd 51 b4 ae 02 1e 5f de 23
	>b188	81b188	ac 6f d2 aa 12 f0 4e de 32 ae 6f d2 ae 13 ff 5f
	>b198	81b198	dd 41 ae 5f d2 ae 12 0f 5f de 31 af 4f d3 a6 02
	>b1a8	81b1a8	12 53 0e 12 bb 1e cf ae 13 e1 4e df 31 90 5d e3
	>b1b8	81b1b8	a2 ad e0 57 64 67 1d ec 98 a2 9c df 57 64 67 1e
	>b1c8	81b1c8	fc 99 aa 12 d2 3d ef 4e b2 3d 02 a6 03 03 52 ff
	>b1d8	81b1d8	30 ae 1d d0 a2 be e2 67 65 76 0e eb 99 9a 22 c7
	>b1e8	81b1e8	2a b2 6a 86 58 23 aa 20 e4 0e d1 4b d4 1c 21 a6
	>b1f8	81b1f8	12 04 41 f0 3e bf 0d e0 a2 ce e3 67 55 74 ee ea
	>b208	81b208	99 aa 2f f5 ee e2 2b e5 fe 11 a6 21 15 30 f0 2d
	>b218	81b218	b1 ec f0 ae 2f 04 fe e3 1a f5 df 11 aa 3d 14 de
	>b228	81b228	f3 0a 23 ee 22 a6 20 25 20 f2 1c d1 de f0 aa 2e
	>b238	81b238	22 ed 12 fb 32 d0 12 9a 2b 63 cb 07 b8 45 a0 34
	>b248	81b248	9e 0e 63 cc 07 a8 44 90 43 9e 0e 72 bd 16 8a 61
	>b258	81b258	a1 33 9e 1d 72 bd 25 89 72 83 23 96 21 77 1f 15
	>b268	81b268	b8 0e ac 03 96 12 77 1e 25 99 0d ac 03 96 12 77
	>b278	81b278	1e 34 9a 1d ad 13 96 13 76 0e 42 8b 1b ae 03 9a
	>b288	81b288	d3 5c b0 6d 83 5a 03 22 9e d5 5b d0 5c 84 3a 02
	>b298	81b298	31 9e e5 4c d0 6a 87 1a 12 30 9e f5 3c c2 59 a7
	>b2a8	81b2a8	ec 03 3f 96 07 72 f1 6c 90 f9 df 21 96 17 71 e2
	>b2b8	81b2b8	5b 90 d9 df 20 96 27 61 f3 4a b2 cb d0 20 ae 13
	>b2c8	81b2c8	ff e3 0b 12 ef 02 1f 9a 26 cc f6 e8 26 90 31 3c
	>b2d8	81b2d8	96 47 50 f5 18 e0 bb d1 1f 9a 53 cd 06 aa 61 a2
	>b2e8	81b2e8	22 1d 9a 62 cc 26 8b 7f c1 23 ff 9a 52 bd 34 8d
	>b2f8	81b2f8	7e b2 32 e1 9e 51 dd 42 8e 5e c1 14 d2 96 75 1f
	>b308	81b308	44 bb 2d ad f1 02 9e 50 ce 50 80 6a e2 13 d3 96
	>b318	81b318	75 00 43 ad 1c ae f1 03 96 74 1f 52 9e 1b ae f1
	>b328	81b328	f4 96 73 10 51 9f 0b cd 01 f5 96 63 01 5f af 0a
	>b338	81b338	be 00 05 9a 1d d2 49 d5 0b 12 3e 06 9a 0d c4 38
	>b348	81b348	e6 ec 12 3e 14 9e 2c f2 39 e5 dc 21 2e 26 9a ed
	>b358	81b358	e4 19 e7 cd 22 1f 25 96 41 04 4c c2 cb df 0f 26
	>b368	81b368	9e 0c 03 09 14 be 21 1f 34 96 41 14 3b d1 cb ef
	>b378	81b378	0f 36 9a ed 04 e9 33 b0 21 1e 52 9e ee 05 d9 41
	>b388	81b388	b0 12 0f 52 9e fd 13 e9 41 b0 11 1f 52 9a de 13
	>b398	81b398	da 50 c1 12 f1 41 96 30 24 0a 0f bc d0 f0 46 96
	>b3a8	81b3a8	21 24 fb 0f bc e0 00 56 9e de 32 bb 6e c1 03 e2
	>b3b8	81b3b8	42 96 21 24 fb 1e bc f0 f1 55 96 30 24 eb 0e bc
	>b3c8	81b3c8	e0 f0 64 96 30 34 eb 1e bd e0 f1 64 9e fe 31 ae
	>b3d8	81b3d8	5c e0 21 f2 41 9a de 31 af 5c f0 22 e3 3f 9e ef
	>b3e8	81b3e8	31 90 3d e0 21 f2 5f 9e ef 31 81 4c e0 30 f3 4f
	>b3f8	81b3f8	96 11 33 cd 1c cc f0 f2 54 9a ef 3f a2 3c 0f 40
	>b408	81b408	e4 3e 96 11 33 be 1c cc 0f f3 53 9a ff 3f 94 1d
	>b418	81b418	f2 11 e5 1e 9e f0 3e a3 1c f1 20 f4 20 9e d1 2f
	>b428	81b428	a3 1c 00 3f f5 2e 96 11 41 bf 0c cd 0f f4 43 9e
	>b438	81b438	e1 3c c4 fd 00 3e 14 1f 8a c1 78 87 0a 03 4d 27
	>b448	81b448	1c 9a e2 2c c6 ed 02 2e 15 e0 9e e1 3a f3 ee f2
	>b458	81b458	2d 33 0f 9a f2 1a 04 df 01 3c 42 0e 9a f2 1a 13
	>b468	81b468	ed 12 1e 33 ef 86 16 69 c2 aa 9f 0c 47 72 86 17
	>b478	81b478	59 d2 a9 af 0b 57 71 86 17 49 e1 a9 a0 fc 67 51
	>b488	81b488	86 27 29 f1 9a b0 ed 77 50 86 37 0a 10 99 b1 cf
	>b498	81b498	77 4f 86 47 fa 2f 9b b1 c0 77 4f 86 57 cb 2e 9b
	>b4a8	81b4a8	c1 c1 77 3f 86 67 ac 3d 9a d0 b3 76 10 86 74 ae
	>b4b8	81b4b8	2b bb ff c4 76 11 8a 7b 85 3a e2 3f e7 4c c2 8e
	>b4c8	81b4c8	6a 97 09 1f 5c 17 2f c2 8e 69 a6 fb e2 3c 26 3d
	>b4d8	81b4d8	c5 86 7e b1 0a bd 1c 17 74 f5 86 7c b2 da ad fb
	>b4e8	81b4e8	16 53 f6 86 6b d3 db ce fd 27 62 07 86 4b d2 ca
	>b4f8	81b4f8	be eb 26 62 f7 86 4c e2 da cf ed 36 61 07 8e e8
	>b508	81b508	15 ae 02 0d 73 0c 07 86 3a 01 bb c0 dd 46 51 17
	>b518	81b518	8a c8 61 a0 22 d1 61 0b 16 86 2b f1 cb c0 dd 47
	>b528	81b528	50 17 8e c9 50 bf 12 d1 62 0c 16 86 0b 00 bb e0
	>b538	81b538	ce 56 51 27 86 1a 10 bb c0 bf 46 40 27 8e ab 6d
	>b548	81b548	d0 11 d3 52 fc 44 86 ec 1e ba ef bf 56 3f 46 86
	>b558	81b558	ec 1f bb ef c0 56 40 46 8a 9e 5d d1 20 e2 61 dd
	>b568	81b568	33 8e 9e 5d b1 3f d4 52 ed 43 8a 8f 5d b3 20 d4
	>b578	81b578	50 ec 51 8e ae 4d df 21 e2 61 ee 33 8e 9e 5c d0
	>b588	81b588	20 d4 52 de 42 86 de 0e ac ef c0 56 40 46 8a 80
	>b598	81b598	4c e2 10 f2 60 de 32 86 ed 1d ab ee c0 56 30 46
	>b5a8	81b5a8	8e 80 2e d0 11 d4 60 fd 34 8e 8f 3d d1 01 e2 61
	>b5b8	81b5b8	fe 14 8e 9f 3d d0 20 e2 70 fe 32 8e ae 2f c0 20
	>b5c8	81b5c8	e2 62 ee 32 86 fc 0e ba de df 56 42 36 86 0c 0e
	>b5d8	81b5d8	bc de ef 56 52 27 8a 9d 30 c0 21 f1 60 0d 05 8a
	>b5e8	81b5e8	bb 4f df 31 f0 61 fe 04 8a bc 21 cf 22 ff 71 fe
	>b5f8	81b5f8	03 8a da 40 de 22 ff 71 ff e5 8e e9 12 cd 21 f0
	>b608	81b608	53 0f e7 86 2d ef da ce fd 36 54 25 8e fa 01 ed
	>b618	81b618	11 0e 54 00 d5 8a f9 12 ed 21 1f 34 f0 c6 86 3d
	>b628	81b628	ef ea be ed 15 54 15 86 5e d0 ea cd fd 15 54 15
	>b638	81b638	8e 0b e2 fc 02 0f 16 01 c4 8e 2a e2 0b 02 1e 16
	>b648	81b648	01 d3 86 6e d0 fa bd fd f4 45 14 86 6f cf 0b bd
	>b658	81b658	fe f4 36 14 8e 2b d2 1b f1 2e 14 11 e2 8e 3b d2
	>b668	81b668	0d e1 2f 04 3f f1 86 60 df 0b bd fe d4 34 32 86
	>b678	81b678	61 de 0d bd fe e3 45 22 8e 5b c2 1d d1 2f f5 12
	>b688	81b688	ef 86 61 df 1d bc ff e2 44 22 8a 4c b3 2c f0 30
	>b698	81b698	d6 01 fe 8a 4e b1 4b f1 20 e4 20 fe 8a 5c c2 2d
	>b6a8	81b6a8	e1 20 e3 4e 0e 86 62 df 0f bd ff d1 34 30 8e 5e
	>b6b8	81b6b8	b1 3c fe 4f e4 20 0f 8e 4e b2 2d ef 3f f3 21 0e
	>b6c8	81b6c8	86 52 df 1e bd e0 d1 33 31 8a 4e a3 2e d1 21 d3
	>b6d8	81b6d8	30 fe 76 77 ab 3c 88 ef 93 57 52 8a 4d b3 2e d1
	>b6e8	81b6e8	11 f2 21 ef 8e 4e b1 3d d0 30 e2 31 ff 76 75 af
	>b6f8	81b6f8	1d 89 0d c3 76 51 8e 5d a3 2d d1 2f f3 30 ff 76
	>b708	81b708	75 ae 2c 99 ff a4 76 52 7a 7b 84 1d d0 7c f7 21
	>b718	81b718	ee 7a 6b 86 2a ff 6e f7 11 d1 7a 4b 85 2c c2 5c
	>b728	81b728	07 3f e0 7e 6a 86 1b c2 2f f6 33 b0 7a 79 95 2a
	>b738	81b738	f1 3e 06 31 dd 86 51 d1 fe cf fe f2 43 12 7a 49
	>b748	81b748	a7 ee b4 4a 45 20 c2 7e 59 b4 0b d4 0d 35 31 d2
	>b758	81b758	8e 3b e2 0d f1 1e 14 10 f1 8a 3a f4 d0 e3 ff 23
	>b768	81b768	1f f1 7a 48 a7 fb f4 0d 46 3c e5 8e 1b 02 ee f3
	>b778	81b778	e0 13 2f f2 8e 2a 02 ee f2 0d 33 10 f2 7a 18 e5
	>b788	81b788	dc f5 ef 45 20 b6 76 7e ef d9 8b c9 f5 74 57 7e
	>b798	81b798	18 e4 dd d3 ff 36 30 d6 8a 0a 21 ee 02 0e 32 10
	>b7a8	81b7a8	e3 86 4f f0 ed c0 de 03 43 25 8f fc 02 c0 e2 ff
	>b7b8	81b7b8	24 00 f5 02 00 00 00 00 00 00 00 00 62 00 00 00
	>b7c8	81b7c8	00 00 00 00 b9 6a 21 f0 fe 10 0d e1 fd ba ba 01
	>b7d8	81b7d8	14 2b 82 73 be 01 cf a6 17 fb c0 42 15 2a d2 42
	>b7e8	81b7e8	9e ec ef 14 ed 34 4b d4 60 a6 11 31 fe a8 a3 5e
	>b7f8	81b7f8	8e 41 b6 f2 77 31 1f 02 20 ee dc aa f5 6d b3 32
	>b808	81b808	ef 0e d1 22 9e fa b1 0e 13 23 fd 10 15 a6 2f 26
	>b818	81b818	2d be 0b 9e 41 d0 aa 1f f5 7f af 1d 13 3f ea aa
	>b828	81b828	e1 64 fd f1 21 1f fd f1 8e 62 0b ac bf 47 5c e5
	>b838	81b838	18 9e 02 64 cc ef e3 ea f5 3f ae 10 ee 57 2d e0
	>b848	81b848	2f ff 4f aa da 04 60 de 03 10 10 df 9e f2 01 10
	>b858	81b858	bc f1 35 fb 02 8a 2f e2 5e cb f0 3d 99 f6 aa 41
	>b868	81b868	ec f3 53 ee 00 10 f2 ae 1f bb 06 3d de 32 11 ff
	>b878	81b878	9e d4 0e e3 1c be 45 0b d3 8e 73 de 36 ea c3 4c
	>b888	81b888	89 03 ab 21 fe e3 51 e0 e1 11 00 02 00 00 00 00
	>b898	81b898	00 00 00 00 92 00 00 00 00 00 00 00 05 8a 7d bc
	>b8a8	81b8a8	cf 24 44 20 ed cd 8a 02 46 54 1f cb be e2 43 8a
	>b8b8	81b8b8	41 fd cb ef 25 55 31 dc 8a cb d0 05 23 2f ec cc
	>b8c8	81b8c8	e1 8a 14 44 2f eb bc ce 13 23 8a 1f ec cc e1 24
	>b8d8	81b8d8	46 21 ed 7e 98 9d 04 77 62 db 88 9e 8a 35 46 22
	>b8e8	81b8e8	ed cc c0 12 34 8f 30 fe bd cf 24 56 53 0e 02 00
	>b8f8	81b8f8	00 00 00 00 00 00 00 7a 09 c2 12 2e e2 e0 f3 1d
	>b908	81b908	76 10 2e 9e ee e1 62 00 cd a6 00 0f 0f 01 02 21
	>b918	81b918	32 7b c2 ca 99 8a dd dd df f0 00 76 22 03 33 64
	>b928	81b928	22 31 56 32 7e 1d 42 f0 d5 d5 b1 10 2f 66 54 db
	>b938	81b938	2c 65 7b 44 21 df 92 23 13 24 20 4f 17 be 8d b6
	>b948	81b948	30 ee 53 05 52 0a d4 49 ae 12 94 35 5d a1 23 ff
	>b958	81b958	00 7e 9f 0f 25 0d 3a 30 4f f1 7a b5 41 fa 31 14
	>b968	81b968	cf 31 d7 86 31 f1 df 22 f1 12 10 38 a2 31 03 f2
	>b978	81b978	20 10 31 2d 91 ba ed 02 1f 12 3e be 51 0d ba ff
	>b988	81b988	e0 33 1f d1 00 01 e1 76 3f df 13 37 d0 00 33 4f
	>b998	81b998	76 d1 65 5e 0f 70 31 0d 11 96 02 1e 1e 4c 31 c7
	>b9a8	81b9a8	b2 3c a2 21 20 12 02 0e 25 1b c1 be fe 02 0e 15
	>b9b8	81b9b8	2e de 21 0f aa 0b ad 67 5b fe 11 0f 0f 7a ea be
	>b9c8	81b9c8	10 3e a4 ee 25 cb 86 01 15 1e 13 e3 3d 4b 5a 92
	>b9d8	81b9d8	37 17 31 52 33 54 37 25 ae fe 20 e2 2d c6 4b de
	>b9e8	81b9e8	45 aa bd 51 be 57 4c b0 f2 10 aa 3b 8a 75 31 ee
	>b9f8	81b9f8	10 00 0f 8e e1 df 02 ff 20 c3 f3 d3 96 e1 2f 3e
	>ba08	81ba08	20 e6 b4 1d 3d 86 33 3d e6 a0 4c 43 e0 4f ae f3
	>ba18	81ba18	fc 34 ce f4 5b b2 4f ae d1 5f ad 66 4f d1 ee 13
	>ba28	81ba28	aa 3b 9a 25 33 ef 00 01 ff 9a 2d e0 00 d4 d0 39
	>ba38	81ba38	7c 2f 92 c1 e0 3f 23 23 45 47 42 86 7f 03 0f 00
	>ba48	81ba48	d2 6b 27 ac a6 30 fd 14 0b d4 4f d0 2e ae e5 4d
	>ba58	81ba58	af 26 4f 2f ed 14 aa 3d b8 02 42 10 e1 00 01 9e
	>ba68	81ba68	ed 5a 4e f3 c5 b0 5b 3f 86 c0 23 e4 1e 5e e7 3e
	>ba78	81ba78	01 86 e1 4f 07 ab 7e d6 5f 92 aa 2f b1 61 ad 45
	>ba88	81ba88	ec 14 dd a6 d1 62 db d2 36 77 3f 02 aa 41 ab c0
	>ba98	81ba98	25 1d 4d 10 02 9e a4 fd 5b 04 d1 e2 e2 0d 76 13
	>baa8	81baa8	c6 3e 65 dd 67 07 18 96 3f e3 2f f1 0e f4 4c c4
	>bab8	81bab8	aa 1d c3 6e a0 51 c1 13 dc aa 05 3e dd 11 25 11
	>bac8	81bac8	de e4 aa 4f 1a 91 f4 11 2c 3f 02 8a 9d 2e ae 4b
	>bad8	81bad8	21 84 3c 10 86 c0 11 e3 5c 30 d7 4e 14 92 53 45
	>bae8	81bae8	64 47 40 17 72 e5 96 7c 81 72 ad 31 dd 47 09 ae
	>baf8	81baf8	f5 11 ee ef 31 62 ef d2 ae 23 2a db c2 01 11 e1
	>bb08	81bb08	20 8e f6 ff 2b 13 e0 d1 11 28 76 e5 81 21 57 bb
	>bb18	81bb18	75 32 77 9e d0 4e e2 3f be 75 8a 77 96 69 b3 6f
	>bb28	81bb28	c0 20 ae 57 19 a6 ef 14 10 eb d0 56 64 01 aa 31
	>bb38	81bb38	20 cb fe 14 0f 10 02 8a 93 1d cc 4b 11 82 4d e3
	>bb48	81bb48	86 fe 2d d4 31 d1 30 f4 6f 96 e2 2f d2 61 9d 74
	>bb58	81bb58	ba 37 9e ca 15 2a 11 4b 97 34 da 9e f0 43 12 9a
	>bb68	81bb68	f2 77 5d df ae 12 3f 0d ad 00 00 00 2f 8a 17 de
	>bb78	81bb78	fb e4 ea 10 e2 fe 8a 10 ed 25 0b 06 bd 54 08 96
	>bb88	81bb88	02 3c d5 6e 91 70 bb 56 9e bd 07 db 43 0b c2 55
	>bb98	81bb98	db 9e 0e 06 30 ea a0 76 43 bf 9e 22 53 2a 98 b1
	>bba8	81bba8	ee 30 f1 8a 30 50 8f 1f fe c0 10 d0 82 f3 e9 ac
	>bbb8	81bbb8	dc f1 fb e7 62 96 24 19 07 4c a4 50 bc 54 9e ce
	>bbc8	81bbc8	42 bf 41 2b b1 62 0f 9a dc 23 43 ea bd 56 60 fe
	>bbd8	81bbd8	9a f2 34 4d ab dc 12 02 1e 8a 34 4f dd f2 df cf
	>bbe8	81bbe8	3b f2 86 61 cd 01 c1 60 cc 75 bf 96 45 da 36 2c
	>bbf8	81bbf8	d4 5f af 41 9a e2 11 dd 45 0a d2 06 1e 9a fc e3
	>bc08	81bc08	44 0e 8b 35 53 0e 9e 0f 36 30 eb ac bd 11 e0 8a
	>bc18	81bc18	f6 4f 0c 01 fb e5 ad f5 96 30 f0 0e d3 2f d0 5f
	>bc28	81bc28	c2 9a 4d 91 64 ba 46 fa 03 10 9a e2 30 a0 42 2d
	>bc38	81bc38	ce 24 21 9e fc d0 26 4e ab d4 34 4f 9a d1 23 42
	>bc48	81bc48	ef cb ce 22 f0 8e e4 55 d2 50 0c 53 ae 15 86 3f
	>bc58	81bc58	32 f8 b7 59 c7 49 a6 9e 4c a1 71 be 33 fe e2 2c
	>bc68	81bc68	8e 25 5e 9d 37 4e a9 f3 75 9e 0e be 24 60 cb de
	>bc78	81bc78	36 21 9e 0d 33 43 01 eb 9d df 0c 8a 15 50 e4 1e
	>bc88	81bc88	cd 7c af 11 92 dd 14 1c d0 fc e1 2d af 9a 1b b5
	>bc98	81bc98	3f ee 33 ed 22 ee 8a 25 7d ac 27 50 b9 f0 76 96
	>bca8	81bca8	42 ea a1 56 5f c8 bf 35 9e ff 04 31 41 0e 9c c0
	>bcb8	81bcb8	dc 8a 32 6d 07 2a f1 2d a0 4a 9a d4 4b b2 30 c0
	>bcc8	81bcc8	52 ba 55 8e 38 b4 7e a1 52 cf 32 db 8e f6 50 db
	>bcd8	81bcd8	e5 53 fa af 16 9a 5e cc f4 43 0e bc 02 61 8a ef
	>bce8	81bce8	f4 45 45 39 99 d0 9a 8a 73 c2 45 0b 15 d9 33 8b
	>bcf8	81bcf8	96 05 4f e1 3d b1 52 bc 14 8a ba 26 fc e6 1d f3
	>bd08	81bd08	3e be 9a 14 1f ef f4 20 0d de 54 9f 3d cd f4 43
	>bd18	81bd18	1c bc 23 21 00 00 00 00 00 00 00 00 00 ac 00 1f
	>bd28	81bd28	02 12 00 fd ca 23 a8 24 0e dd d1 13 54 2f e9 ac
	>bd38	81bd38	91 ae 25 77 ff bb de 25 b8 20 0d ee f0 44 2f ec
	>bd48	81bd48	d0 b8 23 42 0c ec e1 34 0f df b8 04 23 0e ac f3
	>bd58	81bd58	55 1c dc bc 02 41 eb d0 36 3e ca 16 b8 62 aa a2
	>bd68	81bd68	63 ee d2 74 f8 bc 8e 67 4c 9e 45 fa c0 75 cc 0c
	>bd78	81bd78	e2 61 cc e3 2f e0 53 c8 da e3 7f bf 23 eb 15 2d
	>bd88	81bd88	c4 cf 47 0b c0 0d 06 4d a1 b0 57 1e 22 cb 02 ff
	>bd98	81bd98	12 0f 90 bc df 12 10 10 f0 12 21 90 01 0f ec aa
	>bda8	81bda8	bd 01 10 ec 90 df 0f f1 57 76 3f de 12 90 21 11
	>bdb8	81bdb8	0e cc cd db aa be 94 20 20 f0 23 3f ca cd 33 90
	>bdc8	81bdc8	f1 44 2f dd ec cf 13 2e 94 d0 f1 57 73 b9 bd 03
	>bdd8	81bdd8	56 a8 ee df e1 35 21 fd e0 01 a8 32 1b 8c 02 77
	>bde8	81bde8	7f d8 9d a8 05 55 1d 9c 23 54 4f b8 bc cf 23 31
	>bdf8	81bdf8	fc ce 04 06 21 b8 ce e2 20 1e ec f1 64 20 ac 99
	>be08	81be08	8c 37 73 cb d0 36 34 b4 4e ba e2 53 fa 89 ff 57
	>be18	81be18	b8 fd b2 22 0e cd 03 55 0d b4 eb ad 02 20 fe f3
	>be28	81be28	66 2c b8 f2 41 2d bb 26 25 0c df bc 32 0c bd 16
	>be38	81be38	53 fa af 35 bc 2f de 03 51 eb b2 44 fb b8 91 72
	>be48	81be48	6f dd f3 0f bd 07 b8 53 ca b2 44 1c e0 34 0b b8
	>be58	81be58	c0 44 0b ae 63 70 cc 11 bc 1d be 37 5d 9c 15 4e
	>be68	81be68	de bc 34 1f ae 25 1c 9d 66 5f bc ce 21 fa d2 76
	>be78	81be78	e9 b0 54 b8 de 04 4c ae 46 f9 93 67 b8 3c b1 1e
	>be88	81be88	cd 47 4a 8f 66 c0 00 ef 24 20 03 41 b8 af b4 72
	>be98	81be98	01 0c 8c 57 1b a0 63 b8 b0 51 cd 43 e8 c6 77 cb
	>bea8	81bea8	b8 02 bb 27 5b 90 63 ec 23 bc 0d f3 1b a1 77 0b
	>beb8	81beb8	0f dd b4 c4 5f 9d 44 ff 34 0d 12 c0 0c 9c 13 33
	>bec8	81bec8	31 ee 11 fd b8 52 c0 40 c0 3e be 67 fb a4 11 b9
	>bed8	81bed8	f7 38 c5 5d 04 1b b4 02 09 b3 74 1f dc 14 1c b8
	>bee8	81bee8	15 fd 31 fe 2f b0 73 dd 90 3c 8b 27 41 c8 8e 46
	>bef8	81bef8	3f 90 cd 04 41 ff dc cf 12 00 90 11 01 22 ea cf
	>bf08	81bf08	10 f1 31 90 d9 ae 1f e0 57 51 fe 25 88 f8 db 33
	>bf18	81bf18	73 d0 2d ae 12 98 22 5f 8d 02 e1 35 0c d1 90 f1
	>bf28	81bf28	32 11 1d bd 12 eb f5 90 63 12 32 e9 88 be 14 75
	>bf38	81bf38	90 1f fe ca d3 51 ee 01 e9 9c 24 4f cd 33 f0 0f
	>bf48	81bf48	df 13 90 ca ae 37 72 dc f3 2f ba 98 d3 44 fc 82
	>bf58	81bf58	61 dd c5 41 90 ef ff 12 34 42 0f 02 1f 98 3f dc
	>bf68	81bf68	56 4a a0 21 10 3e 90 30 fd cd 25 1c 99 ab d1 90
	>bf78	81bf78	32 32 0f ee ff f2 44 20 94 ee ae 37 2f f0 31 ef
	>bf88	81bf88	02 98 d0 c3 30 f0 33 ca f3 f1 90 9c dd e0 55 33
	>bf98	81bf98	2f c9 ae 90 fe f2 53 10 11 10 e9 9d 90 14 3e cd
	>bfa8	81bfa8	ed bc 15 54 42 90 fd cc cc e0 ff fd be 13 90 45
	>bfb8	81bfb8	42 ca e2 0f f1 21 dc 90 bc f2 11 10 ed cf 22 10
	>bfc8	81bfc8	90 db e2 65 20 fc 99 d0 1f 80 ce 00 46 2c ac 44
	>bfd8	81bfd8	0a e4 90 52 dd fe f0 1f c8 af 22 80 00 26 42 00
	>bfe8	81bfe8	02 ca c0 ea 90 be 00 f1 00 ed e1 23 33 90 0e df
	>bff8	81bff8	11 fe ec 9a e3 42 90 12 1e de 12 10 0f 11 fa 90
	>c008	81c008	9a e1 22 21 10 ed 13 2d 90 ac e0 f0 22 00 12 0e
	>c018	81c018	ee 9d f1 03 1c d0 43 ec 04 e1 00 00 00 00 00 00
	>c028	81c028	00 00 00 c0 bc 10 10 38 78 7a 11 f2 c0 f2 f1 01
	>c038	81c038	f3 ee d5 94 c3 c0 e2 01 01 f1 00 2d eb 79 c0 6c
	>c048	81c048	4e 3f 20 3f 1f 22 87 c0 a1 1d 5c 5d 2f 2f 2f 48
	>c058	81c058	c0 58 78 5e 10 11 00 10 02 c0 38 79 21 d6 c4 e3
	>c068	81c068	f3 e3 c0 02 a1 3b 78 7a 21 e2 44 c0 cd 3d 48 7d
	>c078	81c078	20 28 2f 2a c0 68 7a 79 00 a2 ee d4 f3 c0 87 86
	>c088	81c088	87 b3 b5 20 11 28 c0 7a 5c 33 c4 03 f1 06 87 c0
	>c098	81c098	de 2d 6c 5f 2f 11 fd b7 c0 84 b4 c2 21 20 2b 28
	>c0a8	81c0a8	78 c0 6b 4e 31 01 13 87 87 82 c0 00 21 3f 2f 38
	>c0b8	81c0b8	78 30 d5 c0 b4 d4 d3 04 86 fc 4a 5c c0 5e 2f 20
	>c0c8	81c0c8	fe 97 96 a3 e2 c0 10 10 28 68 78 5e 11 11 c0 f1
	>c0d8	81c0d8	04 87 87 91 2f 20 1f c0 11 48 78 7c f3 d3 e3 f1
	>c0e8	81c0e8	c0 14 87 87 af 3d 30 2f 11 c0 38 78 78 30 f2 02
	>c0f8	81c0f8	01 12 c0 d1 87 96 c3 f2 11 f2 05 c0 87 87 cf 4d
	>c108	81c108	4f 3e 2f 4f c0 eb 5a 6a 5d 30 20 10 38 c0 68 78
	>c118	81c118	5e 11 12 01 01 2d c0 0a 78 6b 5d 40 20 1f 23 c0
	>c128	81c128	87 87 83 10 2f 3e 10 1f c0 20 ce 68 7a 6d 30 10
	>c138	81c138	1f c0 1f 2e 0a 78 7a 6d 40 1f c0 1f 11 28 78 78
	>c148	81c148	5f 10 12 c0 f0 01 01 2b 48 78 7c 3f c0 12 00 10
	>c158	81c158	10 13 94 0b 69 c0 7b 5e 2f 2f 10 13 87 87 c0 82
	>c168	81c168	2f 3f 3f 10 10 00 58 c0 78 7c f4 d4 e3 e1 f2 f0
	>c178	81c178	c0 13 87 87 a1 1f 3f 2f 1f c0 1f 10 39 58 78 6d
	>c188	81c188	3f 21 c0 10 00 00 11 29 6e d5 b7 c0 b6 e2 f1 f0
	>c198	81c198	00 13 87 87 c0 93 10 20 2e 1f 10 00 13 c0 87 84
	>c1a8	81c1a8	0d 5c 5e 20 00 10 c0 01 11 a4 0b 6a 6b 5e 2f c0
	>c1b8	81c1b8	1f 10 00 2d 29 79 6d 4e c0 21 00 01 f1 f1 1d 38
	>c1c8	81c1c8	79 c0 5d 3f 11 01 00 00 00 2c c0 28 79 5d 4e 30
	>c1d8	81c1d8	10 1f 10 c0 00 10 ef 5a 6c 5e 30 10 c0 00 00 00
	>c1e8	81c1e8	12 97 b2 1e 5c c0 4e 2f 1f 1f 00 12 87 87 c0 b2
	>c1f8	81c1f8	1f 2f 2f 00 1f 0f 10 c0 2a 6d 02 d4 d4 f2 f1 f1
	>c208	81c208	c0 0f 10 3b 48 7a 5e 11 01 c0 f1 00 00 00 03 87
	>c218	81c218	87 c1 cc ce 5a 5b 5d 1f 2e 10 24 c0 78 7b 12 f2
	>c228	81c228	02 f1 f1 f0 c0 00 02 d2 a7 a5 d3 f1 00 c0 00 00
	>c238	81c238	1f 10 11 d2 a7 a5 b0 a6 e2 10 2f 10 00 00 11 c0
	>c248	81c248	39 78 7a 3f 01 02 00 00 c0 00 00 f1 01 2a 6c 11
	>c258	81c258	e5 b0 87 d5 e2 e2 f1 f1 f0 13 c0 1a 6d 02 d4 c4
	>c268	81c268	e2 f1 f1 c0 00 00 00 11 20 e1 3b 5c b0 7b 7f 20
	>c278	81c278	10 01 f0 f1 01 c0 01 28 7a 4f e4 d4 e2 f1 c0 f1
	>c288	81c288	00 00 0f 10 11 2a 6b b0 5f e6 b7 c5 e2 f1 0f 0f
	>c298	81c298	c0 0f 00 11 2e 1b 6c 4d 3f a0 7f 11 f3 d1 f0 00
	>c2a8	81c2a8	02 02 c0 11 39 7a 4f f3 d4 e2 f1 a0 e2 01 f1 f1
	>c2b8	81c2b8	01 03 03 6c c0 0e 4a 5d 3e 2f 10 00 00 a0 f0 00
	>c2c8	81c2c8	00 20 3f 4f 47 93 c0 e5 a4 e3 f2 00 1f 1f 1f a0
	>c2d8	81c2d8	2f 2e 2f 22 f2 03 17 97 c0 c6 a4 d2 f1 00 1f 1f
	>c2e8	81c2e8	10 90 ff 00 f0 3f 22 5e 60 76 c0 a5 a5 d0 2f 3f
	>c2f8	81c2f8	2f 10 10 80 0e e2 a2 20 e4 22 6c 62 b0 01 22 87
	>c308	81c308	96 df 4c 5e 2f 90 6f 30 e2 e3 e2 f1 2f 3e b0 10
	>c318	81c318	10 11 12 e1 96 a7 a5 a0 b7 f3 10 20 2f 1e 2f 2f
	>c328	81c328	c0 00 00 01 00 00 00 12 b5 c0 c5 d1 1e 2f 2f 10
	>c338	81c338	10 00 80 ee e0 00 4c 6e 60 60 42 c0 00 01 2b 4c
	>c348	81c348	5c 20 02 f2 a0 a6 d4 f1 00 00 00 01 02 b0 01 01
	>c358	81c358	01 01 00 00 14 87 b0 95 ef 5c 6d 4e 20 10 01 80
	>c368	81c368	c2 e4 e0 20 2e 4e 62 24 b0 01 01 00 2d e1 0f 4b
	>c378	81c378	6d b4 7b 3e 01 f0 00 00 00 00 90 2f 2f 4f 21 12
	>c388	81c388	10 2f f4 b0 f2 2c 3e 59 6d 3f 21 f1 80 c6 e4 c2
	>c398	81c398	02 02 22 22 04 90 10 12 21 12 f4 ee 6e 25 a0 01
	>c3a8	81c3a8	f3 58 7d 4e 51 12 11 90 11 0f 3d 1f 10 01 3f 4f
	>c3b8	81c3b8	90 20 30 20 11 12 c2 1f 54 a0 f9 5a 5d 4e 32 12
	>c3c8	81c3c8	01 01 80 02 e2 e2 22 02 04 22 22 80 00 4e 40 4e
	>c3d8	81c3d8	40 e2 4e 60 a4 2d c6 c5 c6 a3 00 01 ff 80 40 2e
	>c3e8	81c3e8	2e 22 e4 e4 02 22 80 40 60 6e 40 20 22 02 02 90
	>c3f8	81c3f8	03 01 03 0e f6 e5 d7 f2 8d 90 5a 4b 7b 2f 10 f1
	>c408	81c408	f1 02 00 00 00 00 00 00 00 00 c2 44 44 44 44 44
	>c418	81c418	44 44 44 b2 88 88 88 88 88 88 88 88 6e db db cd
	>c428	81c428	bd bd bd cb dc c3 44 44 44 44 44 44 44 44 00 00
	>c438	81c438	00 00 00 00 00 00 00 a0 2e 23 fe 30 b0 4e d5 4b
	>c448	81c448	a0 e5 09 05 cb 56 be 70 80 b0 3e c2 3e e4 2b f3
	>c458	81c458	0a 13 a0 f9 66 dd f5 b2 97 b6 a3 a0 20 18 79 59
	>c468	81c468	40 f5 c7 a7 b0 ee 1f 2b 3f 00 11 c3 1f b0 d0 5f
	>c478	81c478	ff 04 c1 c3 0c 2d b0 5e 0e 16 b0 d3 2c ff 5f c0
	>c488	81c488	0d 21 00 b4 02 ed 5e 3c c0 e4 e4 bf 4f 3b 03 f2
	>c498	81c498	b1 b0 41 38 14 20 90 60 fc e6 c0 00 fe 4f f0 c4
	>c4a8	81c4a8	00 1c 50 c0 01 b4 1f 1b 23 e2 c1 4d c0 3c 05 c3
	>c4b8	81c4b8	bf 5c 3e d5 e2 c0 fb 6f f2 b5 0e 3b 13 c3 c0 ed
	>c4c8	81c4c8	5d 11 b4 1e 3d 12 e2 b0 fd 2f 02 b0 2b 40 c3 e1
	>c4d8	81c4d8	b0 5a 02 f6 eb 4e 34 9f 2d b0 4e a3 f2 4a f4 04
	>c4e8	81c4e8	09 32 b0 24 9c 50 2e 82 1f 2a e4 b0 14 1c 24 31
	>c4f8	81c4f8	de f2 1d ea b0 f5 1c 3c 07 ef 5b 26 cf b0 1a 63
	>c508	81c508	a1 19 71 a2 e9 7f b0 a4 fb 7f e5 dc 7f 03 dc b0
	>c518	81c518	5d 02 dc 7e e5 dd 7e e1 b0 fc 5e e3 ec 51 f2 ed
	>c528	81c528	50 a0 e3 ba 51 d3 cb 23 d7 ee a0 05 07 de e7 c4
	>c538	81c538	fb 83 85 b4 cf 07 96 fc 16 95 ce 06 a0 c2 d8 a7
	>c548	81c548	c5 ad d2 47 4d b0 f1 23 1b 2d 31 fb 1e 1f b0 1b
	>c558	81c558	1d 20 4f 1f 51 3e fe a0 35 eb dc a4 b0 86 a5 67
	>c568	81c568	b0 d5 d1 42 b3 0a 50 dd 3d b0 2f ec 3b 23 4b 43
	>c578	81c578	f3 10 b0 d0 e2 0e 93 a2 f3 b0 02 b0 24 02 1e 41
	>c588	81c588	1b 3c 30 0b b4 5b 6f 2a 4d 25 ed 03 e3 b0 11 d2
	>c598	81c598	b4 1f c1 af 20 b1 b0 2b 72 ff 6c 36 fb 4f b5 b0
	>c5a8	81c5a8	fb c3 a3 2e c5 e2 52 b2 b0 3d 42 ed 2d 01 28 4e
	>c5b8	81c5b8	f2 b0 3b e7 c4 32 c6 ef 40 a1 b0 1c 02 ba 5d 03
	>c5c8	81c5c8	2a 42 f3 b0 3f c6 ee 4f a2 29 33 bd c0 40 c4 0f
	>c5d8	81c5d8	04 ef 4d f0 0b a0 50 83 64 97 1b 53 df 58 a0 b7
	>c5e8	81c5e8	8d 22 ee 5e 65 30 01 a0 04 b0 e0 00 4b 39 02 bf
	>c5f8	81c5f8	b4 f4 85 0f 01 3a 30 1f 21 b0 f1 10 3f ef 00 b7
	>c608	81c608	ee 10 b0 fb 70 a2 3c c7 0e d6 bc b0 6d 4a 34 a7
	>c618	81c618	d4 19 5c 01 b0 f4 cd 4d e5 f4 ce 69 14 b0 b5 ae
	>c628	81c628	4a 60 f5 ec 5d 4f b0 22 e9 4f 10 21 ed 0f e3 b0
	>c638	81c638	0d 2e d3 d6 f3 d3 dd 11 b0 3e 4f 2b e6 ed 31 c1
	>c648	81c648	a3 b0 2f f4 ed 58 71 c2 3d d4 b0 87 ef 50 fe 39
	>c658	81c658	7e 02 fe b0 e2 a4 1f 20 ff 2f 10 02 b0 0f 0f 3f
	>c668	81c668	ef 10 e1 d1 5b b0 03 00 2f d7 da 12 e1 3c b0 14
	>c678	81c678	ea 51 02 0e 02 bb 60 c8 23 c1 21 a4 64 55 76 2e
	>c688	81c688	c0 de 6d 11 e0 3f 0d 2e f1 b0 dd 7d 1f c5 c6 0d
	>c698	81c698	71 b7 b0 ad 3c 5b 21 e0 2b d4 02 b0 e3 e0 02 fa
	>c6a8	81c6a8	7f 1f 2e f1 b0 01 a2 12 e1 ff 3e 22 b0 b0 6e e1
	>c6b8	81c6b8	e1 2e 01 85 1b 11 b0 f2 3d 51 b4 1e ff e3 0e b0
	>c6c8	81c6c8	5d b4 0d 10 f3 0f 4a b5 b0 de 11 e3 00 2d d5 0d
	>c6d8	81c6d8	32 b0 d4 f1 28 03 cf 11 f3 00 b0 0e b4 fc 41 f4
	>c6e8	81c6e8	e2 0c 58 b0 13 f2 e3 00 0e e1 1b 51 a0 f1 60 c3
	>c6f8	81c6f8	ad cd 63 b1 f3 b0 0f f2 00 02 05 be 2f c3 b0 e2
	>c708	81c708	01 1d 04 18 30 c4 1e b0 40 0f f2 f3 9f 1f 1e 01
	>c718	81c718	b0 1e 2c 32 e4 84 1f 10 11 b0 02 dd 59 3e 87 d2
	>c728	81c728	21 31 b0 c3 b0 1c 6a c7 e0 11 0f b0 f1 d2 02 12
	>c738	81c738	0c 6f 00 3b b0 10 ef 1f e4 2c e4 10 10 b0 d4 de
	>c748	81c748	20 f2 4e d3 93 fd b0 00 f2 f0 69 34 f0 0f 49 a0
	>c758	81c758	42 ff d0 d1 00 a6 f4 4e b4 22 e9 71 cf 3d 21 1b
	>c768	81c768	51 b0 05 e1 e1 08 6f ed 2d 05 b0 ef 32 13 ee 2f
	>c778	81c778	2b c4 bf b4 1d 44 95 0d 21 fe 02 a7 b0 99 5a 3e
	>c788	81c788	06 10 40 12 04 b0 c0 fd d1 bc 4e fe 61 12 b0 31
	>c798	81c798	22 05 bf fc 1a 38 f1 b0 d0 40 e5 20 05 03 0d ef
	>c7a8	81c7a8	a0 c0 87 df ee 53 3c 64 12 a0 2e 1e 3b af 0e 11
	>c7b8	81c7b8	e1 a7 c0 fc 6f 01 1f 10 0f f1 f2 c0 ef 1f 1e 20
	>c7c8	81c7c8	f0 2e f5 d0 a0 6e 93 b0 bf 0e 5c f1 03 b0 e2 2f
	>c7d8	81c7d8	12 00 78 b6 a1 0f a0 23 d1 b4 16 0c ee 1e 22 b0
	>c7e8	81c7e8	01 10 e6 e0 af 0d 0e 10 b4 2f 2a 7d e7 83 2d 1e
	>c7f8	81c7f8	2e b0 c1 ed 3f d2 11 f5 cd 6e a0 e0 fc 1e 58 47
	>c808	81c808	b6 ed 01 a0 ee 3d df e9 71 b5 4f 31 b0 f0 0f 95
	>c818	81c818	f0 21 10 11 d0 a0 7d 42 81 ec be f9 f1 94 b8 d9
	>c828	81c828	71 a2 4a 41 c1 3e d6 c0 f0 ff 1f 00 00 00 f3 b1
	>c838	81c838	a0 59 d0 2e 01 0c 7e 55 93 b4 f0 f0 3c 04 b3 4a
	>c848	81c848	14 ee a0 40 01 00 cf dd de 1a 61 a0 c6 11 1f e0
	>c858	81c858	ca fb bd dd b0 10 11 21 11 f5 83 3e 11 a0 ff 1f
	>c868	81c868	2b 60 56 82 24 ef b4 3b 14 b1 78 06 dd 5d f2 a0
	>c878	81c878	1a c2 bf e1 1c 60 c2 1e 94 5a e3 ec 50 b3 40 f1
	>c888	81c888	30 90 62 27 01 62 03 3e ff bf 94 00 3e 6d f1 2e
	>c898	81c898	f1 e0 0d 84 3f 4c 23 97 b2 5f e5 9e 80 1d b1 ef
	>c8a8	81c8a8	c1 9d bd ff ee 74 3d e8 41 10 07 b7 5c 5f 80 5e
	>c8b8	81c8b8	1e cd 1d 10 d1 f1 13 80 33 f0 fe fc eb d0 b1 e5
	>c8c8	81c8c8	c0 00 00 00 00 00 01 f1 0a b0 7e e2 1e 3f 2c 03
	>c8d8	81c8d8	e5 ed b0 1f 1e 02 d0 2b 24 b2 3f a0 14 c4 21 b3
	>c8e8	81c8e8	0c 0c 2c d5 a0 cf 10 12 ee 1d bc da ee 81 ac f4
	>c8f8	81c8f8	77 b0 00 00 00 00 00 00 00 00 00 00 00 00 00 50
	>c908	81c908	0a 9a 02 98 ef 52 dd 34 60 40 d0 02 1c cd 37 fa
	>c918	81c918	d1 70 41 dc d2 5e ad c6 6a a0 80 e5 2b d1 e7 29
	>c928	81c928	d2 d7 fb 90 f1 f4 fd f0 04 ed 0f 14 80 b9 3d 56
	>c938	81c938	cb 1e 74 8f 2c 94 6d b2 5b 6b f1 3d 68 21 90 1f
	>c948	81c948	6c f0 00 6b f1 00 5a 90 01 0f 5c f1 1e 6b 1f 1f
	>c958	81c958	90 3e f1 d3 f5 a3 c5 d0 30 90 b2 3c 15 85 d4 b5
	>c968	81c968	c1 3d 90 1e 0f 2f f1 fb 42 f0 2b a0 0f 30 f0 e0
	>c978	81c978	0e 5d 1e 11 90 cd 7f d4 d2 a0 34 0f fe 90 ff 3e
	>c988	81c988	24 93 f3 83 4e 2e 90 23 bf 11 ff 40 0c e0 12 80
	>c998	81c998	c2 31 bf 1d 50 b3 40 1e 80 85 4f a5 70 9e c4 1c
	>c9a8	81c9a8	6f 90 1e fe c6 e0 1f 2d 0a 31 80 22 b7 8e dd 70
	>c9b8	81c9b8	69 78 0d 80 b6 25 a4 cd 0a 6f 6c 30 80 bf d5 f6
	>c9c8	81c9c8	b3 4a d0 2d 7c 80 12 c0 c4 f0 21 48 f2 f4 90 ef
	>c9d8	81c9d8	41 ee 1f 01 fe 7d ff 90 e1 1f 0d 71 b0 d3 0e 00
	>c9e8	81c9e8	90 f7 dd 2f 3e d1 e1 e3 e3 80 96 ef 94 09 f7 e2
	>c9f8	81c9f8	b5 1d 94 1f 3d 16 ae 40 c1 2f 1d a4 5b 5c 0f 10
	>ca08	81ca08	0f 2a 10 54 b4 f1 2f 95 0e 4f fc 20 03 b8 c1 2e
	>ca18	81ca18	ff 04 d3 cc 7f e4 bc 0d c5 1f 31 09 5d b7 d4 a0
	>ca28	81ca28	77 55 56 15 42 2f 77 1d b4 f6 31 f3 f1 8c fd 33
	>ca38	81ca38	00 b4 10 2d f1 f7 e0 0f 22 0d b4 be d2 fd 55 01
	>ca48	81ca48	f1 0c bc b4 e2 01 0e 5f e3 f2 11 01 b4 00 2f 34
	>ca58	81ca58	f2 2a f3 6b f0 b0 2f 0e 01 a1 3f dd c9 9b bc e2
	>ca68	81ca68	e6 1b 3f 0d d4 c1 15 b4 f4 01 4e 1d 0c 94 2f 20
	>ca78	81ca78	a8 5b 85 3b 0e 21 11 ec 40 b8 c4 e4 1e 4c 0d 25
	>ca88	81ca88	d9 13 a4 1e 81 76 4b 17 d3 22 f1 ac fe fd ee 07
	>ca98	81ca98	c5 f0 2f 7a b8 e2 2e 1c 11 11 d1 f9 71 b0 8e ef
	>caa8	81caa8	43 56 42 e0 ec 00 a8 f4 fe d0 5e e1 64 de fc a4
	>cab8	81cab8	10 93 bc 40 30 c1 dc ee a4 03 3f 9e e0 d5 10 10
	>cac8	81cac8	01 a4 12 fd 3a 00 d6 62 32 64 a4 f0 c2 38 cb bf
	>cad8	81cad8	d8 d3 30 a4 63 54 4e 31 3d ee eb e0 ac ef 6f 0f
	>cae8	81cae8	31 ef fc 10 f2 94 e6 31 11 f6 02 ea d1 1f 94 e3
	>caf8	81caf8	f9 cb 53 e2 52 36 35 94 24 d1 cc 1e be fc f0 00
	>cb08	81cb08	98 0c 32 0f 58 4d 5e 10 fd 98 e2 f0 20 49 5c 60
	>cb18	81cb18	1e 32 9c 82 ef 32 ed f1 bb 3f b7 9c 75 09 25 7c
	>cb28	81cb28	8d df 14 20 9c 8b 61 cd 6f 63 b3 6f 18 94 cc 33
	>cb38	81cb38	00 0c 31 ea dd 00 a4 dd 24 43 32 02 31 0e ef 98
	>cb48	81cb48	21 3e 01 aa f7 23 f1 1d 9c 22 d2 b2 fc 23 e6 d1
	>cb58	81cb58	b8 9c 7e 26 fd d0 b3 50 5b 20 98 30 31 df cc 24
	>cb68	81cb68	0d 00 35 98 c0 b5 bd 10 f7 0f 4c 4e 98 2a 21 dd
	>cb78	81cb78	2f f2 10 4f 39 9c ef 14 35 3e 0c b2 e4 92 94 ba
	>cb88	81cb88	6d 15 0f 79 3f 16 fd 94 28 24 b3 c5 bb bd 01 df
	>cb98	81cb98	9c 6c d4 d2 7c 20 9d 6e d2 94 31 2b 6f 22 bf f5
	>cba8	81cba8	10 d2 94 fe fd fe f5 e7 26 51 10 7c 30 a2 e0 79
	>cbb8	81cbb8	e3 ee 87 91 94 bc ed 30 20 47 d7 09 62 94 13 00
	>cbc8	81cbc8	ef 0d a0 35 b5 c7 84 e1 c2 db ac c3 f2 d1 20 95
	>cbd8	81cbd8	6e 60 e3 01 30 f0 cd b5 00 00 00 00 00 00 00 00
	>cbe8	81cbe8	00 c0 00 ff f1 3d 23 46 e8 d2 b0 1d a2 db f3 b2
	>cbf8	81cbf8	58 a7 34 cc 2a 05 b7 de 5f ef 1e 05 c0 ea 13 42
	>cc08	81cc08	db ba bf 24 55 c8 10 fc 04 02 fe f1 10 00 a8 de
	>cc18	81cc18	e1 e4 cf 20 b2 4e 73 a8 80 0e 4f 3d 3d 22 f1 02
	>cc28	81cc28	98 10 e4 b4 0d 1c 60 86 de 9c d0 4c e2 00 2f 03
	>cc38	81cc38	e0 e6 8c 82 33 24 7d 6d 43 31 7a 9c 2f f4 d1 f0
	>cc48	81cc48	0e 3c 4b e0 8c dc fe cc fd 1c 0d 38 31 8c fd 1e
	>cc58	81cc58	4d b7 94 1d 4f 20 8c 16 f4 0f 72 2e 7f 5e 44 8c
	>cc68	81cc68	a7 e7 04 fc 42 04 f1 3c 7c 37 c4 c0 2c c0 9e c3
	>cc78	81cc78	b8 8c 08 01 c0 a0 fd d4 9f 18 8c 1d 3c ff 38 59
	>cc88	81cc88	30 2c e3 8c c0 5c 10 1f 21 e4 10 60 88 40 2e 7c
	>cc98	81cc98	71 05 41 4f 60 7c 77 de 47 96 17 80 7b 48 84 1c
	>cca8	81cca8	fd c0 be a9 db ac ba 8c 2e a1 2b a5 a6 a0 08 4d
	>ccb8	81ccb8	8c e5 be 1f 0f e5 ce 4c 00 8c f0 4f f2 e4 0c 70
	>ccc8	81ccc8	00 5e 8c f5 c4 34 c1 32 5b 32 f2 8c 2f 05 c3 41
	>ccd8	81ccd8	e0 21 0f 3c 78 73 37 f7 86 4c f6 fa 6b 8c fe 2b
	>cce8	81cce8	01 cf e1 ed 2a e2 88 de cd 0b b1 ea f0 b0 da 74
	>ccf8	81ccf8	f9 cc 97 ba 1e df 6c 53 78 2c 85 d2 d0 24 c0 79
	>cd08	81cd08	40 88 4d 42 1f 42 f5 04 23 f5 8c 01 40 41 f2 14
	>cd18	81cd18	d6 e0 30 7c 54 f1 2f 2d 53 ff 2d 2e 7c 3e 03 be
	>cd28	81cd28	fd 00 0d fb 29 7c 4f 81 ef b0 0c 0a fd ed 84 ba
	>cd38	81cd38	d8 9b 8b ab aa bb ab 7c fa 29 5b a1 c6 9e 01 fb
	>cd48	81cd48	78 d3 ab b7 cc f0 fd 2a 71 7c c4 f4 4e 35 13 e3
	>cd58	81cd58	7d 30 7c 7c 73 e2 42 41 5a 74 e7 7c 03 d6 4c 43
	>cd68	81cd68	62 b1 60 f4 6c f2 62 0d 51 61 81 55 9c 7c 3e 0b
	>cd78	81cd78	33 84 bf 0d cb 4b 8c f1 ff 93 d3 c0 b1 29 4d 7c
	>cd88	81cd88	91 1d f8 d7 8d 10 cf fc 6c 68 ef ad 58 c1 ff e3
	>cd98	81cd98	85 7c 29 50 e2 f1 f1 00 e7 b4 7c 2e 6f c7 6b 61
	>cda8	81cda8	f6 30 f6 7c 06 00 41 06 05 07 d2 45 7c d7 0f 72
	>cdb8	81cdb8	12 e4 51 1f 55 7c c3 40 05 c3 e1 7b 10 00 6c 1c
	>cdc8	81cdc8	2c 2b 2e 87 ba 8c f1 7c ec b2 b0 bf 19 cf e0 80
	>cdd8	81cdd8	7c b0 eb ec de d1 ad ec 38 7c 1f b1 a0 e1 b0 1f
	>cde8	81cde8	af 2e 6c c2 b2 0a 79 3b 44 ec 42 78 dd 69 04 b5
	>cdf8	81cdf8	c4 d6 d1 3f 7c 23 13 22 06 03 16 d6 35 7c 04 f7
	>ce08	81ce08	41 3f 71 37 e5 24 7c 3f 7f 41 25 2f 43 11 e6 7c
	>ce18	81ce18	2f 4e 2e 42 c7 b0 4c 6d 78 10 50 e3 2d 2c 14 84
	>ce28	81ce28	ef 7c ce 09 4f 91 ce 0d fc e1 7c cc de 3c ce dc
	>ce38	81ce38	f1 a2 a0 7c 9f 0d 0c ed ee eb 0d ee 7c 0b 1b c4
	>ce48	81ce48	a0 a4 e9 3f de 7c 1e e0 ff 2d 1e 2e 5b 4f 7c 03
	>ce58	81ce58	d2 13 f2 25 b6 2e 70 78 22 51 44 33 33 53 75 16
	>ce68	81ce68	7c 24 43 d7 33 12 51 34 04 78 36 64 77 06 74 45
	>ce78	81ce78	55 41 7c 70 40 02 3f 41 23 f0 1f 7c 31 0f 4d 02
	>ce88	81ce88	1d 1f d2 b0 7c 2e b0 e0 bf cd 1e ca 1c 7c 09 fd
	>ce98	81ce98	de 92 ca 0c ed af 7c dd ed cc ec 0c dc 28 0c 7c
	>cea8	81cea8	0b fd ef bf fd d0 bf 0e 74 b9 bb da ed ef ef e3
	>ceb8	81ceb8	c1 6c 4d 00 d5 79 41 7e 23 36 78 03 f3 31 50 33
	>cec8	81cec8	34 25 42 7c 51 5f 53 35 e6 43 16 13 7c 43 33 41
	>ced8	81ced8	52 51 31 53 15 6c 15 67 57 30 47 74 40 7e 6c 67
	>cee8	81cee8	03 33 e6 a5 52 e4 1a 6c f7 a5 59 fc d2 2f be a0
	>cef8	81cef8	7c f0 08 1d d0 eb 2c bf db 7c ff bf bd ce db c0
	>cf08	81cf08	bb df 7c 8c df 9f ca cd cd dd a0 7c ad ed da fd
	>cf18	81cf18	dc 1b 0a d0 7c bf 0f bf fd 1c 0f 10 d1 7c 00 e2
	>cf28	81cf28	2f 03 f3 1e 52 e5 7c 23 13 24 34 32 52 55 06 7c
	>cf38	81cf38	46 16 36 33 26 63 34 24 7c 62 64 15 63 12 72 34
	>cf48	81cf48	34 7c 24 24 13 32 32 30 40 40 7c 21 f5 03 d3 1e
	>cf58	81cf58	12 0e 1f 68 60 3d 51 cf 20 d9 1c 8f 7c ec c1 db
	>cf68	81cf68	c0 ae f9 dd eb 7c ec bd dc ce ae cf aa 0c 7c be
	>cf78	81cf78	dc eb de bf c0 80 ce 6c 9b eb 8e b9 ec cc 1c e9
	>cf88	81cf88	6c 2d a1 ff ef 3c 0f 4e f5 6c e0 6e 5f 26 06 07
	>cf98	81cf98	07 14 7c 41 42 24 22 15 15 15 14 7c 24 32 44 22
	>cfa8	81cfa8	62 06 31 44 7c 41 33 36 c7 13 23 23 22 6c 36 e6
	>cfb8	81cfb8	72 27 16 0f 62 3e 6c 53 1e 51 d5 df d6 df ff 68
	>cfc8	81cfc8	5d d3 1e f3 bd 29 dd c0 6c c9 b0 8f cb 8e bc 8b
	>cfd8	81cfd8	08 7c ed ec fd ed dd 0d eb 0d 6c bb bc a0 8e 9b
	>cfe8	81cfe8	fc cc dc 6c 09 d1 9c 2d ee eb 5b a3 68 ac b0 9c
	>cff8	81cff8	ce 0a 2b e2 cf 6c 15 e6 e6 f1 7f 36 03 33 78 06
	>d008	81d008	f4 21 52 24 16 13 34 6c 44 44 17 50 44 34 43 44
	>d018	81d018	78 41 61 60 62 44 23 31 53 64 77 37 26 56 10 04
	>d028	81d028	ff ee 95 00 08 00 00 00 00 00 00 00 00 00 00 00
	>d038	81d038	00 00 00 00 80 12 d3 0f ef 12 d2 48 9f b0 00 01
	>d048	81d048	ee 12 0e e0 6e d0 b0 e6 fc 3e f1 13 3a 1f b0 cc
	>d058	81d058	fc 5b 41 86 65 22 00 00 c0 de de dd ff e3 30 31
	>d068	81d068	35 b4 f0 10 21 f1 01 1b 51 ff b4 e1 df 2d 11 b1
	>d078	81d078	df 3d f0 b4 1e ff 1f f4 00 fe 22 20 b4 e5 b4 0d
	>d088	81d088	12 0e 04 2c 1f a4 42 fe 63 c2 32 f1 d4 0c a4 7e
	>d098	81d098	a7 fc 04 f9 12 0e d4 b4 4e 94 2a 3c f1 f0 ff f1
	>d0a8	81d0a8	a4 be 2e f7 9e 4a 14 bf 4f b4 01 d0 40 d1 41 b3
	>d0b8	81d0b8	1e 21 a4 52 21 4d e3 3e e6 d1 4f a4 e1 11 11 bf
	>d0c8	81d0c8	41 af f4 ac a4 e4 38 93 f0 ef 02 48 d0 b4 1f f1
	>d0d8	81d0d8	1e 01 10 d1 4c f3 a0 bb 26 9b 54 36 76 37 34 a4
	>d0e8	81d0e8	51 ed 54 1f f2 fd 6b f6 a4 d3 20 a3 11 84 0d 13
	>d0f8	81d0f8	c1 a4 38 f2 68 d6 f9 2e 07 8e a4 2f d4 fc 03 68
	>d108	81d108	01 35 8e b0 1f d3 0b 10 f1 00 ff 10 b0 22 02 00
	>d118	81d118	3e f1 e0 41 e2 b0 31 f2 46 32 72 14 61 52 a4 d6
	>d128	81d128	40 be 47 dc 11 12 ce a8 24 db 7d 03 0a 13 0e 1e
	>d138	81d138	a4 1f 1c 2c 1d 40 8f 7c b1 b0 aa cb cc db bf dd
	>d148	81d148	1d dd a0 ef b0 cd 62 d5 d1 5d 34 a4 23 b1 03 6f
	>d158	81d158	d4 0d 5e 3f a4 fe 7f d6 e3 da 5f 2e 06 a0 11 76
	>d168	81d168	39 00 c0 31 9a e8 a4 68 e5 e2 3c be 7f 9f 51 b0
	>d178	81d178	db cd 90 de ff cf ce 20 a0 ac 01 00 d7 24 11 60
	>d188	81d188	c4 b0 54 e1 12 22 30 03 32 23 a4 e5 09 5d e4 3e
	>d198	81d198	f2 fc 53 b4 b0 42 bf 5f c2 d2 f3 1d bc 12 02 a1
	>d1a8	81d1a8	41 db 61 d4 cc b0 ef df cd ee e0 bd 2b e2 a0 bd
	>d1b8	81d1b8	d0 88 f0 0f 88 f0 bc a0 f6 fb ed 6f b3 6b 21 15
	>d1c8	81d1c8	b0 04 61 43 f4 40 04 20 64 b4 de 6f d2 02 fc 51
	>d1d8	81d1d8	a5 fd b0 2f f2 0f e2 fc f0 b0 eb a4 31 3b a7 2d
	>d1e8	81d1e8	cc 6f fd 3b b4 02 2e f2 df 50 86 1c 4f a0 dd 95
	>d1f8	81d1f8	18 17 5d e4 e0 56 b0 51 e1 4e 05 33 03 40 03 b0
	>d208	81d208	35 33 30 16 d1 4e 00 31 b0 e3 7d f2 f2 ed e1 2f
	>d218	81d218	f0 a0 b0 be d8 e0 bd 29 84 8a a4 4d d0 5f e0 7b
	>d228	81d228	c5 ee 50 b0 ff 3c c5 3d f0 0f f1 1f a4 07 de 51
	>d238	81d238	be 2f 01 e7 2a a0 16 7e f3 17 31 35 10 56 a4 0b
	>d248	81d248	f7 b2 02 e0 e4 e0 e2 a0 74 ce 6e db 37 cc 33 ed
	>d258	81d258	a0 0e 9f 31 b9 40 8d cc cf b4 c1 3e e2 f1 ef 5c
	>d268	81d268	f4 b3 a8 db e5 0f e0 6e 96 ff 05 bc df 5b 05 b3
	>d278	81d278	f0 3c 14 84 b4 4e d7 ce 50 c2 0e 31 f3 a0 e0 72
	>d288	81d288	31 23 60 37 c0 ff b4 f1 2e e2 01 fd 03 de 5f a0
	>d298	81d298	ad a9 1d ac ab 0d ad 1b b0 ee f0 ef 11 ec 14 af
	>d2a8	81d2a8	32 b0 2f 21 f0 21 32 e0 50 01 a4 a2 65 a2 ee 50
	>d2b8	81d2b8	b6 fd fe a0 26 3d f5 3a 14 5d d6 4b a0 00 00 3f
	>d2c8	81d2c8	93 d9 e3 09 e1 a4 d1 e1 19 7d e3 00 f0 f5 a0 09
	>d2d8	81d2d8	13 8d 0c 03 f2 ed db a0 c0 56 0e d3 2c c3 0a 55
	>d2e8	81d2e8	a0 ac 04 60 21 12 63 be 52 b0 f2 2f 11 3f f1 40
	>d2f8	81d2f8	11 f4 b0 2f 1f 2f 05 ee 1f f2 1f b0 e0 11 01 0d
	>d308	81d308	d3 0e fb e3 a4 9c 4b 03 b2 5c f0 e1 31 90 f8 fa
	>d318	81d318	83 e9 cd 18 06 b2 a0 cf 54 cc f3 2d 33 f0 17 a4
	>d328	81d328	cc 43 c1 e0 3e 07 a2 48 a0 f0 00 12 72 46 11 ed
	>d338	81d338	30 a0 32 fd 31 a2 48 03 b2 c8 a0 3f af 4a ef 8d
	>d348	81d348	0c ce d2 a4 cc 61 ff 11 c3 ef 11 d1 a4 23 cf 51
	>d358	81d358	85 3d 2c c6 7e a0 ab 60 ed 45 fe 25 4d e2 a0 63
	>d368	81d368	a0 1f 01 13 12 00 e6 b0 20 e1 4e d4 0e 02 1e 20
	>d378	81d378	a4 fe 17 cc c5 11 1e 0d 2c a0 d6 09 1e 10 dc e6
	>d388	81d388	cb 11 a0 2a b4 9a 41 00 cb 2e ce a0 f0 1d 35 bf
	>d398	81d398	f1 1b 14 e7 a0 68 e5 2e 01 af 67 f1 26 a0 22 3e
	>d3a8	81d3a8	c6 53 0c 62 e5 3e a0 32 e4 0b 21 12 e0 2c c5 a0
	>d3b8	81d3b8	0b 1a e7 da de ee ed 5e a0 93 ec d1 d1 b1 0a be
	>d3c8	81d3c8	00 a0 f0 42 1b d3 ff d3 12 1b b4 30 e1 23 bf 5f
	>d3d8	81d3d8	b5 ef 2f a0 d3 4f e6 2f 3f 25 00 2f a0 40 c3 f0
	>d3e8	81d3e8	f0 5f cf 11 ef a0 ce c1 61 c3 48 c7 ab 3b a4 07
	>d3f8	81d3f8	cd 52 cf f2 41 9e 4d a0 e3 31 c0 af 5c f5 da 26
	>d408	81d408	a0 ef 5e d4 fb e4 e3 fe 13 a4 de 25 f9 21 2f e2
	>d418	81d418	2f 1f a0 dc 45 02 cd f0 27 13 2f a4 1f 10 ff 6b
	>d428	81d428	c7 be 74 8e a0 14 bc 41 fd f3 2e a2 ec a0 00 cf
	>d438	81d438	f2 00 dc e4 ab f3 a0 4e 2f 82 3a f0 3e ad 52 a0
	>d448	81d448	e0 13 5a 06 8d 67 fd 00 a0 50 12 21 fd 72 c3 e0
	>d458	81d458	04 a4 4b a7 0b 04 c0 7d c4 2b a8 36 ad 73 cd 0f
	>d468	81d468	32 a5 f2 a4 0f 0d 13 a1 52 fa e2 6c a0 90 d0 02
	>d478	81d478	d1 4f f7 ec 0f a0 1f 0c f2 20 14 28 43 a0 a0 0f
	>d488	81d488	13 1f 1d 27 cd 15 02 a0 cd 50 2f e2 02 52 9f 7b
	>d498	81d498	a0 b7 fc f3 1c dd 14 1f 28 a0 f2 fe 33 ce e0 ad
	>d4a8	81d4a8	13 01 b4 1b 44 82 4b 14 ec 4e e4 94 7b cd fc 66
	>d4b8	81d4b8	d8 e7 e4 0f a0 51 dd 1b e4 12 3c 26 ef a4 3b 60
	>d4c8	81d4c8	a3 49 e5 78 07 bc 90 6e 14 2a 20 12 95 fe ca 90
	>d4d8	81d4d8	74 b6 5a a0 de d1 53 eb a0 ee df 16 0c e5 cd da
	>d4e8	81d4e8	e5 a0 10 4d b1 2d fe de 22 01 a4 e0 30 91 40 f1
	>d4f8	81d4f8	21 c2 f0 a0 0f 00 ef 20 07 4c 0f 01 a0 01 3d c7
	>d508	81d508	1f c1 4e d4 2f a0 14 ef 00 d3 6e 92 4d e5 90 88
	>d518	81d518	0f 02 58 12 8b 48 f2 a0 1e c7 fa 62 9f de 42 d1
	>d528	81d528	a0 fd 00 d0 f3 dd 17 11 24 a0 ed 4c c7 5a e2 ef
	>d538	81d538	2f 12 a0 4e df 1f ff 42 d1 52 cd a4 6e c5 d1 b5
	>d548	81d548	6b f2 b3 1e a4 d7 f9 43 d1 2c 24 80 6c a4 c7 48
	>d558	81d558	e7 09 23 1d e3 f1 a0 2f fe ef d2 2e 00 c5 6c a0
	>d568	81d568	e3 bd 42 0c e0 41 e1 fc a0 42 d0 d1 0e f0 44 d2
	>d578	81d578	0c a0 71 e2 dd 51 30 b0 10 34 90 fc 04 61 9f ff
	>d588	81d588	7a af 27 ac b0 30 1b 07 fe d3 b6 fc a0 f2 f1 21
	>d598	81d598	0f 2b e0 c0 5f a4 00 0f f4 5d cd 40 e4 dd a0 23
	>d5a8	81d5a8	c0 6f d2 0d c4 ee 35 80 31 48 87 63 ce f7 e8 5f
	>d5b8	81d5b8	90 44 8e 15 5f f4 ed b6 08 90 e5 0a 24 e1 3f de
	>d5c8	81d5c8	8b 74 b4 d2 1d 22 cf 34 cd 3e 20 a0 fe 01 11 ed
	>d5d8	81d5d8	62 b2 1c f1 90 af 44 38 e2 b1 22 21 ff a0 06 fd
	>d5e8	81d5e8	0f f1 21 fe 01 f0 a0 30 e7 fb 04 1e e0 31 f1 a4
	>d5f8	81d5f8	c2 4a 32 c2 4a d5 5b d6 a0 fd 5d a6 1b 01 fd e1
	>d608	81d608	6d 90 8d 06 cb af 21 f7 0b 4d 90 a2 cb 5c 42 ad
	>d618	81d618	77 dd 08 a0 33 e1 d0 2d e4 0d 54 a1 a4 28 50 e2
	>d628	81d628	2e 13 af 5c 20 90 04 5d f0 f1 3f 72 ed cc a4 02
	>d638	81d638	10 0f 1f b7 eb 46 e8 a0 d0 51 c0 c0 0e f1 3e e5
	>d648	81d648	a0 09 21 0e ff ef 11 1c 34 a4 81 70 af 41 84 40
	>d658	81d658	0e e7 90 58 d0 53 d9 61 f2 b0 b1 a0 20 30 f0 11
	>d668	81d668	d1 6b 05 dd 90 43 bf 47 9c ed 02 2b d3 90 ef 42
	>d678	81d678	34 88 42 bf 2d 02 90 de 44 c3 9d 7a a2 e1 52 90
	>d688	81d688	e8 36 9e 6e ab 6e 17 4d 90 ae 62 8d 84 40 03 ce
	>d698	81d698	ef a0 f2 13 f1 31 f2 ec 44 cf a0 1b 03 40 f2 fd
	>d6a8	81d6a8	00 01 ef a4 04 eb 6f b7 fc 21 a4 2a 90 1e d3 00
	>d6b8	81d6b8	3f ab 44 12 cf a4 f1 3e 0c 17 af 42 d9 41 90 53
	>d6c8	81d6c8	00 ac d7 41 dd 12 d5 a0 1b 14 b1 2d 12 00 ff e0
	>d6d8	81d6d8	94 6f 0c a7 03 ec df 46 de a4 31 91 79 f6 b4 ff
	>d6e8	81d6e8	d1 4f 90 cd e5 ef 66 82 1c 05 bb a0 f0 f0 1f fe
	>d6f8	81d6f8	32 dd 15 dd a0 0f 22 f1 2b f3 f1 fd f1 94 7c 81
	>d708	81d708	43 a0 e5 fd 24 ec a4 02 ff 21 a7 1a 3e d3 32 90
	>d718	81d718	1b 24 da 24 0b d4 21 54 80 28 46 8d de 0d 2e d3
	>d728	81d728	d8 a4 3f d1 6c f1 f0 5b b6 4c 90 8e d3 29 13 a3
	>d738	81d738	da e0 23 a4 0f d3 2b 00 42 bf 6e 97 90 0b 10 fb
	>d748	81d748	04 43 a2 40 db 94 64 86 d3 fa 15 d1 6a 02 90 10
	>d758	81d758	e4 d2 ed ef 16 e1 23 80 c8 57 ae af f2 f4 6a bd
	>d768	81d768	90 ae 7e c1 fc 61 bd cd e4 a0 2f f1 ee 70 82 0c
	>d778	81d778	15 fe 90 0e ef 1f e0 10 f2 4a 1f 90 d4 ae 1f 01
	>d788	81d788	12 42 4e a3 90 0d 52 d3 6b b5 ae 50 06 90 e8 24
	>d798	81d798	dc 0e f6 1a e4 5a 90 10 ec b4 4c 21 c1 0b f3 80
	>d7a8	81d7a8	0b 04 5c 1a d6 fd ff fc 90 e2 71 01 ec 62 ec af
	>d7b8	81d7b8	04 94 fd a6 2b 5d d7 de 05 0a 90 ff f7 2a d3 1f
	>d7c8	81d7c8	f2 4a b4 90 3d 1a 03 fd 16 cd f0 f3 90 42 bf 4c
	>d7d8	81d7d8	f3 eb e4 2e da 90 41 d9 f2 32 3d 3d af 43 80 ba
	>d7e8	81d7e8	2f b0 7a 8a bf 21 67 90 4e 03 db 06 df 4d a7 6c
	>d7f8	81d7f8	94 3e 03 e2 3a 21 0c 40 a4 90 71 f0 22 cc e6 0e
	>d808	81d808	f5 fd 90 f0 63 a1 7a b0 52 cc df 90 20 2f 0f cf
	>d818	81d818	4f af 0e 06 a0 2f e0 0e 0f 11 d1 5d 02 90 83 6b
	>d828	81d828	ef 5e b1 31 df e1 90 21 c8 34 e3 4c 22 a2 fe 80
	>d838	81d838	db b5 73 f3 3e d7 c8 e1 94 00 48 22 d3 e1 4c 0e
	>d848	81d848	45 90 cf 3b 00 f3 dd 0f 03 0e 94 6b 97 f1 f2 ff
	>d858	81d858	14 c0 5a 94 22 b0 12 1f 96 00 4b 3d 90 b5 1c 33
	>d868	81d868	1d df a1 36 ff 90 3d c3 5b b2 1d 10 2f d2 84 8a
	>d878	81d878	77 0f c6 0e c9 73 a1 90 44 ed 43 8f 31 21 c0 fc
	>d888	81d888	80 54 97 f8 d1 d8 c6 9f 5b 90 d6 2d a0 5b f6 f1
	>d898	81d898	fc 03 90 af 3a 24 fc f2 fe 22 22 90 de 0d e0 47
	>d8a8	81d8a8	ea 0f ff e2 80 6e f5 73 b0 d8 35 ff aa 90 54 b0
	>d8b8	81d8b8	e1 ee 14 4f fe 3e 94 c6 59 20 fd 50 c6 e9 60 80
	>d8c8	81d8c8	b2 e3 1a dd 7b af 8b 63 90 24 cb 60 9e 02 1c 73
	>d8d8	81d8d8	95 90 28 46 be 0e 02 bf 2f 22 90 cf 3d e3 c1 1f
	>d8e8	81d8e8	e3 ea 3f 90 f0 00 4f c0 31 d0 5e e3 90 2c e6 0e
	>d8f8	81d8f8	0d f2 5e dc 03 90 20 fc b5 2f ee e1 3d f0 90 4f
	>d908	81d908	af 35 ed 3d f4 ce 03 80 48 55 b3 ff dc d2 3b a1
	>d918	81d918	90 e5 3c 4f b2 0d f1 00 21 90 e1 ec 76 ce ee 32
	>d928	81d928	f0 f1 94 b3 20 ee 36 bd 2f 5b d1 90 40 a0 1f f0
	>d938	81d938	52 c5 48 53 90 80 0c e3 ed 01 0f 0d 33 80 bf be
	>d948	81d948	de ee 51 07 1a ef 80 4d ff 11 dd a3 32 a1 6f 90
	>d958	81d958	fc 03 ee 1e 02 22 1e a3 90 5c 0f d2 df 61 ff dc
	>d968	81d968	01 94 1f 1f d2 fe 21 12 1c b5 94 49 11 12 c0 1f
	>d978	81d978	d6 1e 11 80 e1 38 20 d0 ad 3d c3 d8 90 07 1e 31
	>d988	81d988	3f b1 ce 41 d2 90 2c 0f c5 0c 30 d2 fb 32 94 fe
	>d998	81d998	d2 5f b6 ed 2e e6 3c 80 bf bd 40 1d 13 ab 12 f3
	>d9a8	81d9a8	90 10 ff e4 3a c3 4a fe e2 80 2b 45 8f bb ff b2
	>d9b8	81d9b8	e2 ee 9c 3c 10 01 d2 2f 0e 0f 7e 80 9d df 1a f0
	>d9c8	81d9c8	33 34 f8 22 94 b2 5f c0 3e e5 ff 0e 34 80 bd ff
	>d9d8	81d9d8	fd 10 27 ba 11 bf 98 3b a7 1e f2 11 84 5b f5 80
	>d9e8	81d9e8	2b 15 aa 2f fd bf 4c f6 90 1e 52 a0 5b e3 de 24
	>d9f8	81d9f8	ee 94 12 ed 41 c6 09 34 84 3c 80 cc 51 dd 0d ef
	>da08	81da08	35 ff 73 80 ea fd d5 7b ff ad 41 fe 80 12 3d b2
	>da18	81da18	fe 12 cd 2e b6 80 30 e4 fa fd ed 33 0b 14 80 9d
	>da28	81da28	52 d0 01 bb 21 bf 50 70 f1 ac 37 af 08 c6 07 58
	>da38	81da38	80 d0 0b f7 4a d1 ab 23 fd 84 22 fd 5f 3c 95 79
	>da48	81da48	13 0c 80 11 a1 ee 4b 01 e2 0d 6f 80 bc 20 d3 3f
	>da58	81da58	1e b6 fb 71 81 af 2a a1 10 00 00 00 00 00 00 00
	>da68	81da68	00 00 00 00 00 00 bc 00 02 d4 f9 6f 1d 03 39 b4
	>da78	81da78	2d f4 09 7f f3 b0 d5 fe a4 17 0f 12 ed 7f 11 7d
	>da88	81da88	81 b0 4f e3 f2 ef f1 90 ad 0d b0 0f ce 0f 01 d7
	>da98	81da98	f1 40 23 b4 5c f1 21 dd fe 03 df 11 b0 fc d1 e3
	>daa8	81daa8	d1 ea 13 24 00 b4 58 53 84 c3 3d 2c 1e 20 b0 d2
	>dab8	81dab8	c4 ce e2 5e 62 e1 e0 b0 22 17 ec 10 bb d2 e0 5f
	>dac8	81dac8	b0 01 e7 2b 3f c2 c1 d0 41 a0 e3 02 a0 61 17 a1
	>dad8	81dad8	d0 ed b0 f3 d1 fe 6f 00 ff 30 d3 b0 b3 1f 1f f0
	>dae8	81dae8	0d 2d 03 11 a0 1e ff 0d fa 52 32 23 1e b4 3f 0c
	>daf8	81daf8	44 a3 c3 ff d7 d0 a4 ee 3e 78 31 01 a2 6c 59 b4
	>db08	81db08	6e c4 1b 00 22 b4 1c e3 a0 bd 93 c9 2f 4f 21 7d
	>db18	81db18	6e b0 f4 d1 fc 61 f0 ce 2c c2 a0 04 2d 50 27 02
	>db28	81db28	1d 3a d3 a0 22 a8 50 d8 ac 10 5e 17 b0 c3 3e 5f
	>db38	81db38	e4 d3 2e 2e ff a0 98 5b fa f6 2e 73 41 12 a0 ed
	>db48	81db48	2f c4 97 3a 28 d3 30 a0 03 e3 e3 4f 2d 58 f4 3f
	>db58	81db58	a0 95 04 b0 90 19 22 11 df a0 ef 67 cf 2d 30 e1
	>db68	81db68	1f 49 a0 0e a8 0f 22 06 b2 47 f4 a0 1e 09 4c 4d
	>db78	81db78	f0 e3 de 4e a0 db 02 4f 33 2f 1e 2c b1 a0 fd 70
	>db88	81db88	22 b6 2e cc df fd a0 0e 30 dd 03 3e 09 50 20 b4
	>db98	81db98	1f 4a f5 c2 f1 05 dc 10 a0 3b 4e 0e fb ec 46 dd
	>dba8	81dba8	1c a0 3a 01 3e 06 05 7f f0 0e a0 cc 2f 1e a0 39
	>dbb8	81dbb8	e3 d4 cc a4 b7 0e f5 1f 02 0d 31 01 b0 44 00 21
	>dbc8	81dbc8	d2 f1 ff f1 ce a0 b8 1d f0 bc e1 d4 a7 3e a4 7b
	>dbd8	81dbd8	21 7e b3 14 bd df d5 a0 ba ad ec 91 d3 de 08 e5
	>dbe8	81dbe8	b0 13 1f 3f f5 e0 ff 20 1f b0 ef e1 c2 d1 fd ff
	>dbf8	81dbf8	4f 34 b0 e1 f0 12 05 1c 01 dc d1 a0 fc 71 f2 d7
	>dc08	81dc08	79 13 93 bf a0 dd 63 e1 01 de 43 f6 ef a0 fe fd
	>dc18	81dc18	e4 ee 29 71 f0 ee a0 23 a4 bf 4d 2e 0f 2b 2d 90
	>dc28	81dc28	a7 33 2d fe 1b 08 25 24 a0 12 1f 11 0c e7 f2 ef
	>dc38	81dc38	1e a4 c7 1c 3a 5c 7b 02 00 ee a4 6c 4c 61 92 69
	>dc48	81dc48	e0 15 b1 a0 4f ae ed df 19 1f 20 10 a0 50 12 b6
	>dc58	81dc58	ee 28 54 e0 cb a0 2e 82 11 3d 21 05 10 2e a0 2e
	>dc68	81dc68	c2 12 ea 22 ec bd 00 a0 21 e6 df 6d 43 a5 e0 6c
	>dc78	81dc78	a0 2f df d9 2e de c3 2f 34 a0 12 f2 fe 01 c3 d0
	>dc88	81dc88	5b 1c 90 83 41 e4 e2 00 7f 3c 4c a0 c3 12 a2 02
	>dc98	81dc98	fe ec 3b 02 a0 01 ff fe 35 1c 3e 10 ff a0 2e 3d
	>dca8	81dca8	e0 da e1 f3 f4 ff a4 41 ee 49 59 7d 20 d3 d3 90
	>dcb8	81dcb8	fa 5f c9 e2 60 13 4f 1e 90 2f 8f 2a 74 05 a3 7d
	>dcc8	81dcc8	d9 90 dc 0b 1d 40 da 02 6d 18 a0 11 00 10 40 a2
	>dcd8	81dcd8	ef 0f 04 a0 6c fd 3d 10 ff fd ed 14 90 1a 3b 3a
	>dce8	81dce8	27 01 fe d0 ee a0 c5 10 ae 1e 02 3f 41 ca 90 15
	>dcf8	81dcf8	71 40 ce b8 61 1e 01 a0 3c 04 d5 11 cf 0e 0f 51
	>dd08	81dd08	a4 1e b5 01 e0 22 a0 20 1f 94 d3 24 bd 5f 5f 49
	>dd18	81dd18	f3 81 a4 d4 3d d2 4b e1 3e 6c 10 a4 05 9f 31 0c
	>dd28	81dd28	4b 11 30 d0 90 7d bc ec be 4e 3f e2 e4 a4 ef 40
	>dd38	81dd38	de 4f 2f f2 94 0f 90 98 11 6b 4d 1f c4 41 00 94
	>dd48	81dd48	20 b4 59 3c d5 b3 1f 4e 90 33 f0 cf 20 c1 40 d1
	>dd58	81dd58	7d 94 f1 10 de 7e f4 d1 fd 24 90 11 14 1e 21 ff
	>dd68	81dd68	cf d0 84 90 b5 0a 61 0d a1 1f 22 d5 90 d1 20 40
	>dd78	81dd78	4b dd e4 80 1f 84 84 6d 47 a3 c4 cc 57 a8 80 3a
	>dd88	81dd88	df c4 80 59 8b f0 a9 80 46 26 b2 57 b3 16 18 6b
	>dd98	81dd98	80 e2 eb bf ea 9c b5 2c c1 90 33 e3 50 1e e2 0d
	>dda8	81dda8	2d f3 90 9e fe 2d f0 42 1c f2 13 90 a0 11 de f3
	>ddb8	81ddb8	50 fe 0e e1 80 e0 fa ed d7 e8 34 41 a4 94 0f 38
	>ddc8	81ddc8	26 bf d4 4e c2 01 80 10 29 72 de e4 3b 9e 04 80
	>ddd8	81ddd8	eb 02 50 d0 22 ef 80 2c 80 ce c3 20 30 6c ae 35
	>dde8	81dde8	0b 80 c1 20 ac ff 0a 46 54 dc 80 05 da c2 fb b3
	>ddf8	81ddf8	2e fc f6 80 0d fd 32 e0 df 1e a0 25 80 18 3c 01
	>de08	81de08	b0 1e c0 06 f2 84 a5 39 5c f4 fd 3f f2 be 80 f1
	>de18	81de18	3e d1 30 51 45 c1 fd 84 4e b6 c4 c1 1d 6f d1 3f
	>de28	81de28	70 58 c4 f6 3c 02 1b a5 5a 70 df bc bb ba 25 fd
	>de38	81de38	d3 dd 70 30 66 2c dd 1f ee da be 70 f3 ca 11 3d
	>de48	81de48	00 d0 5f ef 74 1e b0 61 1f df 4f fe 40 64 9c 32
	>de58	81de58	d5 ff 5f 0c cf 7e 61 ba b0 28 90 00 00 00 00 02
	>de68	81de68	00 00 00 00 00 00 00 00 72 00 00 00 00 00 00 00
	>de78	81de78	35 a2 11 00 30 af 50 ef ea d6 a2 3c c2 51 9c 62
	>de88	81de88	9d 25 2e a2 f1 46 52 de fd df ec 43 a2 9f f0 55
	>de98	81de98	fe f0 66 fe 45 a2 ec 61 81 3a b5 7f 81 71 a6 bc
	>dea8	81dea8	57 29 81 70 1d c6 60 a2 0b bf e3 6a c6 76 ec 46
	>deb8	81deb8	b2 fc 8e 74 0e 27 1f 43 fd be 11 c1 31 3f a2 6e
	>dec8	81dec8	cf 7c ae da 30 2e 01 4e c5 02 7e a6 20 00 f9 1f
	>ded8	81ded8	ff dc a0 79 be 42 cd 73 83 6a c1 6c 12 be dd 22
	>dee8	81dee8	0c 14 20 da 53 3b b2 45 2d ff aa f6 77 4d 36 a6
	>def8	81def8	10 fd ac c8 f1 55 d9 41 b2 af 56 61 10 db 06 20
	>df08	81df08	33 b2 f0 11 2d 9a bb d2 2e 47 b6 c8 17 5f be 4f
	>df18	81df18	d3 30 a1 b2 2e be 46 3e 0d 99 ab bf b2 30 bd 27
	>df28	81df28	64 46 3d 11 21 ba 02 eb 54 fb 03 00 1c f5 b6 3f
	>df38	81df38	03 2c 06 00 00 d0 3f b2 ec dc dd cd bc fe bb 15
	>df48	81df48	b6 eb e4 1c e3 40 00 ed 16 b6 4e ae 50 a1 42 2d
	>df58	81df58	d3 30 be 19 17 58 97 5a 1d 05 1c b6 00 b1 54 ed
	>df68	81df68	00 22 df 51 a6 f1 ab 52 8d 53 00 e4 3e b2 13 22
	>df78	81df78	40 99 ee eb 9a be a6 f1 26 32 11 3f 0f 8a 53 ba
	>df88	81df88	fc f4 2f fe 03 2c c7 3c b6 fd d3 6d 8f 67 cc 6e
	>df98	81df98	91 ba 2c e7 f9 43 85 5e 82 7f ba c1 ff 61 af 30
	>dfa8	81dfa8	c4 10 eb b6 e0 44 ad 10 01 42 f0 1c b6 c4 62 fb
	>dfb8	81dfb8	e1 35 c9 f2 73 b6 d9 e1 73 be 21 dc 44 13 be cb
	>dfc8	81dfc8	34 3f cf 30 0d 03 01 b2 34 2e ee a9 f6 e9 ad db
	>dfd8	81dfd8	b2 ee cd 1f cb c1 3c c0 35 b2 5f c0 67 2f 23 76
	>dfe8	81dfe8	4c f7 b2 51 b4 4e d4 4b d5 1d bc b6 71 9c 25 ef
	>dff8	81dff8	3d c0 37 28 b2 ab c0 70 bb de f2 23 76 be c4 10
	>e008	81e008	3b d0 47 cc b4 40 be 1f c0 7a f4 e2 2a e6 28 b2
	>e018	81e018	9c 53 db 0e 9d fa d0 ba b2 ff bb 05 bb fd bd f2
	>e028	81e028	e0 b2 5f c3 64 47 66 20 16 65 b6 cc 54 fe ad 54
	>e038	81e038	00 e9 06 b2 71 de dd dd f5 2a aa bd b2 26 ea d0
	>e048	81e048	bc 17 4c d1 02 b2 76 3f 4e ab f7 65 4b ae b2 75
	>e058	81e058	ec 23 24 ca f3 65 19 b2 a1 5f bf 53 a9 ad c5 50
	>e068	81e068	b6 a0 17 38 d0 44 1e f3 08 be 64 a6 58 a3 56 af
	>e078	81e078	dd 36 b2 65 eb 36 51 10 fd be 64 b2 cd 5e bf 0f
	>e088	81e088	43 aa d3 dd b2 00 bb f5 de 65 da b0 76 b6 c9 46
	>e098	81e098	2f ea 05 4e 9e 74 b6 c8 34 fd e2 1f 44 fa c4 b6
	>e0a8	81e0a8	70 e9 e4 58 06 4b c5 be b2 d5 62 df 1f ee b2 6f
	>e0b8	81e0b8	ae b2 3c e5 fb 04 e4 32 56 40 b2 45 02 52 04 11
	>e0c8	81e0c8	0a 90 5f b2 9f 3d a1 5e 9b 1e c0 ed b6 3b f1 5c
	>e0d8	81e0d8	e5 38 01 37 d8 b6 14 60 0f 1f f3 0f 92 6c b6 a7
	>e0e8	81e0e8	2b ce 14 ef 72 ab 17 b6 3f ad 72 92 5e dd 14 0a
	>e0f8	81e0f8	b6 f6 28 03 4d 3f a2 1e 64 b2 3d d6 54 1c d3 25
	>e108	81e108	5f b2 b2 60 b2 64 5d ae 55 43 da b2 f2 51 ac 40
	>e118	81e118	aa 2f 9d cb b6 f1 05 0b f5 6b a1 25 4c b6 f1 94
	>e128	81e128	61 bb f6 5f fc 22 be 0f cd 7f 5e df e0 f6 3e b2
	>e138	81e138	2f bb ee a1 63 da e5 0d b2 02 eb bf 5d cf 24 2e
	>e148	81e148	d3 b2 60 b1 3e f2 30 c0 65 2f b2 01 55 2b ba e6
	>e158	81e158	3c e6 ff b2 5f ad 53 fc ac 35 50 ab b6 7f 95 58
	>e168	81e168	e4 69 d3 30 a1 b2 45 fb f6 2f 20 dc 27 54 b2 dd
	>e178	81e178	26 4e b2 50 d2 41 ba b2 e3 52 db ab 44 da d0 01
	>e188	81e188	b2 53 ba e5 3b b0 1d b2 6f b6 d6 fc 4f 11 2d a4
	>e198	81e198	60 8f be 16 de 28 32 15 dd fc 36 b6 51 0c c1 10
	>e1a8	81e1a8	c2 3c e1 65 b6 9c 65 8d f6 4b b3 72 ba b6 5f b4
	>e1b8	81e1b8	62 c9 47 ea d6 5c b2 e1 fc 26 42 eb d4 51 af b6
	>e1c8	81e1c8	51 c9 13 6d a1 60 82 3c b6 f2 6f be 15 4e 0e d3
	>e1d8	81e1d8	5d b2 f2 52 dd f6 4f a1 4c e5 b2 3d ab 06 4e bf
	>e1e8	81e1e8	00 53 ee b2 01 54 db 0d 44 da dc b1 b2 3e b0 cc
	>e1f8	81e1f8	23 d5 3b d4 62 b6 00 af 65 0b a4 3a 27 0b b6 e0
	>e208	81e208	16 09 07 ca 46 0d 9f ba 36 9e c0 54 ee 3b b5 35
	>e218	81e218	b6 4a b0 3f 24 bc 55 09 d2 b2 c2 5d be 66 5f f5
	>e228	81e228	41 12 b6 f2 1a 16 ca 55 9d 01 72 b6 bb 20 e7 49
	>e238	81e238	b1 55 fc a1 b2 f6 2c a0 4e dd be 63 db b2 02 16
	>e248	81e248	3d b1 62 dc 36 10 b2 3f c2 40 34 fb d3 54 cc b2
	>e258	81e258	41 d4 3d cd ef 44 da e1 b2 33 f2 ea c3 2d 1e ab
	>e268	81e268	0f b6 06 9d 43 22 d8 26 3c a7 b2 34 dc 44 d2 4d
	>e278	81e278	ab 25 50 b2 ae 5f d4 ec 43 f2 0b f5 b2 ef 0b d5
	>e288	81e288	ea e2 bf 6e b1 b2 5e 35 cb 25 fc d2 51 ba b6 37
	>e298	81e298	2c af 73 0e bd 25 11 b6 10 c4 ba 56 dd 1b 55 cb
	>e2a8	81e2a8	b2 a2 2b dc bf ce 4f b3 5d b2 b0 66 52 f1 db 35
	>e2b8	81e2b8	ce 3f b2 32 ca 15 df eb c3 44 1b be 55 29 c4 7a
	>e2c8	81e2c8	28 17 4c bd b6 f0 52 f1 be 56 bb f4 7d b2 0f fe
	>e2d8	81e2d8	fd 05 63 cb e3 35 b6 9e 62 82 7d 97 4c 92 63 b2
	>e2e8	81e2e8	2c 00 ea e1 35 ec 32 bb b6 74 fc a0 47 ab 03 7f
	>e2f8	81e2f8	9d b2 bc 27 5e bb 36 5d c2 62 b2 cb 06 5f bd d4
	>e308	81e308	5d b0 55 b2 0f eb b0 65 eb 0c d6 52 b6 af 63 2e
	>e318	81e318	9f 63 9d 2f 4f be d7 38 e3 e7 18 14 0e 01 be f0
	>e328	81e328	3f db 76 bc c4 53 cc b6 ae 46 f9 d5 52 9d f7 4f
	>e338	81e338	be dd 54 3b a1 64 dc c1 45 b6 58 e3 fd 64 cf 0f
	>e348	81e348	6d af be 25 ed ce 72 fd e3 30 8f b6 12 32 18 12
	>e358	81e358	04 2b a6 5f b6 bb 36 1b c6 2c cf 27 0b b2 fd bf
	>e368	81e368	60 bb e6 40 bf 64 b2 fd c1 62 bd 45 3d bb 06 b6
	>e378	81e378	fd 92 63 d9 4f 5f b2 51 b2 3b ad 45 1b ab 04 ed
	>e388	81e388	32 b6 a0 71 8f 45 10 bd e1 63 b2 3c b1 20 ec d5
	>e398	81e398	5e c1 45 b2 5e b2 55 0c b1 55 0d de b6 ee 25 4f
	>e3a8	81e3a8	1a c0 72 be e2 be 59 a5 30 f3 dd 1f 07 1b b6 9d
	>e3b8	81e3b8	46 2c bd 74 0e ae 62 b2 eb e5 53 ca b1 64 ea 24
	>e3c8	81e3c8	b2 31 0c d3 4e cf 1f be 45 b6 ac 30 06 db e5 6f
	>e3d8	81e3d8	bb 54 b6 eb e1 61 df f2 50 ca 45 b6 20 e9 27 ea
	>e3e8	81e3e8	07 be 00 e4 b2 53 eb bf 2d 22 26 3d c3 b6 dd 5d
	>e3f8	81e3f8	06 fc b3 40 0b e1 b2 36 3b c1 64 eb 03 2f 15 b2
	>e408	81e408	0b 05 eb 05 32 ea 05 0b b2 cb f5 51 bf bd 54 f1
	>e418	81e418	2c b2 d5 2b d4 50 ba ff e5 40 b2 ca bc 06 65 fb
	>e428	81e428	25 e3 2b b2 45 db 35 0c db 15 2b bd b2 56 4e ab
	>e438	81e438	e5 4d d5 52 ed b2 b1 21 31 db de 33 ea dc b2 c4
	>e448	81e448	4c 05 5d cf 16 60 b0 be 0e fd c5 7d 96 dd 27 da
	>e458	81e458	ba 7f ed f6 3f 8f 65 bc 25 b2 2b ec d4 62 bb b1
	>e468	81e468	65 0a b2 c3 75 2b be 63 ea f5 54 b2 fc b1 64 42
	>e478	81e478	b0 5f ab 05 b6 fd 92 63 fc b0 63 9d 03 b2 54 2b
	>e488	81e488	bb d4 50 be 10 e1 b2 2f 03 12 32 2d c4 52 cc ba
	>e498	81e498	3a 62 95 df a7 26 80 b2 b2 c3 52 ba c1 50 bd 3e
	>e4a8	81e4a8	c4 b2 2c df d3 50 13 f0 41 bd b2 0f 45 0c e4 ed
	>e4b8	81e4b8	b2 63 db b2 42 24 2b d4 54 fa 14 0b b6 21 00 0e
	>e4c8	81e4c8	35 ac 00 46 da b2 c3 54 0a 14 3c 0f d4 4d b2 ff
	>e4d8	81e4d8	a0 52 cb 16 3f ae 36 b2 54 dc 35 03 4e a1 50 ba
	>e4e8	81e4e8	b6 17 0c 6c a6 38 45 bb 64 b6 a3 19 16 08 45 2e
	>e4f8	81e4f8	ce 06 b6 20 ea d4 61 e9 f4 6b b0 b2 bd 43 db f4
	>e508	81e508	35 cc 35 44 b3 2a c3 53 ca b3 2c 04 db 02 00 00
	>e518	81e518	00 00 00 00 00 00 c2 00 00 00 00 00 00 00 f8 c2
	>e528	81e528	a3 61 52 1e b6 42 0e 3e c6 ff 36 b3 0c 29 22 e4
	>e538	81e538	e5 c2 3f 1e 1f b0 04 11 4f 0e b2 d4 e5 65 6c fc
	>e548	81e548	ac 93 33 b2 5f 1b 88 82 22 52 4c ac ce b7 11 df
	>e558	81e558	e0 00 4f f1 f2 be ab 40 5e e6 c3 9e 4d 6c ba 27
	>e568	81e568	92 b1 38 52 23 a5 cf ba 0c 6e 13 d7 bb 2e 3e e7
	>e578	81e578	ba 03 af 2b 0f 54 a4 11 d8 be 4f 02 07 fd ef 2d
	>e588	81e588	e2 34 be c1 1e dc 24 f0 14 0a f0 ba 2d e7 20 ed
	>e598	81e598	4c d0 25 e0 be 31 fa 10 00 f6 1d 0e 1d aa 96 75
	>e5a8	81e5a8	cf 6c a8 17 f0 56 ae 38 df fe c7 73 de 4e 8c b6
	>e5b8	81e5b8	d1 00 34 3e cd dd c0 53 be ef 1f b0 24 0f 32 dd
	>e5c8	81e5c8	c5 ba 0e 14 3e c0 00 c1 61 0d ae 60 88 f7 1d 47
	>e5d8	81e5d8	1b 81 0e b6 cf 35 22 22 dc e1 21 36 ae da 82 4a
	>e5e8	81e5e8	25 72 8e 0e aa b6 f2 11 14 1c bd 0e 03 64 ba cf
	>e5f8	81e5f8	2e ff 45 ef f2 ea 23 aa 30 f7 2a 8e 5d e3 77 9b
	>e608	81e608	ae 11 a9 37 30 07 08 a0 5f be f3 41 de 00 de 34
	>e618	81e618	1e 10 b6 1b bc ff f2 42 fd ee dd aa 67 ed 1f da
	>e628	81e628	f5 42 04 2a ae bc 20 f2 46 eb fe ea f7 ae 32 e3
	>e638	81e638	1a ae 32 f5 53 ea aa f0 e0 27 3f 0d 0b d2 24 ae
	>e648	81e648	12 4e da d0 f2 24 4d ee aa de e4 32 20 3b bc 22
	>e658	81e658	13 aa 42 0c ee ef 16 21 1e 0a ae cf 05 e2 5f 1a
	>e668	81e668	d2 a3 14 aa 6b 3c ef a5 12 5f 4c df aa c3 e2 60
	>e678	81e678	4c e0 92 d4 30 a6 43 31 ac 9d e0 77 73 10 ae b2
	>e688	81e688	22 5e 40 c0 a2 e1 41 a6 62 00 9a 8a ef 44 11 cd
	>e698	81e698	a6 ba ff 56 57 11 dd 0f 55 a6 77 22 db cc 01 45
	>e6a8	81e6a8	10 c9 9e ec 73 57 dd bb be 55 55 9a 01 aa df 23
	>e6b8	81e6b8	47 50 ba f9 9a 05 57 01 0c ac c2 07 53 9e 39 e8
	>e6c8	81e6c8	ee 07 65 6c ea ed 9e 24 34 72 f8 ed df 27 4e ae
	>e6d8	81e6d8	00 eb e0 03 12 2d fc f0 9a d7 45 2d fa dc e7 63
	>e6e8	81e6e8	31 9e 2b ad e0 03 73 eb ec 8f 9a 17 13 1e f8 b0
	>e6f8	81e6f8	f6 f7 3e ae 2c 0e e3 04 21 1e fd d2 9a 15 13 68
	>e708	81e708	dc c5 87 43 38 a6 20 cb 9f 02 75 62 e0 e1 a6 01
	>e718	81e718	76 54 01 bc e0 40 32 aa df b2 2e 40 4e c0 d0 e0
	>e728	81e728	aa 60 3d f2 cf ff 7d 40 20 ae 82 ff 2d 61 e0 d1
	>e738	81e738	cd 20 9e 7e 16 ae 8f 5d 33 75 90 9a ef fc 75 2e
	>e748	81e748	15 c9 0f 4f 9e 26 1f ad fd df 62 11 e0 9e bb e3
	>e758	81e758	52 23 3f bd 0f 33 9e 62 0f fd cf 13 14 ff da 9a
	>e768	81e768	2e 02 12 00 fe fc f0 15 9a f1 3c 0e e1 e3 25 1e
	>e778	81e778	0c 9a 00 d6 12 1e 2c df f4 00 9e 2f 2d e2 d0 e2
	>e788	81e788	52 f2 0f 8e a0 52 43 54 ca c2 0e 15 8e 2e a1 da
	>e798	81e798	be 61 f1 5e 8a 9e 11 f0 54 0d 01 0e 05 02 96 45
	>e7a8	81e7a8	63 fe 01 ff 12 1a cb 9a 00 d5 2f ee 2c e1 14 ef
	>e7b8	81e7b8	9e 40 0b 34 c0 26 0f fd 3d 8e f3 52 b1 dc c8 73
	>e7c8	81e7c8	fd f6 8e ca d3 3c e5 71 a4 4e c0 8e 73 1e 37 bc
	>e7d8	81e7d8	02 39 07 2d 9e b1 0e fe 41 c1 02 cc 31 9a 1e 06
	>e7e8	81e7e8	c0 de 7a 23 14 93 9e fe 3a 51 f4 a3 0a 1a 61 9e
	>e7f8	81e7f8	b6 e1 cb 5e 2f f7 de 2f 96 3f 16 53 24 62 10 13
	>e808	81e808	e0 9e 5f fc 00 cf 15 fd 00 1b 8a 04 f4 a6 3b f9
	>e818	81e818	6d f7 05 9a 1b 2f 2f e3 02 0f 5a 2d 9e d5 b3 1f
	>e828	81e828	3a 1f e2 c5 1f 9a 2b 5e d1 f6 c0 4f 48 13 9a d3
	>e838	81e838	d6 4a 2d 11 a5 c6 0d 96 3e eb 9e ce 02 70 00 f1
	>e848	81e848	9a c5 21 2c 4c c2 f7 d1 4e 9a 29 05 d0 f2 4b 20
	>e858	81e858	0f 83 9e 31 0f 6f df f2 f0 34 3d 8e ef ec 23 41
	>e868	81e868	22 b0 ba 10 8e 10 e6 f1 9a 49 14 46 cc 9a 20 fa
	>e878	81e878	43 f3 f4 f9 10 2f 9a 04 4f d0 0e c1 42 ff 32 9a
	>e888	81e888	ac 01 2d 43 1d a4 fc 11 9e 71 d3 04 8d 4f 3e 36
	>e898	81e898	cf 9e b0 0b 12 52 b1 d0 ca 75 9e d2 05 cc 0f 2e
	>e8a8	81e8a8	27 5d df 96 4d cf 26 14 41 f8 cd cd 9e f7 0b 0c
	>e8b8	81e8b8	3a d7 25 b0 5b 9e ec 45 d2 25 09 2f 0e e7 9a 22
	>e8c8	81e8c8	bf 4a fd 44 f1 21 ba 96 ab ce e4 53 0f 1d de 37
	>e8d8	81e8d8	96 55 65 2c d0 02 17 60 eb 9e 3c d4 42 dd 2e dc
	>e8e8	81e8e8	07 1f 9a 11 18 e3 10 d6 6d ed 2e 96 ce f5 32 54
	>e8f8	81e8f8	fb 9d cc f3 9e 1c fe fe c3 53 1c 2f ee 9e e5 10
	>e908	81e908	23 4a 0e f0 e4 41 96 41 3e aa af f0 21 3c 9c 96
	>e918	81e918	ac c1 64 4e 10 ad f6 63 9a 6c fc d6 e2 06 3a fe
	>e928	81e928	00 9e a3 42 1e 2d bd f5 f2 32 9a 0c c1 e0 13 41
	>e938	81e938	f0 df de 9e 51 11 31 cf cf f0 31 21 8a ce 8b 0e
	>e948	81e948	55 75 90 a8 df 8e 75 47 12 b9 0a 14 77 f1 8a dc
	>e958	81e958	b8 43 55 16 c8 9c 10 9a 14 22 de 1b 0d 17 f3 02
	>e968	81e968	9e 09 ff 01 07 11 ec 0b d1 9e 34 11 0e bd ff 22
	>e978	81e978	43 3c 96 fd bc d0 67 76 33 eb cf 8a 63 35 d9 8a
	>e988	81e988	50 46 62 da 9a de ee 42 50 0e fc df 24 9e 13 40
	>e998	81e998	ed e0 d0 53 3f 0e 8e 98 a5 44 40 68 9c b3 b5 9e
	>e9a8	81e9a8	44 1d 0e df d5 41 30 3c 9a a1 f3 13 5f 0c d0 d0
	>e9b8	81e9b8	24 8e 7f 3f a8 9f 33 55 70 b9 9e ef f0 55 11 e0
	>e9c8	81e9c8	dd f1 22 9a 21 2f bb 11 03 17 dd ee 9e 0a f6 14
	>e9d8	81e9d8	f3 28 fc 32 e7 9a 13 cc 2a 1f 37 01 ff 08 96 98
	>e9e8	81e9e8	c0 f4 53 fa ca 8d f5 96 54 4f fb be 16 65 73 1c
	>e9f8	81e9f8	9a 03 03 25 ec ef fd 16 3f 8a 1f d8 ad 61 37 7d
	>ea08	81ea08	98 ee 8a 00 77 4f fc d8 d5 74 16 8e 2b 99 0e f2
	>ea18	81ea18	76 0e ad aa 8a 23 76 1e eb 8c 54 4e 74 9a fd c2
	>ea28	81ea28	fe 23 6e f0 ef b0 8e 53 23 7f 88 c1 0f 57 20 8e
	>ea38	81ea38	ef d9 d5 47 43 1b ea ef 8e 26 65 18 f9 dd f7 32
	>ea48	81ea48	2f 8e 08 80 f4 07 7e f8 f1 a4 9e 14 3f 1e 0d d4
	>ea58	81ea58	f3 11 4b 8e ea f0 96 54 38 2a bd e7 8e 21 6e 58
	>ea68	81ea68	b0 b7 42 70 38 8e ff c2 f7 7d 2c 1a 93 e4 8e f2
	>ea78	81ea78	60 a9 f2 a3 33 5b 5b 8a ed d7 23 0f 68 ff 03 c3
	>ea88	81ea88	8a 62 0d 0e ce 14 30 30 ec 8a 80 22 31 5d ed ce
	>ea98	81ea98	11 34 8a 3f ff ed e3 32 12 2f bd 8e e2 d0 33 2c
	>eaa8	81eaa8	0e ae f2 30 8a 41 ec b1 03 e4 5e fe 0f 8a c3 14
	>eab8	81eab8	20 3e fa e1 13 05 8e 1f db 0e df 63 1f 2f dd 8a
	>eac8	81eac8	f3 4f 24 0e be 10 32 41 7e 1e 8d 9a 3f 74 b7 8e
	>ead8	81ead8	88 8e 2f 23 05 c1 ec 3d 54 05 7a ed a8 6f 26 57
	>eae8	81eae8	ec ea 18 8a 22 26 b2 eb 0a 51 04 e2 8e fc 2d 02
	>eaf8	81eaf8	17 d3 2d 2b 21 8a e4 13 2a 4b 0e f6 e3 1d 86 1a
	>eb08	81eb08	c8 8c c1 22 4e 0e f1 7e 17 43 00 0c 0e 07 24 0e
	>eb18	81eb18	8a 1a 2f 01 f4 1f 0f dc f0 8a 23 11 2a 0d e3 e5
	>eb28	81eb28	12 1d 8e 2b 0f 06 d5 0e 1b fe 00 86 91 f0 dc d8
	>eb38	81eb38	8b c0 03 30 8a 2a 3f f4 13 ff 1b 2e 15 86 15 43
	>eb48	81eb48	2e cb bc af 0f db 7a 3a b3 05 1f 3d ea d1 35 7a
	>eb58	81eb58	11 7c ce f6 c1 35 4b 21 7e ba b2 1f 2f 3c ac f2
	>eb68	81eb68	c3 8a 22 fd 00 fd 06 1e 21 0d 7e c1 30 04 60 8e
	>eb78	81eb78	eb fd 52 8a d2 e2 dd 1e 3e 14 d2 b0 7e 4c 30 77
	>eb88	81eb88	b7 e1 d8 74 f4 8a d6 dd 1c 6c 13 d4 b0 2c 8e 3a
	>eb98	81eb98	32 f2 d6 fd 00 4f 05 7e f4 a0 4e 2d 31 f1 e2 f8
	>eba8	81eba8	7e fe 0e d4 2f bc 2e de 64 7e 0d 72 e9 16 2f 67
	>ebb8	81ebb8	2d 94 7e 1c 02 7c d3 b2 8e 1c 4a 8a 4f c2 e0 fd
	>ebc8	81ebc8	4f 3d 04 bf 7a e3 7a 72 f1 97 f0 c1 71 7e 1e c2
	>ebd8	81ebd8	ac fd 20 11 01 a8 8e f1 30 05 1e e1 1d 05 32 7e
	>ebe8	81ebe8	f0 f1 be 20 e3 73 98 c0 8e fd 13 1e f1 fe b0 6e
	>ebf8	81ebf8	31 8e 30 c0 01 1e 72 1f e2 dd 7a 43 73 02 fb 8c
	>ec08	81ec08	43 00 75 86 fc cb b9 c2 34 24 50 ff 8a 41 f3 30
	>ec18	81ec18	eb 3e 10 16 00 7a dd f8 a4 74 f5 dd 89 00 8e 31
	>ec28	81ec28	15 1f ef 1c 13 54 d3 7a 0a cb 55 f7 27 a9 db 2c
	>ec38	81ec38	86 9f 02 ee da 99 c0 16 76 8a ea 2f 01 27 00 ed
	>ec48	81ec48	1b 12 8e 33 e4 ed cb 2e 13 04 dd 7a ec ec 27 25
	>ec58	81ec58	e0 fa ae 26 7a 55 6e ac d1 e3 66 4e ee 7a 9a e4
	>ec68	81ec68	52 32 fd 8d de d6 8a 61 0e df d0 12 41 12 ee 7e
	>ec78	81ec78	8d f1 65 40 e9 8c cc 35 8a 32 de ce d0 41 32 f1
	>ec88	81ec88	ae 8a f0 3f 44 10 dd 1c 20 44 8a f3 ee cb 4f 14
	>ec98	81ec98	04 ec fb 8e fd 34 24 2f 1a e0 05 16 8a 2c 2a 0f
	>eca8	81eca8	e5 f7 0e 3b ed 8a e3 f5 20 3a dc e2 e6 14 8a 1c
	>ecb8	81ecb8	09 1f f6 14 2e 0c fd 7a 07 66 12 18 a9 f2 17 74
	>ecc8	81ecc8	8e 0d dc df 07 23 30 fa e1 8a 04 25 2f ea 0e f4
	>ecd8	81ecd8	52 2f 8e 0c cb d3 12 31 0e ce df 8e 13 53 11 ee
	>ece8	81ece8	cf 21 54 23 8e dd cd 1f 52 31 b1 9c fd 8e 52 32
	>ecf8	81ecf8	f0 9e de 41 74 01 8a bd ef 22 53 12 cd ec 22 8a
	>ed08	81ed08	35 10 ee eb f1 15 23 fc 8e da e0 14 54 2f ed cf
	>ed18	81ed18	05 8a 43 3e fc b1 f2 53 30 dd 8e cd c0 32 50 1e
	>ed28	81ed28	ae b1 32 8e 63 20 ce c0 13 62 4f d0 8a a0 02 7f
	>ed38	81ed38	40 c1 80 f0 5f 8a 7f ef 82 ce 42 7f f2 91 8e af
	>ed48	81ed48	50 62 23 bf bf 0d 72 8e 30 cf ad ee 52 32 e1 9c
	>ed58	81ed58	8a 1f 22 53 d1 be d0 4f 54 8e 12 dd dd f2 34 01
	>ed68	81ed68	ee ab 8e 00 31 42 fd ce d0 32 53 8a f0 ce c0 40
	>ed78	81ed78	53 2e ee de 8a 12 52 11 ed be 11 13 41 8a ce dd
	>ed88	81ed88	ef 51 50 0f cf df 8e 31 52 31 cf be 2f 50 31 8e
	>ed98	81ed98	91 a0 ed 60 4e 01 af d0 8e 5f 53 2f c1 ee 03 71
	>eda8	81eda8	2f 8a d2 90 23 4e 50 cd c1 f1 7a 37 6c ec aa a3
	>edb8	81edb8	76 32 1e 7a 98 f2 35 75 3a bc fe 07 7a 74 1d db
	>edc8	81edc8	8f f6 42 5f c9 86 bc ad d2 76 65 30 df 15 7a 32
	>edd8	81edd8	4c bc b6 d6 71 68 dd 8e df c3 21 3d 2f af f4 00
	>ede8	81ede8	8e 60 3c e3 d1 f3 6f 1f 00 8e af 20 30 12 cd b0
	>edf8	81edf8	2c 22 8e 5f b2 ee df 71 12 04 cd 8a 01 2f 52 0f
	>ee08	81ee08	d1 fd 20 43 7a d2 cd 99 63 11 36 9b ce 7e fd 46
	>ee18	81ee18	73 f1 0a ee 75 32 7a 40 9c f3 1f 55 3c be fd 7e
	>ee28	81ee28	b1 7f 30 00 8d e5 20 76 7e 2c c3 ee f6 73 3b 1e
	>ee38	81ee38	80 86 d0 0f 10 0d 9b ab cd 20 7e d1 d2 80 43 7e
	>ee48	81ee48	73 ae c4 7a f3 44 7b a0 ef d7 7f 1d 7e 1c 8e d4
	>ee58	81ee58	f0 60 38 ff e0 97 e1 32 32 21 f0 12 22 32 02 00
	>ee68	81ee68	00 00 00 00 00 00 00 b2 f0 11 10 2f f0 06 01 48
	>ee78	81ee78	b6 53 93 3e 6f 14 b5 97 c5 b2 37 73 50 33 f4 c6
	>ee88	81ee88	fd 18 b2 28 8e a9 ab d8 cf b2 12 c2 21 e2 20 23
	>ee98	81ee98	33 05 02 1f b6 3d fe 5c 97 fe 4e e6 a5 b6 d2 21
	>eea8	81eea8	f5 ae 4c 26 c4 ff b6 f4 08 7c f0 c3 fb 3d 06 b2
	>eeb8	81eeb8	8d ca ee c3 23 56 02 21 b6 14 1e 2f 3f 0e e4 cd
	>eec8	81eec8	12 ce a7 b3 0e 3d 12 c6 de 6d b6 fc 1f d3 00 69
	>eed8	81eed8	13 00 c3 b6 0f e3 c0 eb 40 a5 ef 3c b6 7f 14 15
	>eee8	81eee8	cd 3b 2e 33 a4 ba 97 cd 43 a3 d5 cf f3 e3 b6 0b
	>eef8	81eef8	6d d5 1e 52 4e 1e f2 b6 b5 02 fd 6f b5 df 4c f4
	>ef08	81ef08	b2 ea d8 ba 9c ab de f0 46 b6 21 b5 cd 6e 11 b5
	>ef18	81ef18	1c 2f b2 22 1f 3d eb 9c 99 ba 9a b6 4f e7 03 2d
	>ef28	81ef28	1f e1 04 cf a6 7c 2e 0f 4b 21 fd 90 ec be 21 df
	>ef38	81ef38	5c 3f f5 fe 01 c2 b6 0f 6c 01 02 fd 5d e3 e1 b6
	>ef48	81ef48	ee d0 1b 4f b5 e3 0e 52 be 01 d0 2a 62 b1 3c 4d
	>ef58	81ef58	04 a6 a4 fd 6a 18 1c a7 bd 49 b6 5f d5 30 4e 3e
	>ef68	81ef68	d1 1f 1f b2 05 11 41 21 21 20 d0 ba ba 4a 20 03
	>ef78	81ef78	ec 7d 20 d2 fc a6 f4 d1 c2 4c 3c 6c 11 03 ba c1
	>ef88	81ef88	3a 40 f1 e1 2e 1e 32 a6 13 40 ce e4 09 6f 1e 12
	>ef98	81ef98	b2 22 12 41 10 dd bb e8 ac be c6 a2 79 32 df 0e
	>efa8	81efa8	6b 11 a6 2e 2f f3 0b 71 b3 ea 0a b2 be 9a ba db
	>efb8	81efb8	b0 02 65 74 a2 75 73 25 33 42 74 f4 32 a6 1e ec
	>efc8	81efc8	be 3b ef 03 ee 7e a6 73 63 dc 30 df 2f 3d f7 a6
	>efd8	81efd8	ce 21 01 d2 c9 1e fe b1 a6 59 40 41 46 5f c2 1c
	>efe8	81efe8	1f a6 05 b1 5f f0 01 1d 3d 9f b6 f0 0a 4f f0 02
	>eff8	81eff8	11 33 1f aa 13 d3 b5 48 41 1e e3 3b a6 e3 f8 28
	>f008	81f008	4d 92 fe 1f 15 a6 e6 74 e1 e1 19 34 b0 30 a6 3d
	>f018	81f018	03 0e 5b 0b c2 ea e2 ae a6 c2 3c 37 dc 1d 4e d3
	>f028	81f028	a6 2d 20 02 0c 6d 20 01 80 ae d3 b1 20 e1 13 a5
	>f038	81f038	6d 2b 96 c4 29 f1 2c f2 79 50 d7 aa a7 d9 26 b0
	>f048	81f048	1e 3f e3 1b a6 23 67 1e 4f d1 e0 2b 43 a6 c3 f1
	>f058	81f058	00 24 bc 0e ed b2 ae db 70 d2 03 5c d2 1b 3e aa
	>f068	81f068	20 d7 b2 1d 13 c3 4b a6 aa 0e 1b 7d d6 df 3b 56
	>f078	81f078	90 ae 3b 2f c7 b0 22 e0 02 e0 aa 13 ec 11 01 97
	>f088	81f088	fa 70 c5 aa 94 7b 1f e4 85 1c 12 02 96 f0 41 c1
	>f098	81f098	65 ba 0f c9 de a6 b0 e1 39 17 17 12 4d f2 aa c2
	>f0a8	81f0a8	f1 3c 15 cd 50 01 92 a6 3e a1 ec 0b 13 a2 06 51
	>f0b8	81f0b8	a6 45 c0 2f ff d3 1c 24 df a6 14 3d d2 dd 0b 0f
	>f0c8	81f0c8	85 ee ae 10 41 f2 0f c2 2c 1f 4f a6 c3 2f 0f 16
	>f0d8	81f0d8	ed 3d c2 92 a6 cc 1f 0f b6 12 55 2f 11 96 d1 81
	>f0e8	81f0e8	5b 16 f0 a5 71 c4 a6 b2 db 2c a2 f1 dd 30 25 ae
	>f0f8	81f0f8	f3 b0 2f d1 11 e2 f3 fb aa 46 84 e0 1c 23 b0 02
	>f108	81f108	4b a6 a3 00 35 44 00 3f c2 e1 a6 e0 42 a4 1f 4d
	>f118	81f118	f3 ce 1d a6 cd d2 fd e2 f2 45 41 f6 a6 de 3d 01
	>f128	81f128	b6 2d 01 13 e1 a6 ff ee 0f ad 10 cf 1f f7 a6 16
	>f138	81f138	2f 40 f1 d3 dd 5f 11 a6 b6 11 00 ef d1 ec df f1
	>f148	81f148	a6 bf 01 f5 70 24 f2 fd 3f 96 87 e6 cd 52 07 ef
	>f158	81f158	ec b5 aa 81 40 d2 e0 2e 34 a5 cf ae 3c f6 84 01
	>f168	81f168	01 b4 10 e4 a6 f0 d0 0e ae f0 fc 01 a5 a6 32 53
	>f178	81f178	06 d0 0f fe 13 f0 ae e4 e2 f0 1d e7 ad 3e 22 aa
	>f188	81f188	97 ce 40 14 86 09 41 c3 96 83 06 ce 41 e6 f4 db
	>f198	81f198	5d a6 ee 84 ec 1f b3 e3 42 44 96 04 c6 d9 f4 f4
	>f1a8	81f1a8	df 23 00 aa 4c c7 c3 bf 5d 03 b3 fe b6 22 f4 11
	>f1b8	81f1b8	01 01 ef 01 00 aa f3 e0 23 87 a4 1a 06 94 a6 1e
	>f1c8	81f1c8	d1 a3 22 25 33 e2 3e a2 34 34 52 26 04 75 64 36
	>f1d8	81f1d8	a6 ce dd ff d2 cd f4 f3 53 96 52 07 09 e1 f6 93
	>f1e8	81f1e8	3b 33 a6 14 a2 3d d0 b0 c1 fe de aa 21 e4 0f d2
	>f1f8	81f1f8	00 d1 d7 fb a6 12 d2 f5 0e 12 c3 be fc 9e 36 ad
	>f208	81f208	2f 41 16 1d d7 c0 96 ca 30 c6 b3 ef 57 94 00 9a
	>f218	81f218	f1 94 0c 61 82 f6 b2 74 ae 96 ef 2d d6 c2 f2 e1
	>f228	81f228	d7 96 f3 0f 20 ec ea 82 ea fa ae 04 b7 00 0f 05
	>f238	81f238	82 f1 10 96 b7 cb 63 11 21 d4 be b8 ae 22 d2 a6
	>f248	81f248	ee 43 d6 85 2d 96 b2 a4 c2 5b e2 06 f1 12 aa ff
	>f258	81f258	1f d3 f3 ed 22 a6 e5 9a af 06 83 af 7b 27 8f 42
	>f268	81f268	96 32 f2 13 c3 ad 8b 2d 94 ae 94 f1 15 b3 01 fe
	>f278	81f278	f2 d1 96 60 df e5 11 f7 b4 0d dc a6 a3 c0 fd fe
	>f288	81f288	e3 22 23 43 a6 0f 1e d3 1f f0 f5 e0 11 a6 01 f2
	>f298	81f298	ae 0d e1 c0 ec 22 a6 21 35 21 11 ef f3 e1 d2 96
	>f2a8	81f2a8	20 07 b5 d2 29 a0 9f dc ae 3a 21 13 fe 35 84 ff
	>f2b8	81f2b8	d4 96 d3 fd e5 f3 f4 1d 27 8c a6 fc 1e d0 fc d2
	>f2c8	81f2c8	04 f3 52 a6 14 d1 e0 11 d1 f1 11 f4 96 c0 6c eb
	>f2d8	81f2d8	cd ce d2 8c 94 ae 1d 25 a4 0e f0 e4 f0 d2 96 21
	>f2e8	81f2e8	e5 3d 41 10 ac b0 82 96 ed aa d7 d4 76 67 f7 ae
	>f2f8	81f2f8	96 3f 1f c1 4a 62 f3 05 df ae e1 e1 01 f0 a6 2c
	>f308	81f308	16 b5 96 45 6e c0 01 1a 4f e6 e1 96 22 15 ce ce
	>f318	81f318	8e d2 d8 a4 aa b4 e2 2d 3e fe 2d 5f c4 96 0e 05
	>f328	81f328	e3 d6 20 ef 9f 9c a6 11 90 ee 2f 22 33 42 0f aa
	>f338	81f338	04 c1 10 d6 c3 ff 05 a3 ae ef 01 b6 fc 3c 4e 11
	>f348	81f348	2e 9e 72 c2 92 13 86 ef 12 02 ae d3 f2 e1 c4 cd
	>f358	81f358	7e e0 ff 9e 5e 22 14 d7 dd b7 c0 1f 96 e1 c5 01
	>f368	81f368	e3 32 2a 49 ad ae 10 fd 20 e4 d4 f2 03 ce 96 40
	>f378	81f378	d4 c2 df 20 10 02 7e 96 e3 d8 ed e2 8d cc e0 04
	>f388	81f388	9e 02 6c a7 85 fe 2f d3 3c 96 3d 35 2e 12 8d b0
	>f398	81f398	ed cc a6 d0 e0 11 17 22 10 1f 10 96 fd 2d 40 d2
	>f3a8	81f3a8	42 e5 fd ca 9a 5f f1 b3 d2 05 86 7a 49 96 13 0d
	>f3b8	81f3b8	6b 00 d3 00 d6 01 96 31 1a 92 bf ed a0 8d 5a 9e
	>f3c8	81f3c8	76 d5 fa 78 23 b4 d0 15 96 cd 7f 14 f6 bb cf c1
	>f3d8	81f3d8	cb 9e 3a 33 ee 70 7b 02 b2 e3 96 f0 de 6d d3 14
	>f3e8	81f3e8	e4 30 bd 9e e3 19 7b ef 6a 30 46 c4 96 41 11 00
	>f3f8	81f3f8	2c d6 d1 e2 3f 96 17 fe f8 0d ee f9 cd ef 96 c2
	>f408	81f408	74 76 21 4e 05 af 30 9e e3 d7 a1 7a 4a c4 1b 5e
	>f418	81f418	96 bd bd 0b f4 57 64 24 d3 96 2e e1 00 fe 5d 23
	>f428	81f428	33 0a 9e 31 c3 0d fe 30 c2 4f 55 9e 86 dc 41 cf
	>f438	81f438	20 38 70 d2 96 22 61 ce ea f0 dc ca 1c 96 a3 c7
	>f448	81f448	73 76 e1 6d 2b 32 9a 97 1c 3f 22 29 03 b1 6a 96
	>f458	81f458	fb 93 8d fc 46 37 7f 33 9e 0e c5 1a 5e 2f e3 31
	>f468	81f468	eb 96 1c cf d3 8c 0a eb d0 51 9a 7e df e6 ca 70
	>f478	81f478	e0 02 3a 96 f3 60 11 bf 92 18 0b cf ae ef 30 03
	>f488	81f488	00 0d 4f d2 0f aa 1f 11 ff 22 d5 a1 2a 7e 9e b4
	>f498	81f498	ec 5d c4 00 62 1d e5 96 5c 30 0f 0e 05 93 12 7e
	>f4a8	81f4a8	9a 5b c7 1b 3d 02 ed 4b 42 9e 42 fc 41 ee 03 c3
	>f4b8	81f4b8	b7 cf 9a 3d 7f d6 8d 7c 20 ef 4a 9a 3d 11 e4 7c
	>f4c8	81f4c8	b6 d0 c4 c6 96 ec 4e 10 b5 20 71 b0 cf ae 1c 20
	>f4d8	81f4d8	f0 f0 00 f7 d1 f2 96 33 0f 4e f1 f2 fb 42 e7 9e
	>f4e8	81f4e8	ea 2b 5f ee 12 c1 c5 93 9a 54 a4 d1 29 25 a0 20
	>f4f8	81f4f8	2e 96 d1 1f 62 4e b0 0e be d0 9e a2 0e c7 5d 3f
	>f508	81f508	31 95 ff 9e 1c 15 dc 6b 33 02 dd d7 9e b2 b4 ef
	>f518	81f518	e4 bc 61 34 96 9e 3a 20 f2 cf 7b f3 d2 f5 9e 01
	>f528	81f528	a1 f3 c0 e4 eb 6d 87 96 c4 41 65 52 21 5d e5 d1
	>f538	81f538	96 0f e1 f7 24 bf 0f dd fe 96 93 ab d8 32 05 73
	>f548	81f548	52 07 9e 81 20 e3 b6 86 22 0c f1 96 e0 85 ab 2d
	>f558	81f558	ca ad 3f 55 9e f5 85 1d d7 86 d2 fd 12 96 55 f2
	>f568	81f568	c3 cc 3a ed ff a8 aa 22 d4 e3 e0 e5 a3 e1 00 96
	>f578	81f578	11 df c6 27 de 5b d1 dd ae f1 2d d3 e3 f1 13 c2
	>f588	81f588	1e 96 31 f3 e1 f3 a0 02 7f 14 96 bf 0d ed b4 bb
	>f598	81f598	bc b3 d3 9a 59 05 c1 c4 b5 c5 fa 78 9e 77 82 3b
	>f5a8	81f5a8	f3 b5 a1 23 81 9e c4 0e 47 a4 d6 b3 c1 39 96 40
	>f5b8	81f5b8	e2 91 43 14 f0 d1 fc 9e e6 d0 ed f5 97 15 a5 00
	>f5c8	81f5c8	9e 0d 4b 23 b5 db 37 a6 e0 9e e0 e5 91 02 f0 87
	>f5d8	81f5d8	b0 15 aa f1 0e 4d f3 c2 0f 12 b2 96 11 23 14 cf
	>f5e8	81f5e8	4d a1 a3 fa 9e 04 90 7e 40 e7 a4 fe 10 96 d4 3c
	>f5f8	81f5f8	d1 e3 14 30 c3 fe aa f1 10 ef 3c 11 f5 b3 1e 9e
	>f608	81f608	03 d2 d0 14 bf e5 e2 15 96 e1 f0 0c dd 4b c0 8e
	>f618	81f618	9d 9e 5d 42 d5 ee 3f a6 1f ee 9e f6 a7 1d 1e 2e
	>f628	81f628	0b 34 a4 9e b0 28 45 b5 3d 32 b6 dd 96 f3 14 bf
	>f638	81f638	0c 42 31 2f 12 96 8f 0d 1c df 8b ed 23 16 96 32
	>f648	81f648	56 d2 f2 6b 0f df 43 96 13 e2 2b fd f0 c0 e9 be
	>f658	81f658	9e c5 10 23 b6 0b 3b 7e e1 96 fe d3 05 2d 42 ee
	>f668	81f668	df ef 9e f2 a0 f1 02 04 0d 7c 4b 9e e5 0f e3 b0
	>f678	81f678	4d 7c 02 f1 96 dd f0 b1 0b eb 9e fb 61 96 33 47
	>f688	81f688	10 13 20 2d 0d e5 96 20 22 11 b0 0b 00 de c8 9a
	>f698	81f698	7b 23 f3 d1 3f bf 79 6e 96 e1 ce 15 f1 23 2b 10
	>f6a8	81f6a8	a0 9e 1a 78 f4 a3 04 1e 3f 78 86 43 07 23 2b 80
	>f6b8	81f6b8	61 30 77 96 df 2a 0e e2 bd cb da 21 96 3e 67 14
	>f6c8	81f6c8	02 22 12 0b f1 9e 1f 03 28 5e e3 b3 2c 1b 96 f9
	>f6d8	81f6d8	dc 22 e5 45 4f 32 12 96 30 ed f3 1d 53 f3 ee 0c
	>f6e8	81f6e8	96 1d 1d eb cc 83 1c 62 45 96 21 4f 33 3e ec 31
	>f6f8	81f6f8	c5 11 96 5d 1e fc 1f d0 bd c8 00 96 e0 43 71 32
	>f708	81f708	11 42 3d b3 96 0d 4f 50 3f f0 b0 0e fc 96 0a 9d
	>f718	81f718	fe 10 35 33 41 04 9e e4 ad 7a 5c 33 d3 e0 fc 96
	>f728	81f728	0d 2e d0 d8 cd ff e3 43 ae 01 f0 00 4b 01 00 f1
	>f738	81f738	10 9e 2c 4c 1d 13 de 6a d1 e4 9e fe 25 f0 3b 69
	>f748	81f748	44 de f1 9e 0f 1f 6b 4f e1 ed 6d d6 96 ec bb de
	>f758	81f758	de 4f 61 55 e1 9a 5e df 3b 6b 32 1f 2e 0f 9e d5
	>f768	81f768	c0 3e 0c f0 3b 4f 31 9e 02 2b 2f 6c 0e 1f 00 11
	>f778	81f778	9a 11 e3 ce 5d 01 2e fc 3e 96 cf b2 30 55 3f 33
	>f788	81f788	42 01 96 ff e1 f2 12 5e f0 ed 1c 9e 7b c3 df 2d
	>f798	81f798	5f 11 5c f1 9e 13 ef 01 c2 0f 3f 06 cb 96 3d fe
	>f7a8	81f7a8	d2 0d db ea dc 3e 96 07 42 12 43 21 2f ff f1 96
	>f7b8	81f7b8	0f 70 01 ff ec 20 0b eb 9e 1e f6 b3 32 0c 12 2e
	>f7c8	81f7c8	10 96 01 fe 2d 14 12 0f 2c fe 9e 3f e0 d3 94 0e
	>f7d8	81f7d8	13 22 dd 9e 5f 03 e0 3b 12 c2 20 3a 96 20 ef e1
	>f7e8	81f7e8	e2 de 09 ce cc 96 01 41 f2 12 33 25 f3 2c 86 4d
	>f7f8	81f7f8	47 e4 e2 a0 d0 1e 0f 9e c0 1c 2f 34 cf 3e 04 d3
	>f808	81f808	96 51 42 f2 c3 12 01 0e 0d 9e 4f f1 2a 11 b2 e2
	>f818	81f818	30 e1 96 e1 2f 53 17 13 f0 01 21 8a 0e 3c 4e 13
	>f828	81f828	11 95 91 eb 96 d0 00 0e f1 f6 f4 53 60 86 f2 0f
	>f838	81f838	7e 12 df f1 97 01 96 0d fc 9e de 11 a3 c0 4e 9a
	>f848	81f848	52 d3 09 5d 04 d2 0f f4 9e cf 7c 03 b4 be f4 b7
	>f858	81f858	dd 9e 3d 13 fe 6f 4f d2 d1 02 9a d3 ef 6a 05 f1
	>f868	81f868	e2 0e c3 9a d2 3b 6b f0 4b 3f 43 c2 86 43 01 20
	>f878	81f878	3e b7 b1 c2 60 9a f7 9f 29 7e 10 0c 2f 11 96 d2
	>f888	81f888	74 74 20 3f 05 bf 3f 96 f1 d5 ff 7f 2d 9e fb 1e
	>f898	81f898	96 cd cd 0d f3 66 64 14 d3 9b 0b 14 e1 ff 78 60
	>f8a8	81f8a8	10 f9 00 00 00 00 00 00 00 00 00 c0 00 00 00 2f
	>f8b8	81f8b8	a0 13 12 ff c4 3d 31 e0 de 02 4e 57 10 c0 c2 35
	>f8c8	81f8c8	16 e0 f4 42 1c da c0 e0 d1 ef ff 10 24 20 5f c4
	>f8d8	81f8d8	32 c0 0f 1d e2 2d 51 95 c4 2d 11 05 ce 00 e7 dc
	>f8e8	81f8e8	00 b0 aa aa 7e 3c de 77 71 10 c4 00 11 f1 a2 d5
	>f8f8	81f8f8	f3 b2 d3 b0 22 14 70 5c 13 54 0d df b0 09 19 4e
	>f908	81f908	fb e1 16 e5 17 b0 f3 d4 60 df be fb fc 2e b0 d9
	>f918	81f918	4f 62 50 12 44 24 fc b0 ac e0 2f cb b1 d6 33 21
	>f928	81f928	b4 03 f3 fc fd f0 6c 1f 1e a0 db 14 46 4f 32 77
	>f938	81f938	73 ed b0 de b2 d1 fe cf 0f 30 22 b0 00 31 74 2e
	>f948	81f948	0b fe 00 ed b4 ff 17 f1 b3 c3 32 f1 ed b4 d0 40
	>f958	81f958	0c 2a 31 4d 5e fe a4 25 24 01 8d 21 d5 da d3 a4
	>f968	81f968	b5 06 01 e1 f0 7e 03 08 a4 2d 10 59 09 3f f5 70
	>f978	81f978	c1 a4 c2 54 ff d2 a0 22 f1 af a4 b3 30 32 09 5f
	>f988	81f988	45 0f cd a4 01 01 68 fc f1 4f 02 d4 a4 b5 25 c2
	>f998	81f998	df 01 ff 1f 0c a0 dc ec 0e ee 1f f5 46 52 a4 f1
	>f9a8	81f9a8	d5 c2 ef c1 00 4e 2b a0 dc 05 65 43 11 20 52 0c
	>f9b8	81f9b8	ac 3e 6e e2 b4 e2 05 b1 e0 94 05 e4 ae ee c2 c5
	>f9c8	81f9c8	58 10 a0 ed 01 24 25 22 34 21 4d 94 0c 4e 3f 2d
	>f9d8	81f9d8	e3 2f 47 be 94 30 f5 0f 08 0d a6 5a 01 9c b6 11
	>f9e8	81f9e8	d3 b2 00 33 81 1d 90 de bb e9 8a cd d4 15 54 94
	>f9f8	81f9f8	fe 50 1b 6c df 0b 22 ed 94 e6 10 05 1e 11 c3 5d
	>fa08	81fa08	d0 94 fe 1d 12 b0 fd 45 f3 1f 84 1f 12 33 8e 97
	>fa18	81fa18	fc 03 8f 84 a4 06 24 d5 2d 14 5d bc 84 3a 6d ee
	>fa28	81fa28	1d df 14 e2 e6 84 30 5f 24 bc 2d f3 80 0f 84 ef
	>fa38	81fa38	e0 50 e5 14 3f 17 de 84 08 21 bd f1 0f 97 2e 14
	>fa48	81fa48	84 d1 55 2d 51 90 e2 be ec 84 f0 5c 23 0c 33 40
	>fa58	81fa58	34 fc 84 13 d2 d8 ed 30 c4 21 c5 84 c5 20 12 02
	>fa68	81fa68	1f 2f da 1d 84 0e 0b 7d 40 e2 3f 32 f4 84 e1 f1
	>fa78	81fa78	1e ec b1 c1 f5 f1 84 d4 13 31 1c 30 1f 68 ef 8c
	>fa88	81fa88	e3 c1 4e d4 0f 50 a1 31 84 f2 f0 0c f0 b3 19 f0
	>fa98	81fa98	2f 84 3c 71 40 02 04 92 0f d2 80 fa db ca bb bb
	>faa8	81faa8	c6 24 67 8c e1 2b 4d 1c 4f 68 04 d2 8c e2 f6 c2
	>fab8	81fab8	a6 f2 09 31 fd 74 0f 07 8c b4 03 e5 59 7f 84 41
	>fac8	81fac8	5c fe 1f df 00 c3 c1 74 f7 b3 15 0e 77 22 cf df
	>fad8	81fad8	88 0e 04 ed 3d 7a 69 5f e2 74 03 47 a2 bd 2e af
	>fae8	81fae8	0b dd 84 f5 02 10 e3 01 41 fd 0f 74 3d e2 c9 cc
	>faf8	81faf8	55 30 f2 02 84 13 f3 ee f1 11 ee 2b f0 74 d3 32
	>fb08	81fb08	c3 14 4c 71 cd 7a 74 42 db 02 cc 97 d2 12 d4 74
	>fb18	81fb18	41 06 2f 93 e0 4f fa 28 74 1c 7f ee 03 27 22 1e
	>fb28	81fb28	ef 74 10 4d ed b1 e1 14 8f 03 88 00 1d 2f f1 f4
	>fb38	81fb38	eb 5e 1f 74 2f 1e 1d c5 33 e5 20 10 64 c2 41 88
	>fb48	81fb48	a5 81 51 ce eb 64 76 60 24 09 74 7b c9 8d 74 f3
	>fb58	81fb58	03 fb b3 23 31 f0 f2 74 13 70 aa de 32 fe e0 c0
	>fb68	81fb68	7c 25 cc 3d 23 1e 12 83 c4 64 2d f1 b9 5c 37 51
	>fb78	81fb78	d4 fe 78 32 0e de 2f 7b 0f 3d c7 7c f5 0f a2 03
	>fb88	81fb88	2b 6f bf 1e 7c 35 db 00 2f 25 d0 ff c6 7c 3e f1
	>fb98	81fb98	ec 14 1f e1 de 31 7c 1f 6b d2 3e 3f 1c 2d 2e 64
	>fba8	81fba8	27 1b 8f 82 f4 16 0b 03 64 77 20 fd 91 f2 7c b9
	>fbb8	81fbb8	ec 78 23 c2 fc 30 6e 0d fd 14 6c 22 fb 90 27 2d
	>fbc8	81fbc8	2e a3 05 68 50 e8 e4 1f 23 cd f2 f5 64 24 fe 4e
	>fbd8	81fbd8	a5 53 72 fe d0 6c 49 40 80 5e 43 c2 eb 41 68 27
	>fbe8	81fbe8	d8 f4 d6 fe 10 91 05 68 4f ee f0 22 1f 3c b3 5c
	>fbf8	81fbf8	6c 79 3b e1 e5 f3 de 4d 04 64 43 42 d0 02 31 00
	>fc08	81fc08	ca ed 6c f7 ec e6 c6 10 1d c5 de 64 72 0e f9 dd
	>fc18	81fc18	31 df ef d5 64 35 53 cd 11 40 10 dc df 64 03 2c
	>fc28	81fc28	ac 11 73 24 ff e1 6c 24 ad 00 12 f0 1f a3 f4 64
	>fc38	81fc38	63 30 1d 52 15 fd ee b0 68 11 fc d5 e4 1f 02 b0
	>fc48	81fc48	13 64 53 2c dd fd 20 2f d9 11 64 36 d0 01 f6 13
	>fc58	81fc58	4c de e0 60 1f f0 b9 ab ff 0f 1e 12 54 74 6d bf
	>fc68	81fc68	d0 ff e0 9d d1 64 05 0e 02 f2 22 4f ff e0 99 00
	>fc78	81fc78	00 0f 10 01 f0 f2 f0 08 8e 7e 99 7e a4 7e b5 7e
	>fc88	81fc88	ca 7e da 7e e5 7e fa 7e 01 91 7e fe 19 ba 28 28
	>fc98	81fc98	ff 95 7e 01 9c 7e fe 18 ba 28 28 ff a0 7e 01 a7
	>fca8	81fca8	7e fe 17 e5 08 f5 02 fe 17 ea 0a 0a ff b1 7e 01
	>fcb8	81fcb8	b8 7e fe 10 d1 08 f5 02 d8 08 f5 02 fe 10 dd 0a
	>fcc8	81fcc8	0a ff c6 7e 01 cd 7e fc 99 fe 16 ba 3c fc 00 14
	>fcd8	81fcd8	14 ff d6 7e 01 dd 7e fe 15 c6 28 28 ff e1 7e 01
	>fce8	81fce8	e8 7e fe 10 ea 0d f5 02 e5 0d f5 02 fe 10 ea 0f
	>fcf8	81fcf8	0f ff f6 7e 01 fd 7e fa 63 fe 10 d2 28 28 ff 03
	>fd08	81fd08	7f
189							.send

191							.section sBank82
192	>010000	828000	b0 00 53 00 17 00 e6 00			BackShadowChars	.binary "../back_shadow.bin"
	>010008	828008	0b 00 f0 00 d9 00 ab 00 00 b0 00 53 00 17 00 e6
	>010018	828018	00 0b 00 f0 00 d9 00 ab e6 00 f4 00 cb 00 a8 00
	>010028	828028	17 00 ef 00 0f 00 af 00 00 e6 00 f4 00 cb 00 a8
	>010038	828038	00 17 00 ef 00 0f 00 af 4b 00 88 00 17 00 ef 00
	>010048	828048	1d 00 d6 00 a8 00 e7 00 00 4b 00 88 00 17 00 ef
	>010058	828058	00 1d 00 d6 00 a8 00 e7 05 00 fa 00 f5 00 a4 00
	>010068	828068	48 00 17 00 ef 00 0f 00 00 05 00 fa 00 f5 00 a4
	>010078	828078	00 48 00 17 00 ef 00 0f 10 00 00 00 10 00 a0 00
	>010088	828088	01 00 a0 00 51 00 aa 00 00 10 00 00 00 10 00 a0
	>010098	828098	00 01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00
	>0100a8	8280a8	15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00 00
	>0100b8	8280b8	00 15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00
	>0100c8	8280c8	01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00 00
	>0100d8	8280d8	00 01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00
	>0100e8	8280e8	01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00 00
	>0100f8	8280f8	00 01 00 a0 00 51 00 aa 00 00 02 00 05 00 02 00
	>010108	828108	01 00 a0 00 51 00 aa 00 00 00 00 02 00 05 00 02
	>010118	828118	00 01 00 a0 00 51 00 aa d1 00 83 00 17 00 a6 00
	>010128	828128	03 00 00 00 01 00 0a 00 00 d1 00 83 00 17 00 a6
	>010138	828138	00 03 00 00 00 01 00 0a 01 00 08 00 05 00 0a 00
	>010148	828148	05 00 02 00 00 00 02 00 00 01 00 08 00 05 00 0a
	>010158	828158	00 05 00 02 00 00 00 02 00 00 02 00 05 00 02 00
	>010168	828168	01 00 00 00 01 00 0a 00 00 00 00 02 00 05 00 02
	>010178	828178	00 01 00 00 00 01 00 0a 00 00 55 00 00 00 40 00
	>010188	828188	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010198	828198	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>0101a8	8281a8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>0101b8	8281b8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>0101c8	8281c8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>0101d8	8281d8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>0101e8	8281e8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>0101f8	8281f8	00 02 00 00 00 aa 00 00 ff 30 ff c3 ff 0c ff 3f
	>010208	828208	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010218	828218	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>010228	828228	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>010238	828238	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>010248	828248	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>010258	828258	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>010268	828268	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>010278	828278	00 03 00 cf 00 33 00 fc ff 30 ff c3 ff 0c ff 3f
	>010288	828288	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010298	828298	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>0102a8	8282a8	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>0102b8	8282b8	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>0102c8	8282c8	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>0102d8	8282d8	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>0102e8	8282e8	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>0102f8	8282f8	00 03 00 cf 00 33 00 fc ff ff ff ff ff ff ff 3f
	>010308	828308	ff ff ff 33 ff cc ff 00 00 00 00 00 00 00 00 00
	>010318	828318	00 00 00 cc 00 33 00 ff ff fc ff ff ff fc ff f3
	>010328	828328	ff fc ff 30 ff cc ff 00 00 03 00 00 00 03 00 0c
	>010338	828338	00 03 00 cf 00 33 00 ff ff ff ff ff ff ff ff 33
	>010348	828348	ff cc ff 00 33 00 cc 00 00 00 00 00 00 00 00 cc
	>010358	828358	00 33 00 ff 00 33 00 cc ff fc ff ff ff fc ff 33
	>010368	828368	ff cc ff 00 33 00 cc 00 00 03 00 00 00 03 00 cc
	>010378	828378	00 33 00 ff 00 33 00 cc ff ff ff 33 ff cc ff 00
	>010388	828388	33 00 cc 00 00 00 00 00 00 00 00 cc 00 33 00 ff
	>010398	828398	00 33 00 cc 00 00 00 00 ff fc ff 33 ff cc ff 00
	>0103a8	8283a8	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>0103b8	8283b8	00 33 00 cc 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103c8	8283c8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103d8	8283d8	00 00 00 00 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103e8	8283e8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103f8	8283f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010408	828408	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010418	828418	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010428	828428	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010438	828438	00 00 00 00 00 00 00 00 ff 30 ff c3 ff 0c ff 3f
	>010448	828448	ff cf ff 3f ff ff ff 33 00 c0 00 00 00 00 00 00
	>010458	828458	00 00 00 00 00 00 00 cc ff 0c ff 33 ff ff ff ff
	>010468	828468	ff fc ff ff ff ff ff 33 00 03 00 00 00 00 00 00
	>010478	828478	00 03 00 00 00 00 00 cc ff 30 ff c3 ff 0c ff 3f
	>010488	828488	ff cf ff 33 ff cc ff 00 00 c0 00 00 00 00 00 00
	>010498	828498	00 00 00 cc 00 33 00 ff ff 0c ff 33 ff ff ff ff
	>0104a8	8284a8	ff fc ff 33 ff cc ff 00 00 03 00 00 00 00 00 00
	>0104b8	8284b8	00 03 00 cc 00 33 00 ff ff 30 ff c3 ff 0c ff 33
	>0104c8	8284c8	ff cc ff 00 33 00 cc 00 00 c0 00 00 00 00 00 cc
	>0104d8	8284d8	00 33 00 ff 00 33 00 cc ff 0c ff 33 ff ff ff 33
	>0104e8	8284e8	ff cc ff 00 33 00 cc 00 00 03 00 00 00 00 00 cc
	>0104f8	8284f8	00 33 00 ff 00 33 00 cc ff 30 ff 03 ff 0c ff 00
	>010508	828508	33 00 cc 00 00 00 00 00 00 c0 00 cc 00 33 00 ff
	>010518	828518	00 33 00 cc 00 00 00 00 ff 0c ff 33 ff cc ff 00
	>010528	828528	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>010538	828538	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>010548	828548	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010558	828558	00 00 00 00 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>010568	828568	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>010578	828578	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010588	828588	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010598	828598	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0105a8	8285a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0105b8	8285b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105c8	8285c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105d8	8285d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105e8	8285e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105f8	8285f8	00 00 00 00 00 00 00 00 33 00 cc 00 33 00 c3 00
	>010608	828608	30 00 cf 00 3f 00 3f 00 00 33 00 cc 03 30 00 c3
	>010618	828618	00 30 0c c3 3f 00 33 00 03 00 fc 00 fc 00 f0 00
	>010628	828628	c3 00 30 00 fc 00 fc 00 00 03 fc 00 30 cc c0 30
	>010638	828638	00 c3 00 30 f0 0c fc 00 3f 00 3f 00 3f 00 3f 00
	>010648	828648	0f 00 cf 00 33 00 cc 00 33 00 3f 00 3f 00 0f 30
	>010658	828658	03 0c 0c c3 00 33 00 cc fc 00 fc 00 fc 00 fc 00
	>010668	828668	f3 00 f0 00 c3 00 0c 00 f0 0c c0 3c f0 0c c0 3c
	>010678	828678	00 f3 c0 30 00 c3 00 0c 00 00 bf 00 3f 00 20 00
	>010688	828688	00 00 f9 00 d3 00 02 00 00 00 00 bf 00 3f 00 20
	>010698	828698	00 00 00 f9 00 d3 00 02 00 00 bf 00 3d 00 20 00
	>0106a8	8286a8	00 00 fb 00 f3 00 02 00 00 00 00 bf 00 3d 00 20
	>0106b8	8286b8	00 00 00 fb 00 f3 00 02 00 00 9f 00 3f 00 20 00
	>0106c8	8286c8	00 00 db 00 f3 00 02 00 00 00 00 9f 00 3f 00 20
	>0106d8	8286d8	00 00 00 db 00 f3 00 02 00 00 bd 00 3f 00 20 00
	>0106e8	8286e8	00 00 f9 00 f3 00 02 00 00 00 00 bd 00 3f 00 20
	>0106f8	8286f8	00 00 00 f9 00 f3 00 02 00 00 10 00 20 00 00 00
	>010708	828708	00 00 51 00 e2 00 00 00 00 00 00 10 00 20 00 00
	>010718	828718	00 00 00 51 00 e2 00 00 00 00 00 00 00 00 00 00
	>010728	828728	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010738	828738	00 00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00
	>010748	828748	00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00
	>010758	828758	00 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00
	>010768	828768	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010778	828778	00 00 00 51 00 a2 00 00 00 00 05 00 0a 00 00 00
	>010788	828788	00 00 51 00 a2 00 00 00 00 00 00 05 00 0a 00 00
	>010798	828798	00 00 00 51 00 a2 00 00 00 00 97 00 2b 00 00 00
	>0107a8	8287a8	00 00 01 00 02 00 00 00 00 00 00 97 00 2b 00 00
	>0107b8	8287b8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107c8	8287c8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107d8	8287d8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107e8	8287e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107f8	8287f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>010808	828808	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010818	828818	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010828	828828	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010838	828838	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010848	828848	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010858	828858	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010868	828868	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010878	828878	00 02 00 00 00 aa 00 00 0f 00 00 00 cc 00 3c 00
	>010888	828888	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010898	828898	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>0108a8	8288a8	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>0108b8	8288b8	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>0108c8	8288c8	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>0108d8	8288d8	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>0108e8	8288e8	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>0108f8	8288f8	c0 33 00 c3 00 0c 00 f0 0f 00 00 00 cc 00 3c 00
	>010908	828908	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010918	828918	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>010928	828928	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>010938	828938	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>010948	828948	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>010958	828958	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>010968	828968	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>010978	828978	c0 33 00 c3 00 0c 00 f0 00 00 00 00 00 00 c0 00
	>010988	828988	03 00 cc 00 33 00 ff 00 ff 00 ff 00 ff 00 3f c0
	>010998	828998	fc 03 33 cc 00 33 00 ff 03 00 0f 00 33 00 0f 00
	>0109a8	8289a8	33 00 cf 00 3f 00 ff 00 fc 03 f0 0f c0 33 f0 0f
	>0109b8	8289b8	c0 33 00 cf 00 3f 00 ff 00 00 00 00 00 00 cc 00
	>0109c8	8289c8	33 00 ff 00 33 00 cc 00 ff 00 ff 00 ff 00 33 cc
	>0109d8	8289d8	cc 33 00 ff 00 33 00 cc 03 00 0f 00 33 00 cf 00
	>0109e8	8289e8	33 00 ff 00 33 00 cc 00 fc 03 f0 0f c0 33 30 cf
	>0109f8	8289f8	c0 33 00 ff 00 33 00 cc 00 00 cc 00 33 00 ff 00
	>010a08	828a08	33 00 cc 00 00 00 00 00 ff 00 33 cc cc 33 00 ff
	>010a18	828a18	00 33 00 cc 00 00 00 00 03 00 cf 00 33 00 ff 00
	>010a28	828a28	33 00 cc 00 00 00 00 00 fc 03 30 cf c0 33 00 ff
	>010a38	828a38	00 33 00 cc 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a48	828a48	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a58	828a58	00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a68	828a68	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a78	828a78	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010a88	828a88	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010a98	828a98	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010aa8	828aa8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010ab8	828ab8	00 00 00 00 00 00 00 00 0f 00 00 00 cc 00 3c 00
	>010ac8	828ac8	3c 00 30 00 00 00 cc 00 00 0f 3f 00 33 c0 c3 00
	>010ad8	828ad8	c3 00 cf 00 ff 00 33 cc f0 00 0c 00 03 00 00 00
	>010ae8	828ae8	03 00 00 00 03 00 cc 00 00 f0 f0 0c fc 03 ff 00
	>010af8	828af8	fc 03 ff 00 fc 03 33 cc 0f 00 00 00 cc 00 3c 00
	>010b08	828b08	3c 00 fc 00 33 00 ff 00 00 0f 3f 00 33 c0 c3 00
	>010b18	828b18	c3 00 03 cc cc 33 00 ff f0 00 0c 00 03 00 00 00
	>010b28	828b28	03 00 cc 00 33 00 ff 00 00 f0 f0 0c fc 03 ff 00
	>010b38	828b38	fc 03 33 cc cc 33 00 ff 0f 00 00 00 cc 00 fc 00
	>010b48	828b48	3f 00 ff 00 33 00 cc 00 00 0f 3f 00 33 c0 03 cc
	>010b58	828b58	c0 33 00 ff 00 33 00 cc f0 00 0c 00 03 00 cc 00
	>010b68	828b68	33 00 ff 00 33 00 cc 00 00 f0 f0 0c fc 03 33 cc
	>010b78	828b78	cc 33 00 ff 00 33 00 cc 0f 00 cc 00 ff 00 ff 00
	>010b88	828b88	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 f3 00 ff
	>010b98	828b98	00 33 00 cc 00 00 00 00 f0 00 cc 00 33 00 ff 00
	>010ba8	828ba8	33 00 cc 00 00 00 00 00 00 f0 30 cc cc 33 00 ff
	>010bb8	828bb8	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>010bc8	828bc8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>010bd8	828bd8	00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc 00
	>010be8	828be8	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010bf8	828bf8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c08	828c08	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c18	828c18	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c28	828c28	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c38	828c38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c48	828c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c58	828c58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c68	828c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c78	828c78	00 00 00 00 00 00 00 00 30 00 c3 03 0f 03 cf 03
	>010c88	828c88	0f 0f cf 0f 0f 0f cf 03 00 30 03 c0 03 00 03 c0
	>010c98	828c98	0f 00 0f c0 0f 00 03 cc 03 00 c0 00 f3 c0 f0 c0
	>010ca8	828ca8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 c0 33 c0 30
	>010cb8	828cb8	c0 33 c0 30 c0 33 00 f0 0f 00 c3 00 30 00 c3 00
	>010cc8	828cc8	33 03 c3 00 33 03 cc 00 00 0f 00 c3 00 30 00 c3
	>010cd8	828cd8	03 30 00 c0 03 30 00 cc f3 00 cc 00 03 00 0c 00
	>010ce8	828ce8	c3 00 cc c0 c3 00 0c 00 00 f3 00 cc 00 03 00 0c
	>010cf8	828cf8	00 c3 c0 0c 00 c3 00 0c f2 00 f2 00 e2 00 c4 00
	>010d08	828d08	09 00 13 00 e7 00 0f 00 00 f2 00 f2 00 e2 00 c4
	>010d18	828d18	00 09 00 13 00 e7 00 0f 7f 00 7f 00 7f 00 2f 00
	>010d28	828d28	90 00 c8 00 a7 00 d0 00 00 7f 00 7f 00 7f 00 2f
	>010d38	828d38	00 90 00 c8 00 a7 00 d0 0f 00 e5 00 f2 00 e9 00
	>010d48	828d48	f4 00 f2 00 f2 00 f2 00 00 0f 00 e5 00 f2 00 e9
	>010d58	828d58	00 f4 00 f2 00 f2 00 f2 90 00 27 00 4f 00 9f 00
	>010d68	828d68	3f 00 7f 00 7f 00 7f 00 00 90 00 27 00 4f 00 9f
	>010d78	828d78	00 3f 00 7f 00 7f 00 7f a0 00 50 00 a0 00 40 00
	>010d88	828d88	08 00 11 00 e2 00 05 00 00 a0 00 50 00 a0 00 40
	>010d98	828d98	00 08 00 11 00 e2 00 05 00 00 00 00 00 00 00 00
	>010da8	828da8	80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00 00
	>010db8	828db8	00 80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00
	>010dc8	828dc8	08 00 01 00 02 00 05 00 00 00 00 00 00 00 00 00
	>010dd8	828dd8	00 08 00 01 00 02 00 05 00 00 00 00 00 00 00 00
	>010de8	828de8	08 00 11 00 a2 00 05 00 00 00 00 00 00 00 00 00
	>010df8	828df8	00 08 00 11 00 a2 00 05 02 00 00 00 02 00 04 00
	>010e08	828e08	08 00 11 00 a2 00 05 00 00 02 00 00 00 02 00 04
	>010e18	828e18	00 08 00 11 00 a2 00 05 b2 00 52 00 a2 00 44 00
	>010e28	828e28	08 00 01 00 02 00 05 00 00 b2 00 52 00 a2 00 44
	>010e38	828e38	00 08 00 01 00 02 00 05 0a 00 05 00 02 00 01 00
	>010e48	828e48	00 00 00 00 02 00 00 00 00 0a 00 05 00 02 00 01
	>010e58	828e58	00 00 00 00 00 02 00 00 02 00 00 00 02 00 04 00
	>010e68	828e68	08 00 01 00 02 00 05 00 00 02 00 00 00 02 00 04
	>010e78	828e78	00 08 00 01 00 02 00 05 00 00 55 00 00 00 40 00
	>010e88	828e88	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010e98	828e98	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010ea8	828ea8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010eb8	828eb8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010ec8	828ec8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010ed8	828ed8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010ee8	828ee8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010ef8	828ef8	00 02 00 00 00 aa 00 00 ff 00 ff 00 ff 00 ff 00
	>010f08	828f08	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f18	828f18	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f28	828f28	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f38	828f38	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f48	828f48	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f58	828f58	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f68	828f68	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f78	828f78	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f88	828f88	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f98	828f98	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010fa8	828fa8	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010fb8	828fb8	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010fc8	828fc8	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010fd8	828fd8	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>010fe8	828fe8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>010ff8	828ff8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>011008	829008	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>011018	829018	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>011028	829028	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>011038	829038	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011048	829048	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011058	829058	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011068	829068	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011078	829078	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011088	829088	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011098	829098	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>0110a8	8290a8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0110b8	8290b8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110c8	8290c8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110d8	8290d8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110e8	8290e8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110f8	8290f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011108	829108	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011118	829118	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011128	829128	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011138	829138	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>011148	829148	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011158	829158	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>011168	829168	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>011178	829178	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>011188	829188	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011198	829198	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>0111a8	8291a8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>0111b8	8291b8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>0111c8	8291c8	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>0111d8	8291d8	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>0111e8	8291e8	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>0111f8	8291f8	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011208	829208	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011218	829218	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011228	829228	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011238	829238	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011248	829248	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011258	829258	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011268	829268	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011278	829278	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011288	829288	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011298	829298	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0112a8	8292a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0112b8	8292b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112c8	8292c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112d8	8292d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112e8	8292e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112f8	8292f8	00 00 00 00 00 00 00 00 33 00 cc 00 30 00 c3 00
	>011308	829308	33 00 c3 00 33 00 cc 00 00 33 00 cc 00 30 03 c0
	>011318	829318	03 30 00 c3 00 33 00 cc 33 00 00 00 fc 00 f0 00
	>011328	829328	f3 00 cc 00 c3 00 0c 00 00 33 00 00 f0 0c 30 c0
	>011338	829338	c0 33 c0 0c 00 c3 00 0c 00 00 03 30 c0 3c 00 fc
	>011348	829348	0c f0 30 00 03 00 cc 00 00 00 00 03 00 00 00 00
	>011358	829358	00 0c 00 30 00 03 00 cc 33 00 0c 00 03 30 c0 3c
	>011368	829368	00 fc 0c f0 33 00 cc 00 00 33 00 0c 00 03 00 00
	>011378	829378	00 00 00 0c 00 33 00 cc e0 00 c3 00 8f 00 1c 00
	>011388	829388	30 00 33 00 67 00 6f 00 00 e0 00 c3 00 8f 00 1c
	>011398	829398	00 30 00 33 00 67 00 6f 1f 00 fd 00 f3 00 0f 00
	>0113a8	8293a8	ff 00 ff 00 f7 00 fe 00 00 1f 00 fd 00 f3 00 0f
	>0113b8	8293b8	00 ff 00 ff 00 f7 00 fe 7f 00 ef 00 ff 00 ff 00
	>0113c8	8293c8	f0 00 cf 00 bf 00 f8 00 00 7f 00 ef 00 ff 00 ff
	>0113d8	8293d8	00 f0 00 cf 00 bf 00 f8 f6 00 e6 00 cc 00 0c 00
	>0113e8	8293e8	38 00 f1 00 c3 00 07 00 00 f6 00 e6 00 cc 00 0c
	>0113f8	8293f8	00 38 00 f1 00 c3 00 07 a0 00 40 00 80 00 00 00
	>011408	829408	10 00 22 00 45 00 2a 00 00 a0 00 40 00 80 00 00
	>011418	829418	00 10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00
	>011428	829428	55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00 00
	>011438	829438	00 55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00
	>011448	829448	10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00 00
	>011458	829458	00 10 00 22 00 45 00 2a 00 00 02 00 05 00 08 00
	>011468	829468	10 00 22 00 45 00 2a 00 00 00 00 02 00 05 00 08
	>011478	829478	00 10 00 22 00 45 00 2a 40 00 82 00 05 00 08 00
	>011488	829488	00 00 02 00 05 00 0a 00 00 40 00 82 00 05 00 08
	>011498	829498	00 00 00 02 00 05 00 0a 00 00 02 00 05 00 08 00
	>0114a8	8294a8	00 00 02 00 05 00 0a 00 00 00 00 02 00 05 00 08
	>0114b8	8294b8	00 00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00
	>0114c8	8294c8	00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00 00
	>0114d8	8294d8	00 00 00 02 00 05 00 0a 00 00 05 00 0a 00 00 00
	>0114e8	8294e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0114f8	8294f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>011508	829508	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>011518	829518	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>011528	829528	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>011538	829538	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>011548	829548	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>011558	829558	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>011568	829568	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>011578	829578	00 02 00 00 00 aa 00 00 ff 0f ff c0 ff 00 ff fc
	>011588	829588	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011598	829598	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>0115a8	8295a8	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>0115b8	8295b8	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>0115c8	8295c8	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>0115d8	8295d8	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>0115e8	8295e8	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>0115f8	8295f8	00 00 00 3f 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>011608	829608	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011618	829618	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>011628	829628	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>011638	829638	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>011648	829648	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>011658	829658	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>011668	829668	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>011678	829678	00 00 00 3f 00 00 00 00 0f 00 ff 3f ff 00 fc 00
	>011688	829688	00 00 cc 00 33 00 ff 00 00 0f 3f c0 00 ff 00 fc
	>011698	829698	00 00 00 cc 00 33 00 ff f0 00 ff c0 00 00 03 00
	>0116a8	8296a8	00 00 ff 00 33 00 ff 00 00 f0 c0 3f 00 00 00 03
	>0116b8	8296b8	00 00 00 ff 00 33 00 ff 0f 00 ff 3f ff 00 fc 00
	>0116c8	8296c8	33 00 ff 00 33 00 cc 00 00 0f 3f c0 00 ff 00 fc
	>0116d8	8296d8	00 33 00 ff 00 33 00 cc f0 00 ff c0 00 00 cf 00
	>0116e8	8296e8	33 00 ff 00 33 00 cc 00 00 f0 c0 3f 00 00 00 cf
	>0116f8	8296f8	00 33 00 ff 00 33 00 cc 0f 00 ff 33 ff 00 ff 00
	>011708	829708	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 ff 00 ff
	>011718	829718	00 33 00 cc 00 00 00 00 f0 00 ff 00 33 00 ff 00
	>011728	829728	33 00 cc 00 00 00 00 00 00 f0 00 ff 00 33 00 ff
	>011738	829738	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011748	829748	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011758	829758	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011768	829768	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011778	829778	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011788	829788	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011798	829798	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0117a8	8297a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0117b8	8297b8	00 00 00 00 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>0117c8	8297c8	ff 0f ff 00 ff 00 ff 00 0f f0 c0 00 00 00 fc 03
	>0117d8	8297d8	0f 00 00 ff 00 ff 00 ff ff f0 ff 3f ff ff ff 03
	>0117e8	8297e8	ff f0 ff 3f ff ff ff 30 f0 0f 3f 00 ff 00 03 fc
	>0117f8	8297f8	f0 00 3f c0 ff 00 30 cf ff 0f ff c0 ff 00 ff 30
	>011808	829808	ff 0c ff 00 33 00 cc 00 0f f0 c0 00 00 00 30 cf
	>011818	829818	0c 33 00 ff 00 33 00 cc ff f0 ff 3f ff ff ff 03
	>011828	829828	ff f0 ff 33 ff cc ff 00 f0 0f 3f 00 ff 00 03 fc
	>011838	829838	f0 00 33 cc cc 33 00 ff ff 0f ff 00 ff 00 ff 00
	>011848	829848	33 00 cc 00 00 00 00 00 0f f0 00 cc 00 33 00 ff
	>011858	829858	00 33 00 cc 00 00 00 00 ff f0 ff 33 ff cc ff 00
	>011868	829868	33 00 cc 00 00 00 00 00 f0 0f 33 cc cc 33 00 ff
	>011878	829878	00 33 00 cc 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>011888	829888	00 00 00 00 00 00 00 00 0c f3 00 ff 00 33 00 cc
	>011898	829898	00 00 00 00 00 00 00 00 ff c0 ff 00 33 00 cc 00
	>0118a8	8298a8	00 00 00 00 00 00 00 00 c0 3f 00 ff 00 33 00 cc
	>0118b8	8298b8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118c8	8298c8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118d8	8298d8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118e8	8298e8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118f8	8298f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011908	829908	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011918	829918	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011928	829928	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011938	829938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011948	829948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011958	829958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011968	829968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011978	829978	00 00 00 00 00 00 00 00 33 00 cc 00 33 03 cf 0c
	>011988	829988	0f 0c 3f 3f 3f 3f 3f 0f 00 33 00 cc 00 30 00 c0
	>011998	829998	00 00 00 00 00 00 00 30 33 00 0c 00 c3 c0 f0 f0
	>0119a8	8299a8	f3 f0 fc fc fc f0 f0 c0 00 33 00 0c 00 03 00 00
	>0119b8	8299b8	00 03 00 00 00 0c 00 30 3f 00 3f 00 0c 00 c0 00
	>0119c8	8299c8	00 00 c0 00 30 00 cc 00 00 3f 00 3f 00 0c 00 c0
	>0119d8	8299d8	00 00 03 c0 00 30 00 cc fc 00 f0 00 c0 00 00 00
	>0119e8	8299e8	03 00 0c 00 33 00 cc 00 00 fc 00 f0 00 c0 00 00
	>0119f8	8299f8	30 03 c0 0c 00 33 00 cc
193	>011a00	829a00	ff 00 ff cf ff 03 ff cf			FixedSectionChars	.binary "../fixed_section_chars.bin"
	>011a08	829a08	ff 03 ff cf ff 03 ff 30 00 00 00 00 00 00 00 00
	>011a18	829a18	00 00 00 00 00 00 00 cf ff f3 c0 00 f3 00 c0 00
	>011a28	829a28	f3 00 c0 00 f3 00 00 00 00 0c 00 c0 00 f3 00 c0
	>011a38	829a38	00 f3 00 c0 00 f3 00 00 00 00 3f 0c 3f 33 3f 33
	>011a48	829a48	3f 33 3f 33 3f 33 3f 0c 00 00 00 33 00 00 00 00
	>011a58	829a58	00 00 00 00 00 00 00 33 00 00 00 00 cc 00 cc 00
	>011a68	829a68	cc 00 cc 00 cc 00 00 00 00 00 00 00 00 cc 00 cc
	>011a78	829a78	00 cc 00 cc 00 cc 00 00 0c 00 c0 00 30 00 c0 00
	>011a88	829a88	0c 00 0c 00 c0 00 00 00 00 0c 00 c0 03 00 0f c0
	>011a98	829a98	03 00 33 00 3f 00 3f 00 03 00 c0 00 03 00 30 00
	>011aa8	829aa8	03 00 30 00 cc 00 30 00 00 03 00 00 c0 03 c0 30
	>011ab8	829ab8	f0 00 c0 30 30 cc c0 30 0c 00 33 00 3f 00 c3 00
	>011ac8	829ac8	0c 00 30 00 03 00 c0 00 33 0c 0c 33 00 3f 00 03
	>011ad8	829ad8	00 0c 00 30 00 00 00 c0 c0 00 f3 00 c0 00 00 00
	>011ae8	829ae8	0c 00 3c 00 03 00 0c 00 00 c0 00 f0 00 c0 00 00
	>011af8	829af8	00 0c 00 30 00 03 00 0c 30 00 c3 00 33 00 c3 03
	>011b08	829b08	33 00 c3 03 33 00 cf 03 00 30 00 c0 00 30 03 c0
	>011b18	829b18	00 30 03 c0 00 30 03 c0 33 00 cc c0 f3 f0 f0 c0
	>011b28	829b28	f3 f0 f0 c0 c3 c0 f0 c0 00 33 c0 0c f0 03 c0 30
	>011b38	829b38	f0 03 c0 30 c0 03 c0 00 3f 0c 3c 30 30 30 30 30
	>011b48	829b48	3c 30 3f 0c 0f 03 c0 00 0c 03 30 0c 30 00 30 00
	>011b58	829b58	30 00 0c 30 03 0c 00 c0 fc 30 3c 0c 0c 0c cc 0c
	>011b68	829b68	3c 0c fc 30 f3 c0 0c 00 30 c0 0c 30 0c 00 0c c0
	>011b78	829b78	0c 00 30 0c c0 33 00 0c 00 03 c0 0f 00 0f 0c 33
	>011b88	829b88	00 3f 0c 33 00 3f 00 3f 00 00 00 c0 00 00 00 0c
	>011b98	829b98	00 00 00 0c 00 00 00 00 00 c0 c0 30 03 f0 c0 3c
	>011ba8	829ba8	00 fc 00 fc 0c f0 00 fc 00 00 00 c0 00 03 00 c0
	>011bb8	829bb8	00 00 00 00 00 0c 00 00 0c 33 00 33 00 3f 0c 33
	>011bc8	829bc8	00 3f 0c 33 00 33 0c 33 00 00 00 00 00 00 00 0c
	>011bd8	829bd8	00 00 00 0c 00 00 00 0c 00 fc cc 30 00 fc 0c f0
	>011be8	829be8	c0 30 0c f0 c0 30 00 30 00 00 00 cc 00 00 00 0c
	>011bf8	829bf8	00 c0 00 0c 00 c0 00 00 30 00 c3 00 30 00 c3 03
	>011c08	829c08	0f 0c cf 03 03 00 30 00 00 30 00 c0 00 00 03 c0
	>011c18	829c18	0c 00 03 0c 00 03 00 00 33 00 00 00 0c 00 c0 c0
	>011c28	829c28	f3 f0 f0 c0 c3 00 0c 00 00 33 00 00 00 00 c0 00
	>011c38	829c38	f0 00 c0 30 00 c3 00 00 00 00 c0 00 33 00 c3 00
	>011c48	829c48	0f 00 c3 00 33 00 cc 00 00 00 00 c0 00 33 03 c0
	>011c58	829c58	0f 00 03 c0 03 30 00 cc c3 00 0c 00 03 00 cc 00
	>011c68	829c68	c3 00 f0 00 c3 00 0c 00 00 03 00 0c 00 03 00 cc
	>011c78	829c78	00 c3 30 c0 00 c3 00 0c 30 00 03 00 3f 00 3f 00
	>011c88	829c88	3f 00 3f 00 3f 00 3f 00 00 30 03 00 33 00 33 00
	>011c98	829c98	33 00 3f 00 33 00 3f 00 30 00 c0 00 f0 00 fc 00
	>011ca8	829ca8	f0 00 fc 00 f0 00 fc 00 00 30 00 c0 00 f0 00 fc
	>011cb8	829cb8	00 f0 00 fc 00 f0 00 fc 3f 00 cf 00 0f 00 cf 00
	>011cc8	829cc8	0f 00 c3 00 33 00 cc 00 00 3f 00 cf 0c 03 00 cf
	>011cd8	829cd8	00 0f 00 c3 00 33 00 cc f0 00 c0 00 f3 00 c0 00
	>011ce8	829ce8	f3 00 cc 00 c3 00 0c 00 f0 00 c0 00 f0 03 c0 00
	>011cf8	829cf8	f0 03 c0 0c 00 c3 00 0c c0 00 3f 33 3f 0c c0 00
	>011d08	829d08	3f 33 3f 0c c0 00 3f 33 00 c0 00 00 00 33 00 c0
	>011d18	829d18	00 00 00 33 00 c0 00 00 03 00 00 00 00 00 f3 00
	>011d28	829d28	00 00 30 00 c3 00 00 00 00 03 cc 00 00 00 00 f3
	>011d38	829d38	cc 00 00 30 00 c3 cc 00 3f 0c c0 00 3f 33 3f 0c
	>011d48	829d48	c0 00 3f 33 3f 0c c0 00 00 33 00 c0 00 00 00 33
	>011d58	829d58	00 c0 00 00 00 33 00 c0 00 00 f3 00 00 00 00 00
	>011d68	829d68	f3 00 00 00 00 00 03 00 00 00 00 f3 cc 00 00 00
	>011d78	829d78	00 f3 cc 00 00 00 00 03 30 00 c3 00 30 00 c3 03
	>011d88	829d88	33 03 c3 03 33 03 cf 0f 00 30 00 c0 00 30 00 c0
	>011d98	829d98	00 30 00 c0 00 30 00 c0 33 00 cc c0 33 00 cc c0
	>011da8	829da8	c3 00 cc c0 c3 00 f0 c0 00 33 00 0c 00 33 00 0c
	>011db8	829db8	00 c3 00 0c 00 c3 00 30 0f 03 3f 33 3f 3f 3f 0f
	>011dc8	829dc8	3f 3f 3f 0c 0f 00 c0 00 00 00 00 00 00 00 00 30
	>011dd8	829dd8	00 00 00 33 00 0f 00 c0 f3 f0 fc c0 fc f0 fc c0
	>011de8	829de8	fc 30 fc c0 f3 00 0c 00 00 03 00 3c 00 0c 00 3c
	>011df8	829df8	00 cc 00 3c 00 f3 00 0c 30 00 c0 03 30 03 c3 0c
	>011e08	829e08	03 0c c0 0f 00 3f 30 0f 00 30 00 c0 00 30 00 c0
	>011e18	829e18	00 00 00 c0 00 00 00 30 33 00 0c c0 03 c0 30 c0
	>011e28	829e28	03 f0 30 c0 0c f0 30 c0 00 33 00 0c 00 03 00 30
	>011e38	829e38	00 03 00 30 00 0c 00 30 3f 00 3f 00 0c 00 33 00
	>011e48	829e48	00 00 c0 00 00 00 c0 00 00 3f 00 3f 00 0c 00 33
	>011e58	829e58	00 00 00 c0 00 00 00 c0 fc 00 f0 00 c0 00 0c 00
	>011e68	829e68	00 0c 0c 30 f3 00 0c 00 00 fc 00 f0 00 c0 00 0c
	>011e78	829e78	00 00 00 0c 00 f3 00 0c 30 00 c3 03 0f 03 cf 03
	>011e88	829e88	0f 0f cf 0f 0f 0f cf 03 00 30 00 c0 00 00 00 c0
	>011e98	829e98	00 00 00 c0 00 00 00 cc 03 00 c0 00 f3 c0 f0 c0
	>011ea8	829ea8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 00 33 00 30
	>011eb8	829eb8	00 33 00 30 00 33 00 f0
194	>011ec0	829ec0	00 00 3c 00 66 00 6e 00			Font4BPP				.binary "../font4bpp.bin"
	>011ec8	829ec8	60 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ed8	829ed8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 7e 00
	>011ee8	829ee8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ef8	829ef8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>011f08	829f08	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f18	829f18	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011f28	829f28	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f38	829f38	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 66 00
	>011f48	829f48	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f58	829f58	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f68	829f68	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f78	829f78	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f88	829f88	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f98	829f98	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011fa8	829fa8	66 00 3e 00 06 00 00 00 00 00 00 00 00 00 00 00
	>011fb8	829fb8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7e 00
	>011fc8	829fc8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011fd8	829fd8	00 00 00 00 00 00 00 00 00 00 7e 00 18 00 18 00
	>011fe8	829fe8	18 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ff8	829ff8	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 06 00
	>012008	82a008	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012018	82a018	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7c 00
	>012028	82a028	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012038	82a038	00 00 00 00 00 00 00 00 00 00 60 00 60 00 60 00
	>012048	82a048	66 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012058	82a058	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 66 00
	>012068	82a068	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012078	82a078	00 00 00 00 00 00 00 00 00 00 66 00 76 00 7e 00
	>012088	82a088	6e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012098	82a098	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120a8	82a0a8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120b8	82a0b8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>0120c8	82a0c8	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120d8	82a0d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120e8	82a0e8	6e 00 3c 00 06 00 00 00 00 00 00 00 00 00 00 00
	>0120f8	82a0f8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>012108	82a108	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012118	82a118	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 3c 00
	>012128	82a128	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012138	82a138	00 00 00 00 00 00 00 00 00 00 7e 00 5a 00 18 00
	>012148	82a148	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012158	82a158	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012168	82a168	66 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012178	82a178	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012188	82a188	3c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012198	82a198	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>0121a8	82a1a8	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121b8	82a1b8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3c 00
	>0121c8	82a1c8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121d8	82a1d8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3e 00
	>0121e8	82a1e8	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121f8	82a1f8	00 00 00 00 00 00 00 00 00 00 7e 00 0c 00 18 00
	>012208	82a208	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012218	82a218	00 00 00 00 00 00 00 00 00 00 3c 00 30 00 30 00
	>012228	82a228	30 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012238	82a238	00 00 00 00 00 00 00 00 00 00 1c 00 32 00 78 00
	>012248	82a248	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012258	82a258	00 00 00 00 00 00 00 00 00 00 3c 00 0c 00 0c 00
	>012268	82a268	0c 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012278	82a278	00 00 00 00 00 00 00 00 00 00 18 00 3c 00 7e 00
	>012288	82a288	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012298	82a298	00 00 00 00 00 00 00 00 00 00 08 00 0c 00 7e 00
	>0122a8	82a2a8	0c 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122b8	82a2b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122c8	82a2c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122d8	82a2d8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 18 00
	>0122e8	82a2e8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122f8	82a2f8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 00 00
	>012308	82a308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012318	82a318	00 00 00 00 00 00 00 00 00 00 24 00 7e 00 24 00
	>012328	82a328	7e 00 24 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012338	82a338	00 00 00 00 00 00 00 00 00 00 28 00 7c 00 7c 00
	>012348	82a348	38 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012358	82a358	00 00 00 00 00 00 00 00 00 00 66 00 6c 00 18 00
	>012368	82a368	36 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012378	82a378	00 00 00 00 00 00 00 00 00 00 38 00 28 00 7e 00
	>012388	82a388	6c 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012398	82a398	00 00 00 00 00 00 00 00 00 00 18 00 18 00 30 00
	>0123a8	82a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123b8	82a3b8	00 00 00 00 00 00 00 00 00 00 18 00 30 00 30 00
	>0123c8	82a3c8	30 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123d8	82a3d8	00 00 00 00 00 00 00 00 00 00 18 00 0c 00 0c 00
	>0123e8	82a3e8	0c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123f8	82a3f8	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 18 00
	>012408	82a408	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012418	82a418	00 00 00 00 00 00 00 00 00 00 18 00 18 00 7e 00
	>012428	82a428	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012438	82a438	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012448	82a448	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012458	82a458	00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e 00
	>012468	82a468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012478	82a478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012488	82a488	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012498	82a498	00 00 00 00 00 00 00 00 00 00 06 00 0c 00 18 00
	>0124a8	82a4a8	30 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124b8	82a4b8	00 00 00 00 00 00 00 00 00 00 3c 00 6e 00 66 00
	>0124c8	82a4c8	76 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124d8	82a4d8	00 00 00 00 00 00 00 00 00 00 18 00 38 00 18 00
	>0124e8	82a4e8	18 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124f8	82a4f8	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 3c 00
	>012508	82a508	60 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012518	82a518	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 0c 00
	>012528	82a528	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012538	82a538	00 00 00 00 00 00 00 00 00 00 6c 00 6c 00 7e 00
	>012548	82a548	0c 00 0c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012558	82a558	00 00 00 00 00 00 00 00 00 00 7e 00 60 00 7c 00
	>012568	82a568	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012578	82a578	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 7c 00
	>012588	82a588	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012598	82a598	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 0c 00
	>0125a8	82a5a8	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125b8	82a5b8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3c 00
	>0125c8	82a5c8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125d8	82a5d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3e 00
	>0125e8	82a5e8	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125f8	82a5f8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012608	82a608	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012618	82a618	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012628	82a628	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012638	82a638	00 00 00 00 00 00 00 00 00 00 1c 00 30 00 60 00
	>012648	82a648	30 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012658	82a658	00 00 00 00 00 00 00 00 00 00 00 00 7e 00 00 00
	>012668	82a668	7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012678	82a678	00 00 00 00 00 00 00 00 00 00 38 00 0c 00 06 00
	>012688	82a688	0c 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012698	82a698	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 1c 00
	>0126a8	82a6a8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0126b8	82a6b8	00 00 00 00 00 00 00 00
195	>0126c0	82a6c0	ff 00 ff 00 ff 00 ff 00			TopFixedChars		.binary "../top_fixed_chars.bin"
	>0126c8	82a6c8	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00
	>0126d8	82a6d8	ff 00 ff 00 ff 00 ff 00 03 00 cc 00 0c 03 30 0f
	>0126e8	82a6e8	30 03 30 0f 30 03 30 0f 00 03 00 cc 00 0c 00 30
	>0126f8	82a6f8	00 30 00 30 00 30 00 30 00 00 00 f0 03 f0 c0 3c
	>012708	82a708	00 fc c0 3c 0c 30 c0 3c 00 00 00 00 00 03 00 c0
	>012718	82a718	00 00 00 c0 00 0c 00 c0 33 00 30 0c 30 03 3c 03
	>012728	82a728	30 03 3c 03 30 03 00 03 00 30 00 30 00 30 00 3c
	>012738	82a738	00 30 00 3c 00 30 00 00 00 fc cc 30 00 3c cc 30
	>012748	82a748	00 30 0c 30 00 30 00 30 00 00 00 cc 00 00 00 cc
	>012758	82a758	00 00 00 0c 00 00 00 00 03 00 cf 00 0c 03 33 0c
	>012768	82a768	3c 03 33 0c 30 0f 33 0c 00 03 00 cf 00 0c 00 33
	>012778	82a778	00 3c 00 30 00 30 00 30 c0 00 f0 00 c3 00 cc 30
	>012788	82a788	30 0c cc 30 30 0c cc 30 00 c0 00 f0 00 c3 00 cc
	>012798	82a798	00 30 00 cc 00 30 00 cc 33 0c 33 0c 30 0f 33 0c
	>0127a8	82a7a8	3c 03 33 0c 3c 03 0f 00 00 30 00 30 00 30 00 30
	>0127b8	82a7b8	00 3c 00 33 00 3c 00 0f c0 3c c0 3c 00 3c cc 30
	>0127c8	82a7c8	30 0c cc 30 30 0c cc 30 00 00 00 c0 00 00 00 cc
	>0127d8	82a7d8	00 30 00 cc 00 30 00 cc c0 00 f0 00 33 c0 cc 30
	>0127e8	82a7e8	3c c0 cc 30 0c f0 cc 30 00 c0 00 f0 00 33 00 cc
	>0127f8	82a7f8	00 3c 00 0c 00 0c 00 0c cc 30 cc 30 0c f0 cc 30
	>012808	82a808	3c c0 cc 30 3c c0 f0 00 00 00 00 0c 00 0c 00 0c
	>012818	82a818	00 3c 00 cc 00 3c 00 f0 cc 30 cc 30 0c f0 cc 30
	>012828	82a828	3c c0 cc 30 3c c0 f0 00 00 0c 00 0c 00 0c 00 0c
	>012838	82a838	00 3c 00 cc 00 3c 00 f0 ff 00 dd 00 eb 00 f7 00
	>012848	82a848	eb 00 dd 00 ff 00 ff 00 00 ff 00 dd 00 eb 00 f7
	>012858	82a858	00 eb 00 dd 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012868	82a868	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012878	82a878	00 ff 00 ff 00 ff 00 ff ff cc ff 33 ff c0 ff 3f
	>012888	82a888	ff c0 ff 30 ff c0 ff 30 cc 33 33 cc c0 00 3f c0
	>012898	82a898	c0 0f 30 cf c0 0f 30 cf ff cc ff 33 ff 00 ff ff
	>0128a8	82a8a8	ff 00 ff 00 ff 00 ff 00 cc 33 33 cc 00 00 ff 00
	>0128b8	82a8b8	00 ff 00 ff 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>0128c8	82a8c8	ff c0 ff 30 ff c0 ff 30 c0 0f 30 cf c0 0f 30 cf
	>0128d8	82a8d8	c0 0f 30 cf c0 0f 30 cf ff cc fc 30 ff 00 fc f0
	>0128e8	82a8e8	f3 00 f0 00 f3 00 f0 00 cc 33 30 cc 00 03 f0 0c
	>0128f8	82a8f8	00 f3 00 f0 00 f3 00 f0 f3 00 f0 00 f3 00 f0 00
	>012908	82a908	f3 00 f0 00 f3 00 f0 00 00 f3 00 f0 00 f3 00 f0
	>012918	82a918	00 f3 00 f0 00 f3 00 f0 ff 00 ff 00 ff 00 ff 00
	>012928	82a928	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e0 00 80
	>012938	82a938	00 80 00 00 00 06 00 0f ff 00 ff 00 ff 00 ff 00
	>012948	82a948	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 10
	>012958	82a958	00 10 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>012968	82a968	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e7 00 c3
	>012978	82a978	00 c3 00 c3 00 c3 00 c3 ff 00 ff 00 ff 00 ff 00
	>012988	82a988	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 9c 00 08
	>012998	82a998	00 08 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>0129a8	82a9a8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 0e 00 04
	>0129b8	82a9b8	00 02 00 c2 00 c2 00 02 ff 00 ff 00 ff 00 ff 00
	>0129c8	82a9c8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 30
	>0129d8	82a9d8	00 30 00 20 00 01 00 03 ff f0 ff f9 ff ff ff 7f
	>0129e8	82a9e8	ff 7f ff 1f ff 00 ff 00 00 0f 00 06 00 00 00 80
	>0129f8	82a9f8	00 80 00 e0 00 ff 00 ff ff f7 ff c7 ff b7 ff 7b
	>012a08	82aa08	ff 7b ff b3 ff 00 ff 00 00 08 00 38 00 48 00 84
	>012a18	82aa18	00 84 00 4c 00 ff 00 ff ff 7e ff 7e ff ff ff ff
	>012a28	82aa28	ff e7 ff c3 ff 00 ff 00 00 81 00 81 00 00 00 00
	>012a38	82aa38	00 18 00 3c 00 ff 00 ff ff f7 ff f7 ff f7 ff f7
	>012a48	82aa48	ff ef ff c6 ff 00 ff 00 00 08 00 08 00 08 00 08
	>012a58	82aa58	00 10 00 39 00 ff 00 ff ff fd ff fd ff 3d ff 3d
	>012a68	82aa68	ff 3d ff 19 ff 00 ff 00 00 02 00 02 00 c2 00 c2
	>012a78	82aa78	00 c2 00 e6 00 ff 00 ff ff fc ff fe ff df ff cf
	>012a88	82aa88	ff cf ff 86 ff 00 ff 00 00 03 00 01 00 20 00 30
	>012a98	82aa98	00 30 00 79 00 ff 00 ff ff 00 ff 03 ff 06 ff 03
	>012aa8	82aaa8	ff 04 ff 03 ff 00 ff 00 00 ff 00 fc 00 f9 00 fc
	>012ab8	82aab8	00 fb 00 fc 00 ff 00 ff ff 00 ff c3 ff 26 ff c6
	>012ac8	82aac8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 d9 00 39
	>012ad8	82aad8	00 99 00 3c 00 ff 00 ff ff 00 ff c3 ff 66 ff 06
	>012ae8	82aae8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 99 00 f9
	>012af8	82aaf8	00 99 00 3c 00 ff 00 ff ff 00 ff c7 ff 66 ff 67
	>012b08	82ab08	ff 66 ff c6 ff 00 ff 00 00 ff 00 38 00 99 00 98
	>012b18	82ab18	00 99 00 39 00 ff 00 ff ff 00 ff c3 ff 66 ff c7
	>012b28	82ab28	ff 66 ff 63 ff 00 ff 00 00 ff 00 3c 00 99 00 38
	>012b38	82ab38	00 99 00 9c 00 ff 00 ff ff 00 ff c0 ff 60 ff 00
	>012b48	82ab48	ff 60 ff c0 ff 00 ff 00 00 ff 00 3f 00 9f 00 ff
	>012b58	82ab58	00 9f 00 3f 00 ff 00 ff ff 00 ff 66 ff 66 ff 7e
	>012b68	82ab68	ff 66 ff 66 ff 00 ff 00 00 ff 00 99 00 99 00 81
	>012b78	82ab78	00 99 00 99 00 ff 00 ff ff 00 ff 7e ff 18 ff 18
	>012b88	82ab88	ff 18 ff 7e ff 00 ff 00 00 ff 00 81 00 e7 00 e7
	>012b98	82ab98	00 e7 00 81 00 ff 00 ff ff 00 ff 3c ff 66 ff 60
	>012ba8	82aba8	ff 66 ff 3e ff 06 ff 00 00 ff 00 c3 00 99 00 9f
	>012bb8	82abb8	00 99 00 c1 00 f9 00 ff ff 00 fc 00 f3 03 f3 03
	>012bc8	82abc8	f3 03 f3 03 f3 00 cf 03 00 ff 00 fc 03 f0 03 f0
	>012bd8	82abd8	03 f0 03 f0 00 f3 03 cc 03 00 fc fc fc 30 fc 00
	>012be8	82abe8	30 00 fc c0 fc c0 f0 00 00 03 fc 00 30 cc 00 30
	>012bf8	82abf8	00 30 c0 00 c0 3c 00 f0 cf 0f 3f 0f 3f 3f 3f 3c
	>012c08	82ac08	3f 33 c0 00 f3 03 cf 00 0f c0 0f 30 3f 00 3c 03
	>012c18	82ac18	33 0c 00 c0 03 f0 00 c0 fc fc fc f0 fc fc fc f0
	>012c28	82ac28	f3 c3 0c 00 33 00 3c 3c fc 00 f0 0c fc 00 f0 0c
	>012c38	82ac38	c3 30 00 0c 00 33 3c 00 fc 00 c3 00 30 00 03 03
	>012c48	82ac48	0f 0c cf 03 03 00 30 00 00 fc 00 c0 00 00 03 00
	>012c58	82ac58	0c 00 03 0c 00 03 00 00 ff 00 03 00 0c 00 c0 c0
	>012c68	82ac68	f3 f0 f0 c0 c0 00 0c 00 00 ff 00 03 00 00 c0 00
	>012c78	82ac78	f0 00 c0 30 00 c0 00 00 c0 00 f0 00 f3 00 f3 00
	>012c88	82ac88	cf 00 f3 00 f3 00 fc 00 00 c0 00 f0 00 f3 03 f0
	>012c98	82ac98	0f c0 03 f0 03 f0 00 fc c3 00 0f 00 0f 00 cf 00
	>012ca8	82aca8	cf 00 f3 00 cf 00 3f 00 00 03 00 0f 00 0f 00 cf
	>012cb8	82acb8	00 cf 30 c3 00 cf 00 3f ff 00 ff 00 ff 00 ff 00
	>012cc8	82acc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 91 00 99
	>012cd8	82acd8	00 89 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ce8	82ace8	ff 00 ff 00 ff 00 ff 00 00 ff 00 e7 00 c7 00 e7
	>012cf8	82acf8	00 e7 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d08	82ad08	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 b9 00 c3
	>012d18	82ad18	00 9f 00 81 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d28	82ad28	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 f3
	>012d38	82ad38	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d48	82ad48	ff 00 ff 00 ff 00 ff 00 00 ff 00 93 00 93 00 81
	>012d58	82ad58	00 f3 00 f3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d68	82ad68	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 9f 00 83
	>012d78	82ad78	00 f9 00 83 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d88	82ad88	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 9d 00 83
	>012d98	82ad98	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012da8	82ada8	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 99 00 f3
	>012db8	82adb8	00 e7 00 e7 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012dc8	82adc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c3
	>012dd8	82add8	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012de8	82ade8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c1
	>012df8	82adf8	00 b9 00 c3 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>012e08	82ae08	f0 c0 c0 00 33 00 cc 00 c0 0f 30 cf c0 0f 30 cf
	>012e18	82ae18	c0 30 00 c0 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e28	82ae28	00 00 00 00 33 00 cc 00 00 ff 00 ff 00 ff 00 ff
	>012e38	82ae38	00 00 00 00 00 33 00 cc f3 00 f0 00 f3 00 f0 00
	>012e48	82ae48	03 00 00 00 33 00 cc 00 00 f3 00 f0 00 f3 00 f0
	>012e58	82ae58	00 03 00 00 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e68	82ae68	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e78	82ae78	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012e88	82ae88	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e98	82ae98	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ea8	82aea8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012eb8	82aeb8	00 ff 00 ff 00 ff 00 ff
196	>012ec0	82aec0	00 00 ff 7f d0 1c 2e 67			CharPallete			.binary "../chars.pal"
	>012ec8	82aec8	f1 48 aa 26 a5 4c dd 3b 51 15 ea 00 b8 39 29 25
	>012ed8	82aed8	ef 3d f5 4f ae 75 d6 5a
197	>012ee0	82aee0	00 00 ff 7f d6 5a 10 67			SpritePallete		.binary "../sprites_SNES.pal",0,96 ; we only want first 3 PAL entries
	>012ee8	82aee8	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012ef8	82aef8	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f ff 7f ff 7f
	>012f08	82af08	ff 7f ff 7f ff 7f 8c 31 ff 7f ff 7f ff 7f ff 7f
	>012f18	82af18	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f d6 5a 10 67
	>012f28	82af28	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012f38	82af38	1f 7d 1f 7d 1f 7d 1f 7d
198	>012f40	82af40	29 0f 07 16 7f a0 80 67			music_1				.binary "../music/music_1.bin"
	>012f48	82af48	82 51 85 b8 89 81 8b 07 8e fe 0b d2 30 f5 02 d2
	>012f58	82af58	17 f5 02 fe 0c de 30 f5 02 fe 0b d2 17 f5 02 d2
	>012f68	82af68	30 f5 02 d2 17 f5 02 fe 0c de 30 f5 02 fe 0b d2
	>012f78	82af78	17 f5 02 d2 30 f5 02 d2 17 f5 02 fe 0c de 30 f5
	>012f88	82af88	02 fe 0b d2 17 f5 02 d2 30 f5 02 d2 17 f5 02 fe
	>012f98	82af98	0c de 30 f5 02 fe 0b d2 17 f5 02 d2 30 f5 02 d2
	>012fa8	82afa8	17 f5 02 fe 0c de 30 f5 02 fe 0b d2 17 f5 02 d2
	>012fb8	82afb8	30 f5 02 d2 17 f5 02 fe 0c de 30 f5 02 fe 0b d2
	>012fc8	82afc8	17 f5 02 d2 30 fd 1a 7f 3e fd 1c 7f 3e fd 1e 7f
	>012fd8	82afd8	3e fd 20 7f 3e fd 22 7f 3e fd 24 7f 3e fd 26 7f
	>012fe8	82afe8	3e fd 28 7f 3e fd 2a 7f 3e fd 18 7f 3e fd 1a 7f
	>012ff8	82aff8	3e fd 1c 7f 3e fd 1e 7f 3e fd 20 7f 3e fd 22 7f
	>013008	82b008	3e fd 24 7f 3e fd 26 7f 3e fd 28 7f 3e fd 2a 7f
	>013018	82b018	3e fd 18 7f 3e fd 1a 7f 3e fd 1c 7f 3e fd 1e 7f
	>013028	82b028	3e fd 20 7f 3e fd 22 7f 3e fd 24 7f 3e fd 26 7f
	>013038	82b038	3e fd 28 7f 3e fd 2a 7f 3e fd 18 7f 3e fd 1a 7f
	>013048	82b048	3e fd 1c 7f 3e fd 1e 7f 3e fd 20 7f 3e fd 22 7f
	>013058	82b058	3e fd 24 7f 3e fd 26 7f 3e fd 28 7f 3e fd 2a 7f
	>013068	82b068	3e fd 18 7f 3e fd 1a 7f 3e fd 1c 7f 3e fd 1e 7f
	>013078	82b078	3e fd 20 7f 3e fd 22 7f 3e fd 24 7f 3e fd 26 7f
	>013088	82b088	3e fd 28 7f 3e fd 2a 7f 3e fd 18 7f 3e fd 1a 7f
	>013098	82b098	3e fd 1c 7f 3e fd 1e 7f 3e fd 20 7f 3e fd 22 7f
	>0130a8	82b0a8	3e fd 24 7f 3e fd 26 7f 3e fd 28 7f 3e fd 2a 7f
	>0130b8	82b0b8	3e fd 18 7f 3e fd 1a 7f 3e fd 1c 7f 3e fd 1e 7f
	>0130c8	82b0c8	3e fd 20 7f 3e fd 22 7f 3e f5 02 fe 0b d2 19 19
	>0130d8	82b0d8	ff 9c 80 fe 0a de 17 f5 02 de 17 f5 02 de 17 f5
	>0130e8	82b0e8	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>0130f8	82b0f8	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013108	82b108	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013118	82b118	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013128	82b128	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013138	82b138	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013148	82b148	02 de 17 f5 02 de 17 f5 02 de 17 f5 02 de 17 f5
	>013158	82b158	02 fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013168	82b168	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013178	82b178	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013188	82b188	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013198	82b198	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131a8	82b1a8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131b8	82b1b8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131c8	82b1c8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131d8	82b1d8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131e8	82b1e8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>0131f8	82b1f8	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013208	82b208	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013218	82b218	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013228	82b228	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013238	82b238	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013248	82b248	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013258	82b258	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013268	82b268	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013278	82b278	3f fd a2 80 3f fd a5 80 3f fd a4 80 3f fd a3 80
	>013288	82b288	3f fd a2 80 3f 02 de 17 f5 02 de 17 f5 02 de 17
	>013298	82b298	f5 02 fe 0a de 19 19 ff 63 82 fe 09 ca 30 f5 02
	>0132a8	82b2a8	ca 17 f5 02 d6 17 f5 02 c5 17 f5 02 c8 17 f5 02
	>0132b8	82b2b8	ca 30 f5 02 ca 17 f5 02 d6 17 f5 02 c5 17 f5 02
	>0132c8	82b2c8	c8 17 f5 02 ca 30 f5 02 ca 17 f5 02 d6 17 f5 02
	>0132d8	82b2d8	c5 17 f5 02 c8 17 f5 02 c8 30 f5 02 c8 17 f5 02
	>0132e8	82b2e8	d4 17 f5 02 c5 17 f5 02 c0 17 fd 7b 82 28 fd 8f
	>0132f8	82b2f8	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013308	82b308	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013318	82b318	82 28 f5 02 cd 30 f5 02 cd 17 f5 02 d9 17 f5 02
	>013328	82b328	c8 17 f5 02 cb 17 f5 02 cd 30 f5 02 cd 17 f5 02
	>013338	82b338	d9 17 f5 02 c8 17 f5 02 cb 17 f5 02 cd 30 f5 02
	>013348	82b348	cd 17 f5 02 d9 17 f5 02 c8 17 f5 02 cb 17 f5 02
	>013358	82b358	cb 30 f5 02 cb 17 f5 02 d7 17 f5 02 c8 17 f5 02
	>013368	82b368	c3 17 fd df 82 28 fd 07 83 28 fd 7b 82 28 fd 8f
	>013378	82b378	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013388	82b388	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013398	82b398	82 28 fd 7b 82 28 fd 8f 82 28 fd df 82 28 fd 07
	>0133a8	82b3a8	83 28 fd df 82 28 fd 07 83 28 fd 7b 82 28 fd 8f
	>0133b8	82b3b8	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>0133c8	82b3c8	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>0133d8	82b3d8	82 28 fd 7b 82 28 fd 8f 82 28 fd df 82 28 fd 07
	>0133e8	82b3e8	83 28 fd df 82 28 fd 07 83 28 fd 7b 82 28 fd 8f
	>0133f8	82b3f8	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013408	82b408	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013418	82b418	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013428	82b428	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013438	82b438	82 28 fd 7b 82 28 fd 8f 82 28 fd df 82 28 fd 07
	>013448	82b448	83 28 fd df 82 28 fd 07 83 28 f5 02 c6 30 f5 02
	>013458	82b458	c6 17 f5 02 d2 17 f5 02 c1 17 f5 02 c4 17 f5 02
	>013468	82b468	c6 30 f5 02 c6 17 f5 02 d2 17 f5 02 c1 17 f5 02
	>013478	82b478	c4 17 f5 02 c6 30 f5 02 c6 17 f5 02 d2 17 f5 02
	>013488	82b488	c1 17 f5 02 c4 17 f5 02 c6 30 f5 02 c6 17 f5 02
	>013498	82b498	d2 17 f5 02 c1 17 f5 02 c6 17 f5 02 c3 30 f5 02
	>0134a8	82b4a8	c3 17 f5 02 cf 17 f5 02 bf 17 f5 02 c1 17 f5 02
	>0134b8	82b4b8	c3 30 f5 02 c3 17 f5 02 cf 17 f5 02 bf 17 f5 02
	>0134c8	82b4c8	c1 17 f5 02 c3 30 f5 02 c3 17 f5 02 cf 17 f5 02
	>0134d8	82b4d8	bf 17 f5 02 c1 17 f5 02 c3 30 f5 02 c3 17 f5 02
	>0134e8	82b4e8	cf 17 f5 02 bf 17 f5 02 c1 17 fd 17 84 28 fd 3f
	>0134f8	82b4f8	84 28 fd 67 84 28 fd 67 84 28 fd 17 84 28 fd 3f
	>013508	82b508	84 28 fd 67 84 28 fd 67 84 28 fd 17 84 28 fd 3f
	>013518	82b518	84 28 fd 67 84 28 fd 67 84 28 fd 17 84 28 fd 3f
	>013528	82b528	84 28 fd 67 84 28 fd 67 84 28 fd 17 84 28 fd 3f
	>013538	82b538	84 28 fd 67 84 28 fd 67 84 28 fd 7b 82 28 fd 8f
	>013548	82b548	82 28 fd 7b 82 28 fd 8f 82 28 fd 7b 82 28 fd 8f
	>013558	82b558	82 28 fd 7b 82 28 f5 02 ca 30 f5 02 ca 17 f5 02
	>013568	82b568	d6 17 f5 02 c5 17 f5 02 c8 17 f5 02 c8 30 f5 02
	>013578	82b578	c8 17 f5 02 d4 17 f5 02 c5 17 f5 02 fe 09 c0 19
	>013588	82b588	19 ff 4d 85 f6 b0 04 fe 0d f7 74 c6 17 f5 02 c8
	>013598	82b598	17 f5 02 ca 17 f5 02 cd 17 f5 02 cb 17 f5 02 ca
	>0135a8	82b5a8	17 f5 02 cf 17 f5 02 cd 17 f5 02 cb 17 f5 02 cd
	>0135b8	82b5b8	17 f5 02 cb 17 f5 02 ca 17 f5 02 c4 17 f5 02 c6
	>0135c8	82b5c8	17 f5 02 c8 17 f5 02 c8 19 fc 19 30 fc 00 f5 02
	>0135d8	82b5d8	cb 17 f5 02 ca 17 f5 02 cb 17 f5 02 ca 17 f5 02
	>0135e8	82b5e8	cb 17 f5 02 ca 17 f5 02 c6 17 f5 02 c8 17 f5 02
	>0135f8	82b5f8	ca 17 f5 02 fd 64 85 10 cd 17 f5 02 cb 17 f5 02
	>013608	82b608	ca 17 f5 02 cb 17 f5 02 cd 17 f5 02 cb 17 f5 02
	>013618	82b618	ca 17 fc 19 f5 02 c8 64 fc 00 f7 00 94 f5 02 f7
	>013628	82b628	74 c6 17 f5 02 c8 17 f5 fd 5f 85 10 fd 6f 85 10
	>013638	82b638	fd 7f 85 10 fd 8f 85 10 fd 9f 85 10 fd af 85 10
	>013648	82b648	fd 62 85 10 f5 02 cd 17 f5 02 cb 17 f5 02 ca 17
	>013658	82b658	f5 02 cb 17 fd d3 85 10 c8 64 fc 00 f7 00 94 f5
	>013668	82b668	02 f7 7f c9 17 f5 02 cb 17 f5 02 cd 17 f5 02 d0
	>013678	82b678	17 f5 02 ce 17 f5 02 cd 17 f5 02 d0 19 fc 19 30
	>013688	82b688	fc 00 f5 02 d0 17 f5 02 ce 17 f5 02 cd 17 f5 02
	>013698	82b698	ce 17 f5 02 cd 17 fc 19 f5 02 cb 94 34 fc 00 30
	>0136a8	82b6a8	f5 02 c9 17 f5 02 cb 17 fd 36 86 10 fd 46 86 10
	>0136b8	82b6b8	17 f5 02 cd 17 f5 02 cb 17 f5 02 cd 17 fc 19 f5
	>0136c8	82b6c8	02 ce 62 fc 00 f5 02 d2 17 f5 02 ce 17 f5 02 c9
	>0136d8	82b6d8	17 f5 02 d0 17 f5 02 ce 17 f5 02 cb 17 f5 02 ca
	>0136e8	82b6e8	17 f5 02 cb 17 f5 02 cd f6 24 02 f5 02 ca 17 f5
	>0136f8	82b6f8	02 cb 17 f5 02 cd f6 24 02 f5 02 c6 17 f5 02 c8
	>013708	82b708	fd 5d 85 10 fd 6d 85 10 fd 7d 85 10 17 f5 02 c8
	>013718	82b718	62 f5 02 d7 17 f5 02 d6 17 f5 02 d7 17 f5 02 d6
	>013728	82b728	17 f5 02 d4 17 f5 02 d0 17 f5 02 c6 fd 59 85 10
	>013738	82b738	fd 69 85 10 fd ca 85 10 17 f5 02 ca 17 f5 02 c8
	>013748	82b748	94 64 f5 02 c6 17 f5 02 fd 5c 85 10 fd 6c 85 10
	>013758	82b758	fd 7c 85 10 c6 17 f5 02 c8 62 f5 02 d7 17 f5 02
	>013768	82b768	d6 17 f5 02 fd e8 86 10 fd 58 85 10 fd 68 85 10
	>013778	82b778	fd c9 85 10 cb 17 f5 02 ca 94 7d f5 02 c9 17 f5
	>013788	82b788	02 cb 17 f5 fd 37 86 10 02 d0 49 f5 02 d0 17 f5
	>013798	82b798	02 ce 17 f5 02 cd 17 f5 02 ce 17 f5 02 cd 17 f5
	>0137a8	82b7a8	02 cb 94 64 f5 02 c9 17 fd 32 86 10 f5 02 cd 17
	>0137b8	82b7b8	f5 02 d0 49 f5 02 d0 17 f5 02 ce 17 f5 02 cd 17
	>0137c8	82b7c8	f5 02 cb 17 f5 02 cd 17 f5 02 ce 62 fd 92 86 10
	>0137d8	82b7d8	fd a2 86 10 fd b2 86 10 cd f6 24 02 f5 02 fe 12
	>0137e8	82b7e8	cd 94 f5 02 d1 94 f5 02 cf 94 f5 02 d2 94 f5 02
	>0137f8	82b7f8	d1 f6 56 02 f5 02 cd 94 f5 02 d1 94 f5 02 cf 94
	>013808	82b808	f5 02 d2 94 f5 02 d1 30 f5 02 d6 f6 24 02 f5 02
	>013818	82b818	fe 0d c9 17 f5 02 cb 17 fd 36 86 10 fd 7d 87 10
	>013828	82b828	fd 64 87 10 fd 31 86 10 17 f5 02 cd 17 f5 02 d0
	>013838	82b838	49 f5 02 d0 17 f5 02 ce fd 88 87 10 62 f5 02 d2
	>013848	82b848	17 f5 02 ce 17 f5 02 c9 17 f5 02 d0 fd a1 86 10
	>013858	82b858	fd b1 86 10 02 cd f6 24 02 f5 02 f7 74 c6 17 f5
	>013868	82b868	02 c8 17 f5 fd 5f 85 10 fd 6f 85 10 fd 7f 85 10
	>013878	82b878	fd 8f 85 10 fd 9f 85 10 fd af 85 10 fd 62 85 10
	>013888	82b888	fd 11 86 10 fd d3 85 10 fd e3 85 10 fd 5d 85 10
	>013898	82b898	fd 6d 85 10 fd 7d 85 10 fd 8d 85 10 fd 9d 85 10
	>0138a8	82b8a8	fd ad 85 10 fd 60 85 10 cf 17 f5 02 cd 17 f5 02
	>0138b8	82b8b8	cb 17 f5 02 ca 17 f5 02 fd d1 85 10 f5 02 c8 64
	>0138c8	82b8c8	fc 00 f7 00 94 f5 02 c6 17 f5 02 c8 fd 5d 85 10
	>0138d8	82b8d8	fd 6d 85 10 fd 7d 85 10 fd d9 86 10 fd e9 86 10
	>0138e8	82b8e8	fd 59 85 10 fd 69 85 10 fd ca 85 10 fd 05 87 10
	>0138f8	82b8f8	fd 5c 85 10 fd 6c 85 10 fd 7c 85 10 fd 21 87 10
	>013908	82b908	fd e8 86 10 fd 58 85 10 fd 68 85 10 fd c9 85 10
	>013918	82b918	fd 41 87 10 fd 37 86 10 fd 55 87 10 fd 65 87 10
	>013928	82b928	fd 32 86 10 fd 79 87 10 fd 89 87 10 fd 92 86 10
	>013938	82b938	f5 02 ce 17 f5 02 cb f6 77 09 f5 02 f7 7f c6 17
	>013948	82b948	f5 02 c4 17 f5 02 c6 94 4b f5 02 ba 19 fb 2c c6
	>013958	82b958	17 fb 00 f5 02 c4 17 f5 02 c6 94 64 f5 02 c3 17
	>013968	82b968	f5 02 c1 17 f5 02 c3 94 4b f5 02 b7 19 fb 2c c3
	>013978	82b978	17 fb 00 f5 02 c1 17 f5 02 c3 94 64 f5 02 c6 17
	>013988	82b988	fd 0d 89 10 fd 1d 89 10 f5 02 c4 17 f5 02 c6 94
	>013998	82b998	64 f5 02 fe 12 cd 62 f5 02 cb 94 32 f5 02 fe 0d
	>0139a8	82b9a8	c6 17 f5 02 c4 17 f5 02 fd 13 89 10 fd 23 89 10
	>0139b8	82b9b8	fd 33 89 10 17 f5 02 c3 94 64 f5 02 c6 17 f5 02
	>0139c8	82b9c8	c4 17 f5 02 fd 13 89 10 17 f5 02 c6 94 64 f5 02
	>0139d8	82b9d8	c3 17 f5 02 c4 17 f5 02 c6 94 64 f5 02 fe 12 cd
	>0139e8	82b9e8	62 f5 02 cb f6 28 0a 19 ff b4 89 f6 e4 0c fe 0e
	>0139f8	82b9f8	cd 17 f5 02 c6 17 f5 02 d2 17 f5 02 cd 17 f5 02
	>013a08	82ba08	c6 17 f5 02 d2 17 f5 02 cd 17 f5 02 c6 17 f5 02
	>013a18	82ba18	d2 17 f5 02 cd 17 f5 02 c6 17 f5 02 d2 17 f5 02
	>013a28	82ba28	fe 0f de f6 32 08 f5 02 fe 0e cd 17 f5 02 c6 17
	>013a38	82ba38	f5 fd c4 89 23 f5 02 d2 17 f5 02 fe 0f de f6 ae
	>013a48	82ba48	04 f5 02 de f6 59 0e f5 02 fe 12 ca 94 f5 02 cd
	>013a58	82ba58	94 f5 02 cb 94 f5 02 cf 62 f5 02 cd f6 88 02 f5
	>013a68	82ba68	02 ca 94 f5 02 cd 94 f5 02 cb 94 f5 02 cf 62 f5
	>013a78	82ba78	02 cd f6 d1 13 f5 02 fe 0e cd 17 fd bf 89 23 17
	>013a88	82ba88	f5 02 c6 17 f5 02 d2 17 f5 02 fe 0f de f6 ae 04
	>013a98	82ba98	f5 02 de f6 5e 09 f5 02 fe 09 d2 30 f5 02 d2 17
	>013aa8	82baa8	f5 02 de 17 f5 02 cd 17 f5 02 d0 17 f5 02 d2 30
	>013ab8	82bab8	f5 02 d2 17 f5 02 de 17 f5 02 cd 17 f5 02 d0 17
	>013ac8	82bac8	f5 02 d2 30 f5 02 d2 17 f5 02 de 17 f5 02 cd 17
	>013ad8	82bad8	f5 02 d0 17 f5 02 d2 30 f5 02 d2 17 f5 02 de 17
	>013ae8	82bae8	f5 02 cd 17 f5 02 d2 17 f5 02 cf 30 f5 02 cf 17
	>013af8	82baf8	f5 02 db 17 f5 02 cb 17 f5 02 cd 17 f5 02 cf 30
	>013b08	82bb08	f5 02 cf 17 f5 02 db 17 f5 02 cb 17 f5 02 cd 17
	>013b18	82bb18	f5 02 cf 30 f5 02 cf 17 f5 02 db 17 f5 02 cb 17
	>013b28	82bb28	f5 02 cd 17 f5 02 cf 30 f5 02 cf 17 f5 02 db 17
	>013b38	82bb38	f5 02 cb 17 f5 02 cd 17 f5 02 d2 30 f5 02 d2 17
	>013b48	82bb48	f5 02 de 17 f5 02 cd 17 f5 02 d0 17 f5 02 d2 30
	>013b58	82bb58	f5 fd 6a 8a 23 fd a1 8a 23 fd c4 8a 23 fd e7 8a
	>013b68	82bb68	23 fd 6a 8a 23 fd 79 8a 23 fd b0 8a 23 fd bf 8a
	>013b78	82bb78	23 fd f6 8a 23 fd 79 8a 23 fd 9c 8a 23 fd bf 8a
	>013b88	82bb88	23 fd ba 8a 23 fd 79 8a 23 fd 74 8a 23 fd ab 8a
	>013b98	82bb98	23 fd ba 8a 23 fd f1 8a 23 fd 74 8a 23 fd 97 8a
	>013ba8	82bba8	23 fd ba 8a 23 fd b5 8a 23 17 f5 02 cd f6 79 09
	>013bb8	82bbb8	19 ff 7d 8b f6 70 17 fe 11 be 17 f5 02 c1 17 f5
	>013bc8	82bbc8	02 be 17 f5 02 c8 17 f5 02 c6 17 f5 02 c1 17 f5
	>013bd8	82bbd8	02 c3 17 f5 02 c1 17 f5 02 c3 17 f5 02 c1 17 f5
	>013be8	82bbe8	02 bf 17 f5 02 be 17 f5 02 bc 17 f5 02 be 17 f5
	>013bf8	82bbf8	02 bf 94 64 f5 02 fd 86 8b 16 f5 02 c3 17 f5 02
	>013c08	82bc08	c1 17 f5 02 bf 17 f5 02 be 17 f5 02 c1 17 f5 02
	>013c18	82bc18	c6 17 f5 02 c4 17 f5 02 c6 17 f5 02 c8 94 64 f5
	>013c28	82bc28	02 be 17 f5 02 c1 fd 8b 8b 16 fd a1 8b 16 17 f5
	>013c38	82bc38	02 be 17 f5 02 bf 94 64 f5 02 be 17 f5 02 c1 17
	>013c48	82bc48	f5 02 be 17 fd 90 8b 16 fd d1 8b 16 f5 02 c8 94
	>013c58	82bc58	64 f5 02 c1 17 f5 02 c2 17 f5 02 c4 17 f5 02 c9
	>013c68	82bc68	17 f5 02 c7 17 f5 02 c4 17 f5 02 c4 49 f5 02 c9
	>013c78	82bc78	17 f5 02 c4 17 f5 02 bd 17 f5 02 bf 17 f5 02 c1
	>013c88	82bc88	17 f5 02 c7 94 64 f5 02 cd 17 f5 02 cb 17 f5 02
	>013c98	82bc98	c9 17 f5 02 c4 17 f5 02 c6 17 f5 02 c9 17 f5 02
	>013ca8	82bca8	cd 49 f5 02 cd 17 f5 02 cb 17 f5 02 c9 17 f5 02
	>013cb8	82bcb8	cb 17 f5 02 c9 17 f5 02 c7 62 f5 02 ce 17 f5 02
	>013cc8	82bcc8	cd 17 f5 02 ce 17 f5 02 cd 17 f5 02 ce 17 f5 02
	>013cd8	82bcd8	cb 17 f5 02 c6 17 f5 02 ca 17 f5 02 cd f6 24 02
	>013ce8	82bce8	f5 02 cd 17 f5 02 ca 17 f5 02 c6 f6 ae 04 f5 02
	>013cf8	82bcf8	fe 12 ca f6 24 02 f5 02 d9 94 f5 02 dd 94 f5 02
	>013d08	82bd08	db 94 f5 02 de 94 f5 02 dd 30 f5 02 ca f6 24 02
	>013d18	82bd18	f5 02 fe 11 c1 17 f5 02 c2 17 f5 02 c4 17 f5 02
	>013d28	82bd28	c9 17 f5 02 c7 17 f5 02 fd 34 8c 16 fd 4a 8c 16
	>013d38	82bd38	fd 60 8c 16 fd 76 8c 16 fd 8c 8c 16 fd a2 8c 16
	>013d48	82bd48	f6 84 0b f5 02 be 17 f5 02 c1 17 f5 02 be 17 f5
	>013d58	82bd58	02 c8 17 f5 02 c6 fd 97 8b 16 fd ad 8b 16 fd 86
	>013d68	82bd68	8b 16 fd c7 8b 16 fd dd 8b 16 fd 8b 8b 16 fd a1
	>013d78	82bd78	8b 16 fd fb 8b 16 fd 90 8b 16 fd d1 8b 16 fd 19
	>013d88	82bd88	8c 16 fd 2f 8c 16 fd 45 8c 16 fd 5b 8c 16 fd 71
	>013d98	82bd98	8c 16 fd 87 8c 16 cb f6 a9 09 f5 02 fe 0d f7 33
	>013da8	82bda8	c6 17 f5 02 c4 17 f5 02 c6 94 4b f5 02 ba 19 fb
	>013db8	82bdb8	2c c6 17 fb 00 f5 02 c4 17 f5 02 c6 94 64 f5 02
	>013dc8	82bdc8	c3 17 f5 02 c1 17 f5 02 c3 94 4b f5 02 b7 19 fb
	>013dd8	82bdd8	2c c3 17 fb 00 f5 02 c1 17 f5 02 c3 94 64 f5 02
	>013de8	82bde8	c6 17 f5 02 c4 17 f5 02 c6 94 4b f5 02 ba fd 7b
	>013df8	82bdf8	8d 16 c4 17 f5 02 c6 94 64 f5 02 fe 12 f7 7f cf
	>013e08	82be08	f6 2a 01 f5 02 fe 0d f7 33 fd 6d 8d 16 fd 83 8d
	>013e18	82be18	16 fd 99 8d 16 fd 6f 8d 16 17 f5 02 c6 94 64 f5
	>013e28	82be28	02 c3 17 f5 02 c4 17 f5 02 c6 94 64 f5 02 fe 12
	>013e38	82be38	f7 7f cf f6 5a 0a 19 ff 03 8e f6 2b 2f fe 12 d6
	>013e48	82be48	94 f5 02 d9 94 f5 02 d7 94 f5 02 db 62 f5 02 d9
	>013e58	82be58	f6 37 35 f5 02 d2 f6 5e 09 f5 02 d2 f6 f6 09 19
	>013e68	82be68	ff 2c 8e
199	>013e6b	82be6b	10 07 07 16 7f cf 7f c5			music_2				.binary "../music/music_2.bin"
	>013e73	82be73	80 1d 82 74 82 e9 82 7c 84 fe 09 f7 7f c7 26 f5
	>013e83	82be83	02 bb 12 f5 02 c7 26 f5 02 ce 12 f5 02 cc 28 f7
	>013e93	82be93	00 4e f5 02 f7 7f c5 26 f5 02 c2 12 f5 02 c5 26
	>013ea3	82bea3	f5 02 ca 12 f5 02 c7 28 f7 00 4e f5 02 f7 7f c7
	>013eb3	82beb3	26 f5 02 bb 12 f5 02 c7 26 f5 02 ce 12 f5 02 cc
	>013ec3	82bec3	28 f7 00 4e f5 02 f7 7f c5 26 f5 02 c2 12 f5 02
	>013ed3	82bed3	c5 26 f5 02 ca 12 f5 02 c7 28 f7 00 4e f5 02 f7
	>013ee3	82bee3	7f c7 26 f5 02 bb 12 f5 02 c7 26 f5 02 ce 12 f5
	>013ef3	82bef3	02 cc 28 f7 00 fd 2e 7f 3e fd 3a 7f 3f fd 47 7f
	>013f03	82bf03	3e fd 21 7f 3f fd 2e 7f 3e fd 3a 7f 3f fd 47 7f
	>013f13	82bf13	3e fd 21 7f 3f fd 2e 7f 3e fd 3a 7f 3f fd 47 7f
	>013f23	82bf23	3e fd 21 7f 3f fd 2e 7f 3e fd 3a 7f 3f 50 14 ff
	>013f33	82bf33	cb 7f fe 0b d2 26 f5 02 d2 12 f5 02 d2 26 f5 02
	>013f43	82bf43	d2 12 f5 02 d2 76 f5 02 d2 26 f5 02 d2 12 f5 02
	>013f53	82bf53	d2 26 f5 02 d2 12 f5 02 d2 76 f5 02 d2 26 f5 02
	>013f63	82bf63	d2 12 f5 02 d2 26 f5 02 d2 12 f5 02 d2 76 f5 02
	>013f73	82bf73	d2 26 f5 02 d2 12 f5 02 d2 26 f5 02 d2 12 f5 02
	>013f83	82bf83	d2 76 f5 02 d2 26 f5 02 d2 12 f5 02 d2 26 f5 02
	>013f93	82bf93	d2 12 f5 02 d2 26 f5 02 d2 3a f5 02 de 12 f5 02
	>013fa3	82bfa3	d2 26 f5 02 d2 12 f5 02 d2 26 f5 02 d2 12 f5 02
	>013fb3	82bfb3	d2 26 f5 02 d2 3a f5 02 de 12 f5 02 d2 26 f5 02
	>013fc3	82bfc3	d2 12 f5 02 d2 26 f5 02 d2 12 f5 02 d2 26 fd 33
	>013fd3	82bfd3	80 34 fd 2f 80 34 fd 2b 80 34 fd d7 7f 34 fd 0b
	>013fe3	82bfe3	80 34 fd 23 80 34 fd 1f 80 34 fd 37 80 34 fd 33
	>013ff3	82bff3	80 34 fd 2f 80 34 fd 2b 80 34 fd 27 80 34 fd 23
	>014003	82c003	80 34 fd 1f 80 34 fd 37 80 34 fd 33 80 34 fd 2f
	>014013	82c013	80 34 f5 02 d2 12 f5 02 d2 26 f5 02 d2 3a f5 02
	>014023	82c023	fe 0b de 14 14 ff c1 80 3c fe 0c de 3a f5 02 de
	>014033	82c033	94 1e f5 02 de 3a f5 02 de 94 1e f5 02 de 3a f5
	>014043	82c043	02 de 94 1e f5 02 de 3a f5 02 de 76 f5 02 fe 0a
	>014053	82c053	de 12 f5 02 de 12 f5 02 de 12 f5 02 fe 0c de 12
	>014063	82c063	f5 02 fe 0a de 12 f5 02 de 12 f5 02 de 12 f5 02
	>014073	82c073	de 12 f5 02 de 12 f5 02 fe 0c de 12 f5 02 fe 0a
	>014083	82c083	de 12 f5 02 de 12 f5 02 de 12 f5 02 de 12 f5 02
	>014093	82c093	de 12 f5 02 fe 0c de fd fc 80 25 fd 05 81 25 fd
	>0140a3	82c0a3	f2 80 25 fd fb 80 25 fd 04 81 25 fd f1 80 26 fd
	>0140b3	82c0b3	fb 80 25 fd 04 81 25 fd f1 80 26 fd fb 80 25 02
	>0140c3	82c0c3	de 4e f5 02 fe 0c de 3a f5 02 de 94 1e f5 02 de
	>0140d3	82c0d3	3a f5 02 de 94 1e f5 02 de 3a f5 02 de 94 1e f5
	>0140e3	82c0e3	02 de 3a f5 fd e6 80 25 fd ef 80 25 fd f8 80 25
	>0140f3	82c0f3	fd 01 81 25 fd ee 80 25 fd f7 80 26 fd 01 81 25
	>014103	82c103	fd ee 80 25 fd f7 80 26 fd 01 81 25 fd ee 80 25
	>014113	82c113	fd f7 80 26 fd 01 81 25 fd ee 80 25 fd f7 80 26
	>014123	82c123	fd 01 81 25 fd ee 80 25 fd f7 80 26 fd 01 81 25
	>014133	82c133	fd ee 80 25 fd f7 80 26 fd 01 81 25 fd ee 80 25
	>014143	82c143	fd f7 80 26 fd 01 81 25 fd ee 80 25 fd f7 80 26
	>014153	82c153	fd 01 81 25 fd ee 80 25 fd f7 80 26 fd 01 81 25
	>014163	82c163	fd ee 80 25 fd f7 80 26 fd 01 81 25 fd ee 80 25
	>014173	82c173	fd f7 80 26 de 12 f5 02 fe 0a de 14 14 ff 19 82
	>014183	82c183	f6 48 03 fe 0e d2 12 f5 02 d2 12 f5 02 d2 12 f5
	>014193	82c193	02 c6 12 f5 02 c6 12 f5 02 c6 12 f5 02 fe 0f d2
	>0141a3	82c1a3	f6 be 03 f5 02 d2 f6 06 07 f5 02 fe 0e d2 fd 23
	>0141b3	82c1b3	82 0f fd 32 82 0f 02 d2 f6 be 03 f5 02 d2 f6 be
	>0141c3	82c1c3	03 f5 02 d2 f6 be 03 f5 02 d2 f6 be 03 f5 02 d2
	>0141d3	82c1d3	f6 c0 03 14 ff 70 82 94 0c fe 11 f7 7f c8 12 f5
	>0141e3	82c1e3	02 c8 26 f5 02 c3 94 1e f5 02 d2 12 f5 02 d2 94
	>0141f3	82c1f3	46 f5 02 c8 12 f5 02 c8 26 f5 02 c3 94 1e f5 02
	>014203	82c203	d2 12 f5 02 d2 94 46 f5 02 c8 12 fd 7c 82 1a fd
	>014213	82c213	80 82 1a fd 84 82 1a fd 88 82 1a fd 8c 82 1a fd
	>014223	82c223	7a 82 1a fd 7e 82 1a fd 82 82 1a fd 86 82 1a fd
	>014233	82c233	8a 82 1a fd 8e 82 1a fd 7c 82 1a fd 80 82 1a fd
	>014243	82c243	84 82 1a fd 88 82 1a 3c 14 ff e5 82 f6 c0 03 fe
	>014253	82c253	13 f7 7f e2 26 f5 02 dd 12 f5 02 e2 26 f5 02 dd
	>014263	82c263	12 f5 02 df 26 f5 02 db 3a f5 02 db 12 f5 02 e0
	>014273	82c273	26 f5 02 e2 12 f5 02 e0 26 f5 02 de 12 f5 02 dd
	>014283	82c283	26 f5 02 d9 4e f5 02 dd 26 f5 02 d9 12 f5 02 dd
	>014293	82c293	26 f5 02 d9 12 f5 02 db 26 f5 02 d6 3a f5 02 d5
	>0142a3	82c2a3	12 f5 02 d4 26 f5 02 d8 12 f5 02 db 26 f5 02 de
	>0142b3	82c2b3	12 f5 02 dd 12 f5 02 e0 12 f5 02 dd 12 f5 02 d9
	>0142c3	82c2c3	28 f7 00 12 f5 02 f7 7f e2 26 f5 02 dd 12 f5 02
	>0142d3	82c2d3	e2 26 f5 02 dd 12 f5 02 df 26 f5 02 fd 04 83 18
	>0142e3	82c2e3	fd 1c 83 18 fd 34 83 18 d8 12 f5 02 d9 26 f5 02
	>0142f3	82c2f3	e0 12 f5 02 e5 28 f7 00 f6 d2 03 f5 02 f7 7f e2
	>014303	82c303	fd f1 82 18 fd 09 83 18 fd 21 83 18 fd 39 83 18
	>014313	82c313	fd 51 83 18 fd f4 82 18 fd 0c 83 18 fd 24 83 18
	>014323	82c323	d5 12 f5 02 d4 26 f5 02 d8 12 f5 02 db 26 f5 02
	>014333	82c333	d8 12 f5 02 d9 26 f5 02 e0 12 f5 02 e5 28 f7 00
	>014343	82c343	12 f5 02 f7 7f e2 26 f5 02 dd 12 f5 02 e2 26 f5
	>014353	82c353	fd fb 82 18 fd 13 83 18 fd 2b 83 18 fd 43 83 18
	>014363	82c363	fd 5b 83 18 fd fe 82 18 fd 16 83 18 fd 2e 83 18
	>014373	82c373	fd c7 83 18 02 fe 14 f7 7f d6 76 f5 02 d8 76 f5
	>014383	82c383	02 dd 3a f5 02 d9 3a f5 02 d6 62 f5 02 cd 4e f5
	>014393	82c393	02 d6 3a f5 02 d4 62 f5 02 cd 3a f5 02 cd 3a f5
	>0143a3	82c3a3	02 d6 26 f5 02 c8 4e f5 02 d1 12 f5 02 d6 76 f5
	>0143b3	82c3b3	02 d8 76 f5 02 dd 3a f5 02 d9 3a f5 02 d6 62 f5
	>0143c3	82c3c3	02 d9 4e f5 02 e2 3a f5 02 e0 62 f5 02 da 12 f5
	>0143d3	82c3d3	02 d9 62 f5 02 d1 12 f5 02 d2 78 14 ff 78 84 f6
	>0143e3	82c3e3	fc 03 f9 28 fe 13 f7 26 e2 26 f5 02 dd 12 f5 02
	>0143f3	82c3f3	e2 26 f5 02 dd 12 f5 02 df 26 f5 02 db 3a f5 02
	>014403	82c403	db 12 f5 02 e0 26 f5 02 e2 12 f5 02 e0 26 f5 02
	>014413	82c413	de 12 f5 02 dd 26 f5 02 d9 4e f5 02 dd 26 f5 02
	>014423	82c423	d9 12 f5 02 dd 26 f5 02 d9 12 f5 02 db 26 f5 02
	>014433	82c433	d6 3a f5 02 d5 12 f5 02 d4 26 f5 02 d8 12 f5 02
	>014443	82c443	db 26 f5 02 de 12 f5 02 dd 12 f5 02 e0 12 f5 02
	>014453	82c453	dd 12 f5 02 d9 28 f7 00 12 f5 02 f7 33 e2 26 f5
	>014463	82c463	02 dd 12 f5 02 e2 26 f5 02 dd 12 f5 02 df 26 f5
	>014473	82c473	02 db 3a f5 02 db fd 9e 84 1e fd bc 84 1e 12 f5
	>014483	82c483	02 db 26 f5 02 d8 12 f5 02 d9 26 f5 02 e0 12 f5
	>014493	82c493	02 e5 28 f7 00 f6 d2 03 f9 28 f5 02 fd 83 84 1e
	>0144a3	82c4a3	fd a1 84 1e fd bf 84 1e fd dd 84 1e fd 86 84 1e
	>0144b3	82c4b3	fd a4 84 1e fd c2 84 1e 02 d8 12 f5 02 d9 26 f5
	>0144c3	82c4c3	02 e0 4e f9 28 f5 02 f7 26 e2 26 f5 02 dd 12 f5
	>0144d3	82c4d3	02 e2 26 f5 02 dd fd 92 84 1e fd b0 84 1e fd ce
	>0144e3	82c4e3	84 1e fd ec 84 1e fd 95 84 1e fd b3 84 1e d5 12
	>0144f3	82c4f3	f5 02 d4 26 f5 02 d8 12 f5 02 db 26 f5 02 d8 12
	>014503	82c503	f5 02 d9 26 f5 02 e0 14 f7 00 3a f9 00 f5 02 fe
	>014513	82c513	14 f7 7f d9 62 f5 02 d4 76 f5 02 db 3a f5 02 d8
	>014523	82c523	3a f5 02 d2 4e f5 02 cf 62 f5 02 d2 3a f5 02 cf
	>014533	82c533	4e f5 02 d4 3a f5 02 d7 3a f5 02 cd 26 f5 02 c6
	>014543	82c543	50 f7 00 3a f5 02 f7 7f d9 62 f5 02 d4 76 f5 02
	>014553	82c553	db 3a f5 02 d8 3a f5 02 d2 4e f5 02 db 62 f5 02
	>014563	82c563	de 3a f5 02 db 76 f5 02 d1 12 f5 02 d4 62 f5 02
	>014573	82c573	cd 12 f5 02 de 3c 14 ff 13 86
200	>01457d	82c57d	48 0b 07 16 7f ec 80 00			music_3				.binary "../music/music_3.bin"
	>014585	82c585	82 38 83 8f 85 97 87 38 88 fe 14 c1 30 f5 02 c1
	>014595	82c595	17 f5 02 cd 30 f5 02 c8 17 f5 02 c1 30 f5 02 c1
	>0145a5	82c5a5	17 f5 02 cd 30 f5 02 ba 17 f5 02 bf 30 f5 02 bf
	>0145b5	82c5b5	17 f5 02 cb 30 f5 02 c6 17 f5 02 bf 30 f5 02 bf
	>0145c5	82c5c5	17 f5 02 cb 30 f5 02 c6 17 f5 02 c1 30 f5 02 c1
	>0145d5	82c5d5	17 f5 02 cd 30 f5 02 c8 17 f5 02 c1 30 f5 02 c1
	>0145e5	82c5e5	17 f5 02 cd 30 f5 02 ba 17 fd 36 7f 20 f5 02 c1
	>0145f5	82c5f5	32 f5 02 c1 18 f5 02 cd 32 f5 02 c8 18 f5 02 c1
	>014605	82c605	32 f5 02 c1 18 f5 02 cd 32 f5 02 ba 18 f5 02 bf
	>014615	82c615	32 f5 02 bf 18 f5 02 cb 32 f5 02 c6 18 f5 02 bf
	>014625	82c625	32 f5 02 bf 18 f5 02 cb 32 f5 02 c6 18 fd 7a 7f
	>014635	82c635	20 fd 9a 7f 20 fd 7a 7f 20 fd 9a 7f 20 fd 7a 7f
	>014645	82c645	20 f5 02 c5 32 f5 02 c5 18 f5 02 d1 32 f5 02 cc
	>014655	82c655	18 f5 02 c5 32 f5 02 c5 18 f5 02 d1 32 f5 02 cc
	>014665	82c665	18 fd 7a 7f 20 fd 9a 7f 20 fd 7a 7f 20 fd 9a 7f
	>014675	82c675	20 fd 7a 7f 20 fd 9a 7f 20 fd 7a 7f 20 fd ce 7f
	>014685	82c685	20 f5 02 be 32 f5 02 be 18 f5 02 ca 32 f5 02 c5
	>014695	82c695	18 f5 02 be 32 f5 02 be 18 f5 02 ca 32 f5 02 b7
	>0146a5	82c6a5	18 f5 02 bc 32 f5 02 bc 18 f5 02 c8 32 f5 02 c3
	>0146b5	82c6b5	18 f5 02 bc 32 f5 02 bc 18 f5 02 c8 32 f5 02 c3
	>0146c5	82c6c5	18 fd 0e 80 20 fd 2e 80 20 f5 02 c6 32 f5 02 c6
	>0146d5	82c6d5	18 f5 02 d2 32 f5 02 c1 18 f5 02 c6 32 f5 02 c6
	>0146e5	82c6e5	18 f5 02 d2 32 f5 02 c6 18 f5 02 c1 32 f5 02 c1
	>0146f5	82c6f5	18 f5 02 cd 32 f5 02 c6 18 f5 02 c1 32 f5 02 c1
	>014705	82c705	18 f5 02 cd 32 f5 02 c6 18 fd 56 80 20 f5 02 c8
	>014715	82c715	32 f5 02 c8 18 f5 02 d4 32 f5 02 cf 18 f5 02 c8
	>014725	82c725	32 f5 02 c8 18 f5 02 d4 32 f5 02 c0 18 fd 7a 7f
	>014735	82c735	20 fd 9a 7f 20 fd 7a 7f 20 f5 02 bf 32 f5 02 bf
	>014745	82c745	18 f5 02 cb 32 f5 02 c6 18 f5 02 bf 32 f5 02 bf
	>014755	82c755	18 f5 02 cb 32 f5 02 fe 14 c6 0d 0d ff e8 80 fe
	>014765	82c765	0b d2 30 f5 02 d2 17 f5 02 fe 0c de 30 f5 02 fe
	>014775	82c775	0b d2 17 f5 02 d2 30 f5 02 d2 17 f5 02 fe 0c de
	>014785	82c785	30 f5 02 fe 0b d2 17 f5 02 d2 30 f5 02 d2 17 f5
	>014795	82c795	02 fe 0c de 30 f5 02 fe 0b d2 17 f5 02 d2 30 f5
	>0147a5	82c7a5	02 d2 17 f5 02 fe 0c de 30 f5 02 fe 0b fd fe 80
	>0147b5	82c7b5	28 fd fe 80 28 d2 17 f5 02 d2 32 f5 02 d2 18 f5
	>0147c5	82c7c5	02 fe 0c de 32 f5 02 fe 0b d2 18 f5 02 d2 32 f5
	>0147d5	82c7d5	02 d2 18 f5 02 fe 0c de 32 f5 02 fe 0b d2 18 f5
	>0147e5	82c7e5	02 d2 32 f5 02 d2 18 f5 02 fe 0c de 32 f5 02 fe
	>0147f5	82c7f5	0b d2 18 f5 02 d2 32 f5 02 d2 18 f5 02 fe 0c de
	>014805	82c805	32 f5 02 fe 0b fd 56 81 28 fd 56 81 28 fd 56 81
	>014815	82c815	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 fd 56 81
	>014825	82c825	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 fd 56 81
	>014835	82c835	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 fd 56 81
	>014845	82c845	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 fd 56 81
	>014855	82c855	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 fd 56 81
	>014865	82c865	28 fd 56 81 28 fd 56 81 28 fd 56 81 28 d2 0d 0d
	>014875	82c875	ff fc 81 fe 0a e5 17 f5 02 e5 17 f5 02 e5 17 f5
	>014885	82c885	02 e5 17 f5 02 e5 17 f5 02 e5 17 f5 02 e5 17 f5
	>014895	82c895	02 e5 17 f5 02 e5 17 f5 02 e5 17 f5 02 e5 17 f5
	>0148a5	82c8a5	02 e5 17 f5 02 e5 17 f5 02 e5 17 f5 02 e5 17 f5
	>0148b5	82c8b5	02 e5 17 f5 02 e5 17 fd 04 82 22 fd 02 82 22 fd
	>0148c5	82c8c5	04 82 22 e5 17 f5 02 e5 17 f5 02 e5 17 f5 02 e5
	>0148d5	82c8d5	17 f5 02 e5 17 f5 02 e5 17 f5 02 e5 18 f5 02 e5
	>0148e5	82c8e5	18 f5 02 e5 18 f5 02 e5 18 f5 02 e5 18 f5 02 e5
	>0148f5	82c8f5	18 f5 02 e5 18 f5 02 e5 18 f5 02 e5 18 f5 02 e5
	>014905	82c905	18 f5 02 e5 18 f5 02 fd 68 82 22 fd 66 82 22 fd
	>014915	82c915	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014925	82c925	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014935	82c935	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014945	82c945	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014955	82c955	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014965	82c965	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014975	82c975	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014985	82c985	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 fd
	>014995	82c995	68 82 22 fd 66 82 22 fd 68 82 22 fd 66 82 22 e5
	>0149a5	82c9a5	18 f5 02 fe 0a e5 0d 0d ff 34 83 f6 b0 04 fe 1e
	>0149b5	82c9b5	f7 33 d7 18 f5 02 db 18 f5 02 de 18 f5 02 e3 18
	>0149c5	82c9c5	f5 02 de 18 f5 02 db 18 f5 02 d7 fd 40 83 10 18
	>0149d5	82c9d5	f5 02 db 18 f5 02 d5 18 f5 02 d9 18 f5 02 dc 18
	>0149e5	82c9e5	f5 02 e1 18 f5 02 dc 18 f5 02 d9 18 f5 02 d5 fd
	>0149f5	82c9f5	64 83 10 18 f5 02 d9 18 f5 02 d7 18 f5 02 db 18
	>014a05	82ca05	f5 02 de fd 48 83 10 fd 40 83 10 fd 5c 83 10 fd
	>014a15	82ca15	6c 83 10 fd 64 83 10 fd 80 83 10 fd 48 83 10 fd
	>014a25	82ca25	40 83 10 fd 5c 83 10 fd 6c 83 10 fd 64 83 10 fd
	>014a35	82ca35	80 83 10 fd 48 83 10 fd 40 83 10 18 f5 02 db 18
	>014a45	82ca45	f5 02 d6 18 f5 02 db 18 f5 02 de 18 f5 02 e2 18
	>014a55	82ca55	f5 02 de 18 f5 02 db 18 f5 02 d6 fd d0 83 10 18
	>014a65	82ca65	f5 02 db 18 f5 02 d7 18 f5 02 db 18 f5 02 de fd
	>014a75	82ca75	48 83 10 fd 40 83 10 fd 5c 83 10 fd 6c 83 10 fd
	>014a85	82ca85	64 83 10 fd 80 83 10 fd 48 83 10 fd 40 83 10 fd
	>014a95	82ca95	5c 83 10 fd 6c 83 10 fd 64 83 10 fd 80 83 10 fd
	>014aa5	82caa5	48 83 10 fd 40 83 10 fd 5c 83 10 fd 6c 83 10 fd
	>014ab5	82cab5	64 83 10 fd 80 83 10 fd 48 83 10 fd 40 83 10 fd
	>014ac5	82cac5	c8 83 10 fd d8 83 10 fd d0 83 10 18 f5 02 db 18
	>014ad5	82cad5	f5 02 d4 18 f5 02 d7 18 f5 02 db 18 f5 02 e0 18
	>014ae5	82cae5	f5 02 db 18 f5 02 d7 18 f5 02 d4 fd 60 84 10 18
	>014af5	82caf5	f5 02 d7 18 f5 02 cf 18 f5 02 d2 18 f5 02 d6 18
	>014b05	82cb05	f5 02 db 18 f5 02 d6 18 f5 02 d2 18 f5 02 cf fd
	>014b15	82cb15	84 84 10 18 f5 02 d2 18 f5 02 d4 18 f5 02 d7 18
	>014b25	82cb25	f5 02 db fd 68 84 10 fd 60 84 10 fd 7c 84 10 fd
	>014b35	82cb35	8c 84 10 fd 84 84 10 18 f5 02 d2 18 f5 02 d0 18
	>014b45	82cb45	f5 02 d4 18 f5 02 d7 18 f5 02 dc 18 f5 02 d7 18
	>014b55	82cb55	f5 02 d4 18 f5 02 d0 fd cc 84 10 18 f5 02 d4 18
	>014b65	82cb65	f5 02 cb 18 f5 02 cf 18 f5 02 d2 18 f5 02 d7 18
	>014b75	82cb75	f5 02 d2 18 f5 02 cf 18 f5 02 cb fd f0 84 10 18
	>014b85	82cb85	f5 02 cf 18 f5 02 d0 18 f5 02 d4 18 f5 02 d7 fd
	>014b95	82cb95	d4 84 10 fd cc 84 10 18 f5 02 d4 18 f5 02 d2 18
	>014ba5	82cba5	f5 02 d6 18 f5 02 d9 18 f5 02 de 18 f5 02 d9 18
	>014bb5	82cbb5	f5 02 d6 18 f5 02 d2 fd 2c 85 10 18 f5 02 d6 18
	>014bc5	82cbc5	f5 02 d7 18 f5 02 db 18 f5 02 de fd 48 83 10 fd
	>014bd5	82cbd5	40 83 10 fd 5c 83 10 fd 6c 83 10 fd 64 83 10 fd
	>014be5	82cbe5	80 83 10 fd 48 83 10 fd 40 83 10 fd 5c 83 10 fd
	>014bf5	82cbf5	6c 83 10 fd 64 83 10 18 f5 02 fe 1e d9 0d 0d ff
	>014c05	82cc05	8b 85 f6 b0 04 fe 0d ca 4c f5 02 cb 32 f5 02 ca
	>014c15	82cc15	0b f5 02 cb 0b f5 02 ca 4c f5 02 c6 4c f5 02 c8
	>014c25	82cc25	0b f5 02 ca 0b f5 02 c8 0b f5 02 ca 0b f5 02 c8
	>014c35	82cc35	0b f5 02 ca 0b f5 02 c8 0b f5 02 ca 0b f5 02 c8
	>014c45	82cc45	0b f5 02 ca fd b1 85 16 fd af 85 16 0b f5 02 ca
	>014c55	82cc55	0b f5 02 c8 0b f5 02 ca 0b f5 02 ca 4c f5 02 cb
	>014c65	82cc65	32 f5 02 ca 0b f5 02 cb 0b f5 02 ca 4c f5 02 c6
	>014c75	82cc75	4c f5 02 c4 0b f5 02 c6 0b f5 02 c4 0b f5 02 c6
	>014c85	82cc85	0b f5 02 c4 0b f5 02 c6 0b f5 02 c4 0b f5 fd 03
	>014c95	82cc95	86 16 fd 01 86 16 fd ff 85 16 fd e5 85 16 fd a7
	>014ca5	82cca5	85 16 fd ad 85 16 fd ab 85 16 fd b1 85 16 fd db
	>014cb5	82ccb5	85 16 0b f5 02 cb 0b f5 02 ca 4c f5 02 c6 4c f5
	>014cc5	82ccc5	02 cd 0b f5 02 cf 0b f5 02 cd 0b f5 02 cf 0b f5
	>014cd5	82ccd5	02 cd 0b f5 02 cf 0b f5 02 cd 0b f5 02 cf fd 53
	>014ce5	82cce5	86 16 fd 51 86 16 fd 4f 86 16 fd e7 85 16 fd a9
	>014cf5	82ccf5	85 16 fd af 85 16 fd ad 85 16 fd ab 85 16 fd dd
	>014d05	82cd05	85 16 fd f3 85 16 fd 01 86 16 fd ff 85 16 fd 05
	>014d15	82cd15	86 16 02 c6 0b f5 02 c4 0b f5 02 c6 0b f5 02 c4
	>014d25	82cd25	0b f5 02 c6 0b f5 02 ca fd 95 85 16 fd ab 85 16
	>014d35	82cd35	fd b1 85 16 fd af 85 16 fd ad 85 16 fd df 85 16
	>014d45	82cd45	fd 43 86 16 fd 51 86 16 fd 4f 86 16 fd 4d 86 16
	>014d55	82cd55	0b f5 02 cd 0b f5 02 cf 0b f5 02 cd 0b f5 02 cf
	>014d65	82cd65	0b f5 02 fe 12 db 94 06 f5 02 db 94 06 f5 02 d9
	>014d75	82cd75	94 06 f5 02 fe 0d c1 18 f5 02 c3 18 f5 02 c5 18
	>014d85	82cd85	f5 02 c1 18 f5 02 c3 18 f5 02 c5 18 f5 02 fe 12
	>014d95	82cd95	db 94 fd f4 86 16 02 c5 18 f5 02 c1 18 f5 02 c3
	>014da5	82cda5	18 f5 02 c5 18 f5 02 fe 12 d7 66 f5 02 d7 18 f5
	>014db5	82cdb5	02 d9 18 f5 02 db 32 f5 02 d9 32 f5 02 d7 32 f5
	>014dc5	82cdc5	02 d6 18 f5 02 d7 18 f5 02 d9 18 f5 02 d2 94 54
	>014dd5	82cdd5	f5 02 d7 66 f5 02 d7 18 f5 02 d9 18 f5 02 db 32
	>014de5	82cde5	f5 02 d9 32 f5 02 d7 32 f5 02 d9 66 f5 02 d9 18
	>014df5	82cdf5	f5 02 db 18 f5 02 dd 32 f5 02 db 32 f5 02 d9 32
	>014e05	82ce05	f5 02 de f6 d3 04 0d ff 93 87 f6 7e 18 fe 12 dd
	>014e15	82ce15	94 06 f5 02 d6 94 06 f5 02 e5 4c f9 04 f5 02 fe
	>014e25	82ce25	0d c1 18 f5 02 c3 18 f5 02 c5 18 f5 02 c1 18 f5
	>014e35	82ce35	02 c3 18 f5 02 c5 0d f9 00 59 f5 02 fe 12 dd 94
	>014e45	82ce45	06 fd 9f 87 12 fd b1 87 12 0d f9 00 0b f9 0a f5
	>014e55	82ce55	02 fe 12 d7 66 f5 02 d7 18 f5 02 d9 18 f5 02 db
	>014e65	82ce65	32 f5 02 d9 32 f5 02 d7 32 f5 02 d6 18 f5 02 d7
	>014e75	82ce75	18 f5 02 d9 18 f5 02 d2 94 54 f5 02 d7 66 f5 fd
	>014e85	82ce85	e3 87 12 32 f5 02 d9 66 f5 02 d9 18 f5 02 db 18
	>014e95	82ce95	f5 02 dd 32 f5 02 db 32 f5 02 d9 32 f5 02 d7 94
	>014ea5	82cea5	06 f5 02 d6 f6 37 04 0d ff 34 88 f6 d7 04 fe 0d
	>014eb5	82ceb5	f7 33 ca 4c f5 02 cb 32 f5 02 ca 0b f5 02 cb 0b
	>014ec5	82cec5	f5 02 ca 4c f5 02 c6 4c f5 02 c8 0b f5 02 ca 0b
	>014ed5	82ced5	f5 02 c8 0b f5 02 ca 0b f5 02 c8 0b f5 02 ca 0b
	>014ee5	82cee5	f5 02 c8 0b f5 02 ca fd 5c 88 14 fd 58 88 14 fd
	>014ef5	82cef5	5c 88 14 0b f5 02 ca 0b f5 02 ca 4c f5 02 cb 32
	>014f05	82cf05	f5 02 ca 0b f5 02 cb 0b f5 02 ca 4c f5 02 c6 4c
	>014f15	82cf15	f5 02 c4 0b f5 02 c6 0b f5 02 c4 0b f5 02 c6 0b
	>014f25	82cf25	f5 02 c4 0b f5 02 c6 0b f5 02 c4 0b f5 02 c6 fd
	>014f35	82cf35	a4 88 14 fd a0 88 14 fd a4 88 14 0b f5 02 c6 0b
	>014f45	82cf45	f5 02 ca 4c f5 02 cb 32 f5 02 ca 0b f5 02 cb fd
	>014f55	82cf55	4c 88 14 fd 58 88 14 fd 5c 88 14 fd 58 88 14 fd
	>014f65	82cf65	5c 88 14 fd 80 88 14 0b f5 02 ca 4c f5 02 c6 4c
	>014f75	82cf75	f5 02 cd 0b f5 02 cf 0b f5 02 cd 0b f5 02 cf 0b
	>014f85	82cf85	f5 02 cd 0b f5 02 cf 0b f5 02 cd 0b f5 02 cf fd
	>014f95	82cf95	04 89 14 fd 00 89 14 fd 04 89 14 0b f5 02 cf 0b
	>014fa5	82cfa5	f5 02 ca 4c f5 02 cb 32 f5 02 ca 0b f5 02 cb fd
	>014fb5	82cfb5	4c 88 14 fd 58 88 14 fd 5c 88 14 fd 58 88 14 fd
	>014fc5	82cfc5	5c 88 14 fd 80 88 14 fd 94 88 14 fd a0 88 14 fd
	>014fd5	82cfd5	a4 88 14 fd a0 88 14 fd a4 88 14 fd c8 88 14 fd
	>014fe5	82cfe5	4c 88 14 fd 58 88 14 fd 5c 88 14 fd 58 88 14 fd
	>014ff5	82cff5	5c 88 14 fd 80 88 14 fd f4 88 14 fd 00 89 14 fd
	>015005	82d005	04 89 14 fd 00 89 14 fd 04 89 14 0b f5 02 cf 18
	>015015	82d015	f5 02 fe 12 db 4c f5 02 dd 4c f5 02 db 4c f5 02
	>015025	82d025	d6 4c f5 02 d9 4c f5 02 e5 4c f5 02 fe 0d c1 18
	>015035	82d035	f5 02 c3 18 f5 02 c5 18 f5 02 c1 18 f5 02 c3 18
	>015045	82d045	f5 02 c5 18 f5 02 fe 12 fd a1 89 14 fd b5 89 14
	>015055	82d055	f5 02 c3 18 f5 02 c5 18 f5 02 fe 12 d7 66 f5 02
	>015065	82d065	d7 18 f5 02 d9 18 f5 02 db 32 f5 02 d9 32 f5 02
	>015075	82d075	d7 32 f5 02 d6 18 f5 02 d7 18 f5 02 d9 18 f5 02
	>015085	82d085	d2 94 54 f5 02 d7 66 f5 02 d7 18 f5 02 d9 18 f5
	>015095	82d095	02 db 32 f5 02 d9 32 f5 02 d7 32 f5 02 d9 66 f5
	>0150a5	82d0a5	02 d9 18 f5 02 db 18 f5 02 dd 32 f5 02 db 32 f5
	>0150b5	82d0b5	02 d9 32 f5 02 de 94 06 f5 02 d6 f6 03 04 0d ff
	>0150c5	82d0c5	4b 8a
201	>0150c7	82d0c7	c5 05 07 16 7f c2 7f b5			music_4				.binary "../music/music_4.bin"
	>0150cf	82d0cf	80 eb 80 45 82 18 83 f7 83 fe 1a c6 32 f5 02 c6
	>0150df	82d0df	32 f5 02 c6 18 f5 02 c6 18 f5 02 c6 32 f5 02 c6
	>0150ef	82d0ef	32 f5 02 c6 32 f5 02 c6 18 f5 02 c6 18 f5 02 c6
	>0150ff	82d0ff	32 f5 02 c6 32 f5 02 c6 32 f5 02 c6 18 f5 02 c6
	>01510f	82d10f	18 fd 26 7f 1c fd 1a 7f 1c fd 22 7f 1c f5 02 c6
	>01511f	82d11f	18 f5 02 c6 18 f5 02 c6 18 f5 02 c6 18 f5 02 c6
	>01512f	82d12f	18 f5 02 c6 18 f5 02 c6 32 fd 2a 7f 1c fd 1e 7f
	>01513f	82d13f	1c fd 26 7f 1c fd 1a 7f 1c fd 22 7f 1c fd 2a 7f
	>01514f	82d14f	1c fd 1e 7f 1c fd 26 7f 1c fd 1a 7f 1c fd 22 7f
	>01515f	82d15f	1c fd 2a 7f 1c fd 1e 7f 1c fd 26 7f 1c fd 1a 7f
	>01516f	82d16f	1c fd 22 7f 1c fd 2a 7f 1c fd 1e 7f 1c f5 02 c6
	>01517f	82d17f	34 1a ff be 7f 34 fe 1b d9 66 f5 02 d9 66 f5 02
	>01518f	82d18f	d9 66 f5 02 d9 66 f5 02 d9 66 f5 02 d9 66 f5 02
	>01519f	82d19f	d9 66 f5 02 d9 32 f5 02 fe 1c cd 18 f5 02 cd 18
	>0151af	82d1af	f5 02 fe 1b d9 18 f5 02 fe 1c cd 18 f5 02 cd 18
	>0151bf	82d1bf	f5 02 cd 18 f5 02 fe 1b d9 18 f5 02 fe 1c cd 18
	>0151cf	82d1cf	f5 02 cd 18 f5 02 cd 18 f5 02 fe 1b d9 18 f5 02
	>0151df	82d1df	fe 1c cd 18 f5 02 cd 18 f5 02 cd 18 f5 02 fd ef
	>0151ef	82d1ef	7f 34 fe 1b de 18 f5 02 de 18 f5 02 de 18 f5 02
	>0151ff	82d1ff	de 18 f5 02 de 18 f5 02 de 18 f5 02 de 18 f5 02
	>01520f	82d20f	de 18 f5 02 fe 1c cd 18 f5 02 cd 18 f5 02 fe 1b
	>01521f	82d21f	d9 18 f5 02 fe 1c fd f7 7f 34 fd ef 7f 34 fd e7
	>01522f	82d22f	7f 34 fd f3 7f 34 fd eb 7f 34 fd f7 7f 34 fd ef
	>01523f	82d23f	7f 34 fd e7 7f 34 fd f3 7f 34 fd eb 7f 34 fd f7
	>01524f	82d24f	7f 34 fd ef 7f 34 fd e7 7f 34 fd f3 7f 34 fd eb
	>01525f	82d25f	7f 34 fd f7 7f 34 fd ef 7f 34 fd e7 7f 34 f5 02
	>01526f	82d26f	fe 1c cd 1a 1a ff b1 80 fa f6 fe 1d de f6 40 03
	>01527f	82d27f	fa 00 f6 3e 03 fa f6 f5 02 de f6 3e 03 fa 00 f5
	>01528f	82d28f	02 de f6 3e 03 fa f6 f5 02 de f6 40 03 fd bd 80
	>01529f	82d29f	07 fd d4 80 06 fa 00 f6 40 03 1a ff e7 80 fe 14
	>0152af	82d2af	ca 18 f5 02 be 18 f5 02 ca 18 f5 02 be 18 f5 02
	>0152bf	82d2bf	ca 18 f5 02 be 18 f5 02 ca 18 f5 02 be 18 fd f3
	>0152cf	82d2cf	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>0152df	82d2df	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>0152ef	82d2ef	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>0152ff	82d2ff	80 10 fd ef 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01530f	82d30f	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01531f	82d31f	80 10 fd ef 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01532f	82d32f	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01533f	82d33f	80 10 fd ef 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01534f	82d34f	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01535f	82d35f	80 10 fd ef 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01536f	82d36f	80 10 fd f3 80 10 fd f3 80 10 fd f3 80 10 fd f3
	>01537f	82d37f	80 10 fd ef 80 10 f5 02 d2 18 f5 02 c6 18 f5 02
	>01538f	82d38f	c6 18 f5 02 c6 18 f5 02 d2 18 f5 02 c6 18 f5 02
	>01539f	82d39f	c6 18 f5 02 c6 18 fd c3 81 10 fd c3 81 10 fd c3
	>0153af	82d3af	81 10 fd c3 81 10 fd c3 81 10 fd c3 81 10 f5 02
	>0153bf	82d3bf	cf 18 f5 02 c3 18 f5 02 c3 18 f5 02 c3 18 f5 02
	>0153cf	82d3cf	cf 18 f5 02 c3 18 f5 02 c3 18 f5 02 c3 18 fd fb
	>0153df	82d3df	81 10 fd fb 81 10 fd fb 81 10 fd fb 81 10 fd fb
	>0153ef	82d3ef	81 10 f5 02 cf 18 f5 02 c3 18 f5 02 c3 18 f5 02
	>0153ff	82d3ff	fe 14 c3 1a 1a ff 41 82 f6 80 06 fe 12 d6 32 f5
	>01540f	82d40f	02 d4 32 f5 02 d6 32 f5 02 d9 32 f5 02 d8 32 f5
	>01541f	82d41f	02 d6 32 f5 02 d8 32 f5 02 db 32 f5 02 d9 32 f5
	>01542f	82d42f	02 d8 32 f5 02 d9 32 f5 02 dd 32 f5 02 db 32 f5
	>01543f	82d43f	02 d8 32 f5 02 db 32 f5 02 d4 32 f5 02 d6 32 f5
	>01544f	82d44f	fd 4d 82 18 fd 65 82 18 02 d8 32 f5 02 db 32 f5
	>01545f	82d45f	02 d4 32 f5 02 de 32 f5 02 dd 32 f5 02 de 32 f5
	>01546f	82d46f	02 e2 32 f5 02 e0 32 f5 02 de 32 f5 02 e0 32 f5
	>01547f	82d47f	02 e4 32 f5 02 e2 32 f5 02 e0 32 f5 02 e2 32 f5
	>01548f	82d48f	02 e5 32 f5 02 e4 32 f5 02 e0 32 f5 02 e4 32 f5
	>01549f	82d49f	02 dd 32 f5 02 de 32 f5 02 dd 32 f5 02 de 32 f5
	>0154af	82d4af	02 e2 32 f5 02 e0 32 f5 fd b5 82 18 fd cd 82 18
	>0154bf	82d4bf	fd a5 82 18 fd bd 82 18 fd d5 82 18 fd ad 82 18
	>0154cf	82d4cf	fd c5 82 18 02 dd 34 1a ff 14 83 f6 ce 06 f8 b3
	>0154df	82d4df	fe 12 f7 33 d6 32 f5 02 d4 32 f5 02 d6 32 f5 02
	>0154ef	82d4ef	d9 32 f5 02 d8 32 f5 02 d6 32 f5 02 d8 32 f5 02
	>0154ff	82d4ff	db 32 f5 02 d9 32 f5 02 d8 32 f5 02 d9 32 f5 02
	>01550f	82d50f	dd 32 f5 02 db 32 f5 02 d8 32 f5 02 db 32 f5 02
	>01551f	82d51f	d4 32 f5 02 d6 32 f5 02 d4 32 f5 02 d6 32 f5 fd
	>01552f	82d52f	2c 83 15 fd 41 83 15 32 f5 02 db 32 f5 02 d4 32
	>01553f	82d53f	f5 02 de 32 f5 02 dd 32 f5 02 de 32 f5 02 e2 32
	>01554f	82d54f	f5 02 e0 32 f5 02 de 32 f5 02 e0 32 f5 02 e4 32
	>01555f	82d55f	f5 02 e2 32 f5 02 e0 32 f5 02 e2 32 f5 02 e5 32
	>01556f	82d56f	f5 02 e4 32 f5 02 e0 32 f5 02 e4 32 f5 02 dd 32
	>01557f	82d57f	f5 02 de 32 f5 02 dd 32 f5 02 de fd 88 83 15 fd
	>01558f	82d58f	9d 83 15 fd b2 83 15 fd 87 83 15 fd 9c 83 15 fd
	>01559f	82d59f	b1 83 15 fd 86 83 15 fd 9b 83 15 32 f5 02 e0 32
	>0155af	82d5af	f5 02 fe 12 e4 1a 1a ff f3 83 f6 1c 07 f8 4c fe
	>0155bf	82d5bf	12 f7 33 d6 32 f5 02 d4 32 f5 02 d6 32 f5 02 d9
	>0155cf	82d5cf	32 f5 02 d8 32 f5 02 d6 32 f5 02 d8 32 f5 02 db
	>0155df	82d5df	32 f5 02 d9 32 f5 02 d8 32 f5 02 d9 32 f5 02 dd
	>0155ef	82d5ef	32 f5 02 db 32 f5 02 d8 32 f5 02 db 32 f5 02 d4
	>0155ff	82d5ff	32 f5 02 d6 32 f5 02 d4 32 f5 02 d6 32 f5 fd 0b
	>01560f	82d60f	84 15 fd 20 84 15 32 f5 02 db 32 f5 02 de 32 f5
	>01561f	82d61f	02 dd 32 f5 02 de 32 f5 02 e2 32 f5 02 e0 32 f5
	>01562f	82d62f	02 de 32 f5 02 e0 32 f5 02 e4 32 f5 02 e2 32 f5
	>01563f	82d63f	02 e0 32 f5 02 e2 32 f5 02 e5 32 f5 02 e4 32 f5
	>01564f	82d64f	02 e0 32 f5 02 e4 32 f5 02 dd 32 f5 02 de 32 f5
	>01565f	82d65f	02 dd 32 f5 02 de 32 f5 02 e2 fd 67 84 15 fd 7c
	>01566f	82d66f	84 15 fd 91 84 15 fd 66 84 15 fd 7b 84 15 fd 90
	>01567f	82d67f	84 15 fd 65 84 15 fd 7a 84 15 34 1a ff c8 84
202	>01568e	82d68e	d3 09 07 16 7f 90 80 92			music_5				.binary "../music/music_5.bin"
	>015696	82d696	81 ef 82 78 84 01 86 09 87 fe 14 be 20 f5 02 ca
	>0156a6	82d6a6	20 f5 02 c1 20 f5 02 cd 20 f5 02 c3 20 f5 02 cf
	>0156b6	82d6b6	20 f5 02 bc 20 f5 02 c8 20 f5 02 be 20 f5 02 ca
	>0156c6	82d6c6	20 f5 02 c1 20 f5 02 cd 20 f5 02 b9 20 f5 02 c5
	>0156d6	82d6d6	20 f5 02 bc 20 f5 02 c8 20 f5 02 be 20 f5 02 ca
	>0156e6	82d6e6	20 f5 02 c1 20 f5 02 cd 20 f5 02 c3 20 f5 02 cf
	>0156f6	82d6f6	20 f5 02 bc 20 f5 02 c8 20 fd 36 7f 20 fd 56 7f
	>015706	82d706	20 fd 36 7f 20 fd 56 7f 20 fd 36 7f 20 fd 56 7f
	>015716	82d716	20 fd 36 7f 20 fd 56 7f 20 fd 36 7f 20 fd 56 7f
	>015726	82d726	20 fd 36 7f 20 fd 56 7f 20 fd 36 7f 20 f5 02 c6
	>015736	82d736	20 f5 02 c6 20 f5 02 ca 20 f5 02 c6 20 f5 02 c5
	>015746	82d746	20 f5 02 c5 20 f5 02 ca 20 f5 02 c5 20 f5 02 c3
	>015756	82d756	20 f5 02 c3 20 f5 02 c8 20 f5 02 c3 20 f5 02 c1
	>015766	82d766	20 f5 02 c1 20 f5 02 c3 20 f5 02 c5 20 fd aa 7f
	>015776	82d776	20 f5 02 c4 20 f5 02 c4 20 f5 02 cc 20 f5 02 c4
	>015786	82d786	20 f5 02 c9 20 f5 02 c9 20 f5 02 c5 20 f5 02 c5
	>015796	82d796	20 fd 56 7f 20 fd 36 7f 20 fd 56 7f 20 fd 36 7f
	>0157a6	82d7a6	20 fd 56 7f 20 fd 36 7f 20 fd 56 7f 20 fd 36 7f
	>0157b6	82d7b6	20 fd aa 7f 20 fd ca 7f 20 fd aa 7f 20 fd ee 7f
	>0157c6	82d7c6	20 fd aa 7f 20 fd ca 7f 20 fd aa 7f 20 fd ee 7f
	>0157d6	82d7d6	20 fd 56 7f 20 fd 36 7f 20 fd 56 7f 20 fd 36 7f
	>0157e6	82d7e6	20 fd 56 7f 20 fd 36 7f 20 fd 56 7f 20 f5 02 be
	>0157f6	82d7f6	20 f5 02 ca 20 f5 02 c1 20 f5 02 cd 20 f5 02 b9
	>015806	82d806	20 f5 02 c5 20 f5 02 bc 20 f5 02 fe 14 c8 11 11
	>015816	82d816	ff 8c 80 fe 1a c6 20 f5 02 fe 20 cb 20 f5 02 fe
	>015826	82d826	1b d6 20 f5 02 fe 1a c6 20 f5 02 fe 20 cb 20 f5
	>015836	82d836	02 fe 1a c6 20 f5 02 fe 1b d6 20 f5 02 fe 20 cb
	>015846	82d846	20 f5 02 fe 1a c6 20 f5 02 fe 20 cb 20 f5 02 fe
	>015856	82d856	1b d6 20 f5 02 fe 1a c6 20 f5 02 fe 20 cb 20 f5
	>015866	82d866	02 fe 1a c6 20 f5 02 fe 1b d6 20 f5 02 fe 20 cb
	>015876	82d876	20 f5 02 fe 1a c6 20 f5 02 fe 20 cb 20 f5 02 fe
	>015886	82d886	1b d6 20 f5 02 fe 1a c6 20 f5 02 fe 20 cb 20 fd
	>015896	82d896	ac 80 3e fd ba 80 3e fd 98 80 3e fd a6 80 3e fd
	>0158a6	82d8a6	b4 80 3e fd 92 80 3e fd a0 80 3e fd ae 80 3e fd
	>0158b6	82d8b6	bc 80 3e fd 9a 80 3e fd a8 80 3e fd b6 80 3e fd
	>0158c6	82d8c6	94 80 3e fd a2 80 3e fd b0 80 3e fd be 80 3e fd
	>0158d6	82d8d6	9c 80 3e fd aa 80 3e fd b8 80 3e fd 96 80 3e fd
	>0158e6	82d8e6	a4 80 3e fd b2 80 3e fd 90 80 3e fd 9e 80 3e fd
	>0158f6	82d8f6	ac 80 3e fd ba 80 3e fd 98 80 3e fd a6 80 3e fd
	>015906	82d906	b4 80 3e fd 92 80 3e fd a0 80 3e fd ae 80 3e cb
	>015916	82d916	11 11 ff 8e 81 f6 80 08 fe 1f d5 20 f5 02 d7 20
	>015926	82d926	f5 02 d9 20 f5 02 dc 20 f5 02 db 42 f5 02 d7 20
	>015936	82d936	f5 02 d9 42 f5 02 d5 42 f5 02 d9 20 f5 02 d7 20
	>015946	82d946	f5 02 d2 64 f5 02 d4 20 f5 02 d5 20 f5 02 d4 20
	>015956	82d956	f5 02 d0 20 f5 02 d2 64 f5 02 cb 20 f5 02 cf 20
	>015966	82d966	f5 02 d0 20 f5 02 cb 20 f5 02 cd 94 14 f5 02 d5
	>015976	82d976	20 f5 fd 9a 81 1f fd b9 81 1f 20 f5 02 cf 20 f5
	>015986	82d986	02 d0 20 f5 02 cb 20 f5 02 cd 94 14 f5 02 fe 13
	>015996	82d996	de 20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02
	>0159a6	82d9a6	dd 20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02
	>0159b6	82d9b6	db 20 f5 02 e4 20 f5 02 e2 20 f5 02 e4 20 f5 02
	>0159c6	82d9c6	e5 20 f5 02 e2 20 f5 02 dd 20 f5 02 e2 20 f5 02
	>0159d6	82d9d6	de 20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02
	>0159e6	82d9e6	dd 20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02
	>0159f6	82d9f6	df 20 f5 02 e4 20 f5 02 e2 20 f5 02 e4 20 f5 02
	>015a06	82da06	e9 42 f5 02 e1 42 f5 02 fe 1f d5 20 f5 02 d7 20
	>015a16	82da16	f5 02 d9 20 f5 fd a2 81 1f fd c1 81 1f 20 f5 02
	>015a26	82da26	cb 20 f5 02 cd 94 14 f5 02 d5 20 f5 02 d7 20 f5
	>015a36	82da36	02 d9 20 f5 02 dc 20 f5 02 db 42 f5 fd aa 81 1f
	>015a46	82da46	fd c9 81 1f fd 07 82 1f fd 26 82 1f fd 45 82 1f
	>015a56	82da56	fd 64 82 1f fd 4b 82 1f fd 2a 82 1f fd 49 82 1f
	>015a66	82da66	fd 68 82 1f ba f6 3e 04 f5 02 ba f6 2f 04 11 ff
	>015a76	82da76	eb 82 f6 b3 08 f9 04 fe 1f f7 26 d5 20 f5 02 d7
	>015a86	82da86	20 f5 02 d9 20 f5 02 dc 20 f5 02 db 42 f5 02 d7
	>015a96	82da96	20 f5 02 d9 42 f5 02 d5 42 f5 02 d9 20 f5 02 d7
	>015aa6	82daa6	20 f5 02 d2 64 f5 02 d4 20 f5 02 d5 20 f5 02 d4
	>015ab6	82dab6	20 f5 02 d0 20 f5 02 d2 64 f5 02 cb 20 f5 02 cf
	>015ac6	82dac6	20 f5 02 d0 20 f5 02 cb 20 f5 02 cd 94 14 f9 04
	>015ad6	82dad6	f5 02 d5 20 f5 02 d7 20 f5 02 d9 fd 01 83 15 fd
	>015ae6	82dae6	16 83 15 fd 2b 83 15 d0 20 f5 02 cb 20 f5 02 cd
	>015af6	82daf6	94 14 f5 02 fe 13 de 20 f5 02 e2 20 f5 02 e1 20
	>015b06	82db06	f5 02 e2 20 f5 02 dd 20 f5 02 e2 20 f5 02 e1 20
	>015b16	82db16	f5 02 e2 20 f5 02 db 20 f5 02 e4 20 f5 02 e2 20
	>015b26	82db26	f5 02 e4 20 f5 02 e5 20 f5 02 e2 20 f5 02 dd 20
	>015b36	82db36	f5 02 e2 20 f5 02 de 20 f5 02 e2 fd 78 83 15 f5
	>015b46	82db46	02 e2 20 f5 02 df 20 f5 02 e4 20 f5 02 e2 20 f5
	>015b56	82db56	02 e4 20 f5 02 e9 42 f5 02 e1 42 f5 02 fe 1f d5
	>015b66	82db66	20 f5 02 d7 20 f5 02 d9 20 fd 02 83 15 fd 17 83
	>015b76	82db76	15 fd 2c 83 15 20 f5 02 cb 20 f5 02 cd 94 14 f5
	>015b86	82db86	02 d5 20 f5 02 d7 20 f5 02 d9 fd 01 83 15 fd 16
	>015b96	82db96	83 15 fd 2b 83 15 fd 64 83 15 fd 79 83 15 fd 8e
	>015ba6	82dba6	83 15 fd a3 83 15 fd 78 83 15 fd bc 83 15 02 e9
	>015bb6	82dbb6	42 f5 02 e1 42 f5 02 de 20 f5 02 e2 20 f5 02 e1
	>015bc6	82dbc6	20 f5 02 fd 7f 83 15 fd 94 83 15 f5 02 dd 20 f5
	>015bd6	82dbd6	02 e2 20 f5 02 de 20 f5 02 e2 20 f5 02 e1 20 f5
	>015be6	82dbe6	fd 7e 83 15 fd c2 83 15 42 f5 02 fe 1f ba f6 3e
	>015bf6	82dbf6	04 f5 02 ba f6 fc 03 11 ff 74 84 f6 e6 08 f9 08
	>015c06	82dc06	fe 1f f7 0c d5 20 f5 02 d7 20 f5 02 d9 20 f5 02
	>015c16	82dc16	dc 20 f5 02 db 42 f5 02 d7 20 f5 02 d9 42 f5 02
	>015c26	82dc26	d5 42 f5 02 d9 20 f5 02 d7 20 f5 02 d2 64 f5 02
	>015c36	82dc36	d4 20 f5 02 d5 20 f5 02 d4 20 f5 02 d0 20 f5 02
	>015c46	82dc46	d2 64 f5 02 cb 20 f5 02 cf 20 f5 02 d0 20 f5 02
	>015c56	82dc56	cb 20 f5 02 cd 94 14 f9 08 f5 02 d5 20 f5 02 d7
	>015c66	82dc66	20 f5 02 d9 fd 8a 84 15 fd 9f 84 15 fd b4 84 15
	>015c76	82dc76	d0 20 f5 02 cb 20 f5 02 cd 94 14 f5 02 fe 13 de
	>015c86	82dc86	20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02 dd
	>015c96	82dc96	20 f5 02 e2 20 f5 02 e1 20 f5 02 e2 20 f5 02 db
	>015ca6	82dca6	20 f5 02 e4 20 f5 02 e2 20 f5 02 e4 20 f5 02 e5
	>015cb6	82dcb6	20 f5 02 e2 20 f5 02 dd 20 f5 02 e2 20 f5 02 de
	>015cc6	82dcc6	20 f5 02 e2 fd 01 85 15 f5 02 e2 20 f5 02 df 20
	>015cd6	82dcd6	f5 02 e4 20 f5 02 e2 20 f5 02 e4 20 f5 02 e9 42
	>015ce6	82dce6	f5 02 e1 42 f5 02 fe 1f d5 20 f5 02 d7 20 f5 02
	>015cf6	82dcf6	d9 20 fd 8b 84 15 fd a0 84 15 fd b5 84 15 20 f5
	>015d06	82dd06	02 cb 20 f5 02 cd 94 14 f5 02 d5 20 f5 02 d7 20
	>015d16	82dd16	f5 02 d9 fd 8a 84 15 fd 9f 84 15 fd b4 84 15 fd
	>015d26	82dd26	ed 84 15 fd 02 85 15 fd 17 85 15 fd 2c 85 15 fd
	>015d36	82dd36	01 85 15 fd 45 85 15 02 e9 42 f5 02 e1 42 f5 02
	>015d46	82dd46	de 20 f5 02 e2 20 f5 02 e1 20 f5 02 fd 08 85 15
	>015d56	82dd56	fd 1d 85 15 f5 02 dd 20 f5 02 e2 20 f5 02 de 20
	>015d66	82dd66	f5 02 e2 20 f5 02 e1 20 f5 fd 07 85 15 fd 4b 85
	>015d76	82dd76	15 42 f5 02 fe 1f ba f6 3e 04 f5 02 ba f6 c9 03
	>015d86	82dd86	11 ff fd 85 f6 38 0c fe 0e d2 0f f5 02 d2 0f f5
	>015d96	82dd96	02 d2 20 f5 02 cd 20 f5 02 cd f6 d8 03 f5 02 d2
	>015da6	82dda6	0f f5 02 d2 0f f5 02 d2 20 f5 02 cd 20 f5 02 cd
	>015db6	82ddb6	20 f5 02 fe 1d d2 f6 3e 04 f5 02 fe 0e c6 42 f5
	>015dc6	82ddc6	02 cd 20 f5 02 c6 42 f5 02 c6 20 f5 02 cd 20 f5
	>015dd6	82ddd6	02 c6 20 f5 02 c6 42 f5 02 cd 20 f5 02 c6 fd 43
	>015de6	82dde6	86 12 fd 3d 86 12 20 f5 02 c6 42 f5 02 cd 20 f5
	>015df6	82ddf6	02 c6 20 f5 02 d2 0f f5 fd 1f 86 13 d2 f6 b6 03
	>015e06	82de06	f5 02 fe 0e d2 0f f5 02 d2 0f f5 02 d2 20 fd 26
	>015e16	82de16	86 12 fe 14 ca 20 f5 02 d6 20 f5 02 cd 20 f5 02
	>015e26	82de26	d9 20 f5 02 cf 20 f5 02 db 20 f5 02 c8 20 f5 02
	>015e36	82de36	d4 20 f5 02 ca 20 f5 02 d6 20 f5 02 cd 20 f5 02
	>015e46	82de46	d9 20 f5 02 c5 20 f5 02 d1 20 f5 02 c8 20 f5 02
	>015e56	82de56	d4 20 f5 02 ca 20 f5 02 d6 20 fd 97 86 12 fd a9
	>015e66	82de66	86 12 fd bb 86 12 fd ad 86 12 fd 9f 86 12 fd b1
	>015e76	82de76	86 12 fd c3 86 12 fd 95 86 12 fd a7 86 12 fd b9
	>015e86	82de86	86 12 f5 02 d4 f6 51 04 11 ff 05 87 f6 40 04 fe
	>015e96	82de96	1c f7 7f d9 0f f5 02 f7 0c de 0f f5 02 f7 7f d9
	>015ea6	82dea6	0f f5 02 f7 0c d9 0f f5 02 f7 7f de 0f f5 02 f7
	>015eb6	82deb6	0c d9 0f f5 02 f7 7f d9 0f f5 02 f7 0c de 0f f5
	>015ec6	82dec6	02 f7 7f d9 0f f5 02 f7 0c d9 0f f5 02 f7 7f d9
	>015ed6	82ded6	0f f5 02 f7 0c d9 0f f5 02 f7 7f de 0f f5 02 f7
	>015ee6	82dee6	0c d9 0f f5 02 f7 7f d9 0f f5 02 f7 0c de 0f f5
	>015ef6	82def6	02 f7 7f d9 0f f5 02 f7 0c d9 0f f5 02 f7 7f d9
	>015f06	82df06	0f f5 02 f7 0c d9 0f f5 02 f7 7f de 0f f5 02 f7
	>015f16	82df16	0c d9 0f f5 02 f7 7f d9 0f f5 02 f7 0c de 0f f5
	>015f26	82df26	02 f7 7f de 0f f5 02 f7 0c d9 0f f5 02 f7 7f de
	>015f36	82df36	0f f5 02 f7 0c de 0f f5 02 f7 7f d9 0f f5 02 f7
	>015f46	82df46	0c de 0f f5 02 f7 7f de 0f f5 02 f7 0c d9 0f f5
	>015f56	82df56	02 f7 7f d9 0f f5 02 f7 0c de 0f f5 02 f7 7f d9
	>015f66	82df66	0f f5 02 f7 0c d9 0f f5 02 f7 7f de 0f f5 02 f7
	>015f76	82df76	0c d9 0f f5 02 f7 7f d9 0f f5 02 f7 0c de 0f f5
	>015f86	82df86	02 f7 7f d9 0f f5 02 f7 0c d9 0f f5 02 fd 1a 87
	>015f96	82df96	40 fd 8a 87 40 fd ca 87 40 fd 1a 87 40 fd 8a 87
	>015fa6	82dfa6	40 fd ca 87 40 fd 1a 87 40 fd 8a 87 40 fd ca 87
	>015fb6	82dfb6	40 fd 1a 87 40 fd 8a 87 40 fd ca 87 40 fd 1a 87
	>015fc6	82dfc6	40 fd 8a 87 40 fd ca 87 40 fd 1a 87 40 fd 8a 87
	>015fd6	82dfd6	40 fd ca 87 40 fd 1a 87 40 fd 8a 87 40 fd ca 87
	>015fe6	82dfe6	40 fd 1a 87 40 fd 8a 87 40 fd ca 87 40 fd 1a 87
	>015ff6	82dff6	40 fd 8a 87 40 fd ca 87 40 fd 1a 87 40 fd 8a 87
	>016006	82e006	40 fd ca 87 40 fd 1a 87 40 fd 8a 87 40 fd ca 87
	>016016	82e016	40 fd 1a 87 40 fd 8a 87 40 fd ca 87 40 fd 1a 87
	>016026	82e026	40 fd 8a 87 40 fd ca 87 40 fd 1a 87 40 fd 8a 87
	>016036	82e036	40 fd ca 87 40 fd 1a 87 40 fd 8a 87 40 fd ca 87
	>016046	82e046	40 fd 1a 87 40 fd 8a 87 40 fd ca 87 40 fd 1a 87
	>016056	82e056	40 fd 8a 87 40 d9 f6 40 04 11 ff d6 88
203							.send

205							.section sBank83
206	>018000	838000	03 03 03 00 03 00 03 00			SpritesChars .binary "../sprites_SNES.bin"
	>018008	838008	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018018	838018	03 00 03 00 03 00 0f 00 fc 00 fc cc fc 30 30 30
	>018028	838028	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018038	838038	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>018048	838048	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018058	838058	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018068	838068	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018078	838078	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 00 03 00
	>018088	838088	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018098	838098	03 00 03 00 03 00 0f 00 fc 00 fc 00 fc fc 30 30
	>0180a8	8380a8	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 fc 00 30 00
	>0180b8	8380b8	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>0180c8	8380c8	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>0180d8	8380d8	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 00 fc 30
	>0180e8	8380e8	fc fc fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 fc 00
	>0180f8	8380f8	fc 00 c0 00 fc 00 f0 00 00 00 00 00 03 00 00 00
	>018108	838108	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018118	838118	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018128	838128	00 00 ff c0 ff 0c ff 33 00 00 00 00 03 00 00 00
	>018138	838138	00 00 ff 00 ff 00 f3 00 00 00 00 00 00 00 00 00
	>018148	838148	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018158	838158	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018168	838168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018178	838178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00
	>018188	838188	00 00 00 00 00 00 30 00 00 00 00 00 00 00 0c 00
	>018198	838198	00 00 00 00 00 00 30 00 00 00 00 00 0c 00 00 00
	>0181a8	8381a8	00 00 ff c0 ff 33 ff 0c 00 00 00 00 0c 00 00 00
	>0181b8	8381b8	00 00 ff 00 ff 00 cc 00 00 00 00 00 00 00 30 00
	>0181c8	8381c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00
	>0181d8	8381d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181e8	8381e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181f8	8381f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018208	838208	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018218	838218	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018228	838228	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>018238	838238	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>018248	838248	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018258	838258	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018268	838268	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>018278	838278	f3 00 00 00 3c 00 30 00 0f 00 3f 30 3f 00 3f 03
	>018288	838288	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018298	838298	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182a8	8382a8	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>0182b8	8382b8	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>0182c8	8382c8	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>0182d8	8382d8	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182e8	8382e8	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>0182f8	8382f8	f3 00 00 00 3c 00 30 00 00 00 0c 00 00 00 00 00
	>018308	838308	03 03 0f 0c 3f 30 3f 03 00 00 0c 00 00 00 00 00
	>018318	838318	03 00 0f 00 3f 00 3f 00 f3 03 ff 00 ff c3 f0 f0
	>018328	838328	fc 00 ff 00 ff 03 ff c0 f3 00 fc 00 ff 00 f0 00
	>018338	838338	fc 00 ff 00 ff 00 ff 00 00 00 c0 00 c0 c0 00 00
	>018348	838348	00 00 00 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>018358	838358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018368	838368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018378	838378	00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00
	>018388	838388	03 03 03 00 0f 0c 0f 00 00 00 03 00 00 00 00 00
	>018398	838398	03 00 03 00 0f 00 0f 00 cc 0c ff 00 ff cf f0 f0
	>0183a8	8383a8	fc 00 ff 00 ff 03 ff 00 cc 00 f0 00 ff 00 f0 00
	>0183b8	8383b8	fc 00 ff 00 ff 00 ff 00 c0 00 00 00 00 00 00 00
	>0183c8	8383c8	00 00 00 00 c0 00 00 00 c0 00 00 00 00 00 00 00
	>0183d8	8383d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>0183e8	8383e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0183f8	8383f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018408	838408	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018418	838418	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018428	838428	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018438	838438	30 00 c0 00 fc 00 f0 00 0f 03 03 00 0f 00 03 00
	>018448	838448	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>018458	838458	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>018468	838468	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>018478	838478	f0 00 ff 00 c0 00 f0 00 00 00 0f 03 03 00 0f 00
	>018488	838488	03 00 03 00 03 03 0f 0f 00 00 0f 00 03 00 0f 00
	>018498	838498	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 0c fc 30
	>0184a8	8384a8	f0 00 ff 00 ff 0f f0 f0 00 00 fc 00 fc 00 f0 00
	>0184b8	8384b8	f0 00 fc 00 ff 00 f0 00 0f 03 03 00 0f 00 03 00
	>0184c8	8384c8	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>0184d8	8384d8	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>0184e8	8384e8	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>0184f8	8384f8	f0 00 ff 00 c0 00 f0 00 3c 3c 00 00 00 00 00 00
	>018508	838508	03 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00
	>018518	838518	00 00 00 00 00 00 00 00 ff 03 fc 0c 0f 0c cc 00
	>018528	838528	c0 00 00 00 00 00 00 00 ff 00 fc 00 0f 00 cc 00
	>018538	838538	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018548	838548	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018558	838558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018568	838568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018578	838578	00 00 00 00 00 00 00 00 0f 00 0f 03 03 00 00 00
	>018588	838588	00 00 00 00 00 00 00 00 0f 00 0f 00 00 00 00 00
	>018598	838598	00 00 00 00 00 00 00 00 ff c3 fc 0c c0 00 cc 0c
	>0185a8	8385a8	0f 00 00 00 00 00 00 00 ff 00 fc 00 00 00 0c 00
	>0185b8	8385b8	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185c8	8385c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185d8	8385d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185e8	8385e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185f8	8385f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018608	838608	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018618	838618	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018628	838628	f3 30 00 00 0f 0c 0c 00 fc 00 fc 00 fc 00 fc 00
	>018638	838638	f3 00 00 00 0f 00 0c 00 0f 0c 0f 00 0f 00 0f 00
	>018648	838648	0f 03 00 00 03 03 03 03 0f 00 0f 00 0f 00 0f 00
	>018658	838658	0f 00 00 00 03 00 03 00 fc 00 fc 0c fc c0 fc cc
	>018668	838668	f0 30 f0 00 3c 00 c0 c0 fc 00 fc 00 fc 00 fc 00
	>018678	838678	f0 00 c0 00 00 00 c0 00 0f 0c 3f 3c 3f 0f 33 30
	>018688	838688	03 03 03 03 0c 0c 03 03 0f 00 3f 00 3f 00 33 00
	>018698	838698	03 00 03 00 0c 00 03 00 fc 30 fc 0c fc 00 ff c0
	>0186a8	8386a8	fc 3c 00 00 0f 00 0c 00 fc 00 fc 00 fc 00 ff 00
	>0186b8	8386b8	fc 00 00 00 00 00 00 00 0f 0c 0f 00 0f 00 0f 00
	>0186c8	8386c8	0f 03 00 00 03 00 03 00 0f 00 0f 00 0f 00 0f 00
	>0186d8	8386d8	0f 00 00 00 00 00 00 00 fc 00 fc 0c fc c0 fc cc
	>0186e8	8386e8	f0 30 f0 30 3c 30 c0 00 fc 00 fc 00 fc 00 fc 00
	>0186f8	8386f8	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018708	838708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018718	838718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018728	838728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018738	838738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018748	838748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018758	838758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018768	838768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018778	838778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018788	838788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018798	838798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187a8	8387a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187b8	8387b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187c8	8387c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187d8	8387d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187e8	8387e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187f8	8387f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018808	838808	03 00 03 00 03 03 0f 0f 00 00 03 00 03 00 03 00
	>018818	838818	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018828	838828	30 30 fc 00 fc 3c f0 c0 00 00 fc 00 fc 00 30 00
	>018838	838838	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 03 03 00
	>018848	838848	03 00 03 03 03 03 3f 30 03 00 03 00 03 00 03 00
	>018858	838858	03 00 03 00 03 00 3f 00 fc 00 fc cc fc 30 30 30
	>018868	838868	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018878	838878	c0 00 fc 00 c0 00 f0 00 3f 30 3c 0c 3f 30 00 00
	>018888	838888	00 00 33 00 0f 0c 0f 03 3c 00 3c 00 3c 00 00 00
	>018898	838898	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>0188a8	8388a8	00 00 cc 00 f0 30 f0 c0 3c 00 3c 00 3c 00 00 00
	>0188b8	8388b8	00 00 cc 00 f0 00 c0 00 3f 00 3c 0c 3f 30 00 00
	>0188c8	8388c8	00 00 33 00 0f 0c 0f 03 30 00 3c 00 3f 00 00 00
	>0188d8	8388d8	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 00 00 00
	>0188e8	8388e8	00 00 cc 00 f0 30 f0 c0 fc 00 3c 00 0c 00 00 00
	>0188f8	8388f8	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 30 00 00
	>018908	838908	00 00 33 00 0f 0c 0f 03 33 00 0c 00 33 00 00 00
	>018918	838918	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>018928	838928	00 00 cc 00 f0 30 f0 c0 cc 00 30 00 cc 00 00 00
	>018938	838938	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 00 00 00
	>018948	838948	00 00 33 00 0f 0c 0f 03 3f 00 3c 00 30 00 00 00
	>018958	838958	00 00 33 00 0f 00 0f 00 fc 00 3c 30 fc 0c 00 00
	>018968	838968	00 00 cc 00 f0 30 f0 c0 0c 00 3c 00 fc 00 00 00
	>018978	838978	00 00 cc 00 f0 00 f0 00 00 00 00 00 00 00 0c 0f
	>018988	838988	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>018998	838998	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0189a8	8389a8	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>0189b8	8389b8	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 00 00
	>0189c8	8389c8	0c 0f 3f 30 33 00 f3 c0 00 00 00 00 00 00 00 00
	>0189d8	8389d8	0c 00 30 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>0189e8	8389e8	30 f0 0c fc c0 0c c3 0f 00 00 00 00 00 00 00 00
	>0189f8	8389f8	30 00 0c 00 00 00 03 00 0f 00 3f 30 3f 00 3f 03
	>018a08	838a08	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018a18	838a18	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018a28	838a28	ff 30 0c 00 00 00 00 00 fc 00 fc 00 fc 00 fc 00
	>018a38	838a38	ff 00 0c 00 00 00 00 00 3f 00 ff c3 ff 0c ff 30
	>018a48	838a48	03 03 03 03 0c 0c 0f 0f 3f 00 ff 00 ff 00 ff 00
	>018a58	838a58	03 00 03 00 0c 00 0f 00 fc 00 ff 0c fc 00 fc 0c
	>018a68	838a68	f0 30 f0 00 c0 00 00 00 fc 00 ff 00 fc 00 fc 00
	>018a78	838a78	f0 00 00 00 00 00 00 00 03 03 0f 00 cf 03 ff 0c
	>018a88	838a88	ff 00 3f 0c 3f 0c 0f 00 03 00 0c 00 cf 00 ff 00
	>018a98	838a98	ff 00 3f 00 3f 00 0f 00 c0 c0 f0 00 f3 c0 ff 30
	>018aa8	838aa8	ff 00 fc 30 fc 30 f0 00 c0 00 30 00 f3 00 ff 00
	>018ab8	838ab8	ff 00 fc 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018ac8	838ac8	ff 00 ff 0c 3f 0c 0f 00 03 00 0c 00 0f 00 3f 00
	>018ad8	838ad8	ff 00 ff 00 3f 00 0f 00 c0 c0 f0 00 f0 c0 fc 30
	>018ae8	838ae8	ff 00 ff 30 fc 30 f0 00 c0 00 30 00 f0 00 fc 00
	>018af8	838af8	ff 00 ff 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018b08	838b08	3f 00 ff 0c ff 0c cf 00 03 00 0c 00 0f 00 3f 00
	>018b18	838b18	3f 00 ff 00 ff 00 cf 00 c0 c0 f0 00 f0 c0 fc 30
	>018b28	838b28	fc 00 ff 30 ff 30 f3 00 c0 00 30 00 f0 00 fc 00
	>018b38	838b38	fc 00 ff 00 ff 00 f3 00 0f 0f 0f 00 0f 03 3f 0c
	>018b48	838b48	ff 00 ff 0c 3f 0c 0f 00 0f 00 0c 00 0f 00 3f 00
	>018b58	838b58	ff 00 ff 00 3f 00 0f 00 f0 f0 f0 00 f0 c0 fc 30
	>018b68	838b68	ff 00 ff 30 fc 30 f0 00 f0 00 30 00 f0 00 fc 00
	>018b78	838b78	ff 00 ff 00 fc 00 f0 00 f3 c0 3f c0 cf f0 c0 fc
	>018b88	838b88	30 3c 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>018b98	838b98	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>018ba8	838ba8	3c 3c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>018bb8	838bb8	3c 00 fc 00 f0 00 00 00 33 c0 ff c0 3f c0 cc f0
	>018bc8	838bc8	c0 fc 30 3f 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00
	>018bd8	838bd8	c0 00 30 00 3f 00 0f 00 cf 0f c3 3f cf 3f 03 3f
	>018be8	838be8	0f 3f 3c fc fc fc f0 f0 0f 00 03 00 0f 00 03 00
	>018bf8	838bf8	0f 00 3c 00 fc 00 f0 00 19 00 07 00 1f 00 1f 00
	>018c08	838c08	1f 00 1f 18 1f 07 7f 00 19 00 07 00 1f 00 1f 00
	>018c18	838c18	1f 00 1f 00 1f 00 7f 00 e0 00 e0 60 e0 00 f8 00
	>018c28	838c28	e0 00 e6 60 fe 80 fe 00 e0 00 e0 00 e0 00 e0 00
	>018c38	838c38	e0 00 e6 00 fe 00 fe 00 33 00 0f 00 0f 00 0f 00
	>018c48	838c48	0f 00 0f 0c 0f 03 3f 00 33 00 0f 00 0f 00 0f 00
	>018c58	838c58	0f 00 0f 00 0f 00 3f 00 cc 00 f0 00 f0 00 f0 00
	>018c68	838c68	f0 00 f0 30 fc c0 ff 00 cc 00 f0 00 f0 00 f0 00
	>018c78	838c78	f0 00 f0 00 fc 00 ff 00 0f 00 03 00 0c 00 3c 00
	>018c88	838c88	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 30 00
	>018c98	838c98	00 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ca8	838ca8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cb8	838cb8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018cc8	838cc8	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018cd8	838cd8	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ce8	838ce8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cf8	838cf8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d08	838d08	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d18	838d18	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 3c 00
	>018d28	838d28	00 00 00 00 00 00 00 00 f0 00 c0 00 30 00 3c 00
	>018d38	838d38	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d48	838d48	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d58	838d58	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018d68	838d68	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018d78	838d78	0c 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>018d88	838d88	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018d98	838d98	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>018da8	838da8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>018db8	838db8	30 00 00 00 00 00 00 00 c0 00 00 c0 03 0c 03 0c
	>018dc8	838dc8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018dd8	838dd8	00 00 00 00 00 00 00 00 00 03 03 03 30 f0 30 f0
	>018de8	838de8	30 f0 00 00 00 00 00 00 00 00 03 00 30 00 30 00
	>018df8	838df8	30 00 00 00 00 00 00 00 7f 00 ff 18 ff 18 9f 00
	>018e08	838e08	1f 00 7f 18 00 00 00 00 7f 00 ff 00 ff 00 9f 00
	>018e18	838e18	1f 00 7f 00 00 00 00 00 f8 00 f8 60 e0 60 e0 00
	>018e28	838e28	e0 00 80 00 60 60 78 00 f8 00 f8 00 e0 00 e0 00
	>018e38	838e38	e0 00 80 00 60 00 78 00 ff 00 ff 0c 3f 0c 0f 00
	>018e48	838e48	0f 00 0f 0c 3c 00 00 00 ff 00 ff 00 3f 00 0f 00
	>018e58	838e58	0f 00 0f 00 3c 00 00 00 ff 00 fc 30 f0 30 f0 00
	>018e68	838e68	f0 00 f0 30 3c 00 00 00 ff 00 fc 00 f0 00 f0 00
	>018e78	838e78	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018e88	838e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018e98	838e98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ea8	838ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018eb8	838eb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ec8	838ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ed8	838ed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ee8	838ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ef8	838ef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f08	838f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f18	838f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f28	838f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f38	838f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f48	838f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f58	838f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f68	838f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f78	838f78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f88	838f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f98	838f98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fa8	838fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fb8	838fb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fc8	838fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fd8	838fd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fe8	838fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ff8	838ff8	00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00
	>019008	839008	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019018	839018	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019028	839028	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019038	839038	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019048	839048	00 00 0f 00 3f 30 f0 f0 0f 00 00 00 00 00 00 00
	>019058	839058	00 0f 00 30 30 00 f0 0f fc fc 00 00 c0 c0 00 00
	>019068	839068	00 00 00 00 c0 c0 f0 f0 fc 00 00 00 c0 00 00 00
	>019078	839078	00 f0 00 fc c0 3c f0 0f 00 00 00 00 03 00 00 00
	>019088	839088	00 00 0f 00 cf c3 c3 c3 00 03 00 00 00 00 00 00
	>019098	839098	00 0f 00 30 c3 30 c3 3c 00 00 00 00 c0 c0 00 00
	>0190a8	8390a8	00 00 00 00 00 00 c0 c0 00 c0 00 00 c0 00 00 00
	>0190b8	8390b8	00 f0 00 fc 00 fc c0 3f 3f 00 00 00 03 00 00 00
	>0190c8	8390c8	00 00 0f 00 3f 30 f0 f0 00 00 00 00 00 00 00 00
	>0190d8	8390d8	00 0f 00 30 30 00 f0 0f fc 0c 00 00 c0 c0 00 00
	>0190e8	8390e8	00 00 00 00 c0 c0 f0 f0 0c 00 00 00 c0 00 00 00
	>0190f8	8390f8	00 f0 00 fc c0 3c f0 0f 00 00 00 00 0c 0f 3f 30
	>019108	839108	3f 00 f3 c0 33 c0 f3 c0 00 00 00 00 0c 00 30 00
	>019118	839118	00 00 c0 00 00 00 c0 00 00 00 00 00 30 f0 0c fc
	>019128	839128	c0 3c c3 0f cf 0f c3 0f 00 00 00 00 30 00 0c 00
	>019138	839138	00 00 03 00 0f 00 03 00 0c 0f 3f 30 3f 00 ff c0
	>019148	839148	33 c0 f3 c0 33 c0 cf f0 0c 00 30 00 00 00 c0 00
	>019158	839158	00 00 c0 00 00 00 c0 00 30 f0 0c fc c0 3c c3 3f
	>019168	839168	cf 0f c3 0f cf 0f 03 ff 30 00 0c 00 00 00 03 00
	>019178	839178	0f 00 03 00 0f 00 03 00 00 00 00 00 00 00 0c 0f
	>019188	839188	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019198	839198	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191a8	8391a8	0c fc c0 3c c3 0f c0 0f 00 00 00 00 00 00 30 00
	>0191b8	8391b8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 0c 0f
	>0191c8	8391c8	3f 30 3f 00 cf c0 0f c0 00 00 00 00 00 00 0c 00
	>0191d8	8391d8	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191e8	8391e8	0c fc c0 3c 03 3f 0f 3f 00 00 00 00 00 00 30 00
	>0191f8	8391f8	0c 00 00 00 03 00 0f 00 30 30 00 00 c0 00 c0 00
	>019208	839208	00 00 c0 c0 3f 3f 0c 0c 30 cf 00 f3 00 33 00 33
	>019218	839218	00 f3 c0 3f 3f 00 0c 00 0c 0c 00 00 00 00 03 03
	>019228	839228	03 03 0f 0f ff fc 33 30 0c f3 00 cf 00 cf 03 cc
	>019238	839238	03 cc 0f f0 fc 00 30 00 c0 c0 00 00 00 00 c0 00
	>019248	839248	c0 00 c0 c0 3f 3f 0c 0c c0 3f 00 cf 00 cf 00 0f
	>019258	839258	00 0f c0 3f 3f 00 0c 00 30 30 00 00 00 00 03 03
	>019268	839268	03 03 0f 0c ff fc 30 30 30 cf 00 3f 00 3f 03 3c
	>019278	839278	03 3c 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019288	839288	c0 00 c0 00 3f 3f 0c 0c 00 ff 00 3c 00 3c 00 3c
	>019298	839298	00 3c 00 3f 3f 00 0c 00 c0 c0 00 00 00 00 03 03
	>0192a8	8392a8	03 00 0f 0c fc fc 30 30 c0 3f 00 ff 00 ff 03 fc
	>0192b8	8392b8	00 fc 0c f0 fc 00 30 00 c0 c0 00 00 00 00 00 00
	>0192c8	8392c8	00 00 c0 00 ff 3f 0c 0c c0 3f 00 cf 00 cf 00 cf
	>0192d8	8392d8	00 cf 00 3f 3f 00 0c 00 30 30 00 00 00 00 03 00
	>0192e8	8392e8	03 00 0f 0f fc fc 30 30 30 cf 00 3f 00 3f 00 3c
	>0192f8	8392f8	00 3c 0f f0 fc 00 30 00 3f c0 cf f0 c0 fc 30 3c
	>019308	839308	3f 3f 0f 0f 00 00 00 00 00 00 c0 00 c0 00 30 00
	>019318	839318	3f 00 0f 00 00 00 00 00 cf 3f 03 ff 0f 3f 3c 3c
	>019328	839328	fc fc f0 f0 00 00 00 00 0f 00 03 00 0f 00 3c 00
	>019338	839338	fc 00 f0 00 00 00 00 00 c0 ff 30 3c 3c 3c 0f 0f
	>019348	839348	00 00 03 0c 00 00 c0 00 c0 00 30 00 3c 00 0f 00
	>019358	839358	00 00 00 00 00 00 00 00 0f ff 3c 3c 3c 3c f0 f0
	>019368	839368	00 00 30 f0 00 00 00 03 0f 00 3c 00 3c 00 f0 00
	>019378	839378	00 00 30 00 00 00 00 00 f3 c0 3f c0 cf f0 c0 fc
	>019388	839388	30 3c 3f 3f cf 0f 00 c0 c0 00 00 00 c0 00 c0 00
	>019398	839398	30 00 3f 00 0f 00 00 00 c3 0f c0 3f 03 ff 03 3f
	>0193a8	8393a8	0c 3c fc fc f0 f0 00 00 03 00 00 00 03 00 03 00
	>0193b8	8393b8	0c 00 fc 00 f0 00 00 00 cf c0 3f c0 cf f0 c0 f0
	>0193c8	8393c8	30 30 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>0193d8	8393d8	30 00 3f 00 0f 00 00 00 03 3f cf 3f 03 ff 0f ff
	>0193e8	8393e8	3c fc fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>0193f8	8393f8	3c 00 fc 00 f0 00 00 00 00 00 00 00 03 00 00 00
	>019408	839408	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019418	839418	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019428	839428	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019438	839438	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019448	839448	00 00 0f 00 0f 03 0f 0f 0f 00 00 00 00 00 00 00
	>019458	839458	00 0f 00 30 03 30 0f f0 fc fc 00 00 c0 c0 00 00
	>019468	839468	00 00 00 00 0c 0c 0f 0f fc 00 00 00 c0 00 00 00
	>019478	839478	00 f0 00 fc 0c f0 0f f0 00 00 00 00 03 00 00 00
	>019488	839488	00 00 0f 00 0f 00 03 03 00 03 00 00 00 00 00 00
	>019498	839498	00 0f 00 30 00 30 03 fc 00 00 00 00 c0 c0 00 00
	>0194a8	8394a8	00 00 00 00 c3 c3 c3 c3 00 c0 00 00 c0 00 00 00
	>0194b8	8394b8	00 f0 00 fc c3 3c c3 3c 3f 00 00 00 03 00 00 00
	>0194c8	8394c8	00 00 0f 00 0f 03 0f 0f 00 00 00 00 00 00 00 00
	>0194d8	8394d8	00 0f 00 30 03 30 0f f0 fc 0c 00 00 c0 c0 00 00
	>0194e8	8394e8	00 00 00 00 0c 0c 0f 0f 0c 00 00 00 c0 00 00 00
	>0194f8	8394f8	00 f0 00 fc 0c f0 0f f0 03 0c c0 00 03 cc 00 00
	>019508	839508	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019518	839518	00 00 00 00 00 00 00 00 30 f0 00 03 33 f3 00 00
	>019528	839528	30 f0 00 00 00 00 00 00 30 00 00 00 33 00 00 00
	>019538	839538	30 00 00 00 00 00 00 00 03 cc 00 00 00 00 03 0c
	>019548	839548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019558	839558	00 00 00 00 00 00 00 00 33 f3 00 00 00 00 30 f0
	>019568	839568	00 00 00 00 00 00 00 00 33 00 00 00 00 00 30 00
	>019578	839578	00 00 00 00 00 00 00 00 03 0c 00 00 03 0c 00 00
	>019588	839588	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019598	839598	00 00 00 00 00 00 00 00 30 f3 03 03 30 f0 00 00
	>0195a8	8395a8	30 f0 00 00 00 00 00 00 30 00 03 00 30 00 00 00
	>0195b8	8395b8	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>0195c8	8395c8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0195d8	8395d8	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>0195e8	8395e8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>0195f8	8395f8	30 00 00 00 00 00 00 00 30 30 00 00 00 00 00 00
	>019608	839608	00 00 00 00 ff 3f cc 0c 30 cf 00 f3 00 f3 00 f3
	>019618	839618	00 f3 00 ff 3f 00 0c 00 0c 0c 00 00 03 00 03 00
	>019628	839628	03 03 0f 0f fc fc 30 30 0c f3 00 cf 00 cc 00 cc
	>019638	839638	03 cc 0f f0 fc 00 30 00 0c 0c 00 00 00 00 00 00
	>019648	839648	00 00 c0 00 ff 3f 0c 0c 0c f3 00 fc 00 fc 00 fc
	>019658	839658	00 fc 00 3f 3f 00 0c 00 03 03 00 00 00 00 03 00
	>019668	839668	03 00 0f 0f fc fc 30 30 03 fc 00 f3 00 f3 00 f0
	>019678	839678	00 f0 0f f0 fc 00 30 00 03 03 00 00 00 00 00 00
	>019688	839688	c0 00 c0 00 3f 3f 0c 0c 03 fc 00 ff 00 ff 00 ff
	>019698	839698	00 3f 00 3f 3f 00 0c 00 00 00 00 00 00 00 00 00
	>0196a8	8396a8	03 00 0f 0c fc fc 30 30 00 ff 00 3c 00 3c 00 3c
	>0196b8	8396b8	00 3c 0c f0 fc 00 30 00 0c 0c 00 00 00 00 c0 00
	>0196c8	8396c8	c0 00 c0 c0 3f 3f 0c 0c 0c f3 00 fc 00 fc 00 3c
	>0196d8	8396d8	00 3c c0 3f 3f 00 0c 00 03 03 00 00 00 00 03 03
	>0196e8	8396e8	03 03 0f 0c ff fc 30 30 03 fc 00 f3 00 f3 03 f0
	>0196f8	8396f8	03 f0 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019708	839708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019718	839718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019728	839728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019738	839738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019748	839748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019758	839758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019768	839768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019778	839778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019788	839788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019798	839798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197a8	8397a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197b8	8397b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197c8	8397c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197d8	8397d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197e8	8397e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197f8	8397f8	00 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 0c 33
	>019808	839808	00 0c f3 00 30 00 30 00 0c 03 00 0f 30 03 00 33
	>019818	839818	00 0c 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019828	839828	00 3c c0 0c c0 0c c0 0c 30 c0 00 f0 0c f0 0c f0
	>019838	839838	00 3c 00 0c 00 0c 00 0c 0c 0f 00 0f 3c 33 0c 33
	>019848	839848	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>019858	839858	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019868	839868	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>019878	839878	00 fc 00 3c 00 3c 00 3c 0c 0f 00 0f 3c 33 0c 33
	>019888	839888	00 03 3c 00 0c 00 0c 00 0c 03 00 0f 30 03 00 33
	>019898	839898	00 03 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198a8	8398a8	00 fc 00 fc 00 fc 00 fc 30 c0 00 f0 0c f0 0c f0
	>0198b8	8398b8	00 fc 00 fc 00 fc 00 fc 0c 0f 00 0f 3c 33 0c 33
	>0198c8	8398c8	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>0198d8	8398d8	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198e8	8398e8	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>0198f8	8398f8	00 fc 00 3c 00 3c 00 3c 00 00 00 00 00 00 0c 0f
	>019908	839908	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019918	839918	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019928	839928	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>019938	839938	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 0c 0f
	>019948	839948	3f 30 3f 00 fc c0 3c c0 00 00 00 00 00 00 0c 00
	>019958	839958	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019968	839968	0c fc c0 3c c3 33 c3 33 00 00 00 00 00 00 30 00
	>019978	839978	0c 00 00 00 03 00 03 00 00 00 00 00 00 00 00 00
	>019988	839988	00 00 03 03 0f 0c 0c 0f 00 00 00 00 00 00 00 00
	>019998	839998	00 00 03 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>0199a8	8399a8	00 00 c0 c0 30 f0 f0 f0 00 00 00 00 00 00 00 00
	>0199b8	8399b8	00 00 c0 00 f0 00 f0 00 00 00 00 00 00 00 03 03
	>0199c8	8399c8	0c 0f 33 3c 33 3c 30 3f 00 00 00 00 00 00 03 00
	>0199d8	8399d8	0f 00 3c 00 3c 00 3f 00 00 00 00 00 00 00 c0 c0
	>0199e8	8399e8	30 f0 0c fc 0c fc 0c fc 00 00 00 00 00 00 c0 00
	>0199f8	8399f8	f0 00 fc 00 fc 00 fc 00 00 00 3c 0c 3c 3c 00 03
	>019a08	839a08	00 3f 30 3f 00 0f 0c 0f 00 00 0c 00 3c 00 00 03
	>019a18	839a18	00 3f 30 0f 00 0f 0c 03 00 3c 00 fc 0c fc 0c fc
	>019a28	839a28	30 f0 30 f3 c3 ff 0c fc 00 3c 00 fc 0c f0 0c f0
	>019a38	839a38	30 c0 30 c3 c3 3c 0c f0 00 00 f0 33 f0 f3 00 0f
	>019a48	839a48	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019a58	839a58	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019a68	839a68	30 f0 30 ff cf ff 30 f0 00 fc 00 fc 0c f0 0c f0
	>019a78	839a78	30 c0 30 cf cf 30 30 c0 00 03 c0 0f c0 cf 00 3f
	>019a88	839a88	00 3f 30 3f 00 0f 0c 0f 00 03 00 0f c0 0f 00 3f
	>019a98	839a98	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019aa8	839aa8	30 f0 f0 fc 0c ff 33 f3 00 fc 00 fc 0c f0 0c f0
	>019ab8	839ab8	30 c0 f0 0c 0c f3 33 c0 00 00 f0 33 f0 f3 00 0f
	>019ac8	839ac8	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019ad8	839ad8	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019ae8	839ae8	30 f0 fc fc 03 ff 3c ff 00 fc 00 fc 0c f0 0c f0
	>019af8	839af8	30 c0 fc 00 03 fc 3c c3 f3 c0 3f c0 cf f0 c0 fc
	>019b08	839b08	30 3c 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00 c0 00
	>019b18	839b18	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>019b28	839b28	3c 3c fc fc f0 f3 03 03 03 00 0f 00 03 00 0f 00
	>019b38	839b38	3c 00 fc 00 f0 00 03 00 fc c0 3f c0 cf f0 c0 ff
	>019b48	839b48	30 3f 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>019b58	839b58	30 00 3f 00 0f 00 00 00 c3 33 cf 3f 03 ff 0f 0f
	>019b68	839b68	0c 0c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>019b78	839b78	0c 00 fc 00 f0 00 00 00 0f 0f 0c 0c 03 03 00 00
	>019b88	839b88	00 00 00 00 00 00 00 00 0f 00 0c 00 03 00 00 00
	>019b98	839b98	00 00 00 00 00 00 00 00 30 30 30 30 c0 c0 00 00
	>019ba8	839ba8	00 00 00 00 00 00 00 00 30 00 30 00 c0 00 00 00
	>019bb8	839bb8	00 00 00 00 00 00 00 00 30 3f 3c 3f 3f 3f 0c 0c
	>019bc8	839bc8	03 03 00 00 00 00 00 00 3f 00 3f 00 3f 00 0c 00
	>019bd8	839bd8	03 00 00 00 00 00 00 00 3c fc fc fc 0c 0c 30 30
	>019be8	839be8	c0 c0 00 00 00 00 00 00 fc 00 fc 00 0c 00 30 00
	>019bf8	839bf8	c0 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c08	839c08	00 3c 03 30 03 30 03 30 0c 03 00 0f 30 03 30 03
	>019c18	839c18	00 3c 00 30 00 30 00 30 30 f0 00 f0 0c fc 00 fc
	>019c28	839c28	00 30 cf 00 0c 00 0c 00 30 c0 00 f0 0c f0 00 fc
	>019c38	839c38	00 30 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c48	839c48	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019c58	839c58	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019c68	839c68	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019c78	839c78	00 0c 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c88	839c88	00 3f 00 3f 00 3f 00 3f 0c 03 00 0f 30 03 30 03
	>019c98	839c98	00 3f 00 3f 00 3f 00 3f 30 f0 00 f0 0c fc 00 fc
	>019ca8	839ca8	00 c0 3c 00 30 00 30 00 30 c0 00 f0 0c f0 00 fc
	>019cb8	839cb8	00 c0 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019cc8	839cc8	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019cd8	839cd8	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019ce8	839ce8	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019cf8	839cf8	00 0c 00 00 00 00 00 00 c3 0c 00 c0 03 0c 00 00
	>019d08	839d08	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d18	839d18	00 00 00 00 00 00 00 00 30 f0 00 00 30 f0 00 00
	>019d28	839d28	30 f0 00 00 00 00 00 00 30 00 00 00 30 00 00 00
	>019d38	839d38	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>019d48	839d48	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d58	839d58	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>019d68	839d68	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>019d78	839d78	30 00 00 00 00 00 00 00 00 00 0f 0f 30 3f 03 3c
	>019d88	839d88	cf f0 cf f0 cc f3 c0 ff 00 00 0f 00 3f 00 3c 00
	>019d98	839d98	f0 00 f0 00 f3 00 ff 00 00 00 f0 f0 0c fc 00 fc
	>019da8	839da8	03 ff 03 ff 03 ff 0f ff 00 00 f0 00 fc 00 fc 00
	>019db8	839db8	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 30 0c
	>019dc8	839dc8	0c 3c 03 03 00 00 00 00 00 00 00 00 00 00 0c 00
	>019dd8	839dd8	3c 00 03 00 00 00 00 00 00 00 c0 30 30 f0 c0 c0
	>019de8	839de8	00 00 0c 03 03 0f 30 30 00 00 30 00 f0 00 c0 00
	>019df8	839df8	00 00 03 00 0f 00 30 00 00 3c 00 3f 30 3f 30 3f
	>019e08	839e08	0c 0f 0c cf c3 ff 30 3f 00 3c 00 3f 30 0f 30 0f
	>019e18	839e18	0c 03 0c c3 c3 3c 30 0f 00 00 3c 0c 3c 3c 00 c0
	>019e28	839e28	00 fc 0c fc 00 f0 30 f0 00 00 0c 00 3c 00 00 c0
	>019e38	839e38	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e48	839e48	0c 0f 0c ff f3 ff 0c 0f 00 3f 00 3f 30 0f 30 0f
	>019e58	839e58	0c 03 0c f3 f3 0c 0c 03 00 00 0f c3 0f cf 00 f0
	>019e68	839e68	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019e78	839e78	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e88	839e88	0c 0f 0f 3f 30 ff cc cf 00 3f 00 3f 30 0f 30 0f
	>019e98	839e98	0c 03 0f 30 30 cf cc 03 00 c0 03 f0 03 f3 00 fc
	>019ea8	839ea8	00 fc 0c fc 00 f0 30 f0 00 c0 00 f0 03 f0 00 fc
	>019eb8	839eb8	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019ec8	839ec8	0c 0f 3f 3f c0 ff 3c ff 00 3f 00 3f 30 0f 30 0f
	>019ed8	839ed8	0c 03 3f 00 c0 3f 3c c3 00 00 0f c3 0f cf 00 f0
	>019ee8	839ee8	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019ef8	839ef8	00 fc 0c f0 00 f0 30 c0 00 00 00 00 00 00 00 00
	>019f08	839f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f18	839f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f28	839f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f38	839f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f48	839f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f58	839f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f68	839f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f78	839f78	00 00 00 00 00 00 00 00 c0 ff c0 ff f0 ff ff ff
	>019f88	839f88	0f 0f 30 30 0f 0f 00 00 ff 00 ff 00 ff 00 ff 00
	>019f98	839f98	0f 00 30 00 0f 00 00 00 0f ff 3f ff f3 f3 c3 c3
	>019fa8	839fa8	00 00 0c 0c f0 f0 00 00 ff 00 ff 00 f3 00 c3 00
	>019fb8	839fb8	00 00 0c 00 f0 00 00 00 0c 0c c0 30 30 f0 00 00
	>019fc8	839fc8	03 03 0c 03 03 0f 00 00 0c 00 30 00 f0 00 00 00
	>019fd8	839fd8	03 00 03 00 0f 00 00 00 00 00 00 00 c0 c0 30 0c
	>019fe8	839fe8	0c 3c 00 00 00 00 00 00 00 00 00 00 c0 00 0c 00
	>019ff8	839ff8	3c 00 00 00 00 00 00 00 00 00 3f 0c 0c 00 33 00
	>01a008	83a008	33 00 00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00
	>01a018	83a018	00 33 00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00
	>01a028	83a028	3c 00 ff 0c 00 00 f0 00 00 00 30 c3 0c f3 00 3c
	>01a038	83a038	00 3c 0c f3 00 00 00 f0 3f 30 33 00 0c 00 0c 00
	>01a048	83a048	03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00 00 0c
	>01a058	83a058	00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00 f0 00
	>01a068	83a068	fc 30 00 00 fc 0c fc c0 c0 0c 30 cc 00 f0 00 f0
	>01a078	83a078	30 cc 00 00 0c f0 c0 3c 00 00 3f 30 33 00 0c 00
	>01a088	83a088	0c 00 03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00
	>01a098	83a098	00 0c 00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00
	>01a0a8	83a0a8	f0 00 fc 30 00 00 fc 0c 00 00 c0 0c 30 cc 00 f0
	>01a0b8	83a0b8	00 f0 30 cc 00 00 0c f0 3f 0c 0c 00 33 00 33 00
	>01a0c8	83a0c8	00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00 00 33
	>01a0d8	83a0d8	00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00 3c 00
	>01a0e8	83a0e8	ff 0c 00 00 f0 00 3c 0c 30 c3 0c f3 00 3c 00 3c
	>01a0f8	83a0f8	0c f3 00 00 00 f0 0c 30 00 00 00 00 03 03 03 03
	>01a108	83a108	03 03 0c 0c 0c 0c 0c 0c 00 00 00 00 03 00 03 00
	>01a118	83a118	03 00 0c 00 0c 00 0c 00 3c 3c c3 c3 00 00 3c 00
	>01a128	83a128	3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00 00 00
	>01a138	83a138	00 00 00 00 00 00 00 00 00 00 00 00 c0 c0 c0 c0
	>01a148	83a148	c0 c0 30 30 30 30 30 30 00 00 00 00 c0 00 c0 00
	>01a158	83a158	c0 00 30 00 30 00 30 00 00 00 00 00 00 00 00 00
	>01a168	83a168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a178	83a178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01a188	83a188	0c 0c 0c 0c 0c 0c 30 30 00 00 00 00 00 00 03 00
	>01a198	83a198	0c 00 0c 00 0c 00 30 00 00 00 3c 3c c3 c3 00 00
	>01a1a8	83a1a8	3c 00 3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00
	>01a1b8	83a1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01a1c8	83a1c8	30 30 30 30 30 30 0c 0c 00 00 00 00 00 00 c0 00
	>01a1d8	83a1d8	30 00 30 00 30 00 0c 00 00 00 00 00 00 00 00 00
	>01a1e8	83a1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a1f8	83a1f8	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a208	83a208	03 03 00 00 3c 0c 30 30 00 00 0f 00 0f 00 0f 00
	>01a218	83a218	03 00 00 00 0c 30 30 00 3c 0c 3c 00 3f 33 cf c0
	>01a228	83a228	cf cc 03 00 f3 00 c3 00 0c 30 00 3c 33 0c c0 0f
	>01a238	83a238	cc 03 00 03 00 33 00 c3 0f 0f 0f 0f 0f 0f 0f 0f
	>01a248	83a248	00 00 03 00 0f 0c 0c 0c 0f 00 0f 00 0f 00 0f 00
	>01a258	83a258	00 00 00 00 0c 03 0c 00 3f 03 3f 30 cf c0 cf c0
	>01a268	83a268	0f 00 cf 03 0c 00 00 00 03 3c 30 0f c0 0f c0 0f
	>01a278	83a278	00 0f 03 cc 00 0c 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a288	83a288	0f 0f 00 00 0f 00 0c 00 00 00 0f 00 0f 00 0f 00
	>01a298	83a298	0f 00 00 00 00 03 00 0c fc c0 3f 03 3f 30 cf c0
	>01a2a8	83a2a8	cf c0 0f 00 0f 03 0c 00 c0 3c 03 3c 30 0f c0 0f
	>01a2b8	83a2b8	c0 0f 00 0f 03 0c 00 0c 0f 0f 0f 0f 0f 0f 03 03
	>01a2c8	83a2c8	00 00 0f 03 0f 0c 03 00 0f 00 0f 00 0f 00 03 00
	>01a2d8	83a2d8	00 00 03 0c 0c 00 00 03 3c 00 3f 33 cf c0 cf cc
	>01a2e8	83a2e8	33 30 03 00 c3 00 00 00 00 3c 33 0c c0 0f cc 03
	>01a2f8	83a2f8	30 03 00 03 00 c3 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a308	83a308	0c 0c 0f 0c 0c 0c 0f 0c 0c 00 0c 00 0c 00 0c 00
	>01a318	83a318	0c 00 0f 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a328	83a328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a338	83a338	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a348	83a348	30 30 f0 30 30 30 f0 30 30 00 30 00 30 00 30 00
	>01a358	83a358	30 00 f0 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a368	83a368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a378	83a378	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a388	83a388	30 30 3c 30 0c 0c 0f 0c 30 00 30 00 30 00 30 00
	>01a398	83a398	30 00 3c 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a3a8	83a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3b8	83a3b8	00 00 00 00 00 00 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a3c8	83a3c8	0c 0c 3c 0c 30 30 f0 30 0c 00 0c 00 0c 00 0c 00
	>01a3d8	83a3d8	0c 00 3c 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a3e8	83a3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3f8	83a3f8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a408	83a408	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a418	83a418	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a428	83a428	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a438	83a438	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 0f c0
	>01a448	83a448	33 00 33 00 03 00 0f c0 00 00 00 00 00 00 00 00
	>01a458	83a458	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a468	83a468	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a478	83a478	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a488	83a488	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a498	83a498	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4a8	83a4a8	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a4b8	83a4b8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 c0 0c
	>01a4c8	83a4c8	33 00 33 00 00 00 c0 0c 00 00 00 00 00 00 00 00
	>01a4d8	83a4d8	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4e8	83a4e8	00 30 00 30 00 30 c0 30 00 00 00 00 30 00 00 00
	>01a4f8	83a4f8	00 00 00 00 00 00 00 00 03 03 03 03 03 03 00 00
	>01a508	83a508	00 00 00 00 00 00 00 00 03 00 03 00 03 00 00 00
	>01a518	83a518	00 00 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff c3
	>01a528	83a528	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff 00
	>01a538	83a538	3c 00 00 00 00 00 00 00 c0 c0 c0 c0 c0 c0 00 00
	>01a548	83a548	00 00 00 00 00 00 00 00 c0 00 c0 00 c0 00 00 00
	>01a558	83a558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a568	83a568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a578	83a578	00 00 00 00 00 00 00 00 0f 0c 03 03 00 00 00 00
	>01a588	83a588	00 00 00 00 00 00 00 00 0f 00 03 00 00 00 00 00
	>01a598	83a598	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c3 3c 3c
	>01a5a8	83a5a8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 3c 00
	>01a5b8	83a5b8	00 00 00 00 00 00 00 00 f0 30 c0 c0 00 00 00 00
	>01a5c8	83a5c8	00 00 00 00 00 00 00 00 f0 00 c0 00 00 00 00 00
	>01a5d8	83a5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5e8	83a5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5f8	83a5f8	00 00 00 00 00 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a608	83a608	3c 03 0f 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>01a618	83a618	00 00 00 00 00 00 00 00 00 f0 30 c0 0c fc cc fc
	>01a628	83a628	00 fc 03 ff 30 0f 00 00 00 00 00 00 0c 00 cc 00
	>01a638	83a638	00 00 03 00 00 00 00 00 ff 00 fc 03 00 03 3f 03
	>01a648	83a648	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01a658	83a658	00 00 00 00 00 00 00 00 00 f0 c0 30 00 f0 0c fc
	>01a668	83a668	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 0c 00
	>01a678	83a678	0c 00 00 00 03 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a688	83a688	3c 03 0c 03 0f 00 00 00 00 00 00 00 c0 00 00 00
	>01a698	83a698	00 00 00 00 00 00 00 00 00 f0 30 c0 00 f0 c0 f0
	>01a6a8	83a6a8	00 f0 0c fc 0c fc c0 3c 00 00 00 00 00 00 c0 00
	>01a6b8	83a6b8	00 00 0c 00 0c 00 00 00 ff 00 3f c0 00 c0 fc c3
	>01a6c8	83a6c8	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01a6d8	83a6d8	00 00 00 00 00 00 00 00 c0 30 0c f0 00 30 3c fc
	>01a6e8	83a6e8	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 3c 00
	>01a6f8	83a6f8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00
	>01a708	83a708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a718	83a718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a728	83a728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a738	83a738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a748	83a748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a758	83a758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a768	83a768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a778	83a778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a788	83a788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a798	83a798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7a8	83a7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7b8	83a7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7c8	83a7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7d8	83a7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7e8	83a7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7f8	83a7f8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01a808	83a808	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01a818	83a818	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01a828	83a828	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01a838	83a838	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01a848	83a848	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a858	83a858	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a868	83a868	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a878	83a878	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01a888	83a888	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01a898	83a898	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01a8a8	83a8a8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01a8b8	83a8b8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01a8c8	83a8c8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a8d8	83a8d8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a8e8	83a8e8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a8f8	83a8f8	fc 00 ff 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01a908	83a908	03 03 0c 0c 30 30 30 30 00 00 00 00 00 00 00 00
	>01a918	83a918	03 00 0c 00 30 00 30 00 00 00 00 00 00 00 ff ff
	>01a928	83a928	00 00 00 00 3c 00 3c 00 00 00 00 00 00 00 ff 00
	>01a938	83a938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a948	83a948	c0 c0 30 30 0c 0c 0c 0c 00 00 00 00 00 00 00 00
	>01a958	83a958	c0 00 30 00 0c 00 0c 00 00 00 00 00 00 00 00 00
	>01a968	83a968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a978	83a978	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 30
	>01a988	83a988	3f 30 3f 30 ff c0 fc c0 00 00 0f 00 0c 00 33 00
	>01a998	83a998	3f 00 3f 00 cf 00 fc 00 ff ff ff 00 ff 00 ff 00
	>01a9a8	83a9a8	c3 00 3c 3c c3 c3 c3 c3 ff 00 00 00 ff 00 ff 00
	>01a9b8	83a9b8	c3 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc 0c
	>01a9c8	83a9c8	fc 0c fc 0c ff 03 3f 03 00 00 f0 00 30 00 cc 00
	>01a9d8	83a9d8	fc 00 fc 00 f3 00 3f 00 00 00 00 00 00 00 00 00
	>01a9e8	83a9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a9f8	83a9f8	00 00 00 00 00 00 00 00 c0 cf 00 0f 00 03 00 0f
	>01aa08	83aa08	00 0c c0 0c 0c cf c0 c0 cf 00 0f 00 03 00 0f 00
	>01aa18	83aa18	0c 00 0c 00 cf 00 c0 00 00 f0 00 f3 00 30 03 f0
	>01aa28	83aa28	30 f3 33 f3 c0 c0 00 00 f0 00 f3 00 30 00 f0 00
	>01aa38	83aa38	f3 00 f3 00 c0 00 00 00 00 cf c0 cf 00 0f 00 0f
	>01aa48	83aa48	c0 0c 00 cc cc cf 00 00 cf 00 cf 00 0f 00 0f 00
	>01aa58	83aa58	0c 00 cc 00 cf 00 00 00 00 f3 03 f3 00 f0 00 f0
	>01aa68	83aa68	33 f0 30 f3 c3 c3 00 00 f3 00 f3 00 f0 00 f0 00
	>01aa78	83aa78	f0 00 f3 00 c3 00 00 00 00 0f 00 cf 00 0c c0 0f
	>01aa88	83aa88	0c cf cc cf 03 03 00 00 0f 00 cf 00 0c 00 0f 00
	>01aa98	83aa98	cf 00 cf 00 03 00 00 00 03 f3 00 f0 00 c0 00 f0
	>01aaa8	83aaa8	00 30 03 30 30 f3 03 03 f3 00 f0 00 c0 00 f0 00
	>01aab8	83aab8	30 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aac8	83aac8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aad8	83aad8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aae8	83aae8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aaf8	83aaf8	30 00 33 00 f3 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0
	>01ab08	83ab08	f0 c0 3f 30 3f 30 0f 0c c0 00 c0 00 c0 00 c0 00
	>01ab18	83ab18	f0 00 3f 00 3f 00 0f 00 00 00 00 00 00 00 00 00
	>01ab28	83ab28	00 00 00 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01ab38	83ab38	00 00 00 00 ff 00 ff 00 03 03 03 03 03 03 03 03
	>01ab48	83ab48	0f 03 fc 0c fc 0c f0 30 03 00 03 00 03 00 03 00
	>01ab58	83ab58	0f 00 fc 00 fc 00 f0 00 00 00 00 00 00 00 00 00
	>01ab68	83ab68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ab78	83ab78	00 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 ff c3
	>01ab88	83ab88	ff c3 ff c0 cf c0 3f 30 ff 00 ff 00 ff 00 ff 00
	>01ab98	83ab98	ff 00 fc 00 cf 00 3f 00 00 00 00 00 00 00 00 00
	>01aba8	83aba8	00 00 c3 c3 c3 c3 ff 3c 00 00 00 00 00 00 00 00
	>01abb8	83abb8	00 00 c3 00 c3 00 3c 00 ff c3 ff c3 ff c3 ff c3
	>01abc8	83abc8	ff c3 ff 03 f3 03 fc 3c ff 00 ff 00 ff 00 ff 00
	>01abd8	83abd8	ff 00 3f 00 f3 00 fc 00 00 00 00 00 00 00 00 00
	>01abe8	83abe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01abf8	83abf8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01ac08	83ac08	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01ac18	83ac18	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01ac28	83ac28	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01ac38	83ac38	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01ac48	83ac48	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01ac58	83ac58	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ac68	83ac68	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01ac78	83ac78	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01ac88	83ac88	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01ac98	83ac98	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01aca8	83aca8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01acb8	83acb8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01acc8	83acc8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01acd8	83acd8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ace8	83ace8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01acf8	83acf8	fc 00 ff 00 30 00 c0 00 03 03 00 00 00 00 00 00
	>01ad08	83ad08	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01ad18	83ad18	00 00 00 00 00 00 00 00 ff 00 ff ff 00 00 00 00
	>01ad28	83ad28	00 00 00 00 00 00 00 00 ff 00 ff 00 00 00 00 00
	>01ad38	83ad38	00 00 00 00 00 00 00 00 c0 c0 00 00 00 00 00 00
	>01ad48	83ad48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ad58	83ad58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad68	83ad68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad78	83ad78	00 00 00 00 00 00 00 00 3f 30 33 30 0c 0c 0f 0f
	>01ad88	83ad88	00 00 00 00 00 00 00 00 3f 00 33 00 0c 00 0f 00
	>01ad98	83ad98	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 00 00
	>01ada8	83ada8	ff ff 00 00 00 00 00 00 c3 00 ff 00 ff 00 00 00
	>01adb8	83adb8	ff 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 c3 c3
	>01adc8	83adc8	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 c3 00
	>01add8	83add8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ade8	83ade8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01adf8	83adf8	00 00 00 00 00 00 00 00 c0 cf 0c 03 00 03 00 0f
	>01ae08	83ae08	00 0f c0 0c 0c cf c0 c0 cf 00 03 00 03 00 0f 00
	>01ae18	83ae18	0f 00 0c 00 cf 00 c0 00 00 f0 c0 33 00 30 03 f0
	>01ae28	83ae28	30 f3 33 f3 c0 c0 00 00 f0 00 33 00 30 00 f0 00
	>01ae38	83ae38	f3 00 f3 00 c0 00 00 00 00 cf cc c3 00 03 00 0f
	>01ae48	83ae48	c0 0f 00 cf cc cf 00 00 cf 00 c3 00 03 00 0f 00
	>01ae58	83ae58	0f 00 cf 00 cf 00 00 00 00 f3 c3 33 00 30 00 f0
	>01ae68	83ae68	33 f0 30 f3 c3 c3 00 00 f3 00 33 00 30 00 f0 00
	>01ae78	83ae78	f0 00 f3 00 c3 00 00 00 00 0f 03 cc 00 0c c0 0f
	>01ae88	83ae88	0c cf cc cf 03 03 00 00 0f 00 cc 00 0c 00 0f 00
	>01ae98	83ae98	cf 00 cf 00 03 00 00 00 03 f3 30 c0 00 c0 00 f0
	>01aea8	83aea8	00 f0 03 30 30 f3 03 03 f3 00 c0 00 c0 00 f0 00
	>01aeb8	83aeb8	f0 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aec8	83aec8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aed8	83aed8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aee8	83aee8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aef8	83aef8	30 00 33 00 f3 00 00 00 00 00 00 00 00 00 00 00
	>01af08	83af08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af18	83af18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af28	83af28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af38	83af38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af48	83af48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af58	83af58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af68	83af68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af78	83af78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af88	83af88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af98	83af98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afa8	83afa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afb8	83afb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afc8	83afc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afd8	83afd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afe8	83afe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01aff8	83aff8	00 00 00 00 00 00 00 00 00 00 03 03 0f 03 0f 0f
	>01b008	83b008	3f 3c 3c 3c 3c 3c ff ff 00 00 00 00 00 00 00 00
	>01b018	83b018	00 00 00 00 00 00 00 00 00 00 c0 c0 f0 f0 f0 f0
	>01b028	83b028	3c 3c 3c 3c 3c 3c ff ff 00 00 00 00 30 00 30 00
	>01b038	83b038	3c 00 3c 00 3c 00 3c 00 00 00 03 00 03 00 0f 00
	>01b048	83b048	0c 00 0c 00 0f 03 3f 00 00 00 00 00 00 00 00 00
	>01b058	83b058	00 00 00 00 03 00 00 00 00 00 c0 c0 c0 00 f0 30
	>01b068	83b068	f0 30 f0 30 f0 30 fc 30 00 00 00 00 00 00 00 00
	>01b078	83b078	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 00
	>01b088	83b088	0f 0f 0f 0c 0f 0f 0f 0f 00 00 00 00 00 00 00 00
	>01b098	83b098	0c 00 0c 00 0c 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b0a8	83b0a8	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 00 00 00 00
	>01b0b8	83b0b8	f0 00 30 00 f0 00 f0 00 00 00 03 03 03 03 0f 0f
	>01b0c8	83b0c8	0f 0f 0f 0f 0f 0f 3f 3f 00 00 00 00 00 00 00 00
	>01b0d8	83b0d8	03 00 03 00 03 00 33 00 00 00 c0 c0 c0 c0 f0 f0
	>01b0e8	83b0e8	f0 f0 30 30 30 30 fc fc 00 00 00 00 c0 00 f0 00
	>01b0f8	83b0f8	30 00 30 00 30 00 fc 00 3c 3c ff c3 c3 c3 c3 c3
	>01b108	83b108	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b118	83b118	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b128	83b128	00 00 3c 3c ff c3 c3 c3 00 00 00 00 00 00 00 00
	>01b138	83b138	00 00 3c 00 c3 00 ff 00 3c 3c ff c3 c3 c3 c3 c3
	>01b148	83b148	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b158	83b158	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b168	83b168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b178	83b178	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 33
	>01b188	83b188	3f 3f 3f 3f ff cf fc fc 00 00 0f 00 0c 00 30 00
	>01b198	83b198	30 00 30 00 c0 00 c0 00 ff ff ff 00 ff ff ff ff
	>01b1a8	83b1a8	c3 c3 3c 3c c3 c3 c3 c3 ff 00 00 00 00 00 00 00
	>01b1b8	83b1b8	00 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc cc
	>01b1c8	83b1c8	fc fc fc fc ff f3 3f 3f 00 00 f0 00 30 00 0c 00
	>01b1d8	83b1d8	0c 00 0c 00 03 00 03 00 00 00 00 00 00 00 00 00
	>01b1e8	83b1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b1f8	83b1f8	00 00 00 00 00 00 00 00 ff ff cf cf cf cf 03 03
	>01b208	83b208	0f 03 3f 3f 3c 3c 30 30 00 00 00 00 00 00 00 00
	>01b218	83b218	00 00 00 00 00 00 00 00 ff ff f3 f3 f3 f3 c0 c0
	>01b228	83b228	f0 f0 fc fc 3c 3c 0c 0c 3c 00 30 00 f0 00 c0 00
	>01b238	83b238	00 00 00 00 00 00 00 00 3f 00 3f 00 33 00 03 00
	>01b248	83b248	03 00 0f 00 0f 03 0c 0c 00 00 00 00 00 00 00 00
	>01b258	83b258	00 00 00 00 00 00 00 00 fc 30 fc 30 cc c0 c0 c0
	>01b268	83b268	c0 c0 f0 30 f0 30 30 30 00 00 00 00 00 00 00 00
	>01b278	83b278	00 00 00 00 00 00 00 00 0f 0f 0f 0f 03 03 03 03
	>01b288	83b288	03 00 03 00 03 03 03 03 0c 00 0c 00 03 00 03 00
	>01b298	83b298	00 00 00 00 00 00 00 00 f0 f0 c0 c0 00 00 00 00
	>01b2a8	83b2a8	c0 c0 c0 c0 c0 c0 c0 c0 f0 00 c0 00 00 00 00 00
	>01b2b8	83b2b8	00 00 00 00 c0 00 c0 00 3f 3f 3f 3f 33 33 03 03
	>01b2c8	83b2c8	03 03 0f 0f 0f 0f 0c 0c 33 00 33 00 30 00 00 00
	>01b2d8	83b2d8	00 00 00 00 0f 00 0c 00 fc fc fc fc cc cc c0 c0
	>01b2e8	83b2e8	c0 c0 f0 f0 f0 f0 30 30 fc 00 fc 00 cc 00 c0 00
	>01b2f8	83b2f8	c0 00 f0 00 f0 00 30 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b308	83b308	c3 c3 c3 c3 c3 c3 c3 c0 ff 00 ff 00 ff 00 ff 00
	>01b318	83b318	ff 00 ff 00 ff 00 fc 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b328	83b328	c3 c3 c3 c3 c3 c3 c3 00 ff 00 ff 00 ff 00 ff 00
	>01b338	83b338	ff 00 ff 00 ff 00 3c 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b348	83b348	c3 c3 c3 c3 c3 c3 c3 03 ff 00 ff 00 ff 00 ff 00
	>01b358	83b358	ff 00 ff 00 ff 00 3f 00 00 00 00 00 00 00 00 00
	>01b368	83b368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b378	83b378	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
	>01b388	83b388	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b398	83b398	c3 00 c3 00 c3 00 c3 00 00 00 3c 3c ff c3 ff ff
	>01b3a8	83b3a8	ff ff c3 c3 3c 3c 00 00 00 00 3c 00 c3 00 c3 00
	>01b3b8	83b3b8	c3 00 c3 00 3c 00 00 00 ff ff ff ff ff ff ff ff
	>01b3c8	83b3c8	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b3d8	83b3d8	c3 00 c3 00 c3 00 c3 00 00 00 00 00 00 00 00 00
	>01b3e8	83b3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b3f8	83b3f8	00 00 00 00 00 00 00 00 00 00 30 30 3c 3c 3f 3f
	>01b408	83b408	0f 0f 03 03 cf c3 cf cf 00 00 00 00 00 00 00 00
	>01b418	83b418	00 00 00 00 00 00 00 00 00 00 0c 0c 3c 0c fc fc
	>01b428	83b428	f0 f0 c0 c0 f3 f3 f3 f3 00 00 00 00 00 00 00 00
	>01b438	83b438	00 00 00 00 30 00 30 00 00 00 0c 00 0f 00 0f 00
	>01b448	83b448	03 00 03 00 33 00 3f 00 00 00 00 00 00 00 00 00
	>01b458	83b458	00 00 00 00 00 00 00 00 00 00 30 30 f0 30 f0 30
	>01b468	83b468	c0 c0 c0 c0 cc c0 fc 30 00 00 00 00 00 00 00 00
	>01b478	83b478	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 03
	>01b488	83b488	03 03 03 03 03 03 0f 0c 00 00 00 00 00 00 00 00
	>01b498	83b498	00 00 03 00 03 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b4a8	83b4a8	c0 c0 00 00 00 00 f0 f0 00 00 00 00 00 00 c0 00
	>01b4b8	83b4b8	c0 00 00 00 00 00 30 00 00 00 0c 0c 0f 0f 0f 0f
	>01b4c8	83b4c8	03 03 03 03 33 33 3f 3f 00 00 00 00 0f 00 0f 00
	>01b4d8	83b4d8	00 00 00 00 30 00 33 00 00 00 30 30 f0 f0 f0 f0
	>01b4e8	83b4e8	c0 c0 c0 c0 cc cc fc fc 00 00 00 00 30 00 f0 00
	>01b4f8	83b4f8	c0 00 c0 00 cc 00 fc 00 c0 c0 c0 c0 c0 c0 30 30
	>01b508	83b508	0f 0f 00 00 00 00 00 00 ff 00 ff 00 cf 00 30 00
	>01b518	83b518	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c
	>01b528	83b528	c3 c3 00 00 00 00 00 00 ff 00 ff 00 c3 00 3c 00
	>01b538	83b538	c3 00 00 00 00 00 00 00 03 03 03 03 03 03 0c 0c
	>01b548	83b548	f0 f0 00 00 00 00 00 00 ff 00 ff 00 f3 00 0c 00
	>01b558	83b558	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b568	83b568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b578	83b578	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b588	83b588	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b598	83b598	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5a8	83b5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5b8	83b5b8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b5c8	83b5c8	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b5d8	83b5d8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5e8	83b5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5f8	83b5f8	00 00 00 00 00 00 00 00 ff ff ff ff 3f 3c 3c 3c
	>01b608	83b608	3c 3c 0f 0f 0f 0f 03 03 00 00 00 00 00 00 00 00
	>01b618	83b618	00 00 00 00 00 00 00 00 ff ff ff ff 3c 3c 3c 3c
	>01b628	83b628	3c 3c f0 f0 f0 f0 c0 c0 3c 00 3c 00 3c 00 3c 00
	>01b638	83b638	3c 00 30 00 f0 00 c0 00 3f 00 3f 00 0c 00 0c 00
	>01b648	83b648	0f 03 0f 00 03 00 03 03 00 00 00 00 00 00 00 00
	>01b658	83b658	03 00 00 00 00 00 00 00 fc 30 fc 30 f0 30 f0 30
	>01b668	83b668	f0 30 f0 f0 c0 c0 c0 c0 00 00 00 00 00 00 00 00
	>01b678	83b678	00 00 00 00 00 00 00 00 0f 0c 0f 0f 0f 0f 0f 0f
	>01b688	83b688	0f 0f 03 03 03 03 03 03 0c 00 0c 00 0c 00 0f 00
	>01b698	83b698	0c 00 03 00 03 00 03 00 f0 f0 f0 f0 f0 f0 30 30
	>01b6a8	83b6a8	c0 c0 00 00 00 00 00 00 30 00 f0 00 f0 00 30 00
	>01b6b8	83b6b8	c0 00 00 00 00 00 00 00 3f 3f 3f 3f 0f 0f 0f 0f
	>01b6c8	83b6c8	0f 0f 0f 0f 03 03 03 03 33 00 33 00 03 00 03 00
	>01b6d8	83b6d8	03 00 03 00 00 00 00 00 fc fc fc fc f0 f0 30 30
	>01b6e8	83b6e8	30 30 f0 f0 c0 c0 c0 c0 fc 00 fc 00 30 00 30 00
	>01b6f8	83b6f8	30 00 f0 00 c0 00 c0 00 00 00 00 00 00 00 00 00
	>01b708	83b708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b718	83b718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b728	83b728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b738	83b738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b748	83b748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b758	83b758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b768	83b768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b778	83b778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b788	83b788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b798	83b798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7a8	83b7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7b8	83b7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7c8	83b7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7d8	83b7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7e8	83b7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7f8	83b7f8	00 00 00 00 00 00 00 00 30 00 fc 3c c0 c0 3f 30
	>01b808	83b808	3f 00 ff c0 3c 00 c3 00 00 30 3c c0 c0 00 30 0f
	>01b818	83b818	00 33 c0 3f 00 3c 00 00 0c 00 3f 0f cf cf f0 30
	>01b828	83b828	f0 00 fc 0c fc 00 3c 00 00 0c 0f 30 cf 00 30 c0
	>01b838	83b838	00 f0 0c f0 00 fc 00 3c 00 00 00 00 3f 30 3f 00
	>01b848	83b848	ff c0 3c 00 c3 00 c3 00 00 00 00 00 30 0f 00 33
	>01b858	83b858	c0 3f 00 3c 00 00 00 c3 00 00 00 00 f0 30 f3 03
	>01b868	83b868	fc 0c fc 00 3c 00 3c 00 00 00 00 00 30 c0 03 f0
	>01b878	83b878	0c f0 00 fc 00 3c 00 3c 30 00 fc 3c c0 c0 3f 30
	>01b888	83b888	3f 00 ff c0 cf 00 30 00 00 30 3c c0 c0 00 30 0f
	>01b898	83b898	00 33 c0 3f 00 cf 00 00 0c 00 3f 0f cf cf f0 30
	>01b8a8	83b8a8	f0 00 fc 0c 3c 00 cc 00 00 0c 0f 30 cf 00 30 c0
	>01b8b8	83b8b8	00 f0 0c f0 00 3c 00 0c 00 00 00 00 3f 30 3f 00
	>01b8c8	83b8c8	ff c0 cf 00 30 00 30 00 00 00 00 00 30 0f 00 33
	>01b8d8	83b8d8	c0 3f 00 cf 00 00 00 30 00 00 00 00 f0 30 f3 03
	>01b8e8	83b8e8	fc 0c 3c 00 cc 00 cc 00 00 00 00 00 30 c0 03 f0
	>01b8f8	83b8f8	0c f0 00 3c 00 0c 00 cc 3c 3c ff c3 c3 ff c3 ff
	>01b908	83b908	c3 ff c3 ff c3 ff c3 ff 3c 00 c3 00 c3 3c c3 3c
	>01b918	83b918	c3 3c c3 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01b928	83b928	00 00 00 00 03 03 ff fc 00 00 00 00 00 00 00 00
	>01b938	83b938	00 00 00 00 03 00 fc 00 3c 3c ff c3 c3 ff c3 ff
	>01b948	83b948	c3 ff c3 ff c3 3f 0c fc 3c 00 c3 00 c3 3c c3 3c
	>01b958	83b958	c3 3c c3 3c 03 3c 0c f0 00 00 00 00 00 00 00 00
	>01b968	83b968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b978	83b978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01b988	83b988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01b998	83b998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01b9a8	83b9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01b9b8	83b9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01b9c8	83b9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9d8	83b9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9e8	83b9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9f8	83b9f8	00 00 00 00 00 00 00 00 c3 00 3c 00 ff 00 cf cc
	>01ba08	83ba08	33 00 3f 30 00 00 00 00 00 c3 00 3c 00 ff cc 03
	>01ba18	83ba18	00 33 30 0f 00 00 00 00 3c 00 fc 00 fc 00 fc 0c
	>01ba28	83ba28	f3 03 f3 30 0f 00 3f 33 00 3c 00 fc 00 fc 0c f0
	>01ba38	83ba38	03 f0 30 c3 00 0f 33 0c 3c 00 ff 00 cf cc 33 00
	>01ba48	83ba48	3f 30 00 00 00 00 00 00 00 3c 00 ff cc 03 00 33
	>01ba58	83ba58	30 0f 00 00 00 00 00 00 fc 00 fc 00 fc 0c f3 03
	>01ba68	83ba68	f3 30 0f 00 3f 33 00 00 00 fc 00 fc 0c f0 03 f0
	>01ba78	83ba78	30 c3 00 0f 33 0c 00 00 30 00 cf 00 ff 00 f3 c3
	>01ba88	83ba88	3c 00 3f 30 00 00 00 00 00 30 00 cf 00 ff c3 30
	>01ba98	83ba98	00 3c 30 0f 00 00 00 00 cc 00 3c 00 fc 00 fc 0c
	>01baa8	83baa8	f0 00 f0 30 0c 00 fc cc 00 cc 00 3c 00 fc 0c f0
	>01bab8	83bab8	00 f0 30 c0 00 0c cc 30 cf 00 ff 00 f3 c3 3c 00
	>01bac8	83bac8	3f 30 00 00 00 00 00 00 00 cf 00 ff c3 30 00 3c
	>01bad8	83bad8	30 0f 00 00 00 00 00 00 3c 00 fc 00 fc 0c f0 00
	>01bae8	83bae8	f0 30 0c 00 fc cc 00 00 00 3c 00 fc 0c f0 00 f0
	>01baf8	83baf8	30 c0 00 0c cc 30 00 00 c0 ff c0 ff c0 ff c0 ff
	>01bb08	83bb08	c3 ff c3 ff c3 ff c3 ff c0 3f c0 3f c0 3f c0 3f
	>01bb18	83bb18	c3 3c c3 3c c3 3c c3 3c 00 ff 00 ff 00 ff 00 ff
	>01bb28	83bb28	fc fc 03 03 00 00 00 00 00 ff 00 ff 00 ff 00 ff
	>01bb38	83bb38	fc 00 03 00 00 00 00 00 0c fc 30 f0 30 f0 0c fc
	>01bb48	83bb48	0c fc 03 3f c3 ff c3 ff 0c f0 30 c0 30 c0 0c f0
	>01bb58	83bb58	0c f0 03 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01bb68	83bb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bb78	83bb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01bb88	83bb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01bb98	83bb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01bba8	83bba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01bbb8	83bbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01bbc8	83bbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbd8	83bbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbe8	83bbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbf8	83bbf8	00 00 00 00 00 00 00 00 30 00 fc 3c f3 f3 0f 0c
	>01bc08	83bc08	0f 00 3f 30 3f 00 3c 00 00 30 3c c0 f3 00 0c 03
	>01bc18	83bc18	00 0c 30 0f 00 3f 00 3c 0c 00 3f 0f 03 03 fc 0c
	>01bc28	83bc28	fc 00 ff 03 3c 00 c3 00 00 0c 0f 30 03 00 0c f0
	>01bc38	83bc38	00 fc 03 fc 00 3c 00 00 00 00 00 00 0f 0c cf c0
	>01bc48	83bc48	3f 30 3f 00 3c 00 3c 00 00 00 00 00 0c 03 c0 0c
	>01bc58	83bc58	30 0f 00 3f 00 3c 00 3c 00 00 00 00 fc 0c fc 00
	>01bc68	83bc68	ff 03 3c 00 c3 00 c3 00 00 00 00 00 0c f0 00 fc
	>01bc78	83bc78	03 fc 00 3c 00 00 00 c3 30 00 fc 3c f3 f3 0f 0c
	>01bc88	83bc88	0f 00 3f 30 3c 00 33 00 00 30 3c c0 f3 00 0c 03
	>01bc98	83bc98	00 0c 30 0f 00 3c 00 30 0c 00 3f 0f 03 03 fc 0c
	>01bca8	83bca8	fc 00 ff 03 f3 00 0c 00 00 0c 0f 30 03 00 0c f0
	>01bcb8	83bcb8	00 fc 03 fc 00 f3 00 00 00 00 00 00 0f 0c cf c0
	>01bcc8	83bcc8	3f 30 3c 00 33 00 33 00 00 00 00 00 0c 03 c0 0c
	>01bcd8	83bcd8	30 0f 00 3c 00 30 00 33 00 00 00 00 fc 0c fc 00
	>01bce8	83bce8	ff 03 f3 00 0c 00 0c 00 00 00 00 00 0c f0 00 fc
	>01bcf8	83bcf8	03 fc 00 f3 00 00 00 0c c3 ff c3 ff c3 ff c3 c3
	>01bd08	83bd08	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd18	83bd18	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd28	83bd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd38	83bd38	00 00 00 00 00 00 00 00 c3 ff c3 ff c3 ff c3 c3
	>01bd48	83bd48	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd58	83bd58	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd68	83bd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd78	83bd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd88	83bd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd98	83bd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bda8	83bda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdb8	83bdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdc8	83bdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdd8	83bdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bde8	83bde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdf8	83bdf8	00 00 00 00 00 00 00 00 3c 00 3f 00 3f 00 3f 30
	>01be08	83be08	cf c0 cf 0c f0 00 fc cc 00 3c 00 3f 00 3f 30 0f
	>01be18	83be18	c0 0f 0c 03 00 f0 cc 30 c3 00 3c 00 ff 00 f3 33
	>01be28	83be28	cc 00 fc 0c 00 00 00 00 00 c3 00 3c 00 ff 33 c0
	>01be38	83be38	00 cc 0c f0 00 00 00 00 3f 00 3f 00 3f 30 cf c0
	>01be48	83be48	cf 0c f0 00 fc cc 00 00 00 3f 00 3f 30 0f c0 0f
	>01be58	83be58	0c 03 00 f0 cc 30 00 00 3c 00 ff 00 f3 33 cc 00
	>01be68	83be68	fc 0c 00 00 00 00 00 00 00 3c 00 ff 33 c0 00 cc
	>01be78	83be78	0c f0 00 00 00 00 00 00 33 00 3c 00 3f 00 3f 30
	>01be88	83be88	0f 00 0f 0c 30 00 3f 33 00 33 00 3c 00 3f 30 0f
	>01be98	83be98	00 0f 0c 03 00 30 33 0c 0c 00 f3 00 ff 00 cf c3
	>01bea8	83bea8	3c 00 fc 0c 00 00 00 00 00 0c 00 f3 00 ff c3 0c
	>01beb8	83beb8	00 3c 0c f0 00 00 00 00 3c 00 3f 00 3f 30 0f 00
	>01bec8	83bec8	0f 0c 30 00 3f 33 00 00 00 3c 00 3f 30 0f 00 0f
	>01bed8	83bed8	0c 03 00 30 33 0c 00 00 f3 00 ff 00 cf c3 3c 00
	>01bee8	83bee8	fc 0c 00 00 00 00 00 00 00 f3 00 ff c3 0c 00 3c
	>01bef8	83bef8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf08	83bf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf18	83bf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf28	83bf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf38	83bf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf48	83bf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf58	83bf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf68	83bf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf78	83bf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf88	83bf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf98	83bf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfa8	83bfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfb8	83bfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfc8	83bfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfd8	83bfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfe8	83bfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bff8	83bff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c008	83c008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c018	83c018	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c028	83c028	3c ff 3c ff 33 ff 30 fc 30 0f 00 3f cf 30 3f c0
	>01c038	83c038	3c c3 3c c3 33 cc 30 cc c0 c0 00 c0 00 cf c0 ff
	>01c048	83c048	00 ff 00 ff 30 3f c0 0f c0 00 00 c0 00 cf c0 3f
	>01c058	83c058	00 ff 00 ff 30 0f 00 0f 00 00 00 00 00 00 00 00
	>01c068	83c068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c078	83c078	00 00 00 00 00 00 00 00 00 00 00 00 03 03 00 03
	>01c088	83c088	00 03 00 03 00 03 00 03 00 00 00 00 03 00 00 03
	>01c098	83c098	00 03 00 03 00 03 00 03 c3 ff 00 ff 3c ff ff ff
	>01c0a8	83c0a8	fc ff fc ff f0 ff 30 ff c3 3c 00 ff 3c c3 ff 00
	>01c0b8	83c0b8	fc 03 fc 03 f0 0f 30 cf 00 00 00 00 c0 cf 00 ff
	>01c0c8	83c0c8	00 ff 00 ff cc cf 30 00 00 00 00 00 c0 0f 00 ff
	>01c0d8	83c0d8	00 ff 00 ff cc 03 00 00 00 00 00 00 00 00 00 00
	>01c0e8	83c0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c0f8	83c0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c108	83c108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c118	83c118	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c128	83c128	3f ff 3f ff 3c ff 0c ff 30 0f 00 3f cf 30 3f c0
	>01c138	83c138	3f c0 3f c0 3c c3 0c f3 c0 c0 00 c0 0c ff c0 ff
	>01c148	83c148	00 ff 00 ff 33 f3 0c c0 c0 00 00 c0 0c f3 c0 3f
	>01c158	83c158	00 ff 00 ff 33 c0 00 c0 00 00 00 00 00 00 00 00
	>01c168	83c168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c178	83c178	00 00 00 00 00 00 00 00 03 03 00 03 30 ff 03 ff
	>01c188	83c188	00 ff 00 ff cc cf 30 03 03 00 00 03 30 cf 03 fc
	>01c198	83c198	00 ff 00 ff cc 03 00 03 0c fc 00 fc f3 ff fc ff
	>01c1a8	83c1a8	fc ff fc ff 3c ff 30 ff 0c f0 00 fc f3 0c fc 03
	>01c1b8	83c1b8	fc 03 fc 03 3c c3 30 cf 00 00 00 00 00 00 00 00
	>01c1c8	83c1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1d8	83c1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1e8	83c1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1f8	83c1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c208	83c208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c218	83c218	00 00 00 00 00 00 00 00 c0 fc 33 3f 30 3f 00 0f
	>01c228	83c228	00 0f 00 0f 0c 0f 0c 0f c0 3c 33 0c 30 0f 00 0f
	>01c238	83c238	00 0f 00 0f 0c 03 0c 03 00 0f 30 3f 3c ff 30 00
	>01c248	83c248	00 00 c3 c3 00 c3 3c ff 00 0f 30 0f 3c c3 00 00
	>01c258	83c258	00 00 c3 00 00 c3 3c c3 00 00 00 00 00 00 00 00
	>01c268	83c268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c278	83c278	00 00 00 00 00 00 00 00 03 03 00 00 00 00 00 00
	>01c288	83c288	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01c298	83c298	00 00 00 00 00 00 00 00 00 ff 30 ff 30 3f 00 0f
	>01c2a8	83c2a8	00 0f 0c 0f 0c 0f 00 03 00 ff 30 cf 30 0f 00 0f
	>01c2b8	83c2b8	00 0f 0c 03 0c 03 00 03 00 00 cc cf 03 ff 03 f0
	>01c2c8	83c2c8	00 f0 0c fc 00 fc 03 ff 00 00 cc 03 03 fc 00 f0
	>01c2d8	83c2d8	00 f0 0c f0 00 fc 03 fc 00 00 00 00 00 00 00 00
	>01c2e8	83c2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c2f8	83c2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c308	83c308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c318	83c318	00 00 00 00 00 00 00 00 c0 ff 00 3f 3c 3f 0c 0f
	>01c328	83c328	00 0f 0c 0f 00 03 03 03 c0 3f 00 3f 3c 03 0c 03
	>01c338	83c338	00 0f 0c 03 00 03 03 00 00 c0 33 f3 00 ff 00 ff
	>01c348	83c348	00 ff 00 ff 00 ff 00 ff 00 c0 33 c0 00 ff 00 ff
	>01c358	83c358	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c368	83c368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c378	83c378	00 00 00 00 00 00 00 00 00 03 cc cf 00 ff 00 ff
	>01c388	83c388	00 ff 00 ff 00 ff 00 ff 00 03 cc 03 00 ff 00 ff
	>01c398	83c398	00 ff 00 ff 00 ff 00 ff 03 ff 00 fc 3c fc 30 f0
	>01c3a8	83c3a8	00 f0 30 f0 00 c0 c0 c0 03 fc 00 fc 3c c0 30 c0
	>01c3b8	83c3b8	00 f0 30 c0 00 c0 c0 00 00 00 00 00 00 00 00 00
	>01c3c8	83c3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3d8	83c3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3e8	83c3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3f8	83c3f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c408	83c408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c418	83c418	00 00 00 00 00 00 00 00 00 03 03 03 00 00 03 03
	>01c428	83c428	3f 3f 00 00 00 00 00 00 00 03 03 00 00 00 03 00
	>01c438	83c438	3f 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01c448	83c448	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01c458	83c458	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c468	83c468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c478	83c478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c488	83c488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c498	83c498	00 00 00 00 00 00 00 00 03 03 00 00 00 00 03 03
	>01c4a8	83c4a8	3f 3f 00 00 00 00 00 00 03 00 00 00 00 00 03 00
	>01c4b8	83c4b8	3f 00 00 00 00 00 00 00 03 ff fc ff 0c 0f f0 f0
	>01c4c8	83c4c8	ff ff 00 00 00 00 00 00 03 fc fc 03 0c 03 f0 00
	>01c4d8	83c4d8	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4e8	83c4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4f8	83c4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c508	83c508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c518	83c518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01c528	83c528	3f 3f 00 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01c538	83c538	3f 00 00 00 00 00 00 00 c0 ff 3c 3f 03 03 fc fc
	>01c548	83c548	ff ff 00 00 00 00 00 00 c0 3f 3c 03 03 00 fc 00
	>01c558	83c558	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c568	83c568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c578	83c578	00 00 00 00 00 00 00 00 03 ff 3c fc c0 c0 3f 3f
	>01c588	83c588	ff ff 00 00 00 00 00 00 03 fc 3c c0 c0 00 3f 00
	>01c598	83c598	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01c5a8	83c5a8	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01c5b8	83c5b8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5c8	83c5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5d8	83c5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5e8	83c5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5f8	83c5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c608	83c608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c618	83c618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c628	83c628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c638	83c638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c648	83c648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c658	83c658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c668	83c668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c678	83c678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c688	83c688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c698	83c698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6a8	83c6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6b8	83c6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6c8	83c6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6d8	83c6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6e8	83c6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6f8	83c6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c708	83c708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c718	83c718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c728	83c728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c738	83c738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c748	83c748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c758	83c758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c768	83c768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c778	83c778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c788	83c788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c798	83c798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7a8	83c7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7b8	83c7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7c8	83c7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7d8	83c7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7e8	83c7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7f8	83c7f8	00 00 00 00 00 00 00 00 00 00 00 00 03 f3 00 ff
	>01c808	83c808	00 ff 00 ff 33 f3 0c c0 00 00 00 00 03 f0 00 ff
	>01c818	83c818	00 ff 00 ff 33 c0 00 c0 c3 ff 00 ff 3c ff ff ff
	>01c828	83c828	3f ff 3f ff 0f ff 0c ff c3 3c 00 ff 3c c3 ff 00
	>01c838	83c838	3f c0 3f c0 0f f0 0c f3 00 00 00 00 c0 c0 00 c0
	>01c848	83c848	00 c0 00 c0 00 c0 00 c0 00 00 00 00 c0 00 00 c0
	>01c858	83c858	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01c868	83c868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c878	83c878	00 00 00 00 00 00 00 00 03 03 00 03 00 f3 03 ff
	>01c888	83c888	00 ff 00 ff 0c fc 03 f0 03 00 00 03 00 f3 03 fc
	>01c898	83c898	00 ff 00 ff 0c f0 00 f0 0c fc 00 fc f3 ff fc ff
	>01c8a8	83c8a8	3c ff 3c ff cc ff 0c 3f 0c f0 00 fc f3 0c fc 03
	>01c8b8	83c8b8	3c c3 3c c3 cc 33 0c 33 00 00 00 00 00 00 00 00
	>01c8c8	83c8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8d8	83c8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8e8	83c8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8f8	83c8f8	00 00 00 00 00 00 00 00 03 03 0f 0f 0c 0f 0c 0f
	>01c908	83c908	0c 0f 0c 0f 0f 0f 03 03 03 00 0f 00 0c 03 0c 03
	>01c918	83c918	0c 03 0c 03 0f 00 03 00 ff ff 3f ff 0c fc 0f ff
	>01c928	83c928	00 f3 0f ff 30 f3 f3 f3 ff 00 3f c0 0c f0 0f f0
	>01c938	83c938	00 f3 0f f0 30 c3 f3 00 30 3f c0 ff c0 ff 00 ff
	>01c948	83c948	00 ff 00 ff 00 ff 00 ff 30 0f c0 3f c0 3f 00 ff
	>01c958	83c958	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c968	83c968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c978	83c978	00 00 00 00 00 00 00 00 00 00 03 03 03 03 0f 0f
	>01c988	83c988	0c 0f 0c 0f 0c 0f 0c 0f 00 00 03 00 03 00 0f 00
	>01c998	83c998	0c 03 0c 03 0c 03 0c 03 ff ff fc fc ff ff 33 f3
	>01c9a8	83c9a8	00 f3 0f ff 0c ff 0f ff ff 00 fc 00 ff 00 33 c0
	>01c9b8	83c9b8	00 f3 0f f0 0c f3 0f f0 f0 ff c0 ff c0 ff 00 ff
	>01c9c8	83c9c8	00 ff 00 ff 00 ff 00 ff f0 0f c0 3f c0 3f 00 ff
	>01c9d8	83c9d8	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c9e8	83c9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c9f8	83c9f8	00 00 00 00 00 00 00 00 00 c0 33 f3 c0 ff 00 0f
	>01ca08	83ca08	00 0f 30 3f 00 3f c0 ff 00 c0 33 c0 c0 3f 00 0f
	>01ca18	83ca18	00 0f 30 0f 00 3f c0 3f 00 ff 0c ff 0c fc 00 f0
	>01ca28	83ca28	00 f0 30 f0 30 f0 00 c0 00 ff 0c f3 0c f0 00 f0
	>01ca38	83ca38	00 f0 30 c0 30 c0 00 c0 c0 c0 00 00 00 00 00 00
	>01ca48	83ca48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ca58	83ca58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca68	83ca68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca78	83ca78	00 00 00 00 00 00 00 00 00 f0 0c fc 3c ff 30 00
	>01ca88	83ca88	00 00 c3 c3 00 c3 3c ff 00 f0 0c f0 3c c3 00 00
	>01ca98	83ca98	00 00 c3 00 00 c3 3c c3 03 3f cc fc 0c fc 00 f0
	>01caa8	83caa8	00 f0 00 f0 30 f0 30 f0 03 3c cc 30 0c f0 00 f0
	>01cab8	83cab8	00 f0 00 f0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01cac8	83cac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cad8	83cad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cae8	83cae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01caf8	83caf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01cb08	83cb08	0f 0f 30 3f 00 3f 00 3f 00 00 00 00 00 00 03 00
	>01cb18	83cb18	0f 00 30 0f 00 3f 00 3f 00 03 0f 0f 3c 3f ff ff
	>01cb28	83cb28	ff ff 3f ff 0f ff 0f ff 00 03 0f 00 3c 03 ff 00
	>01cb38	83cb38	ff 00 3f c0 0f f0 0f f0 0c ff 00 ff c0 ff 00 ff
	>01cb48	83cb48	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cb58	83cb58	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cb68	83cb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cb78	83cb78	00 00 00 00 00 00 00 00 0f 0f 03 03 00 00 00 00
	>01cb88	83cb88	03 03 0c 0f 00 0f 00 0f 0f 00 03 00 00 00 00 00
	>01cb98	83cb98	03 00 0c 03 00 0f 00 0f 30 f3 cf cf 3c 3f ff ff
	>01cba8	83cba8	ff ff 0f ff 03 ff 03 ff 30 c3 cf 00 3c 03 ff 00
	>01cbb8	83cbb8	ff 00 0f f0 03 fc 03 fc 0c ff 00 ff c0 ff 00 ff
	>01cbc8	83cbc8	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cbd8	83cbd8	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cbe8	83cbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cbf8	83cbf8	00 00 00 00 00 00 00 00 c0 ff 3f ff 30 f0 0f 0f
	>01cc08	83cc08	ff ff 00 00 00 00 00 00 c0 3f 3f c0 30 c0 0f 00
	>01cc18	83cc18	ff 00 00 00 00 00 00 00 c0 c0 00 00 00 00 c0 c0
	>01cc28	83cc28	fc fc 00 00 00 00 00 00 c0 00 00 00 00 00 c0 00
	>01cc38	83cc38	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc48	83cc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc58	83cc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc68	83cc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc78	83cc78	00 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01cc88	83cc88	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01cc98	83cc98	ff 00 00 00 00 00 00 00 00 c0 c0 c0 00 00 c0 c0
	>01cca8	83cca8	fc fc 00 00 00 00 00 00 00 c0 c0 00 00 00 c0 00
	>01ccb8	83ccb8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccc8	83ccc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccd8	83ccd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cce8	83cce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccf8	83ccf8	00 00 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 3f
	>01cd08	83cd08	0f 0f 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 0f
	>01cd18	83cd18	0f 00 00 00 00 00 00 00 0f ff 0f ff 0f ff 3c fc
	>01cd28	83cd28	f0 f0 00 00 00 00 00 00 0f f0 0f f0 0f f0 3c c0
	>01cd38	83cd38	f0 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cd48	83cd48	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cd58	83cd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd68	83cd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd78	83cd78	00 00 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 0f
	>01cd88	83cd88	03 03 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 03
	>01cd98	83cd98	03 00 00 00 00 00 00 00 03 ff 03 ff 03 ff 0f ff
	>01cda8	83cda8	fc fc 00 00 00 00 00 00 03 fc 03 fc 03 fc 0f f0
	>01cdb8	83cdb8	fc 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cdc8	83cdc8	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cdd8	83cdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cde8	83cde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cdf8	83cdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce08	83ce08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce18	83ce18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce28	83ce28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce38	83ce38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce48	83ce48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce58	83ce58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce68	83ce68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce78	83ce78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce88	83ce88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce98	83ce98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cea8	83cea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ceb8	83ceb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cec8	83cec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ced8	83ced8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cee8	83cee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cef8	83cef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf08	83cf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf18	83cf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf28	83cf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf38	83cf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf48	83cf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf58	83cf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf68	83cf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf78	83cf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf88	83cf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf98	83cf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfa8	83cfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfb8	83cfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfc8	83cfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfd8	83cfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfe8	83cfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cff8	83cff8	00 00 00 00 00 00 00 00 0f ff 03 ff 03 ff 00 ff
	>01d008	83d008	00 ff 00 ff 00 ff 00 ff 0f f0 03 fc 03 fc 00 ff
	>01d018	83d018	00 ff 00 ff 00 ff 00 ff ff ff 3f 3f ff ff cc cf
	>01d028	83d028	00 cf f0 ff 30 ff f0 ff ff 00 3f 00 ff 00 cc 03
	>01d038	83d038	00 cf f0 0f 30 cf f0 0f 00 00 c0 c0 c0 c0 f0 f0
	>01d048	83d048	30 f0 30 f0 30 f0 30 f0 00 00 c0 00 c0 00 f0 00
	>01d058	83d058	30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01d068	83d068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d078	83d078	00 00 00 00 00 00 00 00 0c fc 03 ff 03 ff 00 ff
	>01d088	83d088	00 ff 00 ff 00 ff 00 ff 0c f0 03 fc 03 fc 00 ff
	>01d098	83d098	00 ff 00 ff 00 ff 00 ff ff ff fc ff 30 3f f0 ff
	>01d0a8	83d0a8	00 cf f0 ff 0c cf cf cf ff 00 fc 03 30 0f f0 0f
	>01d0b8	83d0b8	00 cf f0 0f 0c c3 cf 00 c0 c0 f0 f0 30 f0 30 f0
	>01d0c8	83d0c8	30 f0 30 f0 f0 f0 c0 c0 c0 00 f0 00 30 c0 30 c0
	>01d0d8	83d0d8	30 c0 30 c0 f0 00 c0 00 00 00 00 00 00 00 00 00
	>01d0e8	83d0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d0f8	83d0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d108	83d108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d118	83d118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d128	83d128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d138	83d138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d148	83d148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d158	83d158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d168	83d168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d178	83d178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d188	83d188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d198	83d198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1a8	83d1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1b8	83d1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1c8	83d1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1d8	83d1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1e8	83d1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1f8	83d1f8	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d208	83d208	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d218	83d218	03 fc 03 fc 0f f0 fc 00 0c cf f3 f3 3c fc ff ff
	>01d228	83d228	ff ff f0 ff c0 ff c0 ff 0c c3 f3 00 3c c0 ff 00
	>01d238	83d238	ff 00 f0 0f c0 3f c0 3f f0 f0 c0 c0 00 00 00 00
	>01d248	83d248	c0 c0 30 f0 00 f0 00 f0 f0 00 c0 00 00 00 00 00
	>01d258	83d258	c0 00 30 c0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01d268	83d268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d278	83d278	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d288	83d288	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d298	83d298	03 fc 03 fc 0f f0 fc 00 00 c0 f0 f0 3c fc ff ff
	>01d2a8	83d2a8	ff ff fc ff f0 ff f0 ff 00 c0 f0 00 3c c0 ff 00
	>01d2b8	83d2b8	ff 00 fc 03 f0 0f f0 0f 00 00 00 00 00 00 c0 c0
	>01d2c8	83d2c8	f0 f0 0c fc 00 fc 00 fc 00 00 00 00 00 00 c0 00
	>01d2d8	83d2d8	f0 00 0c f0 00 fc 00 fc 00 00 00 00 00 00 00 00
	>01d2e8	83d2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d2f8	83d2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d308	83d308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d318	83d318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d328	83d328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d338	83d338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d348	83d348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d358	83d358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d368	83d368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d378	83d378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d388	83d388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d398	83d398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3a8	83d3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3b8	83d3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3c8	83d3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3d8	83d3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3e8	83d3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3f8	83d3f8	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d408	83d408	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d418	83d418	00 00 00 00 00 00 00 00 c0 ff c0 ff c0 ff f0 ff
	>01d428	83d428	3f 3f 00 00 00 00 00 00 c0 3f c0 3f c0 3f f0 0f
	>01d438	83d438	3f 00 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 f0
	>01d448	83d448	c0 c0 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 c0
	>01d458	83d458	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d468	83d468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d478	83d478	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d488	83d488	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d498	83d498	00 00 00 00 00 00 00 00 f0 ff f0 ff f0 ff 3c 3f
	>01d4a8	83d4a8	0f 0f 00 00 00 00 00 00 f0 0f f0 0f f0 0f 3c 03
	>01d4b8	83d4b8	0f 00 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c fc
	>01d4c8	83d4c8	f0 f0 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c f0
	>01d4d8	83d4d8	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4e8	83d4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4f8	83d4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d508	83d508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d518	83d518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d528	83d528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d538	83d538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d548	83d548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d558	83d558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d568	83d568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d578	83d578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d588	83d588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d598	83d598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5a8	83d5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5b8	83d5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5c8	83d5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5d8	83d5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5e8	83d5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5f8	83d5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d608	83d608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d618	83d618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d628	83d628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d638	83d638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d648	83d648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d658	83d658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d668	83d668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d678	83d678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d688	83d688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d698	83d698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6a8	83d6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6b8	83d6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6c8	83d6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6d8	83d6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6e8	83d6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6f8	83d6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d708	83d708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d718	83d718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d728	83d728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d738	83d738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d748	83d748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d758	83d758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d768	83d768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d778	83d778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d788	83d788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d798	83d798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7a8	83d7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7b8	83d7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7c8	83d7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7d8	83d7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7e8	83d7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7f8	83d7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d808	83d808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d818	83d818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d828	83d828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d838	83d838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d848	83d848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d858	83d858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d868	83d868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d878	83d878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d888	83d888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d898	83d898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8a8	83d8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8b8	83d8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8c8	83d8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8d8	83d8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8e8	83d8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8f8	83d8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d908	83d908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d918	83d918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d928	83d928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d938	83d938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d948	83d948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d958	83d958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d968	83d968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d978	83d978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01d988	83d988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01d998	83d998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01d9a8	83d9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01d9b8	83d9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01d9c8	83d9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9d8	83d9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9e8	83d9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9f8	83d9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da08	83da08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da18	83da18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da28	83da28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da38	83da38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da48	83da48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da58	83da58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da68	83da68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da78	83da78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da88	83da88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da98	83da98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daa8	83daa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dab8	83dab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dac8	83dac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dad8	83dad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dae8	83dae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daf8	83daf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db08	83db08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db18	83db18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db28	83db28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db38	83db38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db48	83db48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db58	83db58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db68	83db68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db78	83db78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01db88	83db88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01db98	83db98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01dba8	83dba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01dbb8	83dbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01dbc8	83dbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbd8	83dbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbe8	83dbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbf8	83dbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc08	83dc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc18	83dc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc28	83dc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc38	83dc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc48	83dc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc58	83dc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc68	83dc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc78	83dc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc88	83dc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc98	83dc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dca8	83dca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcb8	83dcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcc8	83dcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcd8	83dcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dce8	83dce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcf8	83dcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd08	83dd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd18	83dd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd28	83dd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd38	83dd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd48	83dd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd58	83dd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd68	83dd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd78	83dd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd88	83dd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd98	83dd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dda8	83dda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddb8	83ddb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddc8	83ddc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddd8	83ddd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dde8	83dde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddf8	83ddf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de08	83de08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de18	83de18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de28	83de28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de38	83de38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de48	83de48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de58	83de58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de68	83de68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de78	83de78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de88	83de88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de98	83de98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dea8	83dea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01deb8	83deb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dec8	83dec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ded8	83ded8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dee8	83dee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01def8	83def8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df08	83df08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df18	83df18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df28	83df28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df38	83df38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df48	83df48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df58	83df58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df68	83df68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df78	83df78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df88	83df88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df98	83df98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfa8	83dfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfb8	83dfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfc8	83dfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfd8	83dfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfe8	83dfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dff8	83dff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e008	83e008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e018	83e018	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e028	83e028	3f 30 3f 30 3f 03 3f 30 00 00 03 00 0c 03 00 0f
	>01e038	83e038	30 0f 30 0f 03 3c 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e048	83e048	ff 00 ff 30 ff f0 ff 0f 30 0f 00 ff 00 ff 00 3f
	>01e058	83e058	00 3f 30 cf f0 0f 0f f0 00 00 00 00 00 00 00 00
	>01e068	83e068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e078	83e078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e088	83e088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e098	83e098	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e0a8	83e0a8	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e0b8	83e0b8	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e0c8	83e0c8	ff 00 ff 0c ff fc ff 03 30 0f 00 ff 00 ff 00 3f
	>01e0d8	83e0d8	00 3f 0c f3 fc 03 03 fc 00 00 00 00 00 00 00 00
	>01e0e8	83e0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e0f8	83e0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e108	83e108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e118	83e118	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e128	83e128	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e138	83e138	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e148	83e148	ff 00 ff 03 ff 3f ff 00 30 0f 00 ff 00 ff 00 3f
	>01e158	83e158	00 3f 03 fc 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e168	83e168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e178	83e178	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e188	83e188	ff 00 ff c0 ff fc ff 00 0c f0 00 ff 00 ff 00 ff
	>01e198	83e198	00 ff c0 3f fc 03 00 ff 00 00 c0 c0 f0 30 f0 00
	>01e1a8	83e1a8	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e1b8	83e1b8	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e1c8	83e1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1d8	83e1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1e8	83e1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1f8	83e1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e208	83e208	00 00 00 00 00 00 03 03 00 00 00 00 00 00 00 00
	>01e218	83e218	00 00 00 00 00 00 03 00 3f 00 3f 0c 3f 3c 3f 0c
	>01e228	83e228	3c 3c 3f 3f 0f 03 cf cc 00 3f 0c 30 3c 00 0c 30
	>01e238	83e238	3c 00 3f 00 03 0c cc 03 ff 00 ff 00 cf 00 0f 00
	>01e248	83e248	00 00 0f 0f ff c0 ff 00 00 0f 00 00 00 00 00 00
	>01e258	83e258	00 00 0f 00 c0 0f 00 ff 00 00 00 00 00 00 00 00
	>01e268	83e268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e278	83e278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e288	83e288	00 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00
	>01e298	83e298	00 00 00 00 0f 00 00 00 3f 00 3f 03 3f 33 3f 03
	>01e2a8	83e2a8	3f 33 3f 33 0f 00 cf cc 00 3f 03 3c 33 0c 03 3c
	>01e2b8	83e2b8	33 0c 33 0c 00 0f cc 03 ff 00 ff 00 f3 00 c3 00
	>01e2c8	83e2c8	00 00 c3 c3 ff fc ff 00 00 c3 00 00 00 00 00 00
	>01e2d8	83e2d8	00 00 c3 00 fc 00 00 ff 00 00 00 00 00 00 00 00
	>01e2e8	83e2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e2f8	83e2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e308	83e308	00 00 00 00 03 03 00 00 00 00 00 00 00 00 00 00
	>01e318	83e318	00 00 00 00 03 00 00 00 3f 00 3f 00 3f 30 3f 00
	>01e328	83e328	3f 30 3f 30 cf c0 0f 0c 00 3f 00 3f 30 0f 00 3f
	>01e338	83e338	30 0f 30 0f c0 0f 0c 03 ff 00 ff c0 fc c0 f0 c0
	>01e348	83e348	c0 c0 f0 f0 ff 3f ff 00 00 f0 c0 00 c0 00 c0 00
	>01e358	83e358	c0 00 f0 00 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e368	83e368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e378	83e378	00 00 00 00 00 00 00 00 ff 00 ff 03 cf 03 0f 03
	>01e388	83e388	03 03 0f 0f ff fc ff 00 00 0f 03 00 03 00 03 00
	>01e398	83e398	03 00 0f 00 fc 03 00 ff fc 00 fc 00 fc 0c fc 00
	>01e3a8	83e3a8	fc 0c fc 0c f3 03 f0 30 00 fc 00 fc 0c f0 00 fc
	>01e3b8	83e3b8	0c f0 0c f0 03 f0 30 c0 00 00 00 00 00 00 00 00
	>01e3c8	83e3c8	00 00 00 00 c0 c0 00 00 00 00 00 00 00 00 00 00
	>01e3d8	83e3d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>01e3e8	83e3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e3f8	83e3f8	00 00 00 00 00 00 00 00 0c 0c 00 00 0f 0c 0f 00
	>01e408	83e408	3f 30 00 00 00 00 00 00 0c 00 00 00 0c 03 00 03
	>01e418	83e418	30 0f 00 00 00 00 00 00 33 33 03 03 f3 30 ff 00
	>01e428	83e428	ff c0 00 00 00 00 00 00 33 00 03 00 30 c3 00 ff
	>01e438	83e438	c0 3f 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01e448	83e448	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 cf
	>01e458	83e458	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e468	83e468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e478	83e478	00 00 00 00 00 00 00 00 30 30 0f 0c 0f 00 3f 30
	>01e488	83e488	3f 00 00 00 00 00 00 00 30 00 0c 03 00 0c 30 0f
	>01e498	83e498	00 3f 00 00 00 00 00 00 03 03 f3 33 f3 00 ff 00
	>01e4a8	83e4a8	ff c0 00 00 00 00 00 00 03 00 33 c0 00 f3 00 ff
	>01e4b8	83e4b8	c0 3f 00 00 00 00 00 00 ff 03 ff 00 ff 00 ff 00
	>01e4c8	83e4c8	ff c3 00 00 00 00 00 00 03 fc 00 ff 00 ff 00 cf
	>01e4d8	83e4d8	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4e8	83e4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4f8	83e4f8	00 00 00 00 00 00 00 00 0f 0c 0f 00 3f 30 3f 00
	>01e508	83e508	3f 00 00 00 00 00 00 00 0c 03 00 0c 30 0f 00 3f
	>01e518	83e518	00 3f 00 00 00 00 00 00 f3 33 f3 03 ff 0c ff c0
	>01e528	83e528	ff 00 00 00 00 00 00 00 33 c0 03 f0 0c f3 c0 3f
	>01e538	83e538	00 ff 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e548	83e548	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 f3
	>01e558	83e558	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e568	83e568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e578	83e578	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e588	83e588	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 cf
	>01e598	83e598	c3 3c 00 00 00 00 00 00 cf cc cf c0 ff 30 ff 03
	>01e5a8	83e5a8	ff 00 00 00 00 00 00 00 cc 03 c0 0c 30 cf 03 fc
	>01e5b8	83e5b8	00 ff 00 00 00 00 00 00 f0 30 f0 00 fc 0c fc 00
	>01e5c8	83e5c8	fc 00 00 00 00 00 00 00 30 c0 00 f0 0c f0 00 fc
	>01e5d8	83e5d8	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5e8	83e5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5f8	83e5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e608	83e608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e618	83e618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e628	83e628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e638	83e638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e648	83e648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e658	83e658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e668	83e668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e678	83e678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e688	83e688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e698	83e698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6a8	83e6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6b8	83e6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6c8	83e6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6d8	83e6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6e8	83e6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6f8	83e6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e708	83e708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e718	83e718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e728	83e728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e738	83e738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e748	83e748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e758	83e758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e768	83e768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e778	83e778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e788	83e788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e798	83e798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7a8	83e7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7b8	83e7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7c8	83e7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7d8	83e7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7e8	83e7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7f8	83e7f8	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e808	83e808	ff 00 ff 30 ff 3f ff c0 0c f0 00 ff 00 ff 00 ff
	>01e818	83e818	00 ff 30 cf 3f c0 c0 3f 00 00 c0 c0 f0 30 f0 00
	>01e828	83e828	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e838	83e838	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e848	83e848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e858	83e858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e868	83e868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e878	83e878	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e888	83e888	ff 00 ff 0c ff 0f ff f0 0c f0 00 ff 00 ff 00 ff
	>01e898	83e898	00 ff 0c f3 0f f0 f0 0f 00 00 c0 c0 f0 30 f0 00
	>01e8a8	83e8a8	fc 0c fc 0c fc c0 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e8b8	83e8b8	0c f0 0c f0 c0 3c 0c f0 00 00 00 00 00 00 00 00
	>01e8c8	83e8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8d8	83e8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8e8	83e8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8f8	83e8f8	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e908	83e908	3f 30 3f 30 0f 00 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e918	83e918	30 0f 30 0f 00 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e928	83e928	0f 00 0f 00 cf c0 cf c0 30 cf 00 ff cc 33 c0 0f
	>01e938	83e938	00 0c 00 0f c0 0f c0 0f ff 00 ff 00 ff 03 fc 0c
	>01e948	83e948	f0 00 f0 30 f0 30 cc 0c 00 ff 00 ff 03 fc 0c f0
	>01e958	83e958	00 f0 30 c0 30 c0 0c c0 00 00 00 00 00 00 00 00
	>01e968	83e968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e978	83e978	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e988	83e988	3f 00 3f 30 3f 30 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e998	83e998	00 3f 30 0f 30 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e9a8	83e9a8	0f 00 0f 00 cf c0 cf 00 30 cf 00 ff cc 33 c0 0f
	>01e9b8	83e9b8	00 0c 00 0f c0 0f 00 cf ff 00 ff 00 ff 03 fc 0c
	>01e9c8	83e9c8	f0 00 f3 03 f3 33 f3 33 00 ff 00 ff 03 fc 0c f0
	>01e9d8	83e9d8	00 f0 03 f0 33 c0 33 c0 00 00 00 00 00 00 00 00
	>01e9e8	83e9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e9f8	83e9f8	00 00 00 00 00 00 00 00 ff 00 ff 00 f3 00 c3 00
	>01ea08	83ea08	00 00 c3 c3 ff 3f ff 00 00 c3 00 00 00 00 00 00
	>01ea18	83ea18	00 00 c3 00 3f c0 00 ff fc 00 fc c0 fc cc fc c0
	>01ea28	83ea28	fc cc fc cc f0 00 f3 33 00 fc c0 3c cc 30 c0 3c
	>01ea38	83ea38	cc 30 cc 30 00 f0 33 c0 00 00 00 00 00 00 00 00
	>01ea48	83ea48	00 00 00 00 f0 f0 00 00 00 00 00 00 00 00 00 00
	>01ea58	83ea58	00 00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00
	>01ea68	83ea68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ea78	83ea78	00 00 00 00 00 00 00 00 ff 00 ff 00 fc 00 f0 00
	>01ea88	83ea88	00 00 f0 f0 ff 03 ff 00 00 f0 00 00 00 00 00 00
	>01ea98	83ea98	00 00 f0 00 03 3c 00 ff fc 00 fc 30 fc 3c fc 30
	>01eaa8	83eaa8	3c 3c fc fc f0 c0 f3 33 00 fc 30 0c 3c 00 30 0c
	>01eab8	83eab8	3c 00 fc 00 c0 30 33 c0 00 00 00 00 00 00 00 00
	>01eac8	83eac8	00 00 00 00 00 00 c0 c0 00 00 00 00 00 00 00 00
	>01ead8	83ead8	00 00 00 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>01eae8	83eae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eaf8	83eaf8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 03 00 33 30
	>01eb08	83eb08	c3 c0 03 00 0f 0c cf cc 0c 03 0c 03 00 03 30 03
	>01eb18	83eb18	c0 03 00 03 0c 03 cc 03 cf 0c cf 0c c3 00 c3 00
	>01eb28	83eb28	f3 33 c0 00 cc cc 0c 0c 0c c3 0c c3 00 c3 00 c3
	>01eb38	83eb38	33 c0 00 c0 cc 00 0c 00 c0 00 f0 30 f0 30 f0 00
	>01eb48	83eb48	f0 00 fc 0c fc cc 3c 00 00 c0 30 c0 30 c0 00 f0
	>01eb58	83eb58	00 f0 0c f0 cc 30 00 3c 00 00 00 00 00 00 00 00
	>01eb68	83eb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eb78	83eb78	00 00 00 00 00 00 00 00 0f 00 0f 0c 03 00 33 30
	>01eb88	83eb88	33 30 0f 0c 0f 00 cf c0 00 0f 0c 03 00 03 30 03
	>01eb98	83eb98	30 03 0c 03 00 0f c0 0f cf 00 cf 0c cf 0c c3 00
	>01eba8	83eba8	c3 c0 c3 c3 33 33 30 30 00 cf 0c c3 0c c3 00 c3
	>01ebb8	83ebb8	c0 03 c3 00 33 00 30 00 c3 03 cc 0c cc 0c cc 0c
	>01ebc8	83ebc8	c3 03 c0 00 c0 00 c0 00 03 c0 0c c0 0c c0 0c c0
	>01ebd8	83ebd8	03 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01ebe8	83ebe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ebf8	83ebf8	00 00 00 00 00 00 00 00 ff c0 ff 00 ff 00 ff 00
	>01ec08	83ec08	ff c3 00 00 00 00 00 00 c0 3f 00 ff 00 ff 00 cf
	>01ec18	83ec18	c3 3c 00 00 00 00 00 00 c0 c0 cf cc cf 00 ff 00
	>01ec28	83ec28	ff 03 00 00 00 00 00 00 c0 00 cc 03 00 cc 00 ff
	>01ec38	83ec38	03 fc 00 00 00 00 00 00 0c 0c f0 30 f0 00 fc 0c
	>01ec48	83ec48	fc 00 00 00 00 00 00 00 0c 00 30 c0 00 f0 0c f0
	>01ec58	83ec58	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec68	83ec68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec78	83ec78	00 00 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01ec88	83ec88	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 f3
	>01ec98	83ec98	c3 3c 00 00 00 00 00 00 cc cc c0 c0 cf 0c ff 00
	>01eca8	83eca8	ff 03 00 00 00 00 00 00 cc 00 c0 00 0c c3 00 ff
	>01ecb8	83ecb8	03 fc 00 00 00 00 00 00 30 30 00 00 f0 30 f0 00
	>01ecc8	83ecc8	fc 0c 00 00 00 00 00 00 30 00 00 00 30 c0 00 30
	>01ecd8	83ecd8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ece8	83ece8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ecf8	83ecf8	00 00 00 00 00 00 00 00 cf 00 ff c3 3c 3c 00 00
	>01ed08	83ed08	00 00 00 00 00 00 00 00 00 cf c3 3c 3c 00 00 00
	>01ed18	83ed18	00 00 00 00 00 00 00 00 0c 0c 0c 0c 30 30 00 00
	>01ed28	83ed28	00 00 00 00 00 00 00 00 0c 00 0c 00 30 00 00 00
	>01ed38	83ed38	00 00 00 00 00 00 00 00 3f 33 0f 03 0f 03 0f 03
	>01ed48	83ed48	3c 0c 00 00 00 00 00 00 33 0c 03 0c 03 0c 03 0c
	>01ed58	83ed58	0c 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed68	83ed68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed78	83ed78	00 00 00 00 00 00 00 00 0f 03 3c 30 3c 0c 30 00
	>01ed88	83ed88	30 30 00 00 00 00 00 00 03 0c 30 0c 0c 30 00 30
	>01ed98	83ed98	30 00 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01eda8	83eda8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01edb8	83edb8	00 00 00 00 00 00 00 00 f0 30 f0 30 f0 c0 3c 0c
	>01edc8	83edc8	3f 30 00 00 00 00 00 00 30 c0 30 c0 c0 30 0c 30
	>01edd8	83edd8	30 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ede8	83ede8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01edf8	83edf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee08	83ee08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee18	83ee18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee28	83ee28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee38	83ee38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee48	83ee48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee58	83ee58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee68	83ee68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee78	83ee78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee88	83ee88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee98	83ee98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eea8	83eea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eeb8	83eeb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eec8	83eec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eed8	83eed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eee8	83eee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eef8	83eef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef08	83ef08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef18	83ef18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef28	83ef28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef38	83ef38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef48	83ef48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef58	83ef58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef68	83ef68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef78	83ef78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef88	83ef88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef98	83ef98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efa8	83efa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efb8	83efb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efc8	83efc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efd8	83efd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efe8	83efe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eff8	83eff8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f008	83f008	0f 00 cf c0 cf cc cf cc 00 ff 00 ff c0 3f 30 0c
	>01f018	83f018	00 0f c0 0f cc 03 cc 03 ff 0c ff 00 ff 33 f3 03
	>01f028	83f028	f0 00 f0 00 f3 03 f3 00 0c f3 00 ff 33 cc 03 f0
	>01f038	83f038	00 f0 00 f0 03 f0 00 f3 fc 00 fc 00 fc 00 fc 00
	>01f048	83f048	fc 00 fc 0c fc 0c f0 00 00 fc 00 fc 00 fc 00 fc
	>01f058	83f058	00 fc 0c f0 0c f0 00 f0 00 00 00 00 00 00 00 00
	>01f068	83f068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f078	83f078	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f088	83f088	0f 00 0f 0c 0f 0c 33 30 00 ff 00 ff c0 3c 30 0f
	>01f098	83f098	00 0f 0c 03 0c 03 30 03 ff 0c ff 00 ff 33 f3 03
	>01f0a8	83f0a8	f0 00 f0 00 f3 03 f3 03 0c f3 00 ff 33 cc 03 f0
	>01f0b8	83f0b8	00 f0 00 f0 03 f0 03 f0 fc 00 fc 00 fc 00 fc 00
	>01f0c8	83f0c8	fc 0c fc 0c f0 00 f0 00 00 fc 00 fc 00 fc 00 fc
	>01f0d8	83f0d8	0c f0 0c f0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01f0e8	83f0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f0f8	83f0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f108	83f108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f118	83f118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f128	83f128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f138	83f138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f148	83f148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f158	83f158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f168	83f168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f178	83f178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f188	83f188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f198	83f198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1a8	83f1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1b8	83f1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1c8	83f1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1d8	83f1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1e8	83f1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1f8	83f1f8	00 00 00 00 00 00 00 00 c3 c0 33 30 33 30 33 30
	>01f208	83f208	c3 c0 03 00 03 00 03 00 c0 03 30 03 30 03 30 03
	>01f218	83f218	c0 03 00 03 00 03 00 03 f3 00 f3 30 f3 30 c3 00
	>01f228	83f228	c3 03 c3 c3 cc cc 0c 0c 00 f3 30 c3 30 c3 00 c3
	>01f238	83f238	03 c0 c3 00 cc 00 0c 00 f0 00 f0 30 c0 00 cc 0c
	>01f248	83f248	cc 0c f0 30 f0 00 f3 03 00 f0 30 c0 00 c0 0c c0
	>01f258	83f258	0c c0 30 c0 00 f0 03 f0 00 00 00 00 00 00 00 00
	>01f268	83f268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f278	83f278	00 00 00 00 00 00 00 00 33 30 0f 0c cf cc 0f 00
	>01f288	83f288	0f 00 3f 30 3f 33 3c 00 30 03 0c 03 cc 03 00 0f
	>01f298	83f298	00 0f 30 0f 33 0c 00 3c f3 30 f3 30 c3 00 cf 0c
	>01f2a8	83f2a8	c3 c0 33 30 33 33 30 30 30 c3 30 c3 00 c3 0c c3
	>01f2b8	83f2b8	c0 03 30 03 33 00 30 00 f0 30 f0 30 c0 00 cc 0c
	>01f2c8	83f2c8	c3 03 c0 00 f0 30 f3 33 30 c0 30 c0 00 c0 0c c0
	>01f2d8	83f2d8	03 c0 00 c0 30 c0 33 c0 00 00 00 00 00 00 00 00
	>01f2e8	83f2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f2f8	83f2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f308	83f308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f318	83f318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f328	83f328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f338	83f338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f348	83f348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f358	83f358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f368	83f368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f378	83f378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f388	83f388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f398	83f398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3a8	83f3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3b8	83f3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3c8	83f3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3d8	83f3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3e8	83f3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3f8	83f3f8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 0f 03 3c 30
	>01f408	83f408	fc 0c 00 00 00 00 00 00 0c 03 0c 03 03 0c 30 0c
	>01f418	83f418	0c f0 00 00 00 00 00 00 0c 0c 30 30 00 00 00 00
	>01f428	83f428	00 00 00 00 00 00 00 00 0c 00 30 00 00 00 00 00
	>01f438	83f438	00 00 00 00 00 00 00 00 f0 c0 3c 0c 3c 30 0c 00
	>01f448	83f448	0c 0c 00 00 00 00 00 00 c0 30 0c 30 30 0c 00 0c
	>01f458	83f458	0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f468	83f468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f478	83f478	00 00 00 00 00 00 00 00 fc cc f0 c0 f0 c0 f0 c0
	>01f488	83f488	3c 30 00 00 00 00 00 00 cc 30 c0 30 c0 30 c0 30
	>01f498	83f498	30 0c 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01f4a8	83f4a8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01f4b8	83f4b8	00 00 00 00 00 00 00 00 f3 00 ff c3 3c 3c 00 00
	>01f4c8	83f4c8	00 00 00 00 00 00 00 00 00 f3 c3 3c 3c 00 00 00
	>01f4d8	83f4d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4e8	83f4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4f8	83f4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f508	83f508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f518	83f518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f528	83f528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f538	83f538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f548	83f548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f558	83f558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f568	83f568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f578	83f578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f588	83f588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f598	83f598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5a8	83f5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5b8	83f5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5c8	83f5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5d8	83f5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5e8	83f5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5f8	83f5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f608	83f608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f618	83f618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f628	83f628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f638	83f638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f648	83f648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f658	83f658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f668	83f668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f678	83f678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f688	83f688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f698	83f698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6a8	83f6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6b8	83f6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6c8	83f6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6d8	83f6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6e8	83f6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6f8	83f6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f708	83f708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f718	83f718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f728	83f728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f738	83f738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f748	83f748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f758	83f758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f768	83f768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f778	83f778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f788	83f788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f798	83f798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7a8	83f7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7b8	83f7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7c8	83f7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7d8	83f7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7e8	83f7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7f8	83f7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f808	83f808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f818	83f818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f828	83f828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f838	83f838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f848	83f848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f858	83f858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f868	83f868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f878	83f878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f888	83f888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f898	83f898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8a8	83f8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8b8	83f8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8c8	83f8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8d8	83f8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8e8	83f8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8f8	83f8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f908	83f908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f918	83f918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f928	83f928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f938	83f938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f948	83f948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f958	83f958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f968	83f968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f978	83f978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01f988	83f988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01f998	83f998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01f9a8	83f9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01f9b8	83f9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01f9c8	83f9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9d8	83f9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9e8	83f9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9f8	83f9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa08	83fa08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa18	83fa18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa28	83fa28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa38	83fa38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa48	83fa48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa58	83fa58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa68	83fa68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa78	83fa78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa88	83fa88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa98	83fa98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faa8	83faa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fab8	83fab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fac8	83fac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fad8	83fad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fae8	83fae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faf8	83faf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb08	83fb08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb18	83fb18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb28	83fb28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb38	83fb38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb48	83fb48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb58	83fb58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb68	83fb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb78	83fb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01fb88	83fb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01fb98	83fb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01fba8	83fba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01fbb8	83fbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01fbc8	83fbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbd8	83fbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbe8	83fbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbf8	83fbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc08	83fc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc18	83fc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc28	83fc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc38	83fc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc48	83fc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc58	83fc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc68	83fc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc78	83fc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc88	83fc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc98	83fc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fca8	83fca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcb8	83fcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcc8	83fcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcd8	83fcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fce8	83fce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcf8	83fcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd08	83fd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd18	83fd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd28	83fd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd38	83fd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd48	83fd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd58	83fd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd68	83fd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd78	83fd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd88	83fd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd98	83fd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fda8	83fda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdb8	83fdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdc8	83fdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdd8	83fdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fde8	83fde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdf8	83fdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe08	83fe08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe18	83fe18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe28	83fe28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe38	83fe38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe48	83fe48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe58	83fe58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe68	83fe68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe78	83fe78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe88	83fe88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe98	83fe98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fea8	83fea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01feb8	83feb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fec8	83fec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fed8	83fed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fee8	83fee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fef8	83fef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff08	83ff08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff18	83ff18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff28	83ff28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff38	83ff38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff48	83ff48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff58	83ff58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff68	83ff68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff78	83ff78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff88	83ff88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff98	83ff98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffa8	83ffa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffb8	83ffb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffc8	83ffc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffd8	83ffd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffe8	83ffe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fff8	83fff8	00 00 00 00 00 00 00 00
207							.send


210							.section sSharedWRAM
211							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>0049						mINIDISP  .word ?
3	>004b						mOBSEL    .word ?
4	>004d						mBGMODE   .word ?
5	>004f						mMOSIAC   .word ?
6	>0051						mBG1SC    .word ?
7	>0053						mBG2SC    .word ?
8	>0055						mBG3SC    .word ?
9	>0057						mBG4SC    .word ?
10	>0059						mBG12NBA  .word ?
11	>005b						mBG23NBA  .word ?
12	.005d						mBG1HOFS  .dunion HLWord
215:1	>005d							.word ?
216								.struct
217	>005d								lo .byte ?
218	>005e								hi .byte ?
219								.ends
220							.endu
13:5	.005f						mBG1VOFS  .dunion HLWord
215:1	>005f							.word ?
216								.struct
217	>005f								lo .byte ?
218	>0060								hi .byte ?
219								.ends
220							.endu
14:5	.0061						mBG2HOFS  .dunion HLWord
215:1	>0061							.word ?
216								.struct
217	>0061								lo .byte ?
218	>0062								hi .byte ?
219								.ends
220							.endu
15:5	.0063						mBG2VOFS  .dunion HLWord
215:1	>0063							.word ?
216								.struct
217	>0063								lo .byte ?
218	>0064								hi .byte ?
219								.ends
220							.endu
16:5	.0065						mBG3HOFS  .dunion HLWord
215:1	>0065							.word ?
216								.struct
217	>0065								lo .byte ?
218	>0066								hi .byte ?
219								.ends
220							.endu
17:5	.0067						mBG3VOFS  .dunion HLWord
215:1	>0067							.word ?
216								.struct
217	>0067								lo .byte ?
218	>0068								hi .byte ?
219								.ends
220							.endu
18:5	.0069						mBG4HOFS  .dunion HLWord
215:1	>0069							.word ?
216								.struct
217	>0069								lo .byte ?
218	>006a								hi .byte ?
219								.ends
220							.endu
19:5	.006b						mBG4VOFS  .dunion HLWord
215:1	>006b							.word ?
216								.struct
217	>006b								lo .byte ?
218	>006c								hi .byte ?
219								.ends
220							.endu
20:5	>006d						mW12SEL   .word ?
21	>006f						mW34SEL   .word ?
22	>0071						mWOBJSEL  .word ?
23	>0073						mWH0      .word ?
24	>0075						mWH1      .word ?
25	>0077						mWH2      .word ?
26	>0079						mWH3      .word ?
27	>007b						mWBGLOG   .word ?
28	>007d						mOBJLOG   .word ?
29	>007f						mTM       .word ?
30	>0081						mTS       .word ?
31	>0083						mTMW      .word ?
32	>0085						mTSW      .word ?
33	>0087						mCOLDATA  .word ?
34	>0089						mSETINI   .word ?
35	>008b						mNMITIMEN .word ?

37	>008d						joyLeft	 		.byte ?
38	>008e						joyRight 		.byte ?
39	>008f						joyUp	 			.byte ?
40	>0090						joyDown	 		.byte ?
41	>0091						joyFire	 		.byte ?
42	>0092						oldJoyLeft		.byte ?
43	>0093						oldJoyRight 	.byte ?
44	>0094						oldJoyUp			.byte ?
45	>0095						oldJoyDown		.byte ?
46	>0096						oldJoyFire		.byte ?
47	>0097						joyUpStart  	.byte ?
48	>0098						joyUpStop		.byte ?
49	>0099						joyFireEvent 	.byte ?
50	.009a						GameData 		.dstruct sGameData
2:3	>009a						lives 		.byte ?					; player lives
3	>009b						flowers 		.byte ?					; current flowers
4	>009c						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>00a2						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>00a8						currLevel 	.byte ?					; current level 0 bassed
7	>00a9						exitOpenNZ 	.byte ?					; have all keys been collected
8	>00aa						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.00ab						LevelData 		.dstruct sLevelData
12:3	>00ab						numKeysLeft			.byte ?			; number of keys left to collect
13	>00ac						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>00ad						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>00ae						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>00b0						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>00b1						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>00b2						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>00b3						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.00b4						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>00b4						state 					.byte ?				; major FSM value
35	>00b5						minorState 				.byte ?				; sub FSM in that FSM value

37	>00b6						deadNZ					.byte ?
38	>00b7						hasShieldNZ				.byte ?
39	.00b8						shieldTimer				.dunion HLWord
215:1	>00b8							.word ?
216								.struct
217	>00b8								lo .byte ?
218	>00b9								hi .byte ?
219								.ends
220							.endu
40:3	>00ba						canFloatNZ 				.byte ?				; AKA has collected spring
41	>00bb						floatTimer 				.byte ?

43	>00bc						onGroundNZ 				.byte ?
44	>00bd						hasJumpedNZ				.byte ?
45	>00be						isFallingNZ				.byte ?
46	>00bf						facingRight 			.byte ?				; this is 0 or 1 only
47	>00c0						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>00c1						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>00c2						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>00c3						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>00c4						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.00c5						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
215:1	>00c5							.word ?
216								.struct
217	>00c5								lo .byte ?
218	>00c6								hi .byte ?
219								.ends
220							.endu
54:3	>00c7						currAnim 				.byte ?				; the players current animation number
55	>00c8						frameOffset 			.byte ?				; the current frame in the animation

57	>00c9						bulletActive 			.byte ?				; this is 0 or 1 only
58	>00ca						bulletUD 				.byte ?				; this is 0 or 1 only
59	>00cb						bulletLR 				.byte ?				; this is 0 or 1 only
60	>00cc						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>00cd						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>00ce						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>00cf						flashColour				.byte ?				; index into the flash colour LUT
66	>00d0						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$00d1						TICK_DOWN_START = *
54	.00d1						TickDowns 		.dstruct sTimerTickDowns
23:3	>00d1						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>00d2						playerAnim 					.byte ?	; players animation timer
25	>00d3						doorAnim						.byte ?	; frames till next exit door animation
26	>00d4						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>00d5						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>00d6						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>00d7						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$00df						TICK_DOWN_END = *
56	.00df						EntityData 		.dstruct sEntityData
70:3	>00df						number			 .byte ?									; how many entities are actually in this level
71	>00e0						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>00f9						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>0112						active			 .fill kEntity.maxEntities 		; if it is still active
74	>012b						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0144						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>015d						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0176						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>018f						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>01a8						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>01c1						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>01da						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>01f3						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>020c						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0225						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>023e						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0257						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>0270						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>0271						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>0279						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>027a						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.027b						PasswordTemp .block
58	>027b							lives			.byte ?
59	>027c							flowers		.byte ?
60	>027d							score			.byte ?,?,?,?,?,?
61	>0283							high			.byte ?,?,?,?,?,?
62	>0289							currLevel	.byte ?
63							.bend ;PasswordTemp
64	>028a						ActivePassword 						.fill 12
65	>0296						PasswordEntryIndex 					.byte ?
66	>0297						ValidPassword 							.byte ?
67	>0298						PasswordInfiLives 					.byte ?
68	>0299						PasswordRedBullets 					.byte ?
69	>029a						PasswordHaveSpring 					.byte ?
70	>029b						PasswordLevelSkip 					.byte ?
71	.029c						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	.029c						xDeltaCheck 	.dunion HLWord ; pixels
215:1	>029c							.word ?
216								.struct
217	>029c								lo .byte ?
218	>029d								hi .byte ?
219								.ends
220							.endu
95:3	.029e						yDeltaCheck 	.dunion HLWord	; pixels
215:1	>029e							.word ?
216								.struct
217	>029e								lo .byte ?
218	>029f								hi .byte ?
219								.ends
220							.endu
96:3	.02a0						xDeltaBackup 	.dunion HLWord	; pixels
215:1	>02a0							.word ?
216								.struct
217	>02a0								lo .byte ?
218	>02a1								hi .byte ?
219								.ends
220							.endu
97:3	.02a2						yDeltaBackup 	.dunion HLWord	; pixels
215:1	>02a2							.word ?
216								.struct
217	>02a2								lo .byte ?
218	>02a3								hi .byte ?
219								.ends
220							.endu
98:3							.ends
72:5	>02a4						bulletFrame 							.byte ?
73	>02a5						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>02a6						tileMapTemp .fill 240
76	.0396						mplexBuffer     .dstruct sMplexBuffer
101:3	>0396						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>03b7						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>03d8						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>03f9						PasswordRAMCache .fill 12

79	>0405						OAMMirror .fill 256*2
80	>0605						OAMMirrorHigh .fill 32


:1	;******  Return to file: QWAKSNES.asm

212							.send ;sSharedWRAM

214	.0000						HLWord .union
215	>0000							.word ?
216								.struct
217	>0000								lo .byte ?
218	>0001								hi .byte ?
219								.ends
220							.endu

222	.0000						HLBLong .union
223	>0000							.long ?
224								.struct
225	>0000								lo	.byte ?
226	>0001								hi	.byte ?
227	>0002								bank .byte ?
228								.ends
229								.struct
230	>0000								loWord .word ?
231	>0002								dummy1 .byte ?
232								.ends
233								.struct
234	>0000								dummy2 .byte ?
235	>0001								hiWord .word ?
236								.ends
237							.endu

239							A8 .macro
241							.endm

243							A16 .macro
245							.endm

247							A16Clear .macro
249							.endm

251							XY8 .macro
253							.endm

255							XY16 .macro
257							.endm

259							AXY8 .macro
261							.endm

263							AXY16 .macro
265							.endm


;******  End of listing
