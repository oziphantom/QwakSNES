
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass.exe -a -b -X -o qwakSNES.sfc --no-caret-diag --dump-labels -l qwakSNES.tass -L qwakSNES.list --verbose-list --line-numbers QWAKSNES.asm
; Wed Jan 19 00:18:30 2022

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: QWAKSNES.asm

1							; LoROM FAST SNES Master
2							.cpu "65816"

4							; setup the ROM MAP
5							* = $000000			; FILE OFFSET
6							.logical $808000	; SNES ADDRESS
7							.dsection sBank80
8							.cerror * > $80FFB0, "Bank 80 overflow by ", *-$80FFB0
9							* = $80FFB0
10							.dsection sHeader
11							*= $80FFE4
12							.dsection s65816Vectors
13							*= $80FFF4
14							.dsection s6502Vectors
15							.here			  ; back to file


18							* = $008000			; FILE OFFSET
19							.logical $818000  ; SNES ADDRESS
20							.dsection sBank81
21							.here
22							.cerror * > $10000, "Bank 81 overflow by ", *-$10000

24							* = $010000			; FILE OFFSET
25							.logical $828000  ; SNES ADDRESS
26							.dsection sBank82
27							.here
28							.cerror * > $18000, "Bank 82 overflow by ", *-$18000

30							* = $018000			; FILE OFFSET
31							.logical $838000	; SNES ADDRESS
32							.dsection sBank83
33							.here
34							.cerror * > $020000, "Bank 83 overflow by ", *-$20000

36							; .. add more banks here ..

38							.if * < $040000
39								* = $040000-1	; make the file 128K
40	>03ffff		00					.byte 0
41							.endif


44							; *** virtual address ***
45							; these exist to the code but are not part of the output file
46							*=$0000
47							.dsection sDP
48							.cerror * > $100, "Direct Page overflow by ", *-$100
49	.0037						gSharedRamStart
50							.dsection sSharedWRAM
51							.cerror * > $1FC0, "Shared WRAM overflow by ", *-$1FC0
52							*=$7e2000
53							.dsection sLoWRAM
54							.cerror * > $7F0000, "Lo WRAM overflow by ", *-$7F0000
55							*=$7f0000
56							.dsection sHiWRAM
57							.cerror * > $800000, "High WRAM overflow by ", *-$800000

59							.include "SNESDef.asm"

:2	;******  Processing file: SNESDef.asm

1	=0						kSPri_0 = 0<<4
2	=16						kSPri_1 = 1<<4
3	=32						kSPri_2 = 2<<4
4	=48						kSPri_3 = 3<<4

6	=0						kSPal_0 = 0<<1
7	=2						kSPal_1 = 1<<1
8	=4						kSPal_2 = 2<<1
9	=6						kSPal_3 = 3<<1
10	=8						kSPal_4 = 4<<1
11	=10						kSPal_5 = 5<<1
12	=12						kSPal_6 = 6<<1
13	=14						kSPal_7 = 7<<1

15	=64						kSFlipX = 64
16	=128						kSFlipY = 128

18	=0						kBaseSize_32x32 = 0
19	=1						kBaseSize_64x32 = 1
20	=2						kBaseSize_32x64 = 2
21	=3						kBaseSize_64x64 = 3

23							;takes the screen base in Word Offset and ScreenLayout in kBaseSize_XXxXX
24							fBGBaseSize .function base,screenLayout
25							.endf ((base/1024)<<2) | screenLayout

27							;takes the 4 screen character base addresses in Word Offset
28							fBGCharAddress .function bg1,bg2,bg3,bg4
29							.endf (bg4/4096)<<12 | (bg3/4096)<<8 | (bg2/4096)<<4 | (bg1/4096)

31							; converts 24bit RGB value into a SNES 16bit word
32							fRGBToSNES .function r,g,b
33							.endf (b&$f8)<<7 | (g&$f8)<<2 | (r&$f8)>>3

35							; this wil convert a sprite X,Y index for 16x16 sprites on the sprite "map" to a tilenum + attributes word
36							; it handles multiple sprite "banks" as well
37							fSprDef .function gridX,gridY,flags
43							.endf (gridX*2+_y*32)|flags<<8

:1	;******  Return to file: QWAKSNES.asm

60	.7f0000						kEntity .block
61	=$00							heli = $00
62	=$01							spring = $01
63	=$02							worm = $02
64	=$03							bat = $03
65	=$04							ghost = $04
66	=$05							spider = $05
67	=$06							fish = $06
68	=$07							circler = $07
69	=$08							bear = $08
70	=$09							octopuss = $09
71	=$0a							bearBody = $0A
72	=$0b							octopussBody = $0B
73	=$0c							bubble = $0C
74	=$0d							bossDummy = $0D
75	=25							maxEntities = 25
76	=8							maxBubbleMakers = 8
77	=2							maxNumBubblesPerMaker = 2
78	=255							removedFromBullet = 255
79	=254							deadFromRedBullet = 254
80							.bend

82	.7f0000						mplex .block
83	=$20							kMaxSpr = $20
84							.bend

86							.include "qwak_structs.asm"

:3	;******  Processing file: qwak_structs.asm

1	.0000						sGameData .struct
2	>0000						lives 		.byte ?					; player lives
3	>0001						flowers 		.byte ?					; current flowers
4	>0002						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>0008						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>000e						currLevel 	.byte ?					; current level 0 bassed
7	>000f						exitOpenNZ 	.byte ?					; have all keys been collected
8	>0010						musicMode 	.byte ?					; not actually used, yet
9							.ends

11	.0000						sLevelData .struct
12	>0000						numKeysLeft			.byte ?			; number of keys left to collect
13	>0001						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>0002						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>0003						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>0005						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>0006						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>0007						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>0008						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends

22	.0000						sTimerTickDowns .struct
23	>0000						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>0001						playerAnim 					.byte ?	; players animation timer
25	>0002						doorAnim						.byte ?	; frames till next exit door animation
26	>0003						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>0004						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>0005						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>0006						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends

32	.0000						sPlayerData .struct
33							; state info
34	>0000						state 					.byte ?				; major FSM value
35	>0001						minorState 				.byte ?				; sub FSM in that FSM value

37	>0002						deadNZ					.byte ?
38	>0003						hasShieldNZ				.byte ?
39	.0004						shieldTimer				.dunion HLWord
210:1	>0004							.word ?
211								.struct
212	>0004								lo .byte ?
213	>0005								hi .byte ?
214								.ends
215							.endu
40:3	>0006						canFloatNZ 				.byte ?				; AKA has collected spring
41	>0007						floatTimer 				.byte ?

43	>0008						onGroundNZ 				.byte ?
44	>0009						hasJumpedNZ				.byte ?
45	>000a						isFallingNZ				.byte ?
46	>000b						facingRight 			.byte ?				; this is 0 or 1 only
47	>000c						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>000d						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>000e						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>000f						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>0010						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.0011						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>0011							.word ?
211								.struct
212	>0011								lo .byte ?
213	>0012								hi .byte ?
214								.ends
215							.endu
54:3	>0013						currAnim 				.byte ?				; the players current animation number
55	>0014						frameOffset 			.byte ?				; the current frame in the animation

57	>0015						bulletActive 			.byte ?				; this is 0 or 1 only
58	>0016						bulletUD 				.byte ?				; this is 0 or 1 only
59	>0017						bulletLR 				.byte ?				; this is 0 or 1 only
60	>0018						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>0019						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>001a						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>001b						flashColour				.byte ?				; index into the flash colour LUT
66	>001c						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends

69	.0000						sEntityData .struct
70	>0000						number			 .byte ?									; how many entities are actually in this level
71	>0001						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>001a						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>0033						active			 .fill kEntity.maxEntities 		; if it is still active
74	>004c						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0065						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>007e						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0097						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>00b0						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>00c9						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>00e2						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>00fb						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>0114						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>012d						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0146						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>015f						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0178						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>0191						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>0192						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>019a						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>019b						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends

93	.0000						sCSTCCParams .struct
94	.0000						xDeltaCheck 	.dunion HLWord ; pixels
210:1	>0000							.word ?
211								.struct
212	>0000								lo .byte ?
213	>0001								hi .byte ?
214								.ends
215							.endu
95:3	.0002						yDeltaCheck 	.dunion HLWord	; pixels
210:1	>0002							.word ?
211								.struct
212	>0002								lo .byte ?
213	>0003								hi .byte ?
214								.ends
215							.endu
96:3	.0004						xDeltaBackup 	.dunion HLWord	; pixels
210:1	>0004							.word ?
211								.struct
212	>0004								lo .byte ?
213	>0005								hi .byte ?
214								.ends
215							.endu
97:3	.0006						yDeltaBackup 	.dunion HLWord	; pixels
210:1	>0006							.word ?
211								.struct
212	>0006								lo .byte ?
213	>0007								hi .byte ?
214								.ends
215							.endu
98:3							.ends

100	.0000						sMplexBuffer .struct
101	>0000						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>0021						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>0042						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends


:1	;******  Return to file: QWAKSNES.asm


88							.section sDP
89	.0000						EntityDataPointer	.dunion HLWord
210	>0000							.word ?
211								.struct
212	>0000								lo .byte ?
213	>0001								hi .byte ?
214								.ends
215							.endu
90	>0002						CurrentEntity		.byte ?
91	>0003						CollidedEntity		.byte ?
92	>0004						EntNum				.byte ?
93	>0005						CollisionResult	.byte ?
94	.0006						Pointer1				.dunion HLWord
210	>0006							.word ?
211								.struct
212	>0006								lo .byte ?
213	>0007								hi .byte ?
214								.ends
215							.endu
95	.0008						Pointer2				.dunion HLWord
210	>0008							.word ?
211								.struct
212	>0008								lo .byte ?
213	>0009								hi .byte ?
214								.ends
215							.endu
96	.000a						Pointer3				.dunion HLWord
210	>000a							.word ?
211								.struct
212	>000a								lo .byte ?
213	>000b								hi .byte ?
214								.ends
215							.endu
97	.000c						Pointer4				.dunion HLWord
210	>000c							.word ?
211								.struct
212	>000c								lo .byte ?
213	>000d								hi .byte ?
214								.ends
215							.endu
98	>000e						playerTempCol		.byte ?
99	>000f						ZPTemp				.byte ?
100	>0010						ZPTemp2				.byte ?
101	>0011						ZPTemp3				.byte ?
102	>0012						ZPTemp4				.byte ?
103	>0013						ZPTemp5				.byte ?
104	>0014						TempX					.byte ?
105	>0015						ActiveTileIndex	.byte ?
106	>0016						ActiveTile			.byte ?
107	>0017						TestingSprX1		.byte ?
108	>0018						TestingSprX2		.byte ?
109	>0019						TestingSprY1		.byte ?
110	>001a						TestingSprY2		.byte ?
111	.001b						GameStatePointer	.dunion HLWord
210	>001b							.word ?
211								.struct
212	>001b								lo .byte ?
213	>001c								hi .byte ?
214								.ends
215							.endu

113	>001d						CollideSpriteToCheck		.byte ?
114	>001e						CollideSpriteBoxIndex	.byte ?
115	>001f						CollideCharTLI				.byte ?
116	>0020						CollideCharTLC				.byte ?
117	>0021						CollideCharTRI				.byte ?
118	>0022						CollideCharTRC				.byte ?
119	>0023						CollideCharBLI				.byte ?
120	>0024						CollideCharBLC				.byte ?
121	>0025						CollideCharBRI				.byte ?
122	>0026						CollideCharBRC				.byte ?
123	>0027						CollideInternalSprTLX	.byte ?  ; these 4 MUST be in the same order as below
124	>0028						CollideInternalSprBRX	.byte ?
125	>0029						CollideInternalSprTLY	.byte ?
126	>002a						CollideInternalSprBRY	.byte ?
127	>002b						CollideInternalTTLX		.byte ?
128	>002c						CollideInternalTBRX		.byte ?
129	>002d						CollideInternalTTLY		.byte ?
130	>002e						CollideInternalTBRY		.byte ?
131	>002f						DidClipX						.word ?  ; this is if the add X with MSB function did clip the Y
132	>0031						HideScreen					.byte ?
133	.0032						ZPLong						.dunion HLBLong
218	>0032							.long ?
219								.struct
220	>0032								lo	.byte ?
221	>0033								hi	.byte ?
222	>0034								bank .byte ?
223								.ends
224								.struct
225	>0032								loWord .word ?
226	>0034								dummy1 .byte ?
227								.ends
228								.struct
229	>0032								dummy2 .byte ?
230	>0033								hiWord .word ?
231								.ends
232							.endu
134							.send

136							; *** instance headers and vectors
137							.enc "none"
138							.section sHeader
139	>7fb0	80ffb0	00 00					.word 0
140	>7fb2	80ffb2	d1 d7 c1 cb				.text "QWAK"
141	>7fb6	80ffb6	00 00 00 00 00 00 00			.fill 7,0
142	>7fbd	80ffbd	00					.byte 0 ; RAM
143	>7fbe	80ffbe	00					.byte 0 ; special version
144	>7fbf	80ffbf	00					.byte 0 ; cart type
145								;					 111111111112
146								;	  	 123456789012345678901
147	>7fc0	80ffc0	51 57 41 4b 20 53 4e 45			.text "qwak snes            "
	>7fc8	80ffc8	53 20 20 20 20 20 20 20 20 20 20 20 20
148							.cerror * != $80ffd5, "name is too short", *
149	>7fd5	80ffd5	30					.byte $30	; Mapping
150	>7fd6	80ffd6	00					.byte $00	; Rom
151	>7fd7	80ffd7	07					.byte $07	; 128K
152	>7fd8	80ffd8	00					.byte $00	; 0 SRAM
153	>7fd9	80ffd9	02					.byte $02	; PAL
154	>7fda	80ffda	33					.byte $33	; Version 3
155	>7fdb	80ffdb	00					.byte $00	; rom version 0
156	>7fdc	80ffdc	00 00					.word $0000 ; complement
157	>7fde	80ffde	00 00					.word $0000 ; CRC
158							.send ; sHeader

160							.section s65816Vectors
161							.block								; scope this so we don't get name clashes
162	>7fe4	80ffe4	a8 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
163	>7fe6	80ffe6	a8 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
164	>7fe8	80ffe8	a8 81				ABORT	.word <>Bank80.justRTI
165	>7fea	80ffea	51 81				NMI	.word <>Bank80.NMI
166	>7fec	80ffec	a8 81				RESET	.word <>Bank80.justRTI
167	>7fee	80ffee	a8 81				IRQ	.word <>Bank80.justRTI
168							.bend
169							.send ; s65816Vectors

171							.section s6502Vectors
172							.block								; scope this so we don't get name clashes
173	>7ff4	80fff4	a8 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
174	>7ff6	80fff6	a8 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
175	>7ff8	80fff8	a8 81				ABORT	.word <>Bank80.justRTI
176	>7ffa	80fffa	a8 81				NMI	.word <>Bank80.justRTI
177	>7ffc	80fffc	00 80				RESET	.word <>Bank80.RESET
178	>7ffe	80fffe	a8 81				IRQ	.word <>Bank80.justRTI
179							.bend
180							.send ; s65816Vectors

182							; *** instance banks ***
183							.section sBank80
184	.0000	808000					Bank80 .binclude "Bank80.asm"

:4	;******  Processing file: Bank80.asm

1							; Bank 80
2							.virtual $800000+gSharedRamstart
3							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>800037						mINIDISP  .word ?
3	>800039						mOBSEL    .word ?
4	>80003b						mBGMODE   .word ?
5	>80003d						mMOSIAC   .word ?
6	>80003f						mBG1SC    .word ?
7	>800041						mBG2SC    .word ?
8	>800043						mBG3SC    .word ?
9	>800045						mBG4SC    .word ?
10	>800047						mBG12NBA  .word ?
11	>800049						mBG23NBA  .word ?
12	.80004b						mBG1HOFS  .dunion HLWord
210:1	>80004b							.word ?
211								.struct
212	>80004b								lo .byte ?
213	>80004c								hi .byte ?
214								.ends
215							.endu
13:5	.80004d						mBG1VOFS  .dunion HLWord
210:1	>80004d							.word ?
211								.struct
212	>80004d								lo .byte ?
213	>80004e								hi .byte ?
214								.ends
215							.endu
14:5	.80004f						mBG2HOFS  .dunion HLWord
210:1	>80004f							.word ?
211								.struct
212	>80004f								lo .byte ?
213	>800050								hi .byte ?
214								.ends
215							.endu
15:5	.800051						mBG2VOFS  .dunion HLWord
210:1	>800051							.word ?
211								.struct
212	>800051								lo .byte ?
213	>800052								hi .byte ?
214								.ends
215							.endu
16:5	.800053						mBG3HOFS  .dunion HLWord
210:1	>800053							.word ?
211								.struct
212	>800053								lo .byte ?
213	>800054								hi .byte ?
214								.ends
215							.endu
17:5	.800055						mBG3VOFS  .dunion HLWord
210:1	>800055							.word ?
211								.struct
212	>800055								lo .byte ?
213	>800056								hi .byte ?
214								.ends
215							.endu
18:5	.800057						mBG4HOFS  .dunion HLWord
210:1	>800057							.word ?
211								.struct
212	>800057								lo .byte ?
213	>800058								hi .byte ?
214								.ends
215							.endu
19:5	.800059						mBG4VOFS  .dunion HLWord
210:1	>800059							.word ?
211								.struct
212	>800059								lo .byte ?
213	>80005a								hi .byte ?
214								.ends
215							.endu
20:5	>80005b						mW12SEL   .word ?
21	>80005d						mW34SEL   .word ?
22	>80005f						mWOBJSEL  .word ?
23	>800061						mWH0      .word ?
24	>800063						mWH1      .word ?
25	>800065						mWH2      .word ?
26	>800067						mWH3      .word ?
27	>800069						mWBGLOG   .word ?
28	>80006b						mOBJLOG   .word ?
29	>80006d						mTM       .word ?
30	>80006f						mTS       .word ?
31	>800071						mTMW      .word ?
32	>800073						mTSW      .word ?
33	>800075						mCOLDATA  .word ?
34	>800077						mSETINI   .word ?
35	>800079						mNMITIMEN .word ?

37	>80007b						joyLeft	 		.byte ?
38	>80007c						joyRight 		.byte ?
39	>80007d						joyUp	 			.byte ?
40	>80007e						joyDown	 		.byte ?
41	>80007f						joyFire	 		.byte ?
42	>800080						oldJoyLeft		.byte ?
43	>800081						oldJoyRight 	.byte ?
44	>800082						oldJoyUp			.byte ?
45	>800083						oldJoyDown		.byte ?
46	>800084						oldJoyFire		.byte ?
47	>800085						joyUpStart  	.byte ?
48	>800086						joyUpStop		.byte ?
49	>800087						joyFireEvent 	.byte ?
50	.800088						GameData 		.dstruct sGameData
2:3	>800088						lives 		.byte ?					; player lives
3	>800089						flowers 		.byte ?					; current flowers
4	>80008a						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>800090						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>800096						currLevel 	.byte ?					; current level 0 bassed
7	>800097						exitOpenNZ 	.byte ?					; have all keys been collected
8	>800098						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.800099						LevelData 		.dstruct sLevelData
12:3	>800099						numKeysLeft			.byte ?			; number of keys left to collect
13	>80009a						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>80009b						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>80009c						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>80009e						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>80009f						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>8000a0						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>8000a1						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.8000a2						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>8000a2						state 					.byte ?				; major FSM value
35	>8000a3						minorState 				.byte ?				; sub FSM in that FSM value

37	>8000a4						deadNZ					.byte ?
38	>8000a5						hasShieldNZ				.byte ?
39	.8000a6						shieldTimer				.dunion HLWord
210:1	>8000a6							.word ?
211								.struct
212	>8000a6								lo .byte ?
213	>8000a7								hi .byte ?
214								.ends
215							.endu
40:3	>8000a8						canFloatNZ 				.byte ?				; AKA has collected spring
41	>8000a9						floatTimer 				.byte ?

43	>8000aa						onGroundNZ 				.byte ?
44	>8000ab						hasJumpedNZ				.byte ?
45	>8000ac						isFallingNZ				.byte ?
46	>8000ad						facingRight 			.byte ?				; this is 0 or 1 only
47	>8000ae						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>8000af						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>8000b0						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>8000b1						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>8000b2						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.8000b3						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>8000b3							.word ?
211								.struct
212	>8000b3								lo .byte ?
213	>8000b4								hi .byte ?
214								.ends
215							.endu
54:3	>8000b5						currAnim 				.byte ?				; the players current animation number
55	>8000b6						frameOffset 			.byte ?				; the current frame in the animation

57	>8000b7						bulletActive 			.byte ?				; this is 0 or 1 only
58	>8000b8						bulletUD 				.byte ?				; this is 0 or 1 only
59	>8000b9						bulletLR 				.byte ?				; this is 0 or 1 only
60	>8000ba						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>8000bb						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>8000bc						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>8000bd						flashColour				.byte ?				; index into the flash colour LUT
66	>8000be						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$8000bf					TICK_DOWN_START = *
54	.8000bf						TickDowns 		.dstruct sTimerTickDowns
23:3	>8000bf						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>8000c0						playerAnim 					.byte ?	; players animation timer
25	>8000c1						doorAnim						.byte ?	; frames till next exit door animation
26	>8000c2						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>8000c3						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>8000c4						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>8000c5						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$8000cd					TICK_DOWN_END = *
56	.8000cd						EntityData 		.dstruct sEntityData
70:3	>8000cd						number			 .byte ?									; how many entities are actually in this level
71	>8000ce						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>8000e7						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>800100						active			 .fill kEntity.maxEntities 		; if it is still active
74	>800119						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>800132						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>80014b						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>800164						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>80017d						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>800196						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>8001af						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>8001c8						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>8001e1						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>8001fa						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>800213						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>80022c						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>800245						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>80025e						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>80025f						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>800267						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>800268						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.800269						PasswordTemp .block
58	>800269							lives			.byte ?
59	>80026a							flowers		.byte ?
60	>80026b							score			.byte ?,?,?,?,?,?
61	>800271							high			.byte ?,?,?,?,?,?
62	>800277							currLevel	.byte ?
63							.bend ;PasswordTemp
64	>800278						ActivePassword 						.fill 12
65	>800284						PasswordEntryIndex 					.byte ?
66	>800285						ValidPassword 							.byte ?
67	>800286						PasswordInfiLives 					.byte ?
68	>800287						PasswordRedBullets 					.byte ?
69	>800288						PasswordHaveSpring 					.byte ?
70	>800289						PasswordLevelSkip 					.byte ?
71	.80028a						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	.80028a						xDeltaCheck 	.dunion HLWord ; pixels
210:1	>80028a							.word ?
211								.struct
212	>80028a								lo .byte ?
213	>80028b								hi .byte ?
214								.ends
215							.endu
95:3	.80028c						yDeltaCheck 	.dunion HLWord	; pixels
210:1	>80028c							.word ?
211								.struct
212	>80028c								lo .byte ?
213	>80028d								hi .byte ?
214								.ends
215							.endu
96:3	.80028e						xDeltaBackup 	.dunion HLWord	; pixels
210:1	>80028e							.word ?
211								.struct
212	>80028e								lo .byte ?
213	>80028f								hi .byte ?
214								.ends
215							.endu
97:3	.800290						yDeltaBackup 	.dunion HLWord	; pixels
210:1	>800290							.word ?
211								.struct
212	>800290								lo .byte ?
213	>800291								hi .byte ?
214								.ends
215							.endu
98:3							.ends
72:5	>800292						bulletFrame 							.byte ?
73	>800293						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>800294						tileMapTemp .fill 240
76	.800384						mplexBuffer     .dstruct sMplexBuffer
101:3	>800384						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>8003a5						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>8003c6						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>8003e7						PasswordRAMCache .fill 12

79	>8003f3						OAMMirror .fill 256*2
80	>8005f3						OAMMirrorHigh .fill 32


:4	;******  Return to file: Bank80.asm

4							.endv

6	.0000	808000					kVRAM .block
7	=0							titleScreen		= $0000/2
8	=1024							gameScreen		= $0800/2
9	=2048							font				= $1000/2
10	=2560							fontDest			= $1400/2
11	=4096							gameChars		= $2000/2
12	=16384							Sprite			= $8000/2
13							.bend

15	=16						kTileXCount = 16
16	=12						kTileYCount = 12
17	=192						kLevelSizeMax = kTileXCount*kTileYCount
18	=0						kSprBase = 0
19	=1						kBulletSpriteOffset = 1
20	=2						kEntsSpriteOffset = 2
21	=1						kBulletCollisionbox = 1
22	.0000	808000					kBounds .block
23	=0							screenMinX = 0
24								;screenMinY = 0
25								;screenMaxX = ( kTileXCount * 16 )
26	=192							screenMaxY = ( kTileYCount * 16 )
27							.bend

29	.0000	808000					kTiles .block
30	=0							back = 0

32	=1							wall = 1
33	=2							wall1 = 2
34	=3							wall2 = 3
35	=4							wall3 = 4
36	=5							wall4 = 5

38	=6							spike = 6
39	=7							flower = 7
40	=8							fruit = 8

42	=9							key1 = 9
43	=10							key2 = 10
44	=11							key3 = 11
45	=12							key4 = 12

47	=13							shield = 13
48	=14							spring = 14
49	=15							potion = 15
50	=16							egg = 16

52	=17							exit = 17
53	=18							player = 18

55	=19							pipe = 19
56	=20							diss = 20
57	=33							dissNoColide = 33

59	=34							underHangStart = 34
60	=35							underHang = 35
61	=36							shadowOpenCorner = 36
62	=37							sideShadow = 37
63	=38							middlesideShadow = 38
64	=39							topLeftCorner = 39
65	=37							intermissionOldWall = 37	; used to look up the tile for the intermission
66							.bend
67	=7						kKeyToWallDelta = kTiles.key1 - kTiles.wall1
68	=10						kDoorClosed = 10
69	=14						kDoorOpen = 14

71	=$62						kDefault_OBSEL  = %01100010 ; 8x8 and 16x16 0 gap and sprites at 8K
72	=$08						kBossBearBankOR = %00001000 ; move the upper half 1 4K bank up
73	=$10						kBossOctoBankOR = %00010000 ; move the upper half 2 4K bank up

75	=500						kShieldTimer = 10*50			; 10 seconds on PAL


78							.as				; Assume A8
79							.xs				; Assume X8
80							.autsiz			; Auto size detect
81							.databank $00	; databank is 00
82							.dpage $0000	; dpage is 0000

84	.0000	808000					RESET
85	.0000	808000	18		clc			clc
86	.0001	808001	fb		xce			xce
87	.0002	808002	a9 01		lda #$01		lda #$01
88	.0004	808004	8d 0d 42	sta $420d		sta $420D	; go fast, because why not?
89	.0007	808007	5c 0b 80 80	jmp $80800b		jml RESETHi
90	.000b	80800b					RESETHi
91	.000b	80800b	c2 30		rep #$30		REP #$30		; AXY 16
92	.000d	80800d	a2 ff 1f	ldx #$1fff		ldx #$1FFF	; set Stack to top of Shared RAM
93	.0010	808010	9a		txs			txs
94	.0011	808011	4b		phk			phk
95	.0012	808012	ab		plb			plb			; set the data bank to also be fast
96							.databank $80
97	.0013	808013	a9 00 00	lda #$0000		lda #0000
98	.0016	808016	5b		tcd			tcd				; set DP to 0
99	.0017	808017	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
100	.001a	80801a	8d 00 21	sta $802100		sta $802100
101	.001d	80801d					ClearWRAM
102	.001d	80801d	a9 08 80	lda #$8008		lda #$8008		; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
103	.0020	808020	8d 00 43	sta $804300		sta $804300
104	.0023	808023	a9 4f 81	lda #$814f		lda #<>DMAZero	; 64Tass | get low word
105	.0026	808026	8d 02 43	sta $804302		sta $804302
106	.0029	808029	a9 80 00	lda #$0080		lda #`DMAZero	; 64Tass | get bank
107	.002c	80802c	8d 04 43	sta $804304		sta $804304
108	.002f	80802f	9c 81 21	stz $802181		stz $802181
109	.0032	808032	9c 82 21	stz $802182		stz $802182		; START AT 7E:0000
110	.0035	808035	9c 05 43	stz $804305		stz $804305		; DO 64K
111	.0038	808038	a9 01 00	lda #$0001		lda #$0001
112	.003b	80803b	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
113	.003e	80803e	8d 0b 42	sta $80420b		sta $80420B		; FIRE IT AGAIN, FOR NEXT 64k
114	.0041	808041					InitSNESAndMirror	; this is defualt init sequence
115	.0041	808041	c2 20		rep #$20		REP #$20			; a16
116	.0043	808043	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
117	.0046	808046	8d 00 21	sta $802100		sta $802100
118	.0049	808049	8d 37 00	sta $800037		sta mINIDISP
119								;stz mOBSEL
120	.004c	80804c	9c 05 21	stz $802105		stz $802105 ;6
121								;stz mBGMODE
122								;stz mMOSIAC
123	.004f	80804f	9c 07 21	stz $802107		stz $802107 ;8
124								;stz mBG1SC
125								;stz mBG2SC
126	.0052	808052	9c 09 21	stz $802109		stz $802109 ;A
127								;stz mBG3SC
128								;stz mBG4SC
129	.0055	808055	9c 0b 21	stz $80210b		stz $80210B ;C
130								;stz mBG12NBA
131								;stz mBG23NBA
132	.0058	808058	9c 0d 21	stz $80210d		stz $80210D ;E
133	.005b	80805b	9c 0d 21	stz $80210d		stz $80210D ;E
134								;stz mBG1HOFS
135								;stz mBG1VOFS
136	.005e	80805e	9c 0f 21	stz $80210f		stz $80210F ;10
137	.0061	808061	9c 0f 21	stz $80210f		stz $80210F ;10
138								;stz mBG2HOFS
139								;stz mBG2VOFS
140	.0064	808064	9c 11 21	stz $802111		stz $802111 ;12
141	.0067	808067	9c 11 21	stz $802111		stz $802111 ;12
142								;stz mBG3HOFS
143								;stz mBG3VOFS
144	.006a	80806a	9c 13 21	stz $802113		stz $802113 ;14
145	.006d	80806d	9c 13 21	stz $802113		stz $802113 ;14
146								;stz mBG4HOFS
147								;stz mBG4VOFS
148	.0070	808070	9c 19 21	stz $802119		stz $802119 ;1A to get Mode7
149	.0073	808073	9c 1b 21	stz $80211b		stz $80211B ;1C these are write twice
150	.0076	808076	9c 1b 21	stz $80211b		stz $80211B ;1C regs
151	.0079	808079	9c 1d 21	stz $80211d		stz $80211D ;1E
152	.007c	80807c	9c 1d 21	stz $80211d		stz $80211D ;1E
153	.007f	80807f	9c 1f 21	stz $80211f		stz $80211F ;20
154	.0082	808082	9c 1f 21	stz $80211f		stz $80211F ;20
155								; add mirrors here if you are doing mode7
156	.0085	808085	9c 23 21	stz $802123		stz $802123 ;24
157								;stz mW12SEL
158								;stz mW34SEL
159	.0088	808088	9c 25 21	stz $802125		stz $802125 ;26
160								;stz mWOBJSEL
161	.008b	80808b	9c 26 21	stz $802126		stz $802126 ;27 YES IT DOUBLES OH WELL
162	.008e	80808e	9c 28 21	stz $802128		stz $802128 ;29
163								;stz mWH0
164								;stz mWH1
165								;stz mWH2
166								;stz mWH3
167	.0091	808091	9c 2a 21	stz $80212a		stz $80212A ;2B
168								;stz mWBGLOG
169								;stz mOBJLOG
170	.0094	808094	9c 2c 21	stz $80212c		stz $80212C ;2D
171	.0097	808097	9c 2e 21	stz $80212e		stz $80212E ;2F
172								;stz mTM
173								;stz mTS
174								;stz mTMW
175								;stz mTSW
176	.009a	80809a	a9 e0 00	lda #$00e0		lda #$00E0
177	.009d	80809d	8d 32 21	sta $802132		sta $802132
178	.00a0	8080a0	8d 75 00	sta $800075		sta mCOLDATA
179								;stz mSETINI
180								;ONTO THE CPU I/O REGS
181	.00a3	8080a3	a9 00 ff	lda #$ff00		lda #$FF00
182	.00a6	8080a6	8d 01 42	sta $804201		sta $804201
183								;stz mNMITIMEN
184	.00a9	8080a9	9c 02 42	stz $804202		stz $804202 ;3
185	.00ac	8080ac	9c 04 42	stz $804204		stz $804204 ;5
186	.00af	8080af	9c 06 42	stz $804206		stz $804206 ;7
187	.00b2	8080b2	9c 08 42	stz $804208		stz $804208 ;9
188	.00b5	8080b5	9c 0a 42	stz $80420a		stz $80420A ;B
189	.00b8	8080b8	9c 0c 42	stz $80420c		stz $80420C ;D
190								; CLEAR VRAM
191	.00bb	8080bb	c2 20		rep #$20		REP #$20			; A16
192	.00bd	8080bd	a9 09 18	lda #$1809		lda #$1809		; A -> B, FIXED SOURCE, WRITE WORD | VRAM
193	.00c0	8080c0	8d 00 43	sta $804300		sta $804300
194	.00c3	8080c3	a9 4f 81	lda #$814f		lda #<>DMAZero ; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
195	.00c6	8080c6	8d 02 43	sta $804302		sta $804302
196	.00c9	8080c9	a9 80 00	lda #$0080		lda #`DMAZero	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
197	.00cc	8080cc	8d 04 43	sta $804304		sta $804304		; AND THE UPPER BYTE WILL BE 0
198	.00cf	8080cf	9c 05 43	stz $804305		stz $804305		; DO 64K
199	.00d2	8080d2	a9 80 00	lda #$0080		lda #$80			; INC ON HI WRITE
200	.00d5	8080d5	8d 15 21	sta $802115		sta $802115
201	.00d8	8080d8	9c 16 21	stz $802116		stz $802116		; START AT 00
202	.00db	8080db	a9 01 00	lda #$0001		lda #$01
203	.00de	8080de	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
204								; CLEAR CG-RAM
205	.00e1	8080e1	a9 08 22	lda #$2208		lda #$2208		; A -> B, FIXED SOURCE, WRITE BYTE | CG-RAM
206	.00e4	8080e4	8d 00 43	sta $804300		sta $804300
207	.00e7	8080e7	a9 00 02	lda #$0200		lda #$200		; 512 BYTES
208	.00ea	8080ea	8d 05 43	sta $804305		sta $804305
209	.00ed	8080ed	e2 20		sep #$20		SEP #$20			; A8
210	.00ef	8080ef	9c 21 21	stz $802121		stz $802121		; START AT 0
211	.00f2	8080f2	a9 01		lda #$01		lda #$01
212	.00f4	8080f4	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
213	.00f7	8080f7	64 35		stz $35			stz NMIReadyNF
255:1	.00f9	8080f9	e2 30		sep #$30		SEP #$30
215:4	.00fb	8080fb	a9 80		lda #$80		lda #kHideScreen.hide	; make sure the screen is in the hidden mode, it should be, but doesn't hurt ;)
216	.00fd	8080fd	85 31		sta $31			sta HideScreen
217								.cerror kHideScreen.hide < 128, "need to find an actual negative value for disableUpdateSpritesXYToOAMNF"
218	.00ff	8080ff	8d 93 02	sta $800293		sta disableUpdateSpritesXYToOAMNF

220	.0102	808102	20 89 88	jsr $808889		jsr clearSpritesMirror_xx	;sets all sprites to offscreen, small

222	.0105	808105	20 7f 8a	jsr $808a7f		jsr dmaPalletes_XX			; we have fixed palletes so upload them
223	.0108	808108	20 f3 8a	jsr $808af3		jsr dmaFixedChars_xx			; also the fixed chars which don't change

225								; draw the title screen
226								; since I have enough VRAM to spare I just draw this once
227								; and then set the BG1 to point to it when I want to
228	.010b	80810b	20 5f 86	jsr $80865f		jsr clearScreenMirrorToEmptyChar
229								; draw each string ( exepet for Game Over )
230	.010e	80810e	a2 16		ldx #$16		ldx #len(TitleScreenData.AllStrings)*2-2 ; -2 because they are words now
231	.0110	808110	86 0f		stx $0f			stx ZPTemp
232	.0112	808112	a6 0f		ldx $0f		-	ldx ZPTemp
233	.0114	808114	20 a6 86	jsr $8086a6		jsr plotStringAAtIndexX
234	.0117	808117	c6 0f		dec $0f			dec ZPTemp
235	.0119	808119	c6 0f		dec $0f			dec ZPTemp
236	.011b	80811b	10 f5		bpl $808112		bpl -
237								; put the Screen mirror into VRAM
238	.011d	80811d	20 a4 8b	jsr $808ba4		jsr dmaScreenMirrorToTitleScreen_xx

240								; set up mode and tile pointer
241	.0120	808120	a9 01		lda #$01		lda #1			; mode 1
242	.0122	808122	8d 05 21	sta $802105		sta $802105
243	.0125	808125	a9 11		lda #$11		lda #%00010001
244	.0127	808127	8d 2c 21	sta $80212c		sta $80212C		; make 1 + sprites on Main Screen

246	.012a	80812a	a9 81		lda #$81		lda #%10000001
247	.012c	80812c	8d 00 42	sta $804200		sta $804200		; enable VBlank NMI and enable auto Joypad reading

249								; set the main FSM to point to the title screen FSM
239:1	.012f	80812f	c2 20		rep #$20		REP #$20
251:4	.0131	808131	a9 76 83	lda #$8376		lda #<>titleScreenLoop
252	.0134	808134	85 1b		sta $1b			sta GameStatePointer

254								; this is the Main Game loop high level
255								; it will wait for the NMI
256								; dispatch the current high level FSM mode
257								; update sprites in the mirror if required
258	.0136	808136					MainLoop
255:1	.0136	808136	e2 30		sep #$30		SEP #$30
260:4	.0138	808138					MainLoopWait
261	.0138	808138	a5 35		lda $35			lda NMIReadyNF
262	.013a	80813a	10 fc		bpl $808138		bpl MainLoopWait	; Read Flag
263	.013c	80813c	64 35		stz $35			stz NMIReadyNF		; Clear Flag
264	.013e	80813e	a2 00		ldx #$00		ldx #0				; sadly no jsr(XXXX) so dummy x
265	.0140	808140	fc 1b 00	jsr ($80001b,x)		jsr (GameStatePointer,k,x) ; why ,k well if you don't have it you get something like
266																	; "error: address in different program bank address '($001b,x)'"
267																	; ,k is a 64tass modificatgion not a 65816 addressing mode.
268																	; See section 3.9 of the manual for details basically ,k says make this
269																	; "program bank relative" aka "trust me"
255:1	.0143	808143	e2 30		sep #$30		SEP #$30
271:4	.0145	808145	2c 93 02	bit $800293		bit disableUpdateSpritesXYToOAMNF
272	.0148	808148	30 03		bmi $80814d		bmi +								; this could be MainLoop but that might cause you pain later if you make mods to this code
273	.014a	80814a	20 c5 88	jsr $8088c5			jsr updateAllSpriteXYsToOAMMirror_88
274	.014d	80814d	80 e7		bra $808136	+	bra MainLoop

276							.section sDP
277	>0035						NMIReadyNF .byte ?	; I need the flag and I want it in the DP
278							.send ; sDP

280	>014f	80814f	00 00				DMAZero .word $0000	; DMA needs a memory address for writing fixed values

282	.0151	808151					kHideScreen .block
283	=$80							hide = $80			; force blank, screen brightness 0
284	=$0f							show = $0f			; display on, screen brightness 15
285							.bend

287							; ----- @NMI@ -----

289	.0151	808151					NMI
290	.0151	808151	5c 55 81 80	jmp $808155		jml NMIFast				; Move To 8X:XXXX for speed
291	.0155	808155					NMIFast
292	.0155	808155	8b		phb			phb						; Save Data Bank
293	.0156	808156	4b		phk			phk
294	.0157	808157	ab		plb			plb						; Set Data Bank to Match Program Bank
235:1	.0158	808158	e2 20		sep #$20		SEP #$20
296:4	.015a	80815a	2c 10 42	bit $804210		bit $804210				; Ack NMI
297	.015d	80815d	2c 35 00	bit $800035		bit@W NMIReadyNF,b	; Check if this is safe
298	.0160	808160	10 02		bpl $808164		bpl _ready
299	.0162	808162	ab		plb				plb					; No, restore Data Bank
300	.0163	808163	40		rti				rti					; Exit
301	.0164	808164					_ready						; Safe
259:1	.0164	808164	c2 30		rep #$30		REP #$30
303:4	.0166	808166	48		pha			pha
304	.0167	808167	da		phx			phx
305	.0168	808168	5a		phy			phy						; Save A,X,Y
306	.0169	808169	0b		phd			phd						; Save the DP register
307	.016a	80816a	a9 00 00	lda #$0000		lda #0000				; or where ever you want your NMI DP
308	.016d	80816d	5b		tcd			tcd						; set DP to known value
309								; do update code here
255:1	.016e	80816e	e2 30		sep #$30		SEP #$30
311:4	.0170	808170	a5 31		lda $31			lda HideScreen
312	.0172	808172	8f 00 21 00	sta $002100		sta $2100							; enable screen, or not as case may be
313	.0176	808176	30 23		bmi $80819b		bmi _Notvisible
314	.0178	808178	20 4d 88	jsr $80884d			jsr dmaOAM_xx					; this will take up enough time to ensure auto read works
315	.017b	80817b	20 08 85	jsr $808508			jsr scanJoystick_88			; joystick because Commodore 64 port
316	.017e	80817e	a5 36		lda $36				lda ScreenUpdateRequiredN0	; only DMA screen if something has been updated
317	.0180	808180	f0 05		beq $808187			beq +
318	.0182	808182	20 76 8b	jsr $808b76				jsr dmaScreenMirror_xx
319	.0185	808185	64 36		stz $36					stz ScreenUpdateRequiredN0
320	.0187	808187	a9 a5		lda #$a5		+	lda #128+(2*16)+5				; sprite pallete, 2nd one, 7 entry index
321	.0189	808189	8d 21 21	sta $802121			sta $802121						; which is the player body colour
322	.018c	80818c	ae bd 00	ldx $8000bd			ldx PlayerData.flashColour
323	.018f	80818f	bd fc 91	lda $8091fc,x			lda PlayerColourLUT.lo,x
324	.0192	808192	8d 22 21	sta $802122			sta $802122						; write a single pallete entry
325	.0195	808195	bd fe 91	lda $8091fe,x			lda PlayerColourLUT.hi,x
326	.0198	808198	8d 22 21	sta $802122			sta $802122
327	.019b	80819b					_Notvisible
235:1	.019b	80819b	e2 20		sep #$20		SEP #$20
329:4	.019d	80819d	a9 ff		lda #$ff		lda #$FF				; Doing this is slightly faster than DEC, but 2 more bytes
330	.019f	80819f	85 35		sta $35			sta NMIReadyNF		; set NMI Done Flag
259:1	.01a1	8081a1	c2 30		rep #$30		REP #$30
332:4	.01a3	8081a3	2b		pld			pld					; restore DP page
333	.01a4	8081a4	7a		ply			ply
334	.01a5	8081a5	fa		plx			plx
335	.01a6	8081a6	68		pla			pla					; Restore A,X,Y
336	.01a7	8081a7	ab		plb			plb					; Restore Data Bank
337	.01a8	8081a8					justRTI
338	.01a8	8081a8	40		rti			rti					; Exit

340							; ----- @Game loop@ -----

342							; this runs the level logic
343							.as
344							.xs
345	.01a9	8081a9					GAMELOOP
255:1	.01a9	8081a9	e2 30		sep #$30		SEP #$30
347:4	.01ab	8081ab	20 fa 84	jsr $8084fa		jsr updateTickdowns_88		; count down the timers
348	.01ae	8081ae	ad a2 00	lda $8000a2		lda PlayerData.state			; dispatch the player state
349	.01b1	8081b1						_ASSERT_A_LT_6					; make sure we don't get a value too high that puts is into the nulabor code wise
350	.01b1	8081b1	0a		asl a			asl a								; the states is set so you could precalc this but inc is handy and we are not tight
351	.01b2	8081b2	aa		tax			tax								; for code
352	.01b3	8081b3	7c b6 81	jmp ($8081b6,x)		jmp (PlayerCodeLUT,x)		; dispatch
353	>01b6	8081b6	c2 81 07 82 07 82 07 82		PlayerCodeLUT .word <>(playerAppear,playerNormal,playerNormal,playerNormal,playerExit,playerDead)
	>01be	8081be	e7 82 25 83

355							.as
356							.xs
357							; this will unpack the level data, dma the screen, sprites and init the player to spawn position
358							; screen should be off when called
359	.01c2	8081c2					playerAppear
255:1	.01c2	8081c2	e2 30		sep #$30		SEP #$30
361:4	.01c4	8081c4	20 89 88	jsr $808889		jsr clearSpritesMirror_xx		; remove all sprites
362	.01c7	8081c7	20 7e 8d	jsr $808d7e		jsr convertLevelToTileMap_88	; unpack the current level
363	.01ca	8081ca	20 33 8c	jsr $808c33		jsr addShadowsToMap_88			; decorate it
364	.01cd	8081cd	20 da 8b	jsr $808bda		jsr plotTileMap_88				; draw it to screen mirror
365	.01d0	8081d0	20 d5 86	jsr $8086d5		jsr plotStatusArea				; also draw the status area (actually only needs to be done once but meh)
366	.01d3	8081d3	20 76 8b	jsr $808b76		jsr dmaScreenMirror_xx			; send it to VRAM
367	.01d6	8081d6	20 de a1	jsr $80a1de		jsr setAnimateDoorToOpen_88	; we want doors to open eventually
368								; this takes care of all DMA operations
369	.01d9	8081d9	9c a4 00	stz $8000a4		stz PlayerData.deadNZ			; we are alive
370	.01dc	8081dc	9c bd 00	stz $8000bd		stz PlayerData.flashColour		; not flashing
371	.01df	8081df	20 50 91	jsr $809150		jsr setPlayerToSpawnPoint_88	; move player to starting position
372	.01e2	8081e2	20 3f 93	jsr $80933f		jsr unpackEntityBytes			; get the entities for this level
373	.01e5	8081e5	20 6a 94	jsr $80946a		jsr setEntitySprites				; setup their sprite data

375	.01e8	8081e8	a9 04		lda #$04		lda #fBGBaseSize(kVRAM.gameScreen,kBaseSize_32x32)
376	.01ea	8081ea	8d 07 21	sta $802107		sta $802107							; set the BG1 to the Game Screen
377	.01ed	8081ed	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
378	.01ef	8081ef	8d 0b 21	sta $80210b		sta $80210b							; set the chars to the in game set

380								; we are ready to run the game loop as soon as we exit this basically
381	.01f2	8081f2	a9 01		lda #$01		lda #1
382	.01f4	8081f4	85 35		sta $35			sta NMIReadyNF
383								;	lda #kPlayerState.normal ; == 1
384								.cerror kPlayerState.normal != 1, "need to add lda back"
385	.01f6	8081f6	8d a2 00	sta $8000a2		sta PlayerData.state						; move FSM to the next state
386	.01f9	8081f9	20 ab 90	jsr $8090ab		jsr changePlayerAnimForCurrentDir	; make sure the player's animation is correct
387	.01fc	8081fc	9c 97 00	stz $800097		stz GameData.exitOpenNZ					; the door is closed
388	.01ff	8081ff	a9 0f		lda #$0f		lda #kHideScreen.show					; show the screen next NMI
389	.0201	808201	85 31		sta $31			sta HideScreen
390								.cerror kHideScreen.show > 128, "need to find something else positive for disableUpdateSpritesXYToOAMNF"
391	.0203	808203	8d 93 02	sta $800293		sta disableUpdateSpritesXYToOAMNF	; we want to update the sprites now as well
392	.0206	808206	60		rts			rts

394							.as
395							.xs
396	.0207	808207					playerNormal
397	.0207	808207	a9 00		lda #$00		lda #0 ; remove me when un commenting code below
398	.0209	808209	20 cb 94	jsr $8094cb		jsr BuildEntCollisionTable						; build the collision sets
399	.020c	80820c	20 e8 9e	jsr $809ee8		jsr collidePlayerAgainstRest					; did the player hit any entitiies
400	.020f	80820f	86 03		stx $03			stx CollidedEntity								; save the index of the one we hit, if any
401	.0211	808211	ad b1 00	lda $8000b1		lda PlayerData.hitBubbleNum					; save current bubble we are standing on
402	.0214	808214	85 10		sta $10			sta ZPTemp2
403	.0216	808216	a9 00		lda #$00		lda #0
404	.0218	808218	8d b1 00	sta $8000b1		sta PlayerData.hitBubbleNum					; clear current bubble
405	.021b	80821b	2a		rol a			rol a													; pull is carry set, which is if we collided or not
406	.021c	80821c	85 0f		sta $0f			sta ZPTemp											; cache it so we can restore it. php doesn't really work for this case
407	.021e	80821e	f0 4c		beq $80826c		beq _noSpriteCollision
408	.0220	808220	a6 03		ldx $03				ldx CollidedEntity							; what did we hit
409	.0222	808222	bd ce 00	lda $8000ce,x			lda EntityData.type,x
410	.0225	808225	20 84 9b	jsr $809b84			jsr isTypeBossBounceDetect					; check if this was a boss bounce (which is 2nd boss ent collision)
411	.0228	808228	b0 2a		bcs $808254			bcs _bossBounce
412	.022a	80822a	20 74 9b	jsr $809b74				jsr isTypeBoss								; no bouncing on a boss, check the against a boss
413	.022d	80822d	b0 34		bcs $808263				bcs _checkBossDeath
414	.022f	80822f	ec 68 02	cpx $800268					cpx EntityData.pipeBubbleStart	; was this a bubble?
415	.0232	808232	90 36		bcc $80826a					bcc _normalEnt
416												; so it was a bubble
417	.0234	808234	ad aa 00	lda $8000aa						lda PlayerData.OnGroundNZ		; if on ground or falling
418	.0237	808237	0d ac 00	ora $8000ac						ora PlayerData.isFallingNZ		; don't collide if I'm jumping up
419	.023a	80823a	f0 14		beq $808250						beq _skipDeath
420	.023c	80823c	a6 03		ldx $03								ldx CollidedEntity
421	.023e	80823e	bd c8 03	lda $8003c8,x							lda mplexBuffer.ypos+kEntsSpriteOffset,x
422	.0241	808241	cd c6 03	cmp $8003c6							cmp mplexBuffer.ypos
423	.0244	808244	90 0a		bcc $808250							bcc _skipDeath					; if Bubble Y < player Y pos i.e above me skip
424	.0246	808246	8e b1 00	stx $8000b1								stx PlayerData.hitBubbleNum
425	.0249	808249	c5 10		cmp $10									cmp ZPTemp2
426	.024b	80824b	f0 03		beq $808250								beq _skipDeath				; already on this bubble so skip
427	.024d	80824d	20 8e 90	jsr $80908e									jsr enterOnGround		; we just landed on a bubble
428	.0250	808250										_skipDeath
429	.0250	808250	a9 00		lda #$00								lda #0						; cancel collision state
430	.0252	808252	80 18		bra $80826c								bra _noSpriteCollision
431	.0254	808254						_bossBounce
432	.0254	808254	ad a5 00	lda $8000a5			lda PlayerData.hasShieldNZ					; boos bounce can only be done with a shield
433	.0257	808257	f0 11		beq $80826a			beq _normalEnt
434	.0259	808259	a6 03		ldx $03					ldx CollidedEntity
435	.025b	80825b	20 90 9b	jsr $809b90				jsr hurtBoss								; hurt them
436	.025e	80825e	ee b2 00	inc $8000b2				inc PlayerData.forceJumpNZ				; bounce
437	.0261	808261	80 22		bra $808285				gra _skipDeathCheck
438										;
439	.0263	808263						_checkBossDeath
440	.0263	808263	bd 96 01	lda $800196,x			lda EntityData.entState,x					; if the boss is dead
441	.0266	808266	c9 01		cmp #$01			cmp #kBoss.dead								; ignore the collision
442	.0268	808268	f0 1b		beq $808285			beq _skipDeathCheck							; this is because bosses have a death animation
443	.026a	80826a					_normalEnt
444	.026a	80826a	a5 0f		lda $0f				lda ZPTemp										; this is cache of did we collide
445	.026c	80826c					_noSpriteCollision
446	.026c	80826c	0d a4 00	ora $8000a4			ora PlayerData.deadNZ						; are we dead for some other reason
447	.026f	80826f	f0 14		beq $808285			beq _skipDeathCheck							; no, skip
448	.0271	808271	ad a5 00	lda $8000a5				lda PlayerData.hasShieldNZ				; wait do I have a shield?
449	.0274	808274	d0 0f		bne $808285				bne _skipDeathCheck						; yup, skip
450											; lda PasswordInfiLives				; password system is removed but
451											; bne +									; left if you wish to restore it or add cheat codes
452	.0276	808276	ce 88 00	dec $800088						dec GameData.lives
453	.0279	808279	20 13 88	jsr $808813						jsr pltLives
454	.027c	80827c	a9 05		lda #$05			+		lda #kPlayerState.dead				; set player dead
455	.027e	80827e	8d a2 00	sta $8000a2					sta PlayerData.state					; set to the dead FSM state
456	.0281	808281	8d a3 00	sta $8000a3					sta PlayerData.minorState
457	.0284	808284	60		rts						rts
458											;
459	.0285	808285					_skipDeathCheck
460	.0285	808285	9c a4 00	stz $8000a4			stz PlayerData.deadNZ						; not dead
461	.0288	808288	20 3b 8f	jsr $808f3b			jsr joyToPlayerDelta_88						; move player based upon
462	.028b	80828b	20 91 9d	jsr $809d91			jsr checkSpriteToCharCollision_88		; collide player against world with deltas
463									; level skip
464							;		lda PasswordLevelSkip						; password system removed but left in case you
465							;		beq _noKey										; want to bring it back
466							;			jsr $FF9F ; SCAN KEY
467							;			jsr $ffe4
468							;			cmp #90 ; Z key, we can't detect C=/CX key with gettin
469							;			bne _noKey
470							;			lda #kPlayerState.exit
471							;			sta PlayerData.state
472							;			sta PlayerData.minorState
473							;			rts
474							;_noKey
475	.028e	80828e	ad 8a 02	lda $80028a			lda checkSpriteToCharData.xDeltaCheck	; are we still moving on the X after collision
476	.0291	808291	f0 05		beq $808298			beq _addY
477									;make sure x reg is 0, and call addXWithMSBAndClip
478	.0293	808293	a2 00		ldx #$00				ldx #0
479	.0295	808295	20 72 85	jsr $808572				jsr addXWithMSBAndClip_88				; offset player X
480	.0298	808298					_addY
481	.0298	808298	ad c6 03	lda $8003c6			lda mplexBuffer.ypos
482	.029b	80829b	18		clc				clc
483	.029c	80829c	6d 8c 02	adc $80028c			adc checkSpriteToCharData.yDeltaCheck	; offset Y
484	.029f	80829f	8d c6 03	sta $8003c6			sta mplexBuffer.ypos							; this is just done because Y can wrap
485	.02a2	8082a2	20 23 91	jsr $809123			jsr updatePlayerAnim_88						; update animation for new state
486	.02a5	8082a5	ad a5 00	lda $8000a5			lda PlayerData.hasShieldNZ					; if I have a shield update the flash
487	.02a8	8082a8	f0 3b		beq $8082e5			beq _noShield
488	.02aa	8082aa	ad a6 00	lda $8000a6				lda PlayerData.shieldTimer.lo
489	.02ad	8082ad	d0 03		bne $8082b2				bne +
490	.02af	8082af	ce a7 00	dec $8000a7					dec PlayerData.shieldTimer.hi
491	.02b2	8082b2	ce a6 00	dec $8000a6		+		dec PlayerData.shieldTimer.lo			; 16 bit dec, this will bn much easier in 16bit version
492	.02b5	8082b5	ad a6 00	lda $8000a6				lda PlayerData.shieldTimer.lo
493	.02b8	8082b8	0d a7 00	ora $8000a7				ora PlayerData.shieldTimer.hi			; how to tell a 16bit value is zero in 8bit mode easily
494	.02bb	8082bb	d0 08		bne $8082c5				bne +
495	.02bd	8082bd	9c a5 00	stz $8000a5						stz PlayerData.hasShieldNZ		; it has expired
496	.02c0	8082c0	9c bd 00	stz $8000bd						stz PlayerData.flashColour		; reset flash colour to be sure
497	.02c3	8082c3	80 20		bra $8082e5						bra _noShield
498												;
499	.02c5	8082c5	ad c3 00	lda $8000c3		+		lda TickDowns.shieldFlashTimer		; need to toggle the flash?
500	.02c8	8082c8	d0 1b		bne $8082e5				bne _noShield
501	.02ca	8082ca	ad bd 00	lda $8000bd					lda PlayerData.flashColour
502	.02cd	8082cd	49 01		eor #$01					eor #1
503	.02cf	8082cf	8d bd 00	sta $8000bd					sta PlayerData.flashColour			; toggle 0->1 1->0
504	.02d2	8082d2	ad c4 00	lda $8000c4					lda TickDowns.shieldFlashTimerSpeedUp
505	.02d5	8082d5	d0 08		bne $8082df					bne +
506	.02d7	8082d7	a9 23		lda #$23						lda #35								; every 35 frames we make the flash faster
507	.02d9	8082d9	8d c4 00	sta $8000c4						sta TickDowns.shieldFlashTimerSpeedUp
508	.02dc	8082dc	ce be 00	dec $8000be						dec PlayerData.baseFlashTimeDelta
509	.02df	8082df	ad be 00	lda $8000be				+	lda PlayerData.baseFlashTimeDelta
510	.02e2	8082e2	8d c3 00	sta $8000c3					sta TickDowns.shieldFlashTimer	; reset the timer
511	.02e5	8082e5					_noShield
512	.02e5	8082e5	80 74		bra $80835b			gra EndOfGameLoop
513									;

515							.as
516							.xs
517	.02e7	8082e7					playerExit
518	.02e7	8082e7	ad a3 00	lda $8000a3		lda PlayerData.minorState
519	.02ea	8082ea	c9 04		cmp #$04		cmp #kPlayerState.exit					; if this is not the first time
520	.02ec	8082ec	d0 13		bne $808301		bne _waitForAnimation					; then skip the init
521	.02ee	8082ee	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit		; we have to set up the exit animation
522	.02f0	8082f0	20 ed 90	jsr $8090ed			jsr setPlayerAnimeTo_88
523									;lda #kPlayerStateExit.waitForAnimation
524									.cerror kPlayerStateExit.waitForAnimation != 0, "need to change stz"
525	.02f3	8082f3	9c a3 00	stz $8000a3			stz PlayerData.minorState			; when entering this state we set minor to same, so 0 to mark it done
526	.02f6	8082f6	ad bc 00	lda $8000bc			lda PlayerData.exitAtIndex
527	.02f9	8082f9	20 53 91	jsr $809153			jsr setPlayerToIndexA				; snap the player to the exit tile
528	.02fc	8082fc	20 76 91	jsr $809176			jsr removePickups_88					; clear any flashing
529	.02ff	8082ff	80 5a		bra $80835b	_exit	gra EndOfGameLoop
530	.0301	808301					_waitForAnimation
531	.0301	808301	20 23 91	jsr $809123		jsr updatePlayerAnim_88					; returns sec on animation end
532	.0304	808304	90 f9		bcc $8082ff		bcc _exit
239:1	.0306	808306	c2 20		rep #$20		REP #$20
534:4	.0308	808308	a9 fc 83	lda #$83fc			lda #<>INTERLOOP							; move on to the interlude
535	.030b	80830b	85 1b		sta $1b				sta GameStatePointer
235:1	.030d	80830d	e2 20		sep #$20		SEP #$20
537:4									.cerror kPlayerState.appear != 0, "need to change stz"
538	.030f	80830f	9c a2 00	stz $8000a2			stz PlayerData.state					; return back to appear state
539	.0312	808312	20 c2 94	jsr $8094c2			jsr deactivateAllEntities
540	.0315	808315	20 76 88	jsr $808876			jsr disableAllEntSprites_88		; death is level reset so clear all ents
541	.0318	808318	60		rts				rts

543							.as
544							.xs
545	.0319	808319					incLevelGraphicSet
546	.0319	808319					_ASSERT_jsr
547	.0319	808319					_ASSERT_axy8
548	.0319	808319	ad a1 00	lda $8000a1		lda LevelData.levelGraphicsSet		; this has 4 values 0,1,2,3
549	.031c	80831c	18		clc			clc
550	.031d	80831d	69 01		adc #$01		adc #1										; so add 1
551	.031f	80831f	29 03		and #$03		and #3										; and mask it
552	.0321	808321	8d a1 00	sta $8000a1		sta LevelData.levelGraphicsSet
553	.0324	808324	60		rts			rts											; only called once so could be inlined if wanted

555							.as
556							.xs
557	.0325	808325					playerDead
558	.0325	808325	ad a3 00	lda $8000a3		lda PlayerData.minorState
559	.0328	808328	c9 05		cmp #$05		cmp #kPlayerState.dead					; are we entering this state for the first time?
560	.032a	80832a	d0 0d		bne $808339		bne _waitForAnimation
561									;ldx #kSFX.hurt
562									;jsr playSFX
563	.032c	80832c	a9 08		lda #$08			lda #kPlayerAnimsIndex.dead		; we have to set up the exit animation
564	.032e	80832e	20 ed 90	jsr $8090ed			jsr setPlayerAnimeTo_88
565									;lda #kPlayerStateDeath.animate
566									.cerror kPlayerStateDeath.animate != 0, "need to change stz"
567	.0331	808331	9c a3 00	stz $8000a3			stz PlayerData.minorState			; mark that we have entered this before
568	.0334	808334	20 76 91	jsr $809176			jsr removePickups_88					; basically removes flashing is the point
569	.0337	808337	80 22		bra $80835b	_exit	gra EndOfGameLoop
570	.0339	808339					_waitForAnimation
571	.0339	808339	ce c6 03	dec $8003c6		dec mplexBuffer.ypos						; move player up the screen
572	.033c	80833c	20 23 91	jsr $809123		jsr updatePlayerAnim_88					; update the flap animation
573	.033f	80833f	90 f6		bcc $808337		bcc _exit
574	.0341	808341	ad 88 00	lda $800088			lda GameData.lives					; all used up?
575	.0344	808344	f0 08		beq $80834e			beq _gameOver
576										.cerror kPlayerState.appear != 0, "remove stz"
577										;lda #kPlayerState.appear
578	.0346	808346	9c a2 00	stz $8000a2				stz PlayerData.state
579	.0349	808349	9c a4 00	stz $8000a4				stz PlayerData.deadNZ			; clear and reset level
580	.034c	80834c	80 0d		bra $80835b				bra EndOfGameLoop
581										;
582	.034e	80834e					_gameOver
583	.034e	80834e	9c a2 00	stz $8000a2		stz PlayerData.state						; go to game over
239:1	.0351	808351	c2 20		rep #$20		REP #$20
585:4	.0353	808353	a9 8e 84	lda #$848e		lda #<>gameOverLoop
586	.0356	808356	85 1b		sta $1b			sta GameStatePointer
235:1	.0358	808358	e2 20		sep #$20		SEP #$20
588:4	.035a	80835a	60		rts			rts

590							.as
591							.xs
592	.035b	80835b					EndOfGameLoop
593	.035b	80835b					_ASSERT_axy8
594	.035b	80835b	ad 87 00	lda $800087		lda joyFireEvent					; if	  1 1 1 1 0 0 0 0
595	.035e	80835e	4d b7 00	eor $8000b7		eor PlayerData.bulletActive	; eor	  0 0 1 1 0 0 1 1
596	.0361	808361	2d 87 00	and $800087		and joyFireEvent					; and   1 0 1 0 1 0 1 0
597	.0364	808364	f0 03		beq $808369		beq _noBulletStart				; gives 1 0 0 0 0 0 0 0
598	.0366	808366	20 00 92	jsr $809200			jsr startBullet
599	.0369	808369					_noBulletStart
600	.0369	808369	20 3a 92	jsr $80923a		jsr updateBullet
601	.036c	80836c	20 e6 94	jsr $8094e6		jsr updateEntities
602	.036f	80836f	20 37 9a	jsr $809a37		jsr updateBubbles
603	.0372	808372	20 aa a1	jsr $80a1aa		jsr animateDoor_88
604	.0375	808375	60		rts			rts

606							; ----- @Titlescreen loop@ -----

608							.as
609							.xs
610	.0376	808376					titleScreenLoop
611	.0376	808376					_ASSERT_axy8
612	.0376	808376	ad a2 00	lda $8000a2		lda PlayerData.state
613	.0379	808379	0a		asl a			asl a
614	.037a	80837a	aa		tax			tax
615	.037b	80837b	7c 7e 83	jmp ($80837e,x)		jmp (TitleScreenLoopFuncLUT,x)
616	>037e	80837e	84 83 cc 83 e1 83		TitleScreenLoopFuncLUT .word <>(TSSetup,TSWaitForFire,TSStartGame)

618	.0384	808384					TSSetup
619	.0384	808384					_ASSERT_axy8
620	.0384	808384	20 c2 94	jsr $8094c2		jsr deactivateAllEntities			; so we don't get any stray sprite due to race conditions
621	.0387	808387	20 76 88	jsr $808876		jsr disableAllEntSprites_88		; this will clear OAM mirror as well
622							;	stz PasswordEntryIndex
623	.038a	80838a	9c a1 00	stz $8000a1		stz LevelData.levelGraphicsSet	; reset back to apples
624								; set up the defaults here, in case a password modifies them
625	.038d	80838d	20 6d 91	jsr $80916d		jsr clearPlayerStuct_88				; clear the playerf
626	.0390	808390	a9 05		lda #$05		lda #5
627	.0392	808392	8d 88 00	sta $800088		sta GameData.lives					; give default lives
628	.0395	808395	9c 96 00	stz $800096		stz GameData.currLevel				; reset to level 1. Change to lda # sta to make a level select for testing
629	.0398	808398	9c 89 00	stz $800089		stz GameData.flowers					; no flowers

631	.039b	80839b	a9 00		lda #$00		lda #fBGBaseSize(kVRAM.titleScreen,kBaseSize_32x32)
632	.039d	80839d	8d 07 21	sta $802107		sta $802107								; set TS screen
633	.03a0	8083a0	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
634	.03a2	8083a2	8d 0b 21	sta $80210b		sta $80210b								; set TS chars/same as game but this will happen first
635	.03a5	8083a5	a9 62		lda #$62		lda #kDefault_OBSEL
636	.03a7	8083a7	8d 01 21	sta $802101		sta $802101								; make sure we are in sprite upper bank 0 to get QWAK sprites
239:1	.03aa	8083aa	c2 20		rep #$20		REP #$20
638:4	.03ac	8083ac	a2 0e		ldx #$0e		ldx #(4*4)-2							; 4 sprites at 4 bytes each
639	.03ae	8083ae	bd 29 bb	lda $80bb29,x	-	lda TitleScreenData.SpriteStruct.sprites,x
640	.03b1	8083b1	9d f3 03	sta $8003f3,x		sta OAMMirror,x
641	.03b4	8083b4	ca		dex			dex
642	.03b5	8083b5	ca		dex			dex										; writing words so skip 2
643	.03b6	8083b6	10 f6		bpl $8083ae		bpl -
235:1	.03b8	8083b8	e2 20		sep #$20		SEP #$20
645:4	.03ba	8083ba	a9 aa		lda #$aa		lda #TitleScreenData.SpriteStruct.kUpper
646	.03bc	8083bc	8d f3 05	sta $8005f3		sta OAMMirrorHigh
647							;	lda #0
648							;	jsr playMusic
649	.03bf	8083bf	ee a2 00	inc $8000a2		inc PlayerData.state						; move to the wait for fire FSM state
650	.03c2	8083c2	a9 ff		lda #$ff		lda #$FF
651	.03c4	8083c4	8d 93 02	sta $800293		sta disableUpdateSpritesXYToOAMNF	; we do not have the player or Entities and so do not want the auto update
652	.03c7	8083c7	a9 0f		lda #$0f		lda #kHideScreen.show
653	.03c9	8083c9	85 31		sta $31			sta HideScreen
654	.03cb	8083cb	60		rts			rts

656	.03cc	8083cc					TSWaitForFire
657	.03cc	8083cc					_ASSERT_axy8
658	.03cc	8083cc	20 fa 84	jsr $8084fa		jsr updateTickdowns_88
659								; in reluanch64 you can just fold this block to skip it
660							.comment ;{{{
765							.endc ;}}}
766	.03cf	8083cf	ad 7f 00	lda $80007f		lda joyFire							; is fire pressed
767	.03d2	8083d2	d0 0c		bne $8083e0		bne _exit							; no
768	.03d4	8083d4	ad 84 00	lda $800084			lda oldJoyFire					; was it pressed last frame
769	.03d7	8083d7	f0 07		beq $8083e0			beq _exit						; no, exit then
770	.03d9	8083d9	ee a2 00	inc $8000a2				inc PlayerData.state		; yes, fire was released and we need to start the game
771	.03dc	8083dc	a9 80		lda #$80				lda #kHideScreen.hide	; hide the screen. for DMA transfers and swaps
772	.03de	8083de	85 31		sta $31					sta HideScreen
773	.03e0	8083e0					_exit
774	.03e0	8083e0	60		rts			rts
775							; no password system or keyboard, left in case you wish to crib the password system logic
776							; again you can fold it in Relaunch64. the rts above wasn't there before
777							.comment ;{{{
811							.endc ; }}}

813							; this has the password entry code, in Commander X16 form
814							; left for cribing if wanted
815							.comment ;{{{
900							.endc ;}}}


903	.03e1	8083e1					TSStartGame
904	.03e1	8083e1					_ASSERT_axy8
905	.03e1	8083e1	ad a1 00	lda $8000a1		lda LevelData.levelGraphicsSet	; get the current set of 4
906	.03e4	8083e4	20 c0 8a	jsr $808ac0		jsr dmaLevelChars_xx					; update the background/fruit characters etc
239:1	.03e7	8083e7	c2 20		rep #$20		REP #$20
908:4	.03e9	8083e9	a9 a9 81	lda #$81a9		lda #<>GAMELOOP
909	.03ec	8083ec	85 1b		sta $1b			sta GameStatePointer					; set main FSM to game loop
235:1	.03ee	8083ee	e2 20		sep #$20		SEP #$20
911:4	.03f0	8083f0	20 76 88	jsr $808876		jsr disableAllEntSprites_88		; clears OAM Mirror as well
912	.03f3	8083f3	20 d5 86	jsr $8086d5		jsr plotStatusArea
913	.03f6	8083f6	a9 00		lda #$00		lda #kPlayerState.appear			; set the player state to appear
914	.03f8	8083f8	8d a2 00	sta $8000a2		sta PlayerData.state
915								;lda #1
916								;jsr playMusic
917	.03fb	8083fb	60		rts			rts

919							; ----- @Intermission loop@ -----

921							.as
922							.xs
923	.03fc	8083fc					INTERLOOP
924	.03fc	8083fc					_ASSERT_axy8
925	.03fc	8083fc	20 fa 84	jsr $8084fa		jsr updateTickdowns_88
926	.03ff	8083ff	ad a2 00	lda $8000a2		lda PlayerData.state
927	.0402	808402	0a		asl a			asl a
928	.0403	808403	aa		tax			tax
929	.0404	808404	7c 07 84	jmp ($808407,x)		jmp (InterFuncLUT,x)
930	>0407	808407	0d 84 4e 84 76 84		InterFuncLUT .word <>(interSetUp,interMovePlayer,interEnterDoor)

932							.as
933							.xs
934	.040d	80840d					interSetUp
935	.040d	80840d					_ASSERT_axy8
936	.040d	80840d	20 eb 85	jsr $8085eb		jsr PlotTransitionScreenAndMakeNextChars	; also set player index,exit index
937	.0410	808410	20 50 91	jsr $809150		jsr setPlayerToSpawnPoint_88					; to the first spawn point as set in above function
938	.0413	808413	a9 50		lda #$50		lda #kIntermission.firstExit
939	.0415	808415	8d 9c 00	sta $80009c		sta LevelData.exitIndex							; set the door we want to animate
940	.0418	808418	a9 ff		lda #$ff		lda #$FF
941	.041a	80841a	8d 9d 00	sta $80009d		sta LevelData.exitIndex+1						; set the end exit index to dummy value for logic tracking
942	.041d	80841d	1a		inc a			inc a													; a = 0
943	.041e	80841e	20 a8 90	jsr $8090a8		jsr changePlayerDir								; make sure player is going right
944	.0421	808421	a9 01		lda #$01		lda #1
945	.0423	808423	8d af 00	sta $8000af		sta PlayerData.movingLRNZ
946	.0426	808426	8d aa 00	sta $8000aa		sta PlayerData.OnGroundNZ						; we are moving and on the ground for anim purposes
947	.0429	808429	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck		; move right
948	.042c	80842c	9c 8b 02	stz $80028b		stz CheckSpriteToCharData.xDeltaCheck.hi
949	.042f	80842f	8d 97 00	sta $800097		sta GameData.exitOpenNZ							; we want to close the door
950	.0432	808432	20 ee a1	jsr $80a1ee		jsr setAnimateDoorToClose_88					; set the door to close
951	.0435	808435	ad 96 00	lda $800096		lda GameData.currLevel							; inc and wrap level number
952	.0438	808438	18		clc			clc
953	.0439	808439	69 01		adc #$01		adc #1
954	.043b	80843b	c9 1f		cmp #$1f		cmp #31												; 32 levels in 16K where we mad, probably
955	.043d	80843d	d0 02		bne $808441		bne +
956	.043f	80843f	a9 00		lda #$00			lda #0
957	.0441	808441	8d 96 00	sta $800096	+	sta GameData.currLevel
958	.0444	808444	20 c2 94	jsr $8094c2		jsr deactivateAllEntities						; don't want any stray sprites on screen
959	.0447	808447	20 76 91	jsr $809176		jsr removePickups_88								; no flashing either
960	.044a	80844a	ee a2 00	inc $8000a2		inc PlayerData.state								; move to next walk state
961							;	jsr loadPasswordTemp								; this will make and show a password for the user
962							;	jsr makePassword									; disabled in this version but for cribbing
963							;		#appendVeraAddress getGameScreenCharPos(10,4) | kVERA.inc_1
964							;		ldx #11
965							;	-	lda ActivePassword,x
966							;		jsr convertToPasswordLetter
967							;		sta kVERA.DATA_0
968							;		stz kVERA.DATA_0 ; CRAM is 0
969							;		dex
970							;		bpl -
971	.044d	80844d	60		rts			rts

973							.as
974							.xs
975	.044e	80844e					interMovePlayer
976	.044e	80844e					_ASSERT_axy8
977	.044e	80844e	a2 00		ldx #$00		ldx #0
978	.0450	808450	20 72 85	jsr $808572		jsr addXWithMSBAndClip_88						; move player
979	.0453	808453	20 23 91	jsr $809123		jsr updatePlayerAnim_88							; animate player
980	.0456	808456	20 aa a1	jsr $80a1aa		jsr animateDoor_88								; animate the door
981	.0459	808459	ad 84 03	lda $800384		lda mplexBuffer.xpos
982	.045c	80845c	c9 f0		cmp #$f0		cmp #256-16											; are we just before the door?
983	.045e	80845e	90 09		bcc $808469		bcc +
984	.0460	808460	ee a2 00	inc $8000a2			inc PlayerData.state							; move to enter door state
985	.0463	808463	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit				; start exit animation
986	.0465	808465	20 ed 90	jsr $8090ed			jsr setPlayerAnimeTo_88
987	.0468	808468	60		rts				rts
988									;
989	.0469	808469	c9 b0		cmp #$b0	+	cmp #(11*16)										; are we in the middle?
990	.046b	80846b	d0 08		bne $808475		bne +
991	.046d	80846d	20 de a1	jsr $80a1de			jsr setAnimateDoorToOpen_88				; start opening the next door
992	.0470	808470	a9 5f		lda #$5f			lda #kIntermission.secondExit
993	.0472	808472	8d 9c 00	sta $80009c			sta LevelData.exitIndex						; set the door we want to animate
994									;lda #kSFX.door
995									;jsr playSFX
996	.0475	808475	60		rts		+	rts

998							.as
999							.xs
1000	.0476	808476					interEnterDoor
1001	.0476	808476					_ASSERT_axy8
1002	.0476	808476	20 23 91	jsr $809123		jsr updatePlayerAnim_88							; has the animation completed?
1003	.0479	808479	90 12		bcc $80848d		bcc _exit
1004							;		lda GameData.currLevel						; we alternate level music
1005							;		ldx #size(BossLevels)-1						; so this checks if we are on a boss
1006							;	-	cmp BossLevels,x								; level and adjust the tune as needed
1007							;		beq _bossLevel
1008							;			dex
1009							;			bpl -
1010							;			and #1
1011							;			clc
1012							;			adc #1
1013							;			.byte $2c ; BIT XXXXX
1014							;	_bossLevel
1015									;lda #3
1016									;jsr playMusic
1017	.047b	80847b	a9 00		lda #$00		lda #kPlayerState.appear						; set player to appear
1018	.047d	80847d	8d a2 00	sta $8000a2		sta PlayerData.state
239:1	.0480	808480	c2 20		rep #$20		REP #$20
1020:4	.0482	808482	a9 a9 81	lda #$81a9		lda #<>GAMELOOP
1021	.0485	808485	85 1b		sta $1b			sta GameStatePointer								; set the main FSM to Gameloop
235:1	.0487	808487	e2 20		sep #$20		SEP #$20
1023:4	.0489	808489	a9 80		lda #$80		lda #kHideScreen.hide							; hide the screen for transition and DMA
1024	.048b	80848b	85 31		sta $31			sta HideScreen
1025	.048d	80848d					_exit
1026	.048d	80848d	60		rts			rts


1029							; ----- @Game Over loop@ -----

1031	.048e	80848e					gameOverLoop
1032	.048e	80848e					_ASSERT_axy8
1033	.048e	80848e	ad a2 00	lda $8000a2		lda PlayerData.state
1034	.0491	808491	0a		asl a			asl a
1035	.0492	808492	aa		tax			tax
1036	.0493	808493	7c 96 84	jmp ($808496,x)		jmp (GameOverFuncLUT,x)
1037	>0496	808496	9a 84 e3 84			GameOverFuncLUT .word <>(GOSetup,GOWaitForFire)

1039	.049a	80849a					GoSetup
1040	.049a	80849a					_ASSERT_axy8
1041								; print string
1042	.049a	80849a	a2 18		ldx #$18		ldx #len(TitleScreenData.AllStrings)*2	; this doesn't have Game Over in it, which is added after
1043	.049c	80849c	20 a2 86	jsr $8086a2		jsr plotStringAAtIndexXGameScreen		; so it's len is the index for Game Over
1044	.049f	80849f	ee a2 00	inc $8000a2		inc PlayerData.state							; move to wait for firfe state
1045								; remove sprites
1046	.04a2	8084a2	20 c2 94	jsr $8094c2		jsr deactivateAllEntities					; we remove all the entites as well so you stand alone, and they don't move
1047	.04a5	8084a5	20 76 88	jsr $808876		jsr disableAllEntSprites_88
1048								;lda #4
1049								;jsr playMusic
1050								; check to see if this is the new high score
1051	.04a8	8084a8	a2 00		ldx #$00		ldx #0
1052	.04aa	8084aa	bd 8a 00	lda $80008a,x	-	lda GameData.score,x			; score is stored in most significant digit -> lowest significant digit
1053	.04ad	8084ad	dd 90 00	cmp $800090,x		cmp GameData.high,x
1054	.04b0	8084b0	f0 04		beq $8084b6		beq _next						; if == next digit
1055	.04b2	8084b2	b0 1a		bcs $8084ce		bcs _higher						; if >= new high score take it
1056	.04b4	8084b4	80 05		bra $8084bb			bra _clearScore			; thus < and just clear it no new high
1057	.04b6	8084b6					_next
1058	.04b6	8084b6	e8		inx			inx
1059	.04b7	8084b7	e0 06		cpx #$06		cpx #size(sGameData.score)
1060	.04b9	8084b9	d0 ef		bne $8084aa		bne -
1061	.04bb	8084bb					_clearScore
1062	.04bb	8084bb	a2 04		ldx #$04		ldx #size(sGameData.score)-2
239:1	.04bd	8084bd	c2 20		rep #$20		REP #$20
1064:4	.04bf	8084bf	a9 00 00	lda #$0000		lda #0
1065	.04c2	8084c2	9d 8a 00	sta $80008a,x	-	sta GameData.score,x
1066	.04c5	8084c5	ca		dex			dex
1067	.04c6	8084c6	ca		dex			dex
1068	.04c7	8084c7	10 f9		bpl $8084c2		bpl -
235:1	.04c9	8084c9	e2 20		sep #$20		SEP #$20
1070:4	.04cb	8084cb	4c 76 8b	jmp $808b76		jmp dmaScreenMirror_xx		; update the actual screen. this is risky as I don't know I'm in Blank
1071								;rts								; explicity and I rely on the NMI being short and the DMA only being 2K
1072								;
1073	.04ce	8084ce					_higher
1074	.04ce	8084ce	a2 04		ldx #$04		ldx #size(sGameData.score)-2	; save the current score into the high score
239:1	.04d0	8084d0	c2 20		rep #$20		REP #$20
1076:4	.04d2	8084d2	bd 8a 00	lda $80008a,x	-	lda GameData.score,x
1077	.04d5	8084d5	9d 90 00	sta $800090,x		sta GameData.high,x
1078	.04d8	8084d8	ca		dex			dex
1079	.04d9	8084d9	ca		dex			dex
1080	.04da	8084da	10 f6		bpl $8084d2		bpl -
235:1	.04dc	8084dc	e2 20		sep #$20		SEP #$20
1082:4	.04de	8084de	20 f1 87	jsr $8087f1		jsr pltHighScore					; update the high score on the screen
1083	.04e1	8084e1	80 d8		bra $8084bb		gra _clearScore

1085	.04e3	8084e3					GOWaitForFire
1086	.04e3	8084e3					_ASSERT_axy8
1087								;wait for fire
1088	.04e3	8084e3	ad 7f 00	lda $80007f		lda joyFire									; if !fire && oldFire
1089	.04e6	8084e6	d0 11		bne $8084f9		bne _exit									; aka fire released
1090	.04e8	8084e8	ad 84 00	lda $800084			lda oldJoyFire
1091	.04eb	8084eb	f0 0c		beq $8084f9			beq _exit
1092										; got to Title Screen State
1093	.04ed	8084ed	9c a2 00	stz $8000a2				stz PlayerData.state				; first minor FSM state
239:1	.04f0	8084f0	c2 20		rep #$20		REP #$20
1095:4	.04f2	8084f2	a9 76 83	lda #$8376				lda #<>titleScreenLoop
1096	.04f5	8084f5	85 1b		sta $1b					sta GameStatePointer				; move main FSM to titlescreen
235:1	.04f7	8084f7	e2 20		sep #$20		SEP #$20
1098:4	.04f9	8084f9					_exit
1099	.04f9	8084f9	60		rts			rts

1101							; ----- @Misc functions@ -----

1103							; these are the inital timer load values
1104	.04fa	8084fa					kTimers .block
1105	=$8							dissBlocksValue = $8
1106	=$50							floatTimer = $50
1107	=10							DoorAnimeRate = 10
1108	=30							spawnBubble = 30
1109							.bend

1111							.as
1112							.xs
1113	.04fa	8084fa					updateTickdowns_88
1114	.04fa	8084fa					_ASSERT_jsr
1115	.04fa	8084fa					_ASSERT_axy8
1116	.04fa	8084fa	a2 0d		ldx #$0d		ldx #TICK_DOWN_END - TICK_DOWN_START-1
1117	.04fc	8084fc	bd bf 00	lda $8000bf,x	_l	lda TickDowns,x		; if !0
1118	.04ff	8084ff	f0 03		beq $808504		beq _next
1119	.0501	808501	de bf 00	dec $8000bf,x			dec TickDowns,x	; timer--
1120	.0504	808504					_next
1121	.0504	808504	ca		dex			dex
1122	.0505	808505	10 f5		bpl $8084fc		bpl _l
1123	.0507	808507	60		rts			rts

1125							.as
1126							.xs
1127	.0508	808508					scanJoystick_88
1128							; so this is a SNES and its a Pad, but historic reasons joystick.
1129	.0508	808508					_ASSERT_jsr
1130	.0508	808508					_ASSERT_axy8
1131								; copy the current state to the old state
1132	.0508	808508	a2 04		ldx #$04		ldx #4
1133	.050a	80850a	bd 7b 00	lda $80007b,x	-	lda joyLeft,x
1134	.050d	80850d	9d 80 00	sta $800080,x		sta oldJoyLeft,x
1135	.0510	808510	9e 7b 00	stz $80007b,x		stz joyLeft,x
1136	.0513	808513	ca		dex			dex
1137	.0514	808514	10 f4		bpl $80850a		bpl -
1138								; read in the new state
1139								; this uses an odd method of slide the bit out and branching
1140								; its somewhat fast but also compresses really well
1141								; most snes games keep the bit flags in one word
1142								; this works alright on a NES where RAM is precious
1143								; on the C64 RAM is RAM so any trade off in code size vs data size
1144								; is good either way
1145								; the SNES.. we ample ROM and ample RAM so up to the style
1146								; for single input checks this is tighter but for button combinations
1147								; its more expensive, so it depends on what your game does
1148								; also SNES pad is active low
1149								; SNES auto read inverts it to make it active high
1150	.0516	808516	a2 01		ldx #$01		ldx #1
1151	.0518	808518	ad 19 42	lda $804219		lda $804219			;JOY1H
1152	.051b	80851b	4a		lsr a			lsr a					;right
1153	.051c	80851c	b0 4e		bcs $80856c		bcs _joyRight
1154	.051e	80851e	4a		lsr a				lsr a				; left
1155	.051f	80851f	b0 46		bcs $808567			bcs _joyLeft
1156	.0521	808521					_checkUD
1157	.0521	808521	4a		lsr a			lsr a					; down
1158	.0522	808522	b0 3d		bcs $808561		bcs _joyDown
1159	.0524	808524	4a		lsr a				lsr a				; up
1160	.0525	808525	b0 30		bcs $808557			bcs _joyUp
1161	.0527	808527					_checkFire
1162	.0527	808527	4a		lsr a			lsr a					; start
1163	.0528	808528	4a		lsr a			lsr a					; select
1164	.0529	808529	4a		lsr a			lsr a					; Y
1165	.052a	80852a	b0 30		bcs $80855c		bcs _joyY
1166	.052c	80852c					_checkB
1167	.052c	80852c	4a		lsr a			lsr a					; B
1168	.052d	80852d	90 03		bcc $808532		bcc _joyEnd
1169	.052f	80852f	8e 7d 00	stx $80007d			stx joyUp
1170	.0532	808532					_joyEnd
1171	.0532	808532	ad 82 00	lda $800082		lda oldJoyUp		; old up			0011
1172	.0535	808535	4d 7d 00	eor $80007d		eor joyUp			; eor new up	0101
1173	.0538	808538	2d 7d 00	and $80007d		and joyUp			; and up			0101
1174	.053b	80853b	8d 85 00	sta $800085		sta joyUpStart		;					0100

1176	.053e	80853e	ad 7d 00	lda $80007d		lda joyUp			; up				0011
1177	.0541	808541	4d 82 00	eor $800082		eor OldJoyUp		; eor old up	0101
1178	.0544	808544	2d 82 00	and $800082		and OldJoyUp		; and old up	0101
1179	.0547	808547	8d 86 00	sta $800086		sta joyUpStop		;					0100

1181	.054a	80854a	ad 84 00	lda $800084		lda oldJoyFire
1182	.054d	80854d	4d 7f 00	eor $80007f		eor joyFire
1183	.0550	808550	2d 7f 00	and $80007f		and joyFire
1184	.0553	808553	8d 87 00	sta $800087		sta joyFireEvent
1185	.0556	808556	60		rts			rts

1187	.0557	808557					_joyUp
1188	.0557	808557	8e 7d 00	stx $80007d		stx joyUp
1189	.055a	80855a	b0 cb		bcs $808527		gcs _checkFire

1191	.055c	80855c					_joyY
1192	.055c	80855c	8e 7f 00	stx $80007f		stx joyFire
1193	.055f	80855f	b0 cb		bcs $80852c		gcs _checkB

1195	.0561	808561					_joyDown
1196	.0561	808561	8e 7e 00	stx $80007e		stx joyDown
1197	.0564	808564	4a		lsr a			lsr a				; skip up bit
1198	.0565	808565	80 c0		bra $808527		bra _checkFire

1200	.0567	808567					_joyLeft
1201	.0567	808567	8e 7b 00	stx $80007b		stx joyLeft
1202	.056a	80856a	b0 b5		bcs $808521		gcs _checkUD

1204	.056c	80856c					_joyRight
1205	.056c	80856c	8e 7c 00	stx $80007c		stx joyRight
1206	.056f	80856f	4a		lsr a			lsr a				; skip left bit
1207	.0570	808570	80 af		bra $808521		bra _checkUD

1209							.as
1210							.xs
1211	.0572	808572					addXWithMSBAndClip_88
1212	.0572	808572					_ASSERT_jsr
1213	.0572	808572					_ASSERT_axy8
1214							; we do wrap on the screen so we need to clip for 0-256
1215							; so I do it in 16bit mode, now if the upper byte is $ff then we are
1216							; negative and went under, which is a branch minus
1217							; then we need to check if we are over 256-16 as the sprite is 16 wide
1218							; if we go under we clip to 0, if we go over we clip to 256-16
1219	.0572	808572	64 2f		stz $2f			stz DidClipX										; not clipped yet
1220	.0574	808574	bd 84 03	lda $800384,x		lda mplexBuffer.xpos,x							; read the X
239:1	.0577	808577	c2 20		rep #$20		REP #$20
1222:4	.0579	808579	29 ff 00	and #$00ff		and #$00ff											; make sure
1223	.057c	80857c	18		clc			clc
1224	.057d	80857d	6d 8a 02	adc $80028a		adc CheckSpriteToCharData.xDeltaCheck
1225	.0580	808580	30 0c		bmi $80858e		bmi _wentUnder
1226	.0582	808582	c9 f0 00	cmp #$00f0			cmp #$100-16
1227	.0585	808585	90 0c		bcc $808593			bcc _justStore
1228										; went over
1229	.0587	808587	e6 2f		inc $2f					inc DidClipX
1230	.0589	808589	a9 f0 00	lda #$00f0				lda #$100-16
1231	.058c	80858c	80 05		bra $808593				bra _justStore
1232	.058e	80858e					_wentUnder
1233	.058e	80858e	e6 2f		inc $2f			inc DidClipX
1234	.0590	808590	a9 00 00	lda #$0000		lda #0
1235	.0593	808593					_justStore
235:1	.0593	808593	e2 20		sep #$20		SEP #$20
1237:4	.0595	808595	9d 84 03	sta $800384,x		sta mplexBuffer.xpos,x
1238	.0598	808598	60		rts			rts


1241							.as
1242							.xs
1243	.0599	808599					ClipY
1244	.0599	808599					_ASSERT_jsr
1245	.0599	808599					_ASSERT_axy8
1246							; now Y the screen is only 224 high, while you could just use 256 and "let it happen" it will give a large delay
1247							; but we also have a hud, the game screen is only 192 high with 32 pixels of HUD. So when you go off the top you should
1248							; be moved closer to the bottom of the hud and when you fall off below the hud you should "warp" off the top
1249	.0599	808599	c9 d0		cmp #$d0		cmp #208			; 192 + sprite height
1250	.059b	80859b	b0 01		bcs $80859e		bcs +
1251	.059d	80859d	60		rts				rts			; 0 - 192 = safe 192-208 = shared 16 off screen
1252	.059e	80859e	c9 f0		cmp #$f0	+	cmp #240			; if 208 < y < 240 then we have fallen off the bottom
1253	.05a0	8085a0	90 03		bcc $8085a5		bcc _bottomOfScreen
1254									; top of screen
1255	.05a2	8085a2	a9 c1		lda #$c1			lda #193		; move to just below the HUD
1256	.05a4	8085a4	60		rts				rts
1257	.05a5	8085a5					_bottomOfScreen
1258	.05a5	8085a5	a9 f0		lda #$f0		lda #-16			; warp to being 16 pixels off the "top"
1259	.05a7	8085a7	60		rts			rts

1261							.as
1262							.xs
1263	.05a8	8085a8					giveScore
1264	.05a8	8085a8					_ASSERT_jsr
1265	.05a8	8085a8					_ASSERT_axy8
1266	.05a8	8085a8	0a		asl a			asl a
1267	.05a9	8085a9	0a		asl a			asl a
1268	.05aa	8085aa	0a		asl a			asl a							; x8 while scores are 6 bytes long x6 is more trouble than wasting 2 bytes per score
1269	.05ab	8085ab	09 05		ora #$05		ora #5						; move to the last digit
1270	.05ad	8085ad	a8		tay			tay							; stash in Y for indexing - LUT would be quicker and smaller looking at it now
1271	.05ae	8085ae	a2 05		ldx #$05		ldx #5						; for 6 digits starting at LSD
1272	.05b0	8085b0	18		clc			clc							; clear initial C
1273	.05b1	8085b1					_scLoop
1274	.05b1	8085b1	bd 8a 00	lda $80008a,x		lda GameData.score,x
1275	.05b4	8085b4	79 cb 85	adc $8085cb,y		adc FruitScore,y
1276	.05b7	8085b7	9d 8a 00	sta $80008a,x		sta GameData.score,x		; score[x++] += points[y++]
1277	.05ba	8085ba	c9 0a		cmp #$0a		cmp #10						; digit overflow
1278	.05bc	8085bc	90 06		bcc $8085c4		bcc _ok
1279									;sec
1280	.05be	8085be	e9 0a		sbc #$0a			sbc #10					; restore to 0-9
1281	.05c0	8085c0	9d 8a 00	sta $80008a,x			sta GameData.score,x
1282	.05c3	8085c3	38		sec				sec						; add 1 more next time
1283	.05c4	8085c4					_ok
1284	.05c4	8085c4	88		dey			dey
1285	.05c5	8085c5	ca		dex			dex
1286	.05c6	8085c6	10 e9		bpl $8085b1		bpl _scLoop
1287	.05c8	8085c8	4c cf 87	jmp $8087cf		jmp pltScore

1289							;index for scores
1290	.05cb	8085cb					kScoreIndex .block
1291	=0							fruit = 0
1292	=1							flower = 1
1293	=2							key = 2
1294	=3							boss = 3
1295							.bend

1297	>05cb	8085cb	00 00 00 01 00 00 0f 0f		FruitScore	.byte 0,0,0,1,0,0,15,15
1298	>05d3	8085d3	00 00 00 05 00 00 0f 0f		FlowerScore .byte 0,0,0,5,0,0,15,15
1299	>05db	8085db	00 00 00 02 05 00 0f 0f		KeyScore		.byte 0,0,0,2,5,0,15,15
1300	>05e3	8085e3	00 01 00 00 00 00 0f 0f		BossScore	.byte 0,1,0,0,0,0,15,15

1302							.as
1303							.xs
1304	.05eb	8085eb					PlotTransitionScreenAndMakeNextChars
1305	.05eb	8085eb					_ASSERT_jsr
1306	.05eb	8085eb					_ASSERT_axy8
1307	.05eb	8085eb	20 6b 86	jsr $80866b			jsr clearMapInScreenMirror				; clear just the map, leaving the HUD "as is"
1308									; we need to copy in the current wall char elsewhere
1309	.05ee	8085ee	a9 00		lda #$00			lda #0
1310	.05f0	8085f0	eb		xba				xba
1311	.05f1	8085f1	ad a1 00	lda $8000a1			lda LevelData.levelGraphicsSet		; this is the "current levels" set at this point
259:1	.05f4	8085f4	c2 30		rep #$30		REP #$30
1313:4	.05f6	8085f6	0a		asl a				asl a
1314	.05f7	8085f7	aa		tax				tax
1315	.05f8	8085f8	bd 9a 86	lda $80869a,x			lda WallCharLUT,x							; set the DMA source address based upon the set we want
1316	.05fb	8085fb	8d 02 43	sta $804302			sta $804302
235:1	.05fe	8085fe	e2 20		sep #$20		SEP #$20
1318:4	.0600	808600	a9 82		lda #$82			lda #`BackShadowChars
1319	.0602	808602	8d 04 43	sta $804304			sta $804304

1321	.0605	808605	a2 80 00	ldx #$0080			ldx #4*8*4									; we want to do 4 chars
1322	.0608	808608	8e 05 43	stx $804305			stx $804305
1323	.060b	80860b	a2 01 18	ldx #$1801			ldx #%00000001 | $1800					; A->B, Inc, Write WORD, $2118
1324	.060e	80860e	8e 00 43	stx $804300			stx $804300
1325	.0611	808611	a2 c0 17	ldx #$17c0			ldx #kVRAM.gameChars+(124*4*8/2)		; write them to char num 124-127
1326	.0614	808614	8e 16 21	stx $802116			stx $802116									; 4 bytes per line, for 8 lines per char
1327	.0617	808617	a9 80		lda #$80			lda #$80										; but value is a word address so div 2
1328	.0619	808619	8d 15 21	sta $802115			sta $802115									; inc VRAM port address
1329	.061c	80861c	a9 01		lda #$01			lda #1
1330	.061e	80861e	8d 0b 42	sta $80420b			sta $80420B									; fire
247:1	.0621	808621	e2 10		sep #$10		SEP #$10
1332:4									; now we need to draw the first floor half
1333	.0623	808623	a9 50		lda #$50			lda #kIntermission.firstExit			; move to the start position
1334	.0625	808625	85 15		sta $15				sta ActiveTileIndex
1335	.0627	808627	8d 9b 00	sta $80009b			sta LevelData.playerIndex				; we start at the first door
1336	.062a	80862a	a9 0e		lda #$0e			lda #kDoorOpen
1337	.062c	80862c	20 fc 8c	jsr $808cfc			jsr pltSingleTileNoLookup			; first do is open
1338	.062f	80862f	a9 5f		lda #$5f			lda #kIntermission.secondExit
1339	.0631	808631	85 15		sta $15				sta ActiveTileIndex
1340	.0633	808633	8d 9c 00	sta $80009c			sta LevelData.exitIndex					; and leave on the second one
1341	.0636	808636	a9 0a		lda #$0a			lda #kDoorClosed
1342	.0638	808638	20 fc 8c	jsr $808cfc			jsr pltSingleTileNoLookup			; second door is closed
1343	.063b	80863b	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw half a screens worth of the 'old' tile which was chached
1344	.063d	80863d					_firstLoop
1345	.063d	80863d	da		phx				phx											; preserve X
1346	.063e	80863e	e6 15		inc $15					inc ActiveTileIndex					; move to the next tile
1347	.0640	808640	a9 25		lda #$25				lda #kTiles.intermissionOldWall	; cached wall "block" num
1348	.0642	808642	20 fc 8c	jsr $808cfc				jsr pltSingleTileNoLookup		; plot the value raw without doing a level -> screen tile lookup
1349	.0645	808645	fa		plx				plx											; restore X
1350	.0646	808646	ca		dex				dex
1351	.0647	808647	10 f4		bpl $80863d			bpl _firstLoop								; until done

1353	.0649	808649	20 19 83	jsr $808319			jsr incLevelGraphicSet					; move to the next levels set
1354	.064c	80864c	20 c0 8a	jsr $808ac0			jsr dmaLevelChars_xx						; install the chars to VRAM

1356	.064f	80864f	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw the second half of the screen
1357	.0651	808651					_secondLoop
1358	.0651	808651	da		phx				phx
1359	.0652	808652	e6 15		inc $15					inc ActiveTileIndex
1360	.0654	808654	a9 01		lda #$01				lda #kTiles.wall
1361	.0656	808656	20 f8 8c	jsr $808cf8				jsr pltSingleTile
1362	.0659	808659	fa		plx				plx
1363	.065a	80865a	ca		dex				dex
1364	.065b	80865b	10 f4		bpl $808651			bpl _secondLoop
1365	.065d	80865d	60		rts				rts

1367	=47						kEmptyTileNum = 47
1368	>065e	80865e	2f				ClearEmptyTile .byte kEmptyTileNum	; for a fixed DMA

1370							.as
1371							.xs
1372	.065f	80865f					clearScreenMirrorToEmptyChar
1373	.065f	80865f					_ASSERT_jsr
1374	.065f	80865f					_ASSERT_axy8
1375	.065f	80865f	08		php			php
239:1	.0660	808660	c2 20		rep #$20		REP #$20
1377:4	.0662	808662	a9 00 08	lda #$0800			lda #32*32*2	; whole screen
1378	.0665	808665	8d 05 43	sta $804305			sta $804305
1379	.0668	808668	4c 74 86	jmp $808674			jmp clearScreenMirrorCommon_16x

1381							.as
1382							.xs
1383	.066b	80866b					clearMapInScreenMirror
1384	.066b	80866b					_ASSERT_jsr
1385	.066b	80866b					_ASSERT_axy8
1386	.066b	80866b	08		php			php
239:1	.066c	80866c	c2 20		rep #$20		REP #$20
1388:4	.066e	80866e	a9 00 06	lda #$0600			lda #kTileXCount*kTileYCount*4*2 ; just the map
1389	.0671	808671	8d 05 43	sta $804305			sta $804305
1390									; fall through
1391	.0674	808674					clearScreenMirrorCommon_16x
1392	.0674	808674					_ASSERT_a16
1393	.0674	808674	a9 08 80	lda #$8008			lda #$8008	  ; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1394	.0677	808677	8d 00 43	sta $804300			sta $804300
1395	.067a	80867a	a9 5e 86	lda #$865e			lda #<>ClearEmptyTile
1396	.067d	80867d	8d 02 43	sta $804302			sta $804302
1397	.0680	808680	a9 80 00	lda #$0080			lda #`ClearEmptyTile
1398	.0683	808683	8d 04 43	sta $804304			sta $804304
1399	.0686	808686	a9 00 20	lda #$2000			lda #<>ScreenMirror
1400	.0689	808689	8d 81 21	sta $802181			sta $802181
1401	.068c	80868c	a9 20 7e	lda #$7e20			lda #>`ScreenMirror
1402	.068f	80868f	8d 82 21	sta $802182			sta $802182
1403	.0692	808692	a9 01 00	lda #$0001			lda #$0001
1404	.0695	808695	8d 0b 42	sta $80420b			sta $80420B	 ; FIRE DMA
1405	.0698	808698	28		plp			plp
1406	.0699	808699	60		rts			rts

1408							; this points to the point of the complete floor tile in the BackShadowChar data
1409	.069a	80869a					WallCharLUT .block
1410	=512							_offset = 16*4*8				; we are interested in 16th,17th,18th and 19th chars
1411	=[$828200,$828880,$828f00,$829580]			_values = BackShadowChars + range(4)*(size(BackShadowChars)/4) + _offset
1412	>069a	80869a	00 82 80 88 00 8f 80 95			.word <>(_values)
1413							.bend


1416							; these string functions have two entry points as they needed different CRAM values for when you draw them.
1417							; on the SNES I can't be bothered and the GAME OVER text has a black background and not a brown one :P
1418							; left for historic puposes or if you wish to correct this oversite.
1419							.as
1420							.xs
1421	.06a2	8086a2					plotStringAAtIndexXGameScreen
1422	.06a2	8086a2					_ASSERT_jsr
1423	.06a2	8086a2					_ASSERT_axy8
1424	.06a2	8086a2	64 10		stz $10			stz ZPTemp2
1425	.06a4	8086a4	80 02		bra $8086a8		bra psaaixCommon
1426							.as
1427							.xs
1428	.06a6	8086a6					plotStringAAtIndexX
1429	.06a6	8086a6					_ASSERT_jsr
1430	.06a6	8086a6					_ASSERT_axy8
1431	.06a6	8086a6	64 10		stz $10			stz ZPTemp2
1432	.06a8	8086a8					psaaixCommon
1433								; to do this I use the WRAM port to the screen mirror, this is to contrast
1434								; to other functions where I use indrect long.
239:1	.06a8	8086a8	c2 20		rep #$20		REP #$20
1436:4	.06aa	8086aa	a0 7e		ldy #$7e		ldy #`ScreenMirror
1437	.06ac	8086ac	8c 83 21	sty $802183		sty $802183 								; this is most probably a zero but to be "safe" do it this way
1438	.06af	8086af	bd 53 bb	lda $80bb53,x		lda TitleScreenData.stringPos,x
1439	.06b2	8086b2	8d 81 21	sta $802181		sta $802181
1440	.06b5	8086b5	bc 39 bb	ldy $80bb39,x		ldy TitleScreenData.string,x
1441	.06b8	8086b8	b9 6d bb	lda $80bb6d,y		lda StringTableLUT,y						; load up the strings data src pointer
1442	.06bb	8086bb	85 06		sta $06			sta Pointer1
235:1	.06bd	8086bd	e2 20		sep #$20		SEP #$20
1444:4	.06bf	8086bf	a0 00		ldy #$00		ldy #0
1445	.06c1	8086c1	b1 06		lda ($06),y	-	lda (Pointer1),y							; read char
1446	.06c3	8086c3	c9 ff		cmp #$ff		cmp #$ff										; is it the terminator
1447	.06c5	8086c5	f0 0d		beq $8086d4		beq _done
1448	.06c7	8086c7	8f 80 21 00	sta $002180			sta $2180								; write to the WRAM port, which auto incs
1449	.06cb	8086cb	a5 10		lda $10				lda ZPTemp2								; this holds the artributes we want
1450	.06cd	8086cd	8f 80 21 00	sta $002180			sta $2180								; write it too
1451	.06d1	8086d1	c8		iny				iny										; next char
1452	.06d2	8086d2	80 ed		bra $8086c1			bra -
1453	.06d4	8086d4					_done
1454	.06d4	8086d4	60		rts			rts

1456							; ----- @Hud@ -----

1458	.06d5	8086d5					kSBC .block ; kStatusBorderChars
1459	=205							M	= 205
1460	=206							TL	= 203+3
1461	=207							T	= 204+3
1462	=209							TR	= 206+3
1463	=208							L	= 205+3
1464	=210							R	= 207+3
1465	=250							BL	= 250
1466	=251							B	= 251
1467	=252							BR	= 252
1468	=211							QWAKT = 208+3
1469	=217							QWAKB = 214+3
1470	=223							Score = 220+3
1471	=229							High = 226+3
1472	=232							QwakP = 232
1473	=204							X = 204
1474	=236							Flower = 236
1475	=240							Digits = 240
1476							.bend

1478	=$20						kStatusAttributes = %00100000 ; PAL 0 no flips but higher priority
1479							fGetMemoryForScreenChar .function base,x,y
1480							.endf base + ( y*32*2 ) + ( x*2 )

1482							.as
1483							.xs
1484	.06d5	8086d5					plotStatusArea
1485	.06d5	8086d5					_ASSERT_jsr
1486	.06d5	8086d5					_ASSERT_axy8
1487							; we need to draw the bottom 4 rows, its 245 bytes vs 32*2*4 = 256 so 11 bytes smaller
1488							; but also it doesn't need a tool ;)
1489							; for this is use indrect long rather than WRAM port as an example of the mode and its uses
1490							; port would be smaller and fast though.
1491	=$7e2600						_statusStart = fGetMemoryForScreenChar(ScreenMirror,0,24)
239:1	.06d5	8086d5	c2 20		rep #$20		REP #$20
1493:4	.06d7	8086d7	a9 00 26	lda #$2600		lda #<>_statusStart
1494	.06da	8086da	85 32		sta $32			sta ZPLong.loword
235:1	.06dc	8086dc	e2 20		sep #$20		SEP #$20
1496:4	.06de	8086de	a9 7e		lda #$7e		lda #`_statusStart				; set the ZPLong to the start
1497	.06e0	8086e0	85 34		sta $34			sta ZPLong.bank					; of the hud in screen mirror
1498	.06e2	8086e2	a9 20		lda #$20		lda #kStatusAttributes			; set up the high byte
1499	.06e4	8086e4	eb		xba			xba
1500								; draw top row
1501	.06e5	8086e5	a0 00		ldy #$00		ldy #0
1502	.06e7	8086e7	a9 ce		lda #$ce		lda #kSBC.TL						; this is a top corner piece, 30 tops peieces, then another corner
1503	.06e9	8086e9	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1504	.06ec	8086ec	a2 1d		ldx #$1d		ldx #29 ; draw 30
1505	.06ee	8086ee	a9 cf		lda #$cf	-	lda #kSBC.T
1506	.06f0	8086f0	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1507	.06f3	8086f3	ca		dex			dex
1508	.06f4	8086f4	10 f8		bpl $8086ee		bpl -
1509	.06f6	8086f6	a9 d1		lda #$d1		lda #kSBC.TR
1510	.06f8	8086f8	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1511								; draw second row
1512	.06fb	8086fb	a9 d0		lda #$d0		lda #kSBC.L
1513	.06fd	8086fd	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1514									; draw the SCORE text
1515	.0700	808700	a2 00		ldx #$00		ldx #kStatusRanges.Score
1516	.0702	808702	20 ab 87	jsr $8087ab		jsr plotStatusRangeY
1517									; skip score digits
1518	.0705	808705	98		tya			tya
1519	.0706	808706	18		clc			clc
1520	.0707	808707	69 0c		adc #$0c		adc #12 ; 6 chars
1521	.0709	808709	a8		tay			tay
1522									; draw empty char
1523	.070a	80870a	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1524									; draw top of QWAK
1525	.070d	80870d	a2 01		ldx #$01		ldx #kStatusRanges.QWAKT
1526	.070f	80870f	20 ab 87	jsr $8087ab		jsr plotStatusRangeY
1527									; draw empty char
1528	.0712	808712	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1529									; draw top of QWAK
1530	.0715	808715	a9 e8		lda #$e8		lda #kSBC.QwakP
1531	.0717	808717	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1532	.071a	80871a	a9 e9		lda #$e9		lda #kSBC.QwakP+1
1533	.071c	80871c	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1534									; draw 3 banks
1535	.071f	80871f	20 be 87	jsr $8087be		jsr plot3EmptyStatusCharToZPLong
1536									; draw top of Flower
1537	.0722	808722	a9 ec		lda #$ec		lda #kSBC.Flower
1538	.0724	808724	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1539	.0727	808727	a9 ed		lda #$ed		lda #kSBC.Flower+1
1540	.0729	808729	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1541									; draw 3 blanks
1542	.072c	80872c	20 be 87	jsr $8087be		jsr plot3EmptyStatusCharToZPLong
1543									; draw right edge
1544	.072f	80872f	a9 d2		lda #$d2		lda #kSBC.R
1545	.0731	808731	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1546								; draw third row
1547	.0734	808734	a9 d0		lda #$d0		lda #kSBC.L
1548	.0736	808736	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1549	.0739	808739	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1550									; draw HIGH text
1551	.073c	80873c	a2 02		ldx #$02		ldx #kStatusRanges.High
1552	.073e	80873e	20 ab 87	jsr $8087ab		jsr plotStatusRangeY
1553	.0741	808741	a9 e5		lda #$e5		lda #kSBC.High
1554	.0743	808743	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1555	.0746	808746	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1556									; skip high score digits
1557	.0749	808749	98		tya			tya
1558	.074a	80874a	18		clc			clc
1559	.074b	80874b	69 0c		adc #$0c		adc #12
1560	.074d	80874d	a8		tay			tay
1561	.074e	80874e	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1562									; draw bottom half of qwak logo
1563	.0751	808751	a2 03		ldx #$03		ldx #kStatusRanges.QWAKB
1564	.0753	808753	20 ab 87	jsr $8087ab		jsr plotStatusRangeY
1565	.0756	808756	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1566									; draw bottom half of qwak
1567	.0759	808759	a9 ea		lda #$ea		lda #kSBC.QwakP+2
1568	.075b	80875b	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1569	.075e	80875e	a9 eb		lda #$eb		lda #kSBC.QwakP+3
1570	.0760	808760	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1571	.0763	808763	a9 cc		lda #$cc		lda #kSBC.X
1572	.0765	808765	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1573	.0768	808768	20 c1 87	jsr $8087c1		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1574									; plot lower half of flower
1575	.076b	80876b	a9 ee		lda #$ee		lda #kSBC.Flower+2
1576	.076d	80876d	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1577	.0770	808770	a9 ef		lda #$ef		lda #kSBC.Flower+3
1578	.0772	808772	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1579	.0775	808775	a9 cc		lda #$cc		lda #kSBC.X
1580	.0777	808777	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1581	.077a	80877a	20 c1 87	jsr $8087c1		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1582	.077d	80877d	a9 d2		lda #$d2		lda #kSBC.R
1583	.077f	80877f	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1584								; draw forth row
1585	.0782	808782	a9 fa		lda #$fa		lda #kSBC.BL
1586	.0784	808784	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1587	.0787	808787	a2 1d		ldx #$1d		ldx #29 ; draw 30
1588	.0789	808789	a9 fb		lda #$fb	-	lda #kSBC.B
1589	.078b	80878b	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1590	.078e	80878e	ca		dex			dex
1591	.078f	80878f	10 f8		bpl $808789		bpl -
1592	.0791	808791	a9 fc		lda #$fc		lda #kSBC.BR
1593	.0793	808793	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1594	.0796	808796	20 cf 87	jsr $8087cf		jsr pltScore
1595	.0799	808799	20 f1 87	jsr $8087f1		jsr pltHighScore
1596	.079c	80879c	20 13 88	jsr $808813		jsr pltLives
1597	.079f	80879f	4c 33 88	jmp $808833		jmp pltFlowers
1598	.07a2	8087a2	60		rts			rts

1600	.07a3	8087a3					kStatusRanges .block
1601	=0							Score = 0
1602	=1							QWAKT = 1
1603	=2							High = 2
1604	=3							QWAKB = 3
1605							.bend

1607	=((223,229),)					StatusRangePairs  := ((kSBC.Score, kSBC.Score+6),)
1608	=((223,229),(211,217))				StatusRangePairs ..= ((kSBC.QWAKT, kSBC.QWAKT+6),)
1609	=((223,229),(211,217),(229,232))		StatusRangePairs ..= ((kSBC.High,  kSBC.High+3),)	; the H needs manual repeating
1610	=((223,229),(211,217),(229,232),(217,223))	StatusRangePairs ..= ((kSBC.QWAKB, kSBC.QWAKB+6),)

1612	.07a3	8087a3					StatusRangePairsLUT .block
1613	>07a3	8087a3	df d3 e5 d9				start .byte StatusRangePairs[:,0]
1614	>07a7	8087a7	e5 d9 e8 df				end .byte StatusRangePairs[:,1]
1615							.bend

1617	.07ab	8087ab					plotStatusRangeY
1618	.07ab	8087ab					_ASSERT_jsr
1619	.07ab	8087ab					_ASSERT_axy8
1620							; this take a index into the table and draw the char until the last char spec'd in the table
1621	.07ab	8087ab	bd a7 87	lda $8087a7,x		lda StatusRangePairsLUT.end,x
1622	.07ae	8087ae	85 0f		sta $0f			sta ZPTemp
1623	.07b0	8087b0	bd a3 87	lda $8087a3,x		lda StatusRangePairsLUT.start,x
1624	.07b3	8087b3	aa		tax			tax
1625	.07b4	8087b4	8a		txa		-	txa
1626	.07b5	8087b5	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1627	.07b8	8087b8	e8		inx			inx
1628	.07b9	8087b9	e4 0f		cpx $0f			cpx ZPTemp
1629	.07bb	8087bb	d0 f7		bne $8087b4		bne -
1630	.07bd	8087bd	60		rts			rts

1632	.07be	8087be					plot3EmptyStatusCharToZPLong
1633	.07be	8087be					_ASSERT_jsr
1634	.07be	8087be					_ASSERT_axy8
1635	.07be	8087be	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1636	.07c1	8087c1					plot2EmptyStatusCharToZPLong
1637	.07c1	8087c1	20 c4 87	jsr $8087c4		jsr plotEmptyStatusCharToZPLong
1638	.07c4	8087c4					plotEmptyStatusCharToZPLong
1639	.07c4	8087c4	a9 cd		lda #$cd		lda #kSBC.M
1640	.07c6	8087c6					plotStatusCharToZPLong
239:1	.07c6	8087c6	c2 20		rep #$20		REP #$20
1642:4	.07c8	8087c8	97 32		sta [$32],y		sta [ZPLong],y
1643	.07ca	8087ca	c8		iny			iny
1644	.07cb	8087cb	c8		iny			iny
235:1	.07cc	8087cc	e2 20		sep #$20		SEP #$20
1646:4	.07ce	8087ce	60		rts			rts

1648	.07cf	8087cf					pltScore
1649	.07cf	8087cf					_ASSERT_jsr
1650	.07cf	8087cf					_ASSERT_axy8
1651	=$7e264e					_statusScore = fGetMemoryForScreenChar(ScreenMirror,7,25)	; location in screen mirror for the score
239:1	.07cf	8087cf	c2 20		rep #$20		REP #$20
1653:4	.07d1	8087d1	a9 4e 26	lda #$264e		lda #<>_statusScore
1654	.07d4	8087d4	85 32		sta $32			sta ZPLong.loword
235:1	.07d6	8087d6	e2 20		sep #$20		SEP #$20
1656:4	.07d8	8087d8	a9 7e		lda #$7e		lda #`_statusScore
1657	.07da	8087da	85 34		sta $34			sta ZPLong.bank				; set ZP long
1658	.07dc	8087dc	a9 20		lda #$20		lda #kStatusAttributes			; set up the high byte
1659	.07de	8087de	eb		xba			xba
1660	.07df	8087df	a0 00		ldy #$00		ldy #0
1661	.07e1	8087e1	a2 00		ldx #$00		ldx #0
1662	.07e3	8087e3	bd 8a 00	lda $80008a,x	-	lda GameData.score,x			; get the score digits
1663	.07e6	8087e6	09 f0		ora #$f0		ora #kSBC.Digits				; convert from 0-9 to the 0-9chars (the needs them to be aligned on a 16 boundary)
1664	.07e8	8087e8	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong	; draw digit
1665	.07eb	8087eb	e8		inx			inx
1666	.07ec	8087ec	e0 06		cpx #$06		cpx #6							; do all 6
1667	.07ee	8087ee	d0 f3		bne $8087e3		bne -
1668	.07f0	8087f0	60		rts			rts

1670	.07f1	8087f1					pltHighScore
1671	.07f1	8087f1					_ASSERT_jsr
1672	.07f1	8087f1					_ASSERT_axy8
1673	=$7e268e					_statusHScore = fGetMemoryForScreenChar(ScreenMirror,7,26)	; location in screen mirror for the score
239:1	.07f1	8087f1	c2 20		rep #$20		REP #$20
1675:4	.07f3	8087f3	a9 8e 26	lda #$268e		lda #<>_statusHScore
1676	.07f6	8087f6	85 32		sta $32			sta ZPLong.loword
235:1	.07f8	8087f8	e2 20		sep #$20		SEP #$20
1678:4	.07fa	8087fa	a9 7e		lda #$7e		lda #`_statusHScore
1679	.07fc	8087fc	85 34		sta $34			sta ZPLong.bank
1680	.07fe	8087fe	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1681	.0800	808800	eb		xba			xba
1682	.0801	808801	a2 00		ldx #$00		ldx #0
1683	.0803	808803	a0 00		ldy #$00		ldy #0
1684	.0805	808805	bd 90 00	lda $800090,x	_l	lda GameData.high,x			; see above
1685	.0808	808808	09 f0		ora #$f0		ora #kSBC.Digits
1686	.080a	80880a	20 c6 87	jsr $8087c6		jsr plotStatusCharToZPLong
1687	.080d	80880d	e8		inx			inx
1688	.080e	80880e	e0 06		cpx #$06		cpx #6
1689	.0810	808810	d0 f3		bne $808805		bne _l
1690	.0812	808812	60		rts			rts

1692	.0813	808813					pltLives
1693	.0813	808813					_ASSERT_jsr
1694	.0813	808813					_ASSERT_axy8
1695	=$7e26b0					_statusLives = fGetMemoryForScreenChar(ScreenMirror,24,26)
239:1	.0813	808813	c2 20		rep #$20		REP #$20
1697:4	.0815	808815	a9 b0 26	lda #$26b0		lda #<>_statusLives
1698	.0818	808818	85 32		sta $32			sta ZPLong.loword
235:1	.081a	80881a	e2 20		sep #$20		SEP #$20
1700:4	.081c	80881c	a9 7e		lda #$7e		lda #`_statusLives
1701	.081e	80881e	85 34		sta $34			sta ZPLong.bank
1702	.0820	808820	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1703	.0822	808822	eb		xba			xba
1704	.0823	808823	ad 88 00	lda $800088		lda GameData.lives		; get the lives
1705	.0826	808826	09 f0		ora #$f0		ora #kSBC.Digits
1706	.0828	808828	c9 fa		cmp #$fa		cmp #kSBC.Digits+10		; clip it to max show 9
1707	.082a	80882a	90 02		bcc $80882e		bcc _safe
1708	.082c	80882c	a9 f9		lda #$f9			lda #kSBC.Digits+9
1709	.082e	80882e					_safe
1710	.082e	80882e	a0 00		ldy #$00		ldy #0
1711	.0830	808830	4c c6 87	jmp $8087c6		jmp plotStatusCharToZPLong
1712								;rts

1714	.0833	808833					pltFlowers
1715	.0833	808833					_ASSERT_jsr
1716	.0833	808833					_ASSERT_axy8
1717	=$7e26ba					_statusFlowers = fGetMemoryForScreenChar(ScreenMirror,29,26)
239:1	.0833	808833	c2 20		rep #$20		REP #$20
1719:4	.0835	808835	a9 ba 26	lda #$26ba		lda #<>_statusFlowers
1720	.0838	808838	85 32		sta $32			sta ZPLong.loword
235:1	.083a	80883a	e2 20		sep #$20		SEP #$20
1722:4	.083c	80883c	a9 20		lda #$20		lda #kStatusAttributes		; set up the high byte
1723	.083e	80883e	eb		xba			xba
1724	.083f	80883f	a9 7e		lda #$7e		lda #`_statusFlowers
1725	.0841	808841	85 34		sta $34			sta ZPLong.bank
1726	.0843	808843	ad 89 00	lda $800089		lda GameData.flowers
1727	.0846	808846	09 f0		ora #$f0		ora #kSBC.Digits				; flowers can only be 1-8 anyway
1728	.0848	808848	a0 00		ldy #$00		ldy #0
1729	.084a	80884a	4c c6 87	jmp $8087c6		jmp plotStatusCharToZPLong
1730								;rts

1732							; ----- @Sprite Engine@ -----

1734	.084d	80884d					dmaOAM_xx					; copy all of OAM mirror -> OAM Ram in PPU
1735	.084d	80884d					_ASSERT_JSR
1736	.084d	80884d	08		php			php						; save the current register sizes
251:1	.084e	80884e	c2 10		rep #$10		REP #$10
235	.0850	808850	e2 20		sep #$20		SEP #$20
1739:4	.0852	808852	9c 02 21	stz $802102			stz $802102			; OAM is zero
1740	.0855	808855	9c 03 21	stz $802103			stz $802103			; A is 8bits ldx #0000 stx ABS is slower
1741	.0858	808858	a2 00 04	ldx #$0400			ldx #$0400			; A -> B, INC, Write BYTE | OAM
1742	.085b	80885b	8e 10 43	stx $804310			stx $804310
1743	.085e	80885e	a2 f3 03	ldx #$03f3			ldx #<>OAMMirror	; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1744	.0861	808861	8e 12 43	stx $804312			stx $804312
1745	.0864	808864	a2 7e 20	ldx #$207e			ldx #$207E			; We want bank 7e and we are trasfereing 512+32 bytes
1746	.0867	808867	8e 14 43	stx $804314			stx $804314
1747	.086a	80886a	a9 02		lda #$02			lda #$02
1748	.086c	80886c	8d 16 43	sta $804316			sta $804316
1749	.086f	80886f	8d 0b 42	sta $80420b			sta $80420B			; DMA channel 1 saves a load
1750	.0872	808872	28		plp			plp
1751	.0873	808873	60		rts			rts

1753	=224						kSpriteEmptyVal = 224
1754	>0874	808874	e0				SpriteEmptyVal .byte kSpriteEmptyVal
1755	>0875	808875	55				SpriteUpperEmpty .byte $55

1757							.as
1758							.xs
1759	.0876	808876					disableAllEntSprites_88
1760	.0876	808876					_ASSERT_jsr
1761	.0876	808876					_ASSERT_axy8
1762							; this sets all sprites to off screen
239:1	.0876	808876	c2 20		rep #$20		REP #$20
1764:4	.0878	808878	a9 e0 e0	lda #$e0e0		lda #kSpriteEmptyVal<<8|kSpriteEmptyVal
1765	.087b	80887b	a2 1e		ldx #$1e		ldx #mplex.kMaxSpr-2
1766	.087d	80887d	9d c6 03	sta $8003c6,x	-	sta mplexBuffer.ypos,x
1767	.0880	808880	9d 84 03	sta $800384,x		sta mplexBuffer.xpos,x
1768	.0883	808883	ca		dex			dex
1769	.0884	808884	ca		dex			dex
1770	.0885	808885	d0 f6		bne $80887d		bne -
235:1	.0887	808887	e2 20		sep #$20		SEP #$20
1772:4								; fall through
1773	.0889	808889					clearSpritesMirror_xx
1774	.0889	808889					_ASSERT_JSR
1775	.0889	808889	08		php			php											; save register size
251:1	.088a	80888a	c2 10		rep #$10		REP #$10
235	.088c	80888c	e2 20		sep #$20		SEP #$20
1778:4									; Do Main 256 words
1779	.088e	80888e	a2 18 80	ldx #$8018			ldx #$8018								; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1780	.0891	808891	8e 10 43	stx $804310			stx $804310
1781	.0894	808894	a2 74 88	ldx #$8874			ldx #<>SpriteEmptyVal				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1782	.0897	808897	8e 12 43	stx $804312			stx $804312
1783	.089a	80889a	a2 80 00	ldx #$0080			ldx #`SpriteEmptyVal					; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1784	.089d	80889d	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 0
1785	.08a0	8088a0	a2 f3 03	ldx #$03f3			ldx #<>OAMMirror
1786	.08a3	8088a3	8e 81 21	stx $802181			stx $802181
1787	.08a6	8088a6	9c 83 21	stz $802183			stz $802183								; START AT OAM MIRROR
1788	.08a9	8088a9	a9 02		lda #$02			lda #2
1789	.08ab	8088ab	8d 16 43	sta $804316			sta $804316								; DO 512 BYTES
1790	.08ae	8088ae	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1791									; Do upper 16 words
1792									;	ldx #$8018							; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1793									;	stx $804310
1794	.08b1	8088b1	a2 75 88	ldx #$8875			ldx #<>SpriteUpperEmpty				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1795	.08b4	8088b4	8e 12 43	stx $804312			stx $804312
1796	.08b7	8088b7	a2 80 20	ldx #$2080			ldx #(32<<8)|`SpriteUpperEmpty	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1797	.08ba	8088ba	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 32
1798	.08bd	8088bd	9c 16 43	stz $804316			stz $804316								; DO 32 BYTES
1799									;	ldx #<>OAMMirrorHigh
1800									;	stx $802181							; IF THIS IS DIRECTLY AFTER LO, WRAM ALREADY POINTS TO IT
1801									;	stz $802183							; START AT HIGH
1802									;	lda #$02
1803	.08c0	8088c0	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1804	.08c3	8088c3	28		plp			plp											; restore register size
1805	.08c4	8088c4	60		rts			rts

1807							.as
1808							.xs
1809	.08c5	8088c5					updateAllSpriteXYsToOAMMirror_88
1810	.08c5	8088c5					_ASSERT_jsr
1811	.08c5	8088c5					_ASSERT_axy8
1812	.08c5	8088c5	20 89 88	jsr $808889		jsr clearSpritesMirror_xx
1813								; handle the player which has special cases
1814	.08c8	8088c8	20 00 91	jsr $809100		jsr setPlayerSpritePtrFromFrameNumber_88
1815	.08cb	8088cb	64 0f		stz $0f			stz ZPTemp
1816	.08cd	8088cd	ae b5 00	ldx $8000b5		ldx PlayerData.currAnim
1817	.08d0	8088d0	a0 00		ldy #$00		ldy #0
1818	.08d2	8088d2	bd 9c 91	lda $80919c,x		lda PlayerFrameData.animXOffset,x
1819	.08d5	8088d5	85 06		sta $06			sta Pointer1.lo
1820	.08d7	8088d7	10 01		bpl $8088da		bpl +											; do we need to sign extend ?
1821	.08d9	8088d9	88		dey				dey										; yes - 255
1822	.08da	8088da	84 07		sty $07		+	sty Pointer1.hi
1823	.08dc	8088dc	ad 84 03	lda $800384		lda mplexBuffer.xpos						; get any X offset for this anim
239:1	.08df	8088df	c2 20		rep #$20		REP #$20
1825:4	.08e1	8088e1	29 ff 00	and #$00ff		and #$ff										; make sure its the 8bit value we expect
1826	.08e4	8088e4	18		clc			clc
1827	.08e5	8088e5	65 06		adc $06			adc Pointer1								; offset the Xpos
235:1	.08e7	8088e7	e2 20		sep #$20		SEP #$20
1829:4	.08e9	8088e9	8d f3 03	sta $8003f3		sta OAMMirror								; store the offset X
1830	.08ec	8088ec	8d f7 03	sta $8003f7		sta OAMMirror+4							; set the lower sprite in case
1831	.08ef	8088ef	eb		xba			xba
1832	.08f0	8088f0	f0 04		beq $8088f6		beq +											; have we overflown ?
1833	.08f2	8088f2	a9 05		lda #$05			lda #%00000101							; set the XMSB bit then
1834	.08f4	8088f4	85 0f		sta $0f				sta ZPTemp
1835	.08f6	8088f6	ad c6 03	lda $8003c6	+	lda mplexBuffer.ypos
1836	.08f9	8088f9	3a		dec a			dec a											; adjust for sprites being 1 below given y on SNES
1837	.08fa	8088fa	8d f4 03	sta $8003f4		sta OAMMirror+1
1838	.08fd	8088fd	18		clc			clc
1839	.08fe	8088fe	69 10		adc #$10		adc #16										; prep y + 16 in case
1840	.0900	808900	ae b5 00	ldx $8000b5		ldx PlayerData.currAnim
1841	.0903	808903	bc 88 91	ldy $809188,x		ldy PlayerFrameData.sizes,x			; do we have a dual sprite?
1842	.0906	808906	a2 50		ldx #$50		ldx #%01010000								; 2 sprites small
1843	.0908	808908	c0 01		cpy #$01		cpy #kSpriteType.s16x32
1844	.090a	80890a	f0 0d		beq $808919		beq +											; yes store the +16 y
1845	.090c	80890c	a2 e0		ldx #$e0			ldx #kSpriteEmptyVal					; no set 2nd sprite offscreen
1846	.090e	80890e	8e f7 03	stx $8003f7			stx OAMMirror+4
1847	.0911	808911	a2 54		ldx #$54			ldx #%01010100							; 1 sprite small
1848	.0913	808913	c0 02		cpy #$02			cpy #kSpriteType.s32x32
1849	.0915	808915	d0 02		bne $808919			bne +
1850	.0917	808917	a2 56		ldx #$56				ldx #%1010110						; 1 sprite large
1851	.0919	808919	8d f8 03	sta $8003f8	+	sta OAMMirror+5
1852	.091c	80891c	8a		txa			txa
1853	.091d	80891d	05 0f		ora $0f			ora ZPTemp									; set the X-MSB if needed
1854	.091f	80891f	8d f3 05	sta $8005f3		sta OAMMirrorHigh
1855								; next add the bullet, if needed
1856	.0922	808922	ad b7 00	lda $8000b7		lda PlayerData.bulletActive
1857	.0925	808925	f0 16		beq $80893d		beq _noBullet
1858									; either way the bullet is a 16x16 sprite
1859	.0927	808927	ad 85 03	lda $800385			lda mplexBuffer.xpos+kBulletSpriteOffset
1860	.092a	80892a	8d fb 03	sta $8003fb			sta OAMMirror+8
1861	.092d	80892d	ad c7 03	lda $8003c7			lda mplexBuffer.ypos+kBulletSpriteOffset
1862	.0930	808930	8d fc 03	sta $8003fc			sta OAMMirror+9
1863	.0933	808933	ad f3 05	lda $8005f3			lda OAMMirrorHigh
1864	.0936	808936	29 cf		and #$cf			and #%11001111
1865	.0938	808938	8d f3 05	sta $8005f3			sta OAMMirrorHigh	; clear the X MSB for bullet, so you can see it
1866	.093b	80893b	80 08		bra $808945			bra _bulletTile
1867									;
1868	.093d	80893d					_noBullet
1869	.093d	80893d	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1870	.093f	80893f	8d fb 03	sta $8003fb		sta OAMMirror+8		; make sure the bullet is offscreen
1871	.0942	808942	8d fc 03	sta $8003fc		sta OAMMirror+9
1872	.0945	808945					_bulletTile
1873	.0945	808945	ae 92 02	ldx $800292		ldx bulletFrame		; we set the frame, either way doesn't matter
239:1	.0948	808948	c2 20		rep #$20		REP #$20
1875:4	.094a	80894a	bd 35 93	lda $809335,x		lda PlayerBulletAnimData,x
1876	.094d	80894d	8d fd 03	sta $8003fd		sta OAMMirror+10 ;11
235:1	.0950	808950	e2 20		sep #$20		SEP #$20
1878:4									; now add the entities
1879	.0952	808952	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
1880	.0954	808954	86 0f		stx $0f			stx ZPTemp
1881	.0956	808956					_EntLoop
1882	.0956	808956	a6 0f		ldx $0f			ldx ZPTemp
1883	.0958	808958	bd 00 01	lda $800100,x		lda EntityData.active,x						; if allive
1884	.095b	80895b	f0 0b		beq $808968		beq _notActive
1885	.095d	80895d	bc ce 00	ldy $8000ce,x			ldy EntityData.type,x					; get the type
1886	.0960	808960	b9 97 9c	lda $809c97,y			lda EntityAnimData.frameSize,y		; dispatch for the ent type size
1887	.0963	808963	0a		asl a				asl a
1888	.0964	808964	aa		tax				tax
1889	.0965	808965	fc 6d 89	jsr ($80896d,x)			jsr (ENTSpriteDispatchLUT,x)
1890	.0968	808968					_notActive
1891	.0968	808968	c6 0f		dec $0f			dec ZPTemp
1892	.096a	80896a	10 ea		bpl $808956		bpl _EntLoop
1893	.096c	80896c	60		rts			rts

1895	>096d	80896d	7e 89 c2 89 14 8a		ENTSpriteDispatchLUT	.word <>(Ent16_16,Ent16_32,Ent32_32)

1897	.0973	808973					EntSpriteConvertToOAMIndex
1898	.0973	808973					_ASSERT_axy8
1899	.0973	808973	a5 0f		lda $0f			lda ZPTemp					; get the current ent number
1900	.0975	808975	aa		tax			tax							; cache it
1901	.0976	808976	18		clc			clc
1902	.0977	808977	69 02		adc #$02		adc #kEntsSpriteOffset	; offset by the start of ent sprites
1903	.0979	808979	0a		asl a			asl a
1904	.097a	80897a	0a		asl a			asl a							; each ent is allocated upto 2 sprites, 4 bytes per sprite
1905	.097b	80897b	0a		asl a			asl a							; x8 to convert ent number to OAM byte offset
1906	.097c	80897c	a8		tay			tay							; y is now the OAM index
1907	.097d	80897d	60		rts			rts

1909	.097e	80897e					Ent16_16
1910	.097e	80897e					_ASSERT_axy8
1911	.097e	80897e	20 73 89	jsr $808973		jsr EntSpriteConvertToOAMIndex
1912	.0981	808981	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1913	.0984	808984	99 f3 03	sta $8003f3,y		sta OAMMirror,y			; set X
1914	.0987	808987	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1915	.098a	80898a	3a		dec a			dec a							; adjust for SNES drawing sprites 1 lower than set value
1916	.098b	80898b	99 f4 03	sta $8003f4,y		sta OAMMirror+1,y			; set Y
1917	.098e	80898e	a9 e0		lda #$e0		lda #kSpriteEmptyVal		; set 2nd sprite off screen
1918	.0990	808990	99 f7 03	sta $8003f7,y		sta OAMMirror+4,y
1919	.0993	808993	99 f8 03	sta $8003f8,y		sta OAMMirror+5,y
1920	.0996	808996	bd 45 02	lda $800245,x		lda EntityData.palleteOffset,x
1921	.0999	808999	85 10		sta $10			sta ZPTemp2					; while X is still ent index, cache pallete offset
1922	.099b	80899b	bd 4b 01	lda $80014b,x		lda EntityData.animBase,x
1923	.099e	80899e	18		clc			clc
1924	.099f	80899f	7d 64 01	adc $800164,x		adc EntityData.animFrame,x
1925	.09a2	8089a2	aa		tax			tax							; x is now the EntityFrameData index
1926	.09a3	8089a3	bd cd 9b	lda $809bcd,x		lda EntityFrameData.lo,x
1927	.09a6	8089a6	99 f5 03	sta $8003f5,y		sta OAMMirror+2,y			; set Sprite number
1928	.09a9	8089a9	bd 24 9c	lda $809c24,x		lda EntityFrameData.hi,x
1929	.09ac	8089ac	18		clc			clc
1930	.09ad	8089ad	65 10		adc $10			adc ZPTemp2					; the cached palleteOffset
1931	.09af	8089af	99 f6 03	sta $8003f6,y		sta OAMMirror+3,y			; set Attributes
1932								; update the high flags
1933	.09b2	8089b2	20 58 8a	jsr $808a58		jsr entSpriteUpdateUpperFlagsGetIndexes
1934	.09b5	8089b5	b9 f3 05	lda $8005f3,y		lda OAMMirrorHigh,y
1935	.09b8	8089b8	3d 6f 8a	and $808a6f,x		and EntUpperANDMask,x
1936	.09bb	8089bb	1d 73 8a	ora $808a73,x		ora Ent16_16_ORVal,x
1937	.09be	8089be	99 f3 05	sta $8005f3,y		sta OAMMirrorHigh,y
1938	.09c1	8089c1	60		rts			rts

1940	.09c2	8089c2					Ent16_32
1941	.09c2	8089c2					_ASSERT_axy8
1942	.09c2	8089c2	20 73 89	jsr $808973		jsr EntSpriteConvertToOAMIndex
1943	.09c5	8089c5	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1944	.09c8	8089c8	99 f3 03	sta $8003f3,y		sta OAMMirror,y
1945	.09cb	8089cb	99 f7 03	sta $8003f7,y		sta OAMMirror+4,y			; set both X's
1946	.09ce	8089ce	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1947	.09d1	8089d1	3a		dec a			dec a
1948	.09d2	8089d2	99 f4 03	sta $8003f4,y		sta OAMMirror+1,y			; set top Y
1949	.09d5	8089d5	18		clc			clc
1950	.09d6	8089d6	69 10		adc #$10		adc #16						; offset to bellow
1951	.09d8	8089d8	99 f8 03	sta $8003f8,y		sta OAMMirror+5,y			; set bottom Y
1952	.09db	8089db	bd 45 02	lda $800245,x		lda EntityData.palleteOffset,x
1953	.09de	8089de	85 10		sta $10			sta ZPTemp2
1954	.09e0	8089e0	bd 4b 01	lda $80014b,x		lda EntityData.animBase,x
1955	.09e3	8089e3	18		clc			clc
1956	.09e4	8089e4	7d 64 01	adc $800164,x		adc EntityData.animFrame,x
1957	.09e7	8089e7	aa		tax			tax							; is now the EntityFrameData index
1958	.09e8	8089e8	bd cd 9b	lda $809bcd,x		lda EntityFrameData.lo,x
1959	.09eb	8089eb	99 f5 03	sta $8003f5,y		sta OAMMirror+2,y			; set first sprite
1960	.09ee	8089ee	18		clc			clc
1961	.09ef	8089ef	69 20		adc #$20		adc #32						; offset to the tile bellow
1962	.09f1	8089f1	99 f9 03	sta $8003f9,y		sta OAMMirror+6,y			; set second sprite
1963	.09f4	8089f4	08		php			php							; save the C from the ADC
1964	.09f5	8089f5	bd 24 9c	lda $809c24,x			lda EntityFrameData.hi,x
1965	.09f8	8089f8	18		clc				clc
1966	.09f9	8089f9	65 10		adc $10				adc ZPTemp2				; offset, by the potential pallete offset
1967	.09fb	8089fb	99 f6 03	sta $8003f6,y			sta OAMMirror+3,y
1968	.09fe	8089fe	28		plp			plp							; restore the C from the next sprite tile adc
1969	.09ff	8089ff	69 00		adc #$00		adc #0						; add the C
1970	.0a01	808a01	99 fa 03	sta $8003fa,y		sta OAMMirror+7,y			; store the bottom sprite attributes and tile MSB
1971								; update the high flags
1972	.0a04	808a04	20 58 8a	jsr $808a58		jsr entSpriteUpdateUpperFlagsGetIndexes
1973	.0a07	808a07	b9 f3 05	lda $8005f3,y		lda OAMMirrorHigh,y
1974	.0a0a	808a0a	3d 6f 8a	and $808a6f,x		and EntUpperANDMask,x
1975	.0a0d	808a0d	1d 77 8a	ora $808a77,x		ora Ent16_32_ORVal,x
1976	.0a10	808a10	99 f3 05	sta $8005f3,y		sta OAMMirrorHigh,y
1977	.0a13	808a13	60		rts			rts

1979	.0a14	808a14					Ent32_32
1980	.0a14	808a14					_ASSERT_axy8
1981	.0a14	808a14	20 73 89	jsr $808973		jsr EntSpriteConvertToOAMIndex				; this is identical to 16_16 except different flags at the end
1982	.0a17	808a17	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x	; I've not pulled this out into a function to make it easier to understand
1983	.0a1a	808a1a	99 f3 03	sta $8003f3,y		sta OAMMirror,y									; the 16x16 function.
1984	.0a1d	808a1d	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1985	.0a20	808a20	3a		dec a			dec a
1986	.0a21	808a21	99 f4 03	sta $8003f4,y		sta OAMMirror+1,y
1987	.0a24	808a24	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1988	.0a26	808a26	99 f7 03	sta $8003f7,y		sta OAMMirror+4,y
1989	.0a29	808a29	99 f8 03	sta $8003f8,y		sta OAMMirror+5,y
1990	.0a2c	808a2c	bd 45 02	lda $800245,x		lda EntityData.palleteOffset,x
1991	.0a2f	808a2f	85 10		sta $10			sta ZPTemp2
1992	.0a31	808a31	bd 4b 01	lda $80014b,x		lda EntityData.animBase,x
1993	.0a34	808a34	18		clc			clc
1994	.0a35	808a35	7d 64 01	adc $800164,x		adc EntityData.animFrame,x
1995	.0a38	808a38	aa		tax			tax													; is now the EntityFrameData index
1996	.0a39	808a39	bd cd 9b	lda $809bcd,x		lda EntityFrameData.lo,x
1997	.0a3c	808a3c	99 f5 03	sta $8003f5,y		sta OAMMirror+2,y
1998	.0a3f	808a3f	bd 24 9c	lda $809c24,x		lda EntityFrameData.hi,x
1999	.0a42	808a42	18		clc			clc
2000	.0a43	808a43	65 10		adc $10			adc ZPTemp2
2001	.0a45	808a45	99 f6 03	sta $8003f6,y		sta OAMMirror+3,y
2002								; update the high flags
2003	.0a48	808a48	20 58 8a	jsr $808a58		jsr entSpriteUpdateUpperFlagsGetIndexes
2004	.0a4b	808a4b	b9 f3 05	lda $8005f3,y		lda OAMMirrorHigh,y
2005	.0a4e	808a4e	3d 6f 8a	and $808a6f,x		and EntUpperANDMask,x
2006	.0a51	808a51	1d 7b 8a	ora $808a7b,x		ora Ent32_32_ORVal,x
2007	.0a54	808a54	99 f3 05	sta $8005f3,y		sta OAMMirrorHigh,y
2008	.0a57	808a57	60		rts			rts

2010	.0a58	808a58					entSpriteUpdateUpperFlagsGetIndexes
2011	.0a58	808a58	a6 0f		ldx $0f			ldx ZPTemp											; this holds the entity number
2012	.0a5a	808a5a	bd a7 03	lda $8003a7,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x	; do we have MSB set?
2013	.0a5d	808a5d	08		php			php													; save Zero status
2014	.0a5e	808a5e	8a		txa				txa
2015	.0a5f	808a5f	4a		lsr a				lsr a												; ents have two sprites and the upper holds 4 sprites
2016	.0a60	808a60	1a		inc a				inc a												; so upper OAM mirrror byte is ent num / 2 + 1 to skip
2017	.0a61	808a61	a8		tay				tay												; to skip the plyaer + bullet sprite set
2018	.0a62	808a62	8a		txa				txa
2019	.0a63	808a63	29 01		and #$01			and #1											; x is now if sprite is even or odd number
2020	.0a65	808a65	aa		tax				tax												; i.e which half of the upper byte mirror it uses
2021	.0a66	808a66	28		plp			plp													; restore "if 0"
2022	.0a67	808a67	f0 05		beq $808a6e		beq _noMSB
2023	.0a69	808a69	8a		txa				txa
2024	.0a6a	808a6a	18		clc				clc
2025	.0a6b	808a6b	69 02		adc #$02			adc #2 ; offset into MSB masks			; offset the index by 2 to access the MSB set versions
2026	.0a6d	808a6d	aa		tax				tax
2027	.0a6e	808a6e					_noMSB
2028	.0a6e	808a6e	60		rts			rts


2031													;		normal				 | XMSB
2032	>0a6f	808a6f	f0 0f f0 0f			EntUpperANDMask	.byte %11110000,%00001111,%11110000,%00001111
2033	>0a73	808a73	04 40 06 60			Ent16_16_ORVal		.byte %00000100,%01000000,%00000110,%01100000
2034	>0a77	808a77	00 00 05 50			Ent16_32_ORVal		.byte %00000000,%00000000,%00000101,%01010000
2035	>0a7b	808a7b	06 60 07 70			Ent32_32_ORVal		.byte %00000110,%01100000,%00000111,%01110000


2038							; ----- @DMA functions@ -----

2040	.0a7f	808a7f					dmaPalletes_XX
2041	.0a7f	808a7f					_ASSERT_JSR
2042	.0a7f	808a7f	08		php			php
235:1	.0a80	808a80	e2 20		sep #$20		SEP #$20
251	.0a82	808a82	c2 10		rep #$10		REP #$10
2045:4	.0a84	808a84	a2 c0 ae	ldx #$aec0			ldx #<>CharPallete
2046	.0a87	808a87	8e 02 43	stx $804302			stx $804302
2047	.0a8a	808a8a	a9 82		lda #$82			lda #`CharPallete
2048	.0a8c	808a8c	8d 04 43	sta $804304			sta $804304
2049	.0a8f	808a8f	a2 20 00	ldx #$0020			ldx #32
2050	.0a92	808a92	8e 05 43	stx $804305			stx $804305
2051	.0a95	808a95	a2 02 22	ldx #$2202			ldx #%00000010 | $2200			; A->B, Inc, Write 2 Bytes, $2122
2052	.0a98	808a98	8e 00 43	stx $804300			stx $804300
2053	.0a9b	808a9b	9c 21 21	stz $802121			stz $802121							; start of Pallete
2054	.0a9e	808a9e	a9 01		lda #$01			lda #1
2055	.0aa0	808aa0	8d 0b 42	sta $80420b			sta $80420B
2056	.0aa3	808aa3	a2 e0 ae	ldx #$aee0			ldx #<>SpritePallete				; Sprite palletes which is 48 colours to slot 8-10
2057	.0aa6	808aa6	8e 02 43	stx $804302			stx $804302
2058	.0aa9	808aa9	a9 82		lda #$82			lda #`SpritePallete
2059	.0aab	808aab	8d 04 43	sta $804304			sta $804304
2060	.0aae	808aae	a2 60 00	ldx #$0060			ldx #32*3							; copy 3 palletes worth
2061	.0ab1	808ab1	8e 05 43	stx $804305			stx $804305
2062	.0ab4	808ab4	a9 80		lda #$80			lda #128								; start of Sprite Pallete
2063	.0ab6	808ab6	8d 21 21	sta $802121			sta $802121
2064	.0ab9	808ab9	a9 01		lda #$01			lda #1
2065	.0abb	808abb	8d 0b 42	sta $80420b			sta $80420b
2066	.0abe	808abe	28		plp			plp
2067	.0abf	808abf	60		rts			rts

2069	.0ac0	808ac0					dmaLevelChars_xx
2070	.0ac0	808ac0					_ASSERT_JSR
2071	.0ac0	808ac0	08		php			php
259:1	.0ac1	808ac1	c2 30		rep #$30		REP #$30
2073:4	.0ac3	808ac3	29 ff 00	and #$00ff			and #$ff								; to be sure
2074	.0ac6	808ac6	0a		asl a				asl a
2075	.0ac7	808ac7	aa		tax				tax
2076	.0ac8	808ac8	bd d2 8b	lda $808bd2,x			lda LevelCharsLUT,x
2077	.0acb	808acb	8d 02 43	sta $804302			sta $804302
235:1	.0ace	808ace	e2 20		sep #$20		SEP #$20
2079:4	.0ad0	808ad0	a9 82		lda #$82			lda #`BackShadowChars
2080	.0ad2	808ad2	8d 04 43	sta $804304			sta $804304
2081	.0ad5	808ad5	a2 80 06	ldx #$0680			ldx #size(BackShadowChars)/4	; we have 4 sets
2082	.0ad8	808ad8	8e 05 43	stx $804305			stx $804305
2083	.0adb	808adb	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2084	.0ade	808ade	8e 00 43	stx $804300			stx $804300
2085	.0ae1	808ae1	a2 00 10	ldx #$1000			ldx #kVRAM.gameChars
2086	.0ae4	808ae4	8e 16 21	stx $802116			stx $802116
2087	.0ae7	808ae7	a9 80		lda #$80			lda #$80
2088	.0ae9	808ae9	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2089	.0aec	808aec	a9 01		lda #$01			lda #1
2090	.0aee	808aee	8d 0b 42	sta $80420b			sta $80420B
2091	.0af1	808af1	28		plp			plp
2092	.0af2	808af2	60		rts			rts

2094	.0af3	808af3					dmaFixedChars_xx
2095	.0af3	808af3					_ASSERT_JSR
2096	.0af3	808af3	08		php			php
235:1	.0af4	808af4	e2 20		sep #$20		SEP #$20
251	.0af6	808af6	c2 10		rep #$10		REP #$10
2099:4	.0af8	808af8	a2 00 9a	ldx #$9a00			ldx #<>FixedSectionChars
2100	.0afb	808afb	8e 02 43	stx $804302			stx $804302
2101	.0afe	808afe	a9 82		lda #$82			lda #`FixedSectionChars
2102	.0b00	808b00	8d 04 43	sta $804304			sta $804304
2103	.0b03	808b03	a2 c0 04	ldx #$04c0			ldx #size(FixedSectionChars)
2104	.0b06	808b06	8e 05 43	stx $804305			stx $804305
2105	.0b09	808b09	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2106	.0b0c	808b0c	8e 00 43	stx $804300			stx $804300
2107	.0b0f	808b0f	a2 40 13	ldx #$1340			ldx #kVRAM.gameChars+(52*16)
2108	.0b12	808b12	8e 16 21	stx $802116			stx $802116
2109	.0b15	808b15	a9 80		lda #$80			lda #$80
2110	.0b17	808b17	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2111	.0b1a	808b1a	a9 01		lda #$01			lda #1
2112	.0b1c	808b1c	8d 0b 42	sta $80420b			sta $80420B
2113									; the font
2114	.0b1f	808b1f	a2 c0 9e	ldx #$9ec0			ldx #<>Font4BPP
2115	.0b22	808b22	8e 02 43	stx $804302			stx $804302
2116	.0b25	808b25	a9 82		lda #$82			lda #`Font4BPP
2117	.0b27	808b27	8d 04 43	sta $804304			sta $804304
2118	.0b2a	808b2a	a2 00 08	ldx #$0800			ldx #size(Font4BPP)
2119	.0b2d	808b2d	8e 05 43	stx $804305			stx $804305
2120	.0b30	808b30	a2 00 18	ldx #$1800			ldx #kVRAM.gameChars+(128*16)
2121	.0b33	808b33	8e 16 21	stx $802116			stx $802116
2122	.0b36	808b36	a9 01		lda #$01			lda #1
2123	.0b38	808b38	8d 0b 42	sta $80420b			sta $80420B
2124									; the fixed upper chars
2125	.0b3b	808b3b	a2 c0 a6	ldx #$a6c0			ldx #<>TopFixedChars
2126	.0b3e	808b3e	8e 02 43	stx $804302			stx $804302
2127	.0b41	808b41	a9 82		lda #$82			lda #`TopFixedChars
2128	.0b43	808b43	8d 04 43	sta $804304			sta $804304
2129	.0b46	808b46	a2 00 08	ldx #$0800			ldx #size(TopFixedChars)
2130	.0b49	808b49	8e 05 43	stx $804305			stx $804305
2131	.0b4c	808b4c	a2 00 1c	ldx #$1c00			ldx #kVRAM.gameChars+(192*16)
2132	.0b4f	808b4f	8e 16 21	stx $802116			stx $802116
2133	.0b52	808b52	a9 01		lda #$01			lda #1
2134	.0b54	808b54	8d 0b 42	sta $80420b			sta $80420B
2135									; lets just do the sprites while we are here
2136	.0b57	808b57	a2 00 80	ldx #$8000			ldx #<>SpritesChars
2137	.0b5a	808b5a	8e 02 43	stx $804302			stx $804302
2138	.0b5d	808b5d	a9 83		lda #$83			lda #`SpritesChars
2139	.0b5f	808b5f	8f 04 43 08	sta $084304			sta $84304
2140	.0b63	808b63	a2 00 80	ldx #$8000			ldx #size(SpritesChars)
2141	.0b66	808b66	8e 05 43	stx $804305			stx $804305
2142	.0b69	808b69	a2 00 40	ldx #$4000			ldx #kVRAM.Sprite
2143	.0b6c	808b6c	8e 16 21	stx $802116			stx $802116
2144	.0b6f	808b6f	a9 01		lda #$01			lda #1
2145	.0b71	808b71	8d 0b 42	sta $80420b			sta $80420B
2146	.0b74	808b74	28		plp			plp
2147	.0b75	808b75	60		rts			rts

2149	.0b76	808b76					dmaScreenMirror_xx
2150	.0b76	808b76					_ASSERT_JSR
2151	.0b76	808b76	08		php			php
251:1	.0b77	808b77	c2 10		rep #$10		REP #$10
2153:4	.0b79	808b79	a2 00 20	ldx #$2000			ldx #<>ScreenMirror		; this and the next function could be split to pull out the size
2154	.0b7c	808b7c	8e 02 43	stx $804302			stx $804302					; but I couldn't be bothered...
235:1	.0b7f	808b7f	e2 20		sep #$20		SEP #$20
2156:4	.0b81	808b81	a9 7e		lda #$7e			lda #`ScreenMirror
2157	.0b83	808b83	8d 04 43	sta $804304			sta $804304
2158	.0b86	808b86	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2159	.0b89	808b89	8e 05 43	stx $804305			stx $804305
2160	.0b8c	808b8c	a2 01 18	ldx #$1801			ldx #%00000001 | $1800	; A->B, Inc, Write WORD, $2118
2161	.0b8f	808b8f	8e 00 43	stx $804300			stx $804300
2162	.0b92	808b92	a2 00 04	ldx #$0400			ldx #kVRAM.gameScreen
2163	.0b95	808b95	8e 16 21	stx $802116			stx $802116
2164	.0b98	808b98	a9 80		lda #$80			lda #$80
2165	.0b9a	808b9a	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2166	.0b9d	808b9d	a9 01		lda #$01			lda #1
2167	.0b9f	808b9f	8d 0b 42	sta $80420b			sta $80420B
2168	.0ba2	808ba2	28		plp			plp
2169	.0ba3	808ba3	60		rts			rts

2171	.0ba4	808ba4					dmaScreenMirrorToTitleScreen_xx
2172	.0ba4	808ba4					_ASSERT_JSR
2173	.0ba4	808ba4	08		php			php
251:1	.0ba5	808ba5	c2 10		rep #$10		REP #$10
2175:4	.0ba7	808ba7	a2 00 20	ldx #$2000			ldx #<>ScreenMirror
2176	.0baa	808baa	8e 02 43	stx $804302			stx $804302
235:1	.0bad	808bad	e2 20		sep #$20		SEP #$20
2178:4	.0baf	808baf	a9 7e		lda #$7e			lda #`ScreenMirror
2179	.0bb1	808bb1	8d 04 43	sta $804304			sta $804304
2180	.0bb4	808bb4	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2181	.0bb7	808bb7	8e 05 43	stx $804305			stx $804305
2182	.0bba	808bba	a2 01 18	ldx #$1801			ldx #%00000001 | $1800	; A->B, Inc, Write WORD, $2118
2183	.0bbd	808bbd	8e 00 43	stx $804300			stx $804300
2184	.0bc0	808bc0	a2 00 00	ldx #$0000			ldx #kVRAM.titleScreen
2185	.0bc3	808bc3	8e 16 21	stx $802116			stx $802116
2186	.0bc6	808bc6	a9 80		lda #$80			lda #$80
2187	.0bc8	808bc8	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2188	.0bcb	808bcb	a9 01		lda #$01			lda #1
2189	.0bcd	808bcd	8d 0b 42	sta $80420b			sta $80420B
2190	.0bd0	808bd0	28		plp			plp
2191	.0bd1	808bd1	60		rts			rts

2193							; this builds a table of the start indexs in the BackShadowChars binary blob that
2194							; holds each "set", which there are 4 so each set size is total size/4
2195	.0bd2	808bd2					LevelCharsLUT
2196	=[$828000,$828680,$828d00,$829380]			- = BackShadowChars + range(4)*(size(BackShadowChars)/4)
2197	>0bd2	808bd2	00 80 80 86 00 8d 80 93			.word <>(-)

2199							; ----- @Map routines@ -----
2200							.section sLoWRAM
2201	>7e2000						ScreenMirror .fill 2048		; this is used to hold the screen before DMA
2202							.send ; sLoWRAM
2203							.section sDP
2204	>0036						ScreenUpdateRequiredN0 .byte ?
2205							.send ; sDP

2207							.as
2208							.xs
2209	.0bda	808bda					plotTileMap_88
2210	.0bda	808bda					_ASSERT_jsr
2211	.0bda	808bda					_ASSERT_axy8
239:1	.0bda	808bda	c2 20		rep #$20		REP #$20
2213:4	.0bdc	808bdc	a9 94 02	lda #$0294		lda #<>tileMapTemp
2214	.0bdf	808bdf	85 06		sta $06			sta Pointer1					; pointer 1 holds pointer to the active level data
2215	.0be1	808be1	a9 00 20	lda #$2000		lda #<>ScreenMirror
2216	.0be4	808be4	85 32		sta $32			sta ZPLong.loword
235:1	.0be6	808be6	e2 20		sep #$20		SEP #$20
2218:4	.0be8	808be8	a9 7e		lda #$7e		lda #`ScreenMirror
2219	.0bea	808bea	85 34		sta $34			sta ZPLong.bank				; ZPLong holds the "screen" pointer

2221	.0bec	808bec	a9 0a		lda #$0a		lda #kDoorClosed				; we are plotting the map so take this
2222	.0bee	808bee	8d 9e 00	sta $80009e		sta LevelData.exitFrame		; time to ensure door is closed

2224								; to keep the index's free and so I can use all any 'ZPTemps' in sub functions
2225								; wihtout fear, I store the counters on the stack
2226	.0bf1	808bf1	a9 0c		lda #$0c		lda #kTileYCount				; num rows
2227	.0bf3	808bf3	48		pha			pha								; save row counter
2228	.0bf4	808bf4					_pltY
2229	.0bf4	808bf4	a0 00		ldy #$00			ldy #00						; num cols
2230	.0bf6	808bf6	5a		phy				phy							; save the column counter
2231	.0bf7	808bf7	b1 06		lda ($06),y	_pltX		lda (Pointer1),y		; tile num
2232	.0bf9	808bf9	aa		tax					tax
2233	.0bfa	808bfa	bd 7b 8e	lda $808e7b,x				lda toolToTileLUT,x	; convert map to actual tile
2234	.0bfd	808bfd	20 07 8d	jsr $808d07				jsr renderTile_88		; plot it
243:1	.0c00	808c00	c2 21		rep #$21		REP #$21
2236:4	.0c02	808c02	a5 32		lda $32					lda ZPLong.loword
2237	.0c04	808c04	69 04 00	adc #$0004				adc #4
2238	.0c07	808c07	85 32		sta $32					sta ZPLong.loword		; advance screen pointer 2 tiles to the right
235:1	.0c09	808c09	e2 20		sep #$20		SEP #$20
2240:4	.0c0b	808c0b	7a		ply				ply							; restore column counter
2241	.0c0c	808c0c	c8		iny				iny							; inc it
2242	.0c0d	808c0d	5a		phy				phy							; save it again ready for the next loop
2243	.0c0e	808c0e	c0 10		cpy #$10				cpy #kTileXCount		; have we done the row
2244	.0c10	808c10	d0 e5		bne $808bf7				bne _pltX				; no, next
2245	.0c12	808c12	68		pla				pla							; counter will be on stack so remove
243:1	.0c13	808c13	c2 21		rep #$21		REP #$21
2247:4	.0c15	808c15	a5 06		lda $06				lda Pointer1.lo			; advance the map data pointer to the next row
2248	.0c17	808c17	69 10 00	adc #$0010			adc #kTileXCount
2249	.0c1a	808c1a	85 06		sta $06				sta Pointer1.lo
235:1	.0c1c	808c1c	e2 20		sep #$20		SEP #$20
2251:4	.0c1e	808c1e	68		pla			pla								; restore the rows counter
2252	.0c1f	808c1f	38		sec			sec
2253	.0c20	808c20	e9 01		sbc #$01		sbc #1							; count down
2254	.0c22	808c22	f0 0e		beq $808c32		beq _exit						; done ?
2255	.0c24	808c24	48		pha			pha								; save it back on the stack
243:1	.0c25	808c25	c2 21		rep #$21		REP #$21
2257:4	.0c27	808c27	a5 32		lda $32				lda ZPLong.loword			; we have to offset the screen position to the next "row"
2258	.0c29	808c29	69 40 00	adc #$0040			adc #128-64					; each row is 32 chars, which is words so 64 bytes
2259	.0c2c	808c2c	85 32		sta $32				sta ZPLong.loword			; and we have 2 rows which is 128 bytes, we are already 1 row over
235:1	.0c2e	808c2e	e2 20		sep #$20		SEP #$20
2261:4	.0c30	808c30	80 c2		bra $808bf4			gra _pltY
2262	.0c32	808c32					_exit
2263	.0c32	808c32	60		rts			rts

2265							.as
2266							.xs
2267	.0c33	808c33					addShadowsToMap_88
2268	.0c33	808c33					_ASSERT_jsr
2269	.0c33	808c33					_ASSERT_axy8
2270	.0c33	808c33	64 14		stz $14			stz TempX						; tile counter that is not trashed
2271	.0c35	808c35	a4 14		ldy $14		-	ldy TempX						; get tile map index
2272	.0c37	808c37	20 59 8c	jsr $808c59		jsr tileIsSafeToChange_88	; is this a background tile?
2273	.0c3a	808c3a	90 03		bcc $808c3f		bcc +
2274	.0c3c	808c3c	20 65 8c	jsr $808c65			jsr calcBCDEforTileY_88	; calc shadow and update the tile
2275	.0c3f	808c3f	e6 14		inc $14		+	inc TempX						; next tile
2276	.0c41	808c41	a5 14		lda $14			lda TempX
2277	.0c43	808c43	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2278	.0c45	808c45	d0 ee		bne $808c35		bne -
2279	.0c47	808c47	60		rts			rts

2281							.as
2282							.xs
2283	.0c48	808c48					tileIsWall_88
2284							; if tileMapTemp[y] is a "wall" tile then c will clear, set otherwise
2285	.0c48	808c48					_ASSERT_jsr
2286	.0c48	808c48					_ASSERT_axy8
2287	.0c48	808c48	b9 94 02	lda $800294,y		lda tileMapTemp,y				; get current tile
2288	.0c4b	808c4b	f0 0a		beq $808c57		beq _no
2289	.0c4d	808c4d	c9 06		cmp #$06			cmp #kTiles.wall4+1		; <= Wall4
2290	.0c4f	808c4f	90 05		bcc $808c56			bcc _yes
2291	.0c51	808c51	c9 14		cmp #$14				cmp #kTiles.diss		; == dissolvable char
2292	.0c53	808c53	d0 02		bne $808c57				bne _no
2293	.0c55	808c55	18		clc					clc						; clear carry
2294	.0c56	808c56					_yes
2295	.0c56	808c56	60		rts			rts								; carry is clear
2296	.0c57	808c57					_no
2297	.0c57	808c57	38		sec			sec
2298	.0c58	808c58	60		rts			rts								; carry is set

2300							.as
2301							.xs
2302	.0c59	808c59					tileIsSafeToChange_88
2303							; if tileMapTemp[y] is not something like a fruit, wall, spike, door etc C is set
2304							; why inverse, that is how the cmp falls. As this is not 16K limited anymore you could set it right.
2305	.0c59	808c59					_ASSERT_jsr
2306	.0c59	808c59					_ASSERT_axy8
2307	.0c59	808c59	b9 94 02	lda $800294,y		lda tileMapTemp,y
2308	.0c5c	808c5c	f0 05		beq $808c63		beq _yes									; 0 is safe
2309	.0c5e	808c5e	c9 22		cmp #$22			cmp #kTiles.underHangStart
2310	.0c60	808c60	b0 01		bcs $808c63			bcs _yes
2311	.0c62	808c62	60		rts					rts ; carry is clear
2312	.0c63	808c63					_yes
2313	.0c63	808c63	38		sec			sec
2314	.0c64	808c64	60		rts			rts

2316							; Don't try and understand this, not worth your life, it calcs the saul drop shadow, just move on.
2317							;  BCD
2318							;  EA
2319							;  H
2320							; A is tile we are testing
2321							;  BCDE H
2322							;  1110   = under hang
2323							;  1100   = under hang right end
2324							;  0110   = under hanr left  end
2325							;  0001 0 = left wall top end
2326							;  1001   = left wall
2327							;  1000   = 35
2328							;  11X1   = top left
2329							;  0XX1 1 = bottom left
2330							.as
2331							.xs
2332	.0c65	808c65					calcBCDEforTileY_88
2333	.0c65	808c65					_ASSERT_jsr
2334	.0c65	808c65					_ASSERT_axy8
2335	.0c65	808c65	84 0f		sty $0f			sty ZPTemp
2336	.0c67	808c67	84 10		sty $10			sty ZPTemp2
2337	.0c69	808c69	98		tya			tya
2338	.0c6a	808c6a	29 0f		and #$0f		and #15
2339	.0c6c	808c6c	d0 04		bne $808c72		bne _canDoLeft
2340	.0c6e	808c6e	a9 80		lda #$80			lda #$80					; can't do left on Negative
2341	.0c70	808c70	80 02		bra $808c74			bra +
2342	.0c72	808c72					_canDoLeft
2343	.0c72	808c72	a9 00		lda #$00		lda #0
2344	.0c74	808c74	85 12		sta $12		+	sta ZPTemp4
2345	.0c76	808c76	a5 0f		lda $0f			lda ZPTemp
2346	.0c78	808c78	29 0f		and #$0f		and #15
2347	.0c7a	808c7a	c9 0f		cmp #$0f		cmp #15
2348	.0c7c	808c7c	d0 04		bne $808c82		bne _canDoRight
2349	.0c7e	808c7e	a9 40		lda #$40			lda #$40					; can't do right on Overflow
2350	.0c80	808c80	85 12		sta $12				sta ZPTemp4
2351	.0c82	808c82					_canDoRight
2352	.0c82	808c82					END_LEFT_RIGHT_CHECK
2353	.0c82	808c82	a9 07		lda #$07		lda #1+2+4					; first 3 are empty ( it is inverted later)
2354	.0c84	808c84	85 11		sta $11			sta ZPTemp3
2355	.0c86	808c86	a4 0f		ldy $0f			ldy ZPTemp
2356	.0c88	808c88	c0 10		cpy #$10		cpy #kTileXCount
2357	.0c8a	808c8a	90 2b		bcc $808cb7		bcc _doneFirstRow		; if it is the first row than ALL of above is not solid
2358	.0c8c	808c8c	64 11		stz $11				stz ZPTemp3
2359	.0c8e	808c8e	98		tya				tya
2360									;sec ;from bcc above
2361	.0c8f	808c8f	e9 11		sbc #$11			sbc #kTileXCount+1	; so get -1x,-1y
2362	.0c91	808c91	85 10		sta $10				sta ZPTemp2
2363	.0c93	808c93	a8		tay				tay
2364	.0c94	808c94	24 12		bit $12				bit ZPTemp4				; test to see if we can do right
2365	.0c96	808c96	30 07		bmi $808c9f			bmi _noB					; no then skip B
2366	.0c98	808c98	20 48 8c	jsr $808c48				jsr tileIsWall_88
2367	.0c9b	808c9b	26 11		rol $11					rol ZPTemp3
2368	.0c9d	808c9d	80 03		bra $808ca2				bra _testC
2369	.0c9f	808c9f						_noB
2370	.0c9f	808c9f	38		sec				sec						; if there is no B then make it clear
2371	.0ca0	808ca0	26 11		rol $11				rol ZPTemp3
2372	.0ca2	808ca2						_testC
2373	.0ca2	808ca2	c8		iny				iny
2374	.0ca3	808ca3	20 48 8c	jsr $808c48			jsr tileIsWall_88
2375	.0ca6	808ca6	26 11		rol $11				rol ZPTemp3
2376	.0ca8	808ca8	c8		iny				iny
2377	.0ca9	808ca9	24 12		bit $12				bit ZPTemp4
2378	.0cab	808cab	70 07		bvs $808cb4			bvs _noRight
2379	.0cad	808cad	20 48 8c	jsr $808c48				jsr tileIsWall_88
2380	.0cb0	808cb0	26 11		rol $11					rol ZPTemp3
2381	.0cb2	808cb2	80 03		bra $808cb7				bra _doneFirstRow
2382	.0cb4	808cb4						_noRight
2383	.0cb4	808cb4	38		sec				sec						; make it as 1 so it gets 0 later
2384	.0cb5	808cb5	26 11		rol $11				rol ZPTemp3
2385	.0cb7	808cb7					_doneFirstRow
2386	.0cb7	808cb7	24 12		bit $12			bit ZPTemp4
2387	.0cb9	808cb9	30 0a		bmi $808cc5		bmi _noE						; check negative flag
2388	.0cbb	808cbb	a4 0f		ldy $0f				ldy ZPTemp
2389	.0cbd	808cbd	88		dey				dey
2390	.0cbe	808cbe	20 48 8c	jsr $808c48			jsr tileIsWall_88
2391	.0cc1	808cc1	26 11		rol $11				rol ZPTemp3
2392	.0cc3	808cc3	80 03		bra $808cc8			bra DoIndexCheck
2393	.0cc5	808cc5					_noE
2394	.0cc5	808cc5	38		sec			sec							; make it 1 so it gets 0 later
2395	.0cc6	808cc6	26 11		rol $11			rol ZPTemp3
2396	.0cc8	808cc8					DoIndexCheck
2397	.0cc8	808cc8	a5 11		lda $11			lda ZPTemp3
2398	.0cca	808cca	49 0f		eor #$0f		eor #$0F
2399	.0ccc	808ccc	a8		tay			tay
2400	.0ccd	808ccd					BCDEYVALUECHECK
2401	.0ccd	808ccd	b9 6b 8e	lda $808e6b,y		lda BCDELUT,y				; now we have the 5bit value of the case
2402	.0cd0	808cd0	30 06		bmi $808cd8		bmi _checkH					; 5th bit is stored in bit7
2403	.0cd2	808cd2						_writeMap
2404	.0cd2	808cd2	a4 0f		ldy $0f				ldy ZPTemp
2405	.0cd4	808cd4	99 94 02	sta $800294,y			sta tileMapTemp,y		; lower 4bits are the tile number
2406	.0cd7	808cd7	60		rts				rts
2407									;
2408	.0cd8	808cd8					_checkH
2409	.0cd8	808cd8	a5 0f		lda $0f			lda ZPTemp
2410	.0cda	808cda	18		clc			clc
2411	.0cdb	808cdb	69 10		adc #$10		adc #kTileXCount
2412	.0cdd	808cdd	a8		tay			tay
2413	.0cde	808cde	20 48 8c	jsr $808c48		jsr tileIsWall_88
2414	.0ce1	808ce1	b0 02		bcs $808ce5		bcs _HNotWall
2415	.0ce3	808ce3	a9 00		lda #$00			lda #kTiles.back
2416	.0ce5	808ce5					_HNotWall
2417	.0ce5	808ce5	a9 25		lda #$25		lda #kTiles.sideShadow
2418	.0ce7	808ce7	80 e9		bra $808cd2		bra _writeMap
2419								;

2421							.as
2422							.xs
2423	.0ce9	808ce9					clearTile
2424							; this will set a tile to empty and calc and required shadow
2425	.0ce9	808ce9					_ASSERT_jsr
2426	.0ce9	808ce9					_ASSERT_axy8
2427	.0ce9	808ce9	a4 15		ldy $15			ldy ActiveTileIndex
2428	.0ceb	808ceb	a9 00		lda #$00		lda #kTiles.back
2429	.0ced	808ced	99 94 02	sta $800294,y		sta tileMapTemp,y
2430	.0cf0	808cf0	20 65 8c	jsr $808c65		jsr calcBCDEforTileY_88 ; this sets it to be what it should be shadow wise
2431	.0cf3	808cf3	a4 15		ldy $15			ldy ActiveTileIndex
2432	.0cf5	808cf5	b9 94 02	lda $800294,y		lda tileMapTemp,y
2433	.0cf8	808cf8					pltSingleTile
2434							; plots map tile in A to ActiveTileIndex
2435	.0cf8	808cf8					_ASSERT_jsr
2436	.0cf8	808cf8					_ASSERT_axy8
2437	.0cf8	808cf8	aa		tax			tax
2438	.0cf9	808cf9	bd 7b 8e	lda $808e7b,x		lda toolToTileLUT,x
2439	.0cfc	808cfc					pltSingleTileNoLookup
2440							; plots the raw screen tile in A to ActiveTileIndex
2441	.0cfc	808cfc					_ASSERT_jsr
2442	.0cfc	808cfc					_ASSERT_axy8
2443	.0cfc	808cfc	48		pha			pha
2444	.0cfd	808cfd	a5 15		lda $15				lda ActiveTileIndex
2445	.0cff	808cff	20 45 8d	jsr $808d45			jsr convertIndexToScreenAndCRAM
2446	.0d02	808d02	68		pla			pla
2447	.0d03	808d03	20 07 8d	jsr $808d07		jsr renderTile_88
2448	.0d06	808d06	60		rts			rts

2450							.as
2451							.xs
2452							; a = tile num, Pointer2 = Screen, Pointer 3 = CRAM
2453	.0d07	808d07					renderTile_88
2454	.0d07	808d07					_ASSERT_jsr
2455	.0d07	808d07					_ASSERT_axy8
239:1	.0d07	808d07	c2 20		rep #$20		REP #$20
2457:4	.0d09	808d09	29 ff 00	and #$00ff			and #$ff
2458	.0d0c	808d0c	0a		asl a				asl a					; 16bit multiply
2459	.0d0d	808d0d	0a		asl a				asl a					; tile num x 4
2460									; clc					; must be empty
2461	.0d0e	808d0e	69 a3 8e	adc #$8ea3			adc #<>fileTiles	; offset by fileTiles
2462	.0d11	808d11	85 0c		sta $0c				sta Pointer4		; add the start of the map -> chars LUT table
2463	.0d13	808d13	a9 00 00	lda #$0000			lda #0
235:1	.0d16	808d16	e2 20		sep #$20		SEP #$20
2465:4	.0d18	808d18	b2 0c		lda ($0c)			lda (Pointer4)		; read 1st char
239:1	.0d1a	808d1a	c2 20		rep #$20		REP #$20
2467:4	.0d1c	808d1c	87 32		sta [$32]			sta [ZPLong]		; word Dest Char 1
235:1	.0d1e	808d1e	e2 20		sep #$20		SEP #$20
2469:4	.0d20	808d20	a0 01		ldy #$01			ldy #1
2470	.0d22	808d22	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 2nd char
2471	.0d24	808d24	a0 02		ldy #$02			ldy #2
239:1	.0d26	808d26	c2 20		rep #$20		REP #$20
2473:4	.0d28	808d28	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 2
235:1	.0d2a	808d2a	e2 20		sep #$20		SEP #$20
2475:4	.0d2c	808d2c	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 3rd char
2476	.0d2e	808d2e	a0 40		ldy #$40			ldy #64
239:1	.0d30	808d30	c2 20		rep #$20		REP #$20
2478:4	.0d32	808d32	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 3
235:1	.0d34	808d34	e2 20		sep #$20		SEP #$20
2480:4	.0d36	808d36	a0 03		ldy #$03			ldy #3
2481	.0d38	808d38	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 4th char
2482	.0d3a	808d3a	a0 42		ldy #$42			ldy #66
239:1	.0d3c	808d3c	c2 20		rep #$20		REP #$20
2484:4	.0d3e	808d3e	97 32		sta [$32],y			sta [ZPLong],y		; word Dest Char 4
235:1	.0d40	808d40	e2 20		sep #$20		SEP #$20
2486:4									; y can't be 0 at this point so we can use it to enable the screen update flag
2487	.0d42	808d42	84 36		sty $36				sty ScreenUpdateRequiredN0
2488	.0d44	808d44	60		rts				rts

2490							.as
2491							.xs
2492	.0d45	808d45					convertIndexToScreenAndCRAM
2493							;CRAM is a hold over from the C64 that stores the Colour info in another area
2494	.0d45	808d45					_ASSERT_jsr
2495	.0d45	808d45					_ASSERT_axy8
2496								; screen is 32 wide and 2 per char so we want to time y * 64
2497								; 2 lines per tile so y*128
2498	.0d45	808d45	85 14		sta $14			sta TempX
239:1	.0d47	808d47	c2 20		rep #$20		REP #$20
2500:4	.0d49	808d49	29 f0 00	and #$00f0		and #$00F0	; get y Part which is already x16
2501	.0d4c	808d4c	0a		asl a			asl a			; x32
2502	.0d4d	808d4d	0a		asl a			asl a			; x64
2503	.0d4e	808d4e	0a		asl a			asl a			; x128
2504								;clc			; upper bit had to be zero and still be 0
2505	.0d4f	808d4f	69 00 20	adc #$2000		adc #<>ScreenMirror
2506	.0d52	808d52	85 32		sta $32			sta ZPLong.loWord
2507	.0d54	808d54	a5 14		lda $14			lda TempX			; this over reads but doesn't matter
2508	.0d56	808d56	29 0f 00	and #$000f		and #$000F			; x = x * 2 and 2 bytes per char so *4
2509	.0d59	808d59	0a		asl a			asl a
2510	.0d5a	808d5a	0a		asl a			asl a
2511								;clc					; again asl will have set c to 0 100%
2512	.0d5b	808d5b	65 32		adc $32			adc ZPLong.loWord
2513	.0d5d	808d5d	85 32		sta $32			sta ZPLong.loWord
235:1	.0d5f	808d5f	e2 20		sep #$20		SEP #$20
2515:4	.0d61	808d61	a9 7e		lda #$7e		lda #`ScreenMirror
2516	.0d63	808d63	85 34		sta $34			sta ZPLong.bank
2517	.0d65	808d65	60		rts			rts

2519							.as
2520							.xs
2521							; returns Y into ZPTemp
2522	.0d66	808d66					convertIndexToEntSpriteXY
2523	.0d66	808d66					_ASSERT_jsr
2524	.0d66	808d66					_ASSERT_axy8
2525	.0d66	808d66	85 11		sta $11			sta ZPTemp3											; save full in temp3
2526	.0d68	808d68	29 f0		and #$f0		and #$f0												; mask of Y tile num
2527	.0d6a	808d6a	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x	; this is already x16 so save Y
2528	.0d6d	808d6d	85 0f		sta $0f			sta ZPTemp											; return it in ZPTemp
2529	.0d6f	808d6f	a5 11		lda $11			lda ZPTemp3											; load the original
2530	.0d71	808d71	29 0f		and #$0f		and #$0f												; mask of the X tile num
2531	.0d73	808d73	0a		asl a			asl a
2532	.0d74	808d74	0a		asl a			asl a
2533	.0d75	808d75	0a		asl a			asl a
2534	.0d76	808d76	0a		asl a			asl a													; x16
2535	.0d77	808d77	9d 86 03	sta $800386,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x	; store x
2536	.0d7a	808d7a	9e a7 03	stz $8003a7,x		stz mplexBuffer.xmsb+kEntsSpriteOffset,x	; to be sure sure
2537	.0d7d	808d7d	60		rts			rts

2539							.as
2540							.xs
2541	.0d7e	808d7e					convertLevelToTileMap_88
2542	.0d7e	808d7e					_ASSERT_JSR
2543	.0d7e	808d7e	9c 99 00	stz $800099			stz Bank80.LevelData.numKeysLeft			; we don't have any keys yet
2544	.0d81	808d81	9c 9a 00	stz $80009a			stz LevelData.totalKeys
2545	.0d84	808d84	9c 5e 02	stz $80025e			stz EntityData.numPipes						; or pipes
2546	.0d87	808d87	9c 67 02	stz $800267			stz EntityData.lastPipeUsed
239:1	.0d8a	808d8a	c2 20		rep #$20		REP #$20
2548:4	.0d8c	808d8c	a9 ff ff	lda #$ffff			lda #$FFFF
2549	.0d8f	808d8f	8d 9c 00	sta $80009c			sta LevelData.exitIndex						; and I don't know where the exits are
2550	.0d92	808d92	a9 94 02	lda #$0294			lda #<>tileMapTemp
2551	.0d95	808d95	85 06		sta $06				sta Pointer1									; this the location of the converted map data
2552	.0d97	808d97	ad 96 00	lda $800096			lda GameData.currLevel
2553	.0d9a	808d9a	0a		asl a				asl a												; don't care what the upper half is
2554	.0d9b	808d9b	aa		tax				tax												; this will only take 8 bits worth
2555	.0d9c	808d9c	bd fe a1	lda $80a1fe,x			lda LevelTable,x
2556	.0d9f	808d9f	85 08		sta $08				sta Pointer2									; this is the location of the raw level data
2557							; read level pointers
2558	.0da1	808da1	a0 00		ldy #$00			ldy #0
2559	.0da3	808da3	84 15		sty $15				sty ActiveTileIndex							; start at the top left
2560									;lda (Pointer2),y
2561									;clc
2562									;adc Pointer2
2563									;sta LevelKeyListPtrLo						; skip these pointers as no longer used
2564	.0da5	808da5	c8		iny				iny
2565									;lda (Pointer2),y
2566									;adc Pointer2+1
2567									;sta LevelKeyListPtrHi
2568	.0da6	808da6	c8		iny				iny
2569	.0da7	808da7	b1 08		lda ($08),y			lda (Pointer2),y								; we now have the pointer to the entity data for this map
2570	.0da9	808da9	18		clc				clc
2571	.0daa	808daa	65 08		adc $08				adc Pointer2									; which is relative to the start of this "level spec"
2572	.0dac	808dac	85 00		sta $00				sta EntityDataPointer
2573	.0dae	808dae	a5 08		lda $08				lda Pointer2
2574	.0db0	808db0	18		clc				clc
2575	.0db1	808db1	69 04 00	adc #$0004			adc #4											; skip over pointers
2576	.0db4	808db4	85 08		sta $08				sta Pointer2
235:1	.0db6	808db6	e2 20		sep #$20		SEP #$20
2578:4	.0db8	808db8	a9 0c		lda #$0c			lda #12											; level data has 12 rows
2579	.0dba	808dba	48		pha				pha												; save the counter on the stack
2580	.0dbb	808dbb	a0 00		ldy #$00	_row	ldy #0											; for the _row
2581	.0dbd	808dbd					_loop	; read in 16 bytes							; for the byte in the row
2582	.0dbd	808dbd	b1 08		lda ($08),y			lda (Pointer2),y								; read source map tile
2583	.0dbf	808dbf	c9 12		cmp #$12			cmp # kTiles.player							; player pos?
2584	.0dc1	808dc1	f0 3e		beq $808e01			beq _playerPos
2585	.0dc3	808dc3	c9 11		cmp #$11				cmp # kTiles.exit							; exit position
2586	.0dc5	808dc5	f0 4f		beq $808e16				beq _exitPos
2587	.0dc7	808dc7	c9 09		cmp #$09					cmp # kTiles.key1						; a key?
2588	.0dc9	808dc9	f0 3f		beq $808e0a					beq _key
2589	.0dcb	808dcb	c9 0a		cmp #$0a						cmp # kTiles.key2
2590	.0dcd	808dcd	f0 3b		beq $808e0a						beq _key
2591	.0dcf	808dcf	c9 0b		cmp #$0b							cmp # kTiles.key3
2592	.0dd1	808dd1	f0 37		beq $808e0a							beq _key
2593	.0dd3	808dd3	c9 0c		cmp #$0c								cmp # kTiles.key4
2594	.0dd5	808dd5	f0 33		beq $808e0a								beq _key
2595	.0dd7	808dd7	c9 13		cmp #$13									cmp # kTiles.pipe		; a pipe?
2596	.0dd9	808dd9	f0 50		beq $808e2b									beq _pipe
2597	.0ddb	808ddb	c9 14		cmp #$14										cmp # kTiles.diss	; a diss?
2598	.0ddd	808ddd	f0 33		beq $808e12										beq _dissBlock
2599																						; no covert and then push out
2600	.0ddf	808ddf					_cont
2601	.0ddf	808ddf	91 06		sta ($06),y			sta (Pointer1),y								; write the value
2602	.0de1	808de1	e6 15		inc $15				inc ActiveTileIndex							; next tile
2603	.0de3	808de3	c8		iny				iny
2604	.0de4	808de4	c0 10		cpy #$10			cpy #16											; done a whole row?
2605	.0de6	808de6	d0 d5		bne $808dbd			bne _loop
243:1	.0de8	808de8	c2 21		rep #$21		REP #$21
2607:4	.0dea	808dea	a5 08		lda $08				lda Pointer2									; pMapDataSrc += 16
2608	.0dec	808dec	69 10 00	adc #$0010			adc #16
2609	.0def	808def	85 08		sta $08				sta Pointer2
2610									;clc												; can't overflow the bank
2611	.0df1	808df1	a5 06		lda $06				lda Pointer1									; pTempMap += 16
2612	.0df3	808df3	69 10 00	adc #$0010			adc #16
2613	.0df6	808df6	85 06		sta $06				sta Pointer1
235:1	.0df8	808df8	e2 20		sep #$20		SEP #$20
2615:4	.0dfa	808dfa	68		pla				pla												; pull the Rows counter
2616	.0dfb	808dfb	3a		dec a				dec a
2617	.0dfc	808dfc	48		pha				pha												; save it again
2618	.0dfd	808dfd	d0 bc		bne $808dbb			bne _row											; no done, new row
2619	.0dff	808dff	68		pla				pla												; pull counter of stack
2620	.0e00	808e00	60		rts				rts
2621									;
2622	.0e01	808e01					_playerPos
2623	.0e01	808e01	a5 15		lda $15				lda ActiveTileIndex
2624	.0e03	808e03	8d 9b 00	sta $80009b			sta LevelData.playerIndex					; record this tile as the tile player starts on
2625	.0e06	808e06	a9 00		lda #$00			lda #kTiles.back								; but draw an empty tile on the map
2626	.0e08	808e08	80 d5		bra $808ddf			bra _cont
2627									;
2628	.0e0a	808e0a	ee 99 00	inc $800099	_key	inc LevelData.numKeysLeft
2629	.0e0d	808e0d	ee 9a 00	inc $80009a			inc LevelData.totalKeys						; increase total amount of keys
2630	.0e10	808e10	80 cd		bra $808ddf			bra _cont
2631									;
2632	.0e12	808e12					_dissBlock
2633	.0e12	808e12	a9 14		lda #$14			lda #kTiles.diss								; convert this to a diss full block
2634	.0e14	808e14	80 c9		bra $808ddf			bra _cont
2635									;
2636	.0e16	808e16					_exitPos
2637	.0e16	808e16	a5 15		lda $15				lda ActiveTileIndex
2638	.0e18	808e18	ae 9c 00	ldx $80009c			ldx LevelData.exitIndex						; is this the first or second exit for this map
2639	.0e1b	808e1b	e0 ff		cpx #$ff			cpx #$FF
2640	.0e1d	808e1d	d0 05		bne $808e24			bne _2nd
2641	.0e1f	808e1f	8d 9c 00	sta $80009c				sta LevelData.exitIndex					; first
2642	.0e22	808e22	80 03		bra $808e27				bra +
2643										;
2644	.0e24	808e24	8d 9d 00	sta $80009d	_2nd	sta LevelData.exitIndex+1					; second
2645	.0e27	808e27	a9 11		lda #$11	+		lda #kTiles.exit								; draw a door at this tile
2646	.0e29	808e29	80 b4		bra $808ddf			bra _cont
2647									;
2648	.0e2b	808e2b					_pipe
2649	.0e2b	808e2b	ae 5e 02	ldx $80025e			ldx EntityData.numPipes						; current next pipe
2650	.0e2e	808e2e	a5 15		lda $15				lda ActiveTileIndex
2651	.0e30	808e30	38		sec				sec
2652	.0e31	808e31	e9 10		sbc #$10			sbc #16											; bubbles spawn at the tile above the pipe
2653	.0e33	808e33	9d 5f 02	sta $80025f,x			sta EntityData.pipeIndex,x
2654	.0e36	808e36	e8		inx				inx
2655	.0e37	808e37	8e 5e 02	stx $80025e			stx EntityData.numPipes						; count this pipe
2656	.0e3a	808e3a	a9 13		lda #$13			lda #kTiles.pipe								; draw a pipe
2657	.0e3c	808e3c	80 a1		bra $808ddf			bra _cont
2658									;

2660							.as
2661							.xs
2662	.0e3e	808e3e					countTempMapTile_88
2663							; how many of A is in the live map?
2664							; returned in A
2665	.0e3e	808e3e					_ASSERT_jsr
2666	.0e3e	808e3e					_ASSERT_axy8
2667	.0e3e	808e3e	a2 bf		ldx #$bf		ldx # kLevelSizeMax-1	; for all tiles
2668	.0e40	808e40	a0 00		ldy #$00		ldy #0
2669	.0e42	808e42					_loop
2670	.0e42	808e42	dd 94 02	cmp $800294,x		cmp tileMapTemp,x			; is this it?
2671	.0e45	808e45	d0 01		bne $808e48		bne _skip
2672	.0e47	808e47	c8		iny				iny						; count it
2673	.0e48	808e48					_skip
2674	.0e48	808e48	ca		dex			dex
2675	.0e49	808e49	e0 ff		cpx #$ff		cpx #$ff						; until done
2676	.0e4b	808e4b	d0 f5		bne $808e42		bne _loop
2677	.0e4d	808e4d	98		tya			tya
2678	.0e4e	808e4e	60		rts			rts

2680							.as
2681							.xs
2682	.0e4f	808e4f					removeAllTilesOf_88
2683	.0e4f	808e4f					_ASSERT_jsr
2684	.0e4f	808e4f					_ASSERT_axy8
2685	.0e4f	808e4f	85 13		sta $13			sta ZPTemp5							; cache tile I want to remove
2686	.0e51	808e51	a2 00		ldx #$00		ldx #0
2687	.0e53	808e53	86 15		stx $15			stx ActiveTileIndex				; start at top left
2688	.0e55	808e55					_loop
2689	.0e55	808e55	bd 94 02	lda $800294,x		lda tileMapTemp,x					; if tile[ActiveTileIndex] == tileToRemove
2690	.0e58	808e58	c5 13		cmp $13			cmp ZPTemp5
2691	.0e5a	808e5a	d0 06		bne $808e62		bne _next
2692	.0e5c	808e5c	20 e9 8c	jsr $808ce9			jsr clearTile					; clear it to "back"
2693	.0e5f	808e5f	20 89 a0	jsr $80a089			jsr CheckForShadowPlots		; check to see if it needs to be shadowed
2694	.0e62	808e62					_next
2695	.0e62	808e62	e6 15		inc $15			inc ActiveTileIndex
2696	.0e64	808e64	a6 15		ldx $15			ldx ActiveTileIndex
2697	.0e66	808e66	e0 c0		cpx #$c0		cpx # kLevelSizeMax
2698	.0e68	808e68	d0 eb		bne $808e55		bne _loop
2699	.0e6a	808e6a	60		rts			rts

2701	>0e6b	808e6b	00				BCDELUT	.byte $00							; 0000
2702	>0e6c	808e6c	25						.byte kTiles.sideShadow				; 0001
2703	>0e6d	808e6d	00						.byte $00								; 0010
2704	>0e6e	808e6e	25						.byte kTiles.sideShadow				; 0011
2705	>0e6f	808e6f	22						.byte kTiles.underHangStart		; 0100
2706	>0e70	808e70	27						.byte kTiles.topLeftCorner			; 0101
2707	>0e71	808e71	22						.byte kTiles.underHangStart		; 0110
2708	>0e72	808e72	25						.byte kTiles.sideShadow				; 0111
2709	>0e73	808e73	24						.byte kTiles.shadowOpenCorner		; 1000
2710	>0e74	808e74	26						.byte kTiles.middlesideShadow		; 1001
2711	>0e75	808e75	24						.byte kTiles.shadowOpenCorner		; 1010
2712	>0e76	808e76	25						.byte kTiles.sideShadow				; 1011
2713	>0e77	808e77	23						.byte kTiles.underHang				; 1100
2714	>0e78	808e78	27						.byte kTiles.topLeftCorner			; 1101
2715	>0e79	808e79	23						.byte kTiles.underHang				; 1110
2716	>0e7a	808e7a	27						.byte kTiles.topLeftCorner			; 1111

2718									; back
2719									; wall,wall1,wall2,wall3,wall4
2720									; spike,flower,fruit
2721									; key1,key2,key3,key4
2722									; shield,spring,potion,egg
2723									; exit,something,something,
2724									; diss + 13
2725	.0e7b	808e7b					toolToTileLUT
2726	>0e7b	808e7b	00					.byte 0
2727	>0e7c	808e7c	01 01 01 01 01				.byte 1,1,1,1,1
2728	>0e81	808e81	02 03 04				.byte 2,3,4
2729	>0e84	808e84	05 05 05 05				.byte 5,5,5,5
2730	>0e88	808e88	06 07 08 09				.byte 6,7,8,9
2731	>0e8c	808e8c	0a 0f 10				.byte 10,15,16
2732	>0e8f	808e8f	11 12 13 14 15 16 17 18			.byte 17,18,19,20,21,22,23,24,25,26,27,28,29,30 ; diss cont
	>0e97	808e97	19 1a 1b 1c 1d 1e
2733	>0e9d	808e9d	1f 20 21 22 23 24			.byte 31,32,33,34,35,36

2735							; tile logic number, doesn't convert to the 4 tiles displayed on the screen 1:1
2736							; so I just made a LUT
2737	.0ea3	808ea3					fileTiles

2739							linerTile4 .macro				; this makes .byte a,a+1,a+2,a+3
2741							.endm
2740	>0ea3	808ea3	00 01 02 03				.byte 0*4+range(4)
2740	>0ea7	808ea7	10 11 12 13				.byte 4*4+range(4)
2740	>0eab	808eab	38 39 3a 3b				.byte 14*4+range(4)
2740	>0eaf	808eaf	44 45 46 47				.byte 17*4+range(4)
2740	>0eb3	808eb3	30 31 32 33				.byte 12*4+range(4)
2740	>0eb7	808eb7	3c 3d 3e 3f				.byte 15*4+range(4)
2740	>0ebb	808ebb	48 49 4a 4b				.byte 18*4+range(4)
2740	>0ebf	808ebf	4c 4d 4e 4f				.byte 19*4+range(4)
2740	>0ec3	808ec3	50 51 52 53				.byte 20*4+range(4)
2740	>0ec7	808ec7	54 55 56 57				.byte 21*4+range(4)
2740	>0ecb	808ecb	40 41 42 43				.byte 16*4+range(4)
2753	>0ecf	808ecf	c1 c2 c3 c4			.byte 193,194,195,196 ; exit open frame 1
2754	>0ed3	808ed3	c5 c6 c7 c8			.byte 197,198,199,200 ; exit open frame 2
2755	>0ed7	808ed7	c5 c9 c7 ca			.byte 197,201,199,202 ; exit open frame 3
2756	>0edb	808edb	c5 c9 c7 cb			.byte 197,201,199,203 ; exit open frame 4
2740	>0edf	808edf	40 41 42 43				.byte 16*4+range(4)
2740	>0ee3	808ee3	34 35 36 37				.byte 13*4+range(4)
2740	>0ee7	808ee7	14 15 16 17				.byte 5*4+range(4)
2760	>0eeb	808eeb	14 15 18 19			.byte 20,21,24,25
2761	>0eef	808eef	14 15 1a 1b			.byte 20,21,26,27
2762	>0ef3	808ef3	14 15 1c 1d			.byte 20,21,28,29
2763	>0ef7	808ef7	14 15 1e 1f			.byte 20,21,30,31
2764	>0efb	808efb	14 15 20 21			.byte 20,21,32,33
2765	>0eff	808eff	14 15 0e 0f			.byte 20,21,14,15
2766	>0f03	808f03	22 23 0e 0f			.byte 34,35,14,15
2767	>0f07	808f07	24 25 0e 0f			.byte 36,37,14,15
2768	>0f0b	808f0b	26 27 0e 0f			.byte 38,39,14,15
2769	>0f0f	808f0f	28 29 0e 0f			.byte 40,41,14,15
2770	>0f13	808f13	2a 2b 0e 0f			.byte 42,43,14,15
2771	>0f17	808f17	2c 2d 0e 0f			.byte 44,45,14,15
2772	>0f1b	808f1b	0c 0d 0e 0f			.byte 12,13,14,15 ; DISS End
2773	>0f1f	808f1f	04 05 02 03			.byte 4,5,2,3 ; underhang start
2774	>0f23	808f23	07 05 02 03			.byte 7,5,2,3 ; underhang
2775	>0f27	808f27	08 01 02 03			.byte 8,1,2,3 ; shadow open corner
2776	>0f2b	808f2b	09 01 0b 03			.byte 9,1,11,3 ; side shadow
2777	>0f2f	808f2f	0a 01 0b 03			.byte 10,1,11,3 ; middlesideShadow
2778	>0f33	808f33	06 05 0b 03			.byte 6,5,11,3 ; topLeftCorner
2779	>0f37	808f37	7c 7d 7e 7f			.byte 124,125,126,127 ; old wall for intermission

2781							; ----- @Player Routines@ -----

2783	.0f3b	808f3b					kPlayerState .block
2784	=0							appear = 0
2785	=1							normal = 1
2786	=2							flap = 2
2787	=3							jump = 3
2788	=4							exit = 4
2789	=5							dead = 5
2790							.bend

2792	.0f3b	808f3b					kPlayerAnimsIndex .block
2793	=0							standRight = 0
2794	=1							standLeft = 1
2795	=2							standWalkRight = 2
2796	=3							standWalkLeft = 3
2797	=4							jumpRight = 4
2798	=5							jumpLeft = 5
2799	=6							flapRight = 6
2800	=7							flapLeft = 7
2801	=8							dead = 8
2802	=9							exit = 9
2803							.bend

2805	.0f3b	808f3b					kJumpIndexs .block
2806	=0							normal = 0
2807	=2							floaty = 2
2808							.bend

2810	.0f3b	808f3b					kPlayerParams .block
2811	=254							jumpStartDelta = 255-1
2812	=19							jumpDeltaAccum = 19
2813	=4							jumpDeltaAccumFloat = 4
2814	=4							maxFallSpeed = 4
2815							.bend

2817	.0f3b	808f3b					kPlayerStateExit .block
2818	=0							waitForAnimation = 0
2819							.bend

2821	.0f3b	808f3b					kPlayerStateDeath .block
2822	=0							animate = 0
2823							.bend

2825	.0f3b	808f3b					kIntermission .block
2826	=80							firstExit = kTileXCount*5
2827	=95							secondExit = (kTileXCount*6)-1
2828							.bend

2830	.0f3b	808f3b					joyToPlayerDelta_88
2831	.0f3b	808f3b					_ASSERT_jsr
2832	.0f3b	808f3b					_ASSERT_axy8
239:1	.0f3b	808f3b	c2 20		rep #$20		REP #$20
2834:4	.0f3d	808f3d	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck
2835	.0f40	808f40	9c 8c 02	stz $80028c		stz checkSpriteToCharData.yDeltaCheck				; clear movement deltas
235:1	.0f43	808f43	e2 20		sep #$20		SEP #$20
2837:4	.0f45	808f45	9c af 00	stz $8000af		stz PlayerData.movingLRNZ								; assmue we are not moving
2838	.0f48	808f48	ad 7b 00	lda $80007b		lda joyLeft
2839	.0f4b	808f4b	0d 7c 00	ora $80007c		ora joyRight
2840	.0f4e	808f4e	f0 63		beq $808fb3		beq _noLR													; any X input
2841	.0f50	808f50	ad 7b 00	lda $80007b			lda joyLeft												; was it left?
2842	.0f53	808f53	d0 2d		bne $808f82			bne _left
2843	.0f55	808f55	ad b0 00	lda $8000b0				lda PlayerData.slowMoveNZ						; right, are we in slow move?
2844	.0f58	808f58	f0 03		beq $808f5d				beq +
2845	.0f5a	808f5a	a9 01		lda #$01					lda #1
2846	>0f5c	808f5c	2c								.byte $2c										; bit XXXX this is a trick to skip 2 bytes, so lda skip next lda
2847	.0f5d	808f5d	a9 02		lda #$02		+		lda #2
2848	.0f5f	808f5f	8d 8a 02	sta $80028a				sta checkSpriteToCharData.xDeltaCheck		; set delta to check
2849	.0f62	808f62	ad 7c 00	lda $80007c				lda joyRight
2850	.0f65	808f65	2d 80 00	and $800080				and oldJoyLeft
2851	.0f68	808f68	f0 0d		beq $808f77				beq _fullSpeedRight								; we were already going right
2852	.0f6a	808f6a	ad aa 00	lda $8000aa					lda PlayerData.OnGroundNZ					; slow for opposite only happens in the air
2853	.0f6d	808f6d	d0 03		bne $808f72					bne _clearSpeedRight
2854	.0f6f	808f6f	a9 01		lda #$01						lda #1
2855	>0f71	808f71	2c									.byte $2c									; bit XXXX skip 2 bytes
2856	.0f72	808f72							_clearSpeedRight
2857	.0f72	808f72	a9 00		lda #$00				lda #0
2858	.0f74	808f74	8d b0 00	sta $8000b0				sta PlayerData.slowMoveNZ						; store speed state
2859	.0f77	808f77					_fullSpeedRight
2860	.0f77	808f77	a9 01		lda #$01		lda #1
2861	.0f79	808f79	8d af 00	sta $8000af		sta PlayerData.movingLRNZ								; we are moving
2862	.0f7c	808f7c	3a		dec a			dec a ; a = 0
2863	.0f7d	808f7d	20 a8 90	jsr $8090a8		jsr changePlayerDir										; set player to right
2864	.0f80	808f80	80 39		bra $808fbb		gra _endLR
2865								;
2866	.0f82	808f82					_left
2867	.0f82	808f82	ad b0 00	lda $8000b0		lda PlayerData.slowMoveNZ
2868	.0f85	808f85	f0 03		beq $808f8a		beq +
2869	.0f87	808f87	a9 ff		lda #$ff			lda #-1
2870	>0f89	808f89	2c						.byte $2c ; bit
2871	.0f8a	808f8a	a9 fe		lda #$fe	+	lda #-2
2872	.0f8c	808f8c	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck				; set x delta to -1/-2 depending on speed
2873	.0f8f	808f8f	a9 ff		lda #$ff		lda #$ff
2874	.0f91	808f91	8d 8b 02	sta $80028b		sta checkSpriteToCharData.xDeltaCheck.hi			; sign extend
2875	.0f94	808f94	ad 7b 00	lda $80007b		lda joyLeft
2876	.0f97	808f97	2d 81 00	and $800081		and oldJoyRight
2877	.0f9a	808f9a	f0 0d		beq $808fa9		beq _fullSpeedLeft										; we were already going left
2878	.0f9c	808f9c	ad aa 00	lda $8000aa			lda PlayerData.OnGroundNZ
2879	.0f9f	808f9f	d0 03		bne $808fa4			bne _clearSpeedLeft
2880	.0fa1	808fa1	a9 01		lda #$01				lda #1
2881	>0fa3	808fa3	2c							.byte $2c											; bit XXXX skip 2 bytes
2882	.0fa4	808fa4					_clearSpeedLeft
2883	.0fa4	808fa4	a9 00		lda #$00			lda #0
2884	.0fa6	808fa6	8d b0 00	sta $8000b0			sta PlayerData.slowMoveNZ							; set speed
2885	.0fa9	808fa9					_fullSpeedLeft
2886	.0fa9	808fa9	a9 01		lda #$01		lda #1
2887	.0fab	808fab	8d af 00	sta $8000af		sta PlayerData.movingLRNZ								; we are moving
2888	.0fae	808fae	20 a8 90	jsr $8090a8		jsr changePlayerDir										; make sure we are facing left
2889	.0fb1	808fb1	80 08		bra $808fbb		bra _endLR
2890								;
2891	.0fb3	808fb3					_noLR
2892	.0fb3	808fb3	a9 80		lda #$80		lda #$80
2893	.0fb5	808fb5	8d ae 00	sta $8000ae		sta PlayerData.startedJumpLR							; we are not jumping LR
2894	.0fb8	808fb8	9c b0 00	stz $8000b0		stz PlayerData.slowMoveNZ								; clear slow move
2895	.0fbb	808fbb					_endLR
2896	.0fbb	808fbb	ad af 00	lda $8000af		lda PlayerData.movingLRNZ								; are we moving LR?
2897	.0fbe	808fbe	d0 06		bne $808fc6		bne +
2898	.0fc0	808fc0	ad ad 00	lda $8000ad			lda PlayerData.facingRight
2899	.0fc3	808fc3	20 a8 90	jsr $8090a8			jsr changePlayerDir									; make sure the facing is updated
2900	.0fc6	808fc6	ad aa 00	lda $8000aa	+	lda PlayerData.OnGroundNZ
2901	.0fc9	808fc9	2d 85 00	and $800085		and joyUpStart
2902	.0fcc	808fcc	0d b2 00	ora $8000b2		ora PlayerData.forceJumpNZ
2903	.0fcf	808fcf	d0 4d		bne $80901e		bne StartJump												; if (onGround && JoyUpStart) || forceJump then jump
2904	.0fd1	808fd1	ad aa 00	lda $8000aa			lda PlayerData.OnGroundNZ
2905	.0fd4	808fd4	d0 28		bne $808ffe			bne OnGround
2906	.0fd6	808fd6	ad b4 00	lda $8000b4				lda PlayerData.yDeltaAccum.hi					;if inAir then update Y speed
2907	.0fd9	808fd9	10 17		bpl $808ff2				bpl falling
2908	.0fdb	808fdb	9c ac 00	stz $8000ac					stz PlayerData.isFallingNZ					; if ySpeedDelta -ve then we are going up
2909	.0fde	808fde	ad ab 00	lda $8000ab					lda PlayerData.hasJumpedNZ					; if this is 1
2910	.0fe1	808fe1	2d 86 00	and $800086					and joyUpStop									; and the player has let go
2911	.0fe4	808fe4	d0 2d		bne $809013					bne AbortJump									; abort jump and start falling
2912											; we are in air then
2913	.0fe6	808fe6					normalJumpUpdate
2914	.0fe6	808fe6	a2 00		ldx #$00		ldx #kJumpIndexs.normal									; nope just jumping not special
2915	.0fe8	808fe8					customJumpUpdate
2916	.0fe8	808fe8	20 d0 90	jsr $8090d0		jsr incPlayerYDeltaAndReturn							; update the jump parabola
2917	.0feb	808feb	ad b4 00	lda $8000b4		lda PlayerData.yDeltaAccum.hi
2918	.0fee	808fee	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck				; take the upper 8 bits as the Y delta
2919	.0ff1	808ff1	60		rts			rts

2921	.0ff2	808ff2					falling
2922	.0ff2	808ff2					_ASSERT_axy8
2923	.0ff2	808ff2	a9 01		lda #$01		lda #1
2924	.0ff4	808ff4	8d ac 00	sta $8000ac		sta PlayerData.isFallingNZ								; make sure we mark we are falling
2925	.0ff7	808ff7	ad a8 00	lda $8000a8		lda PlayerData.canFloatNZ								; if I can't float
2926							;	ora PasswordHaveSpring
2927	.0ffa	808ffa	f0 ea		beq $808fe6		beq normalJumpUpdate										; handle it as normal
2928	.0ffc	808ffc	80 47		bra $809045			bra handleFall											; else start fall

2930	.0ffe	808ffe					OnGround
2931	.0ffe	808ffe					_ASSERT_axy8
2932	.0ffe	808ffe	a9 01		lda #$01		lda #kPlayerState.normal
2933	.1000	809000	8d a2 00	sta $8000a2		sta PlayerData.state										; back to normal
2934	.1003	809003	ad b1 00	lda $8000b1		lda PlayerData.hitBubbleNum							; unless I landed on a bubble
2935	.1006	809006	f0 03		beq $80900b		beq _skip
2936	.1008	809008	a9 ff		lda #$ff			lda #-1													; in which case move me up 1 with it, probably should be a constant
2937	>100a	80900a	2c						.byte $2c												; skip XXXX
2938	.100b	80900b					_skip
2939	.100b	80900b	a9 01		lda #$01		lda #1														; check into the ground to make sure I'm still standing on some
2940	.100d	80900d	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck
2941	.1010	809010	4c ab 90	jmp $8090ab		jmp changePlayerAnimForCurrentDir					; update any facing direction as needed
2942							;	rts

2944	.1013	809013					AbortJump
2945	.1013	809013					_ASSERT_axy8
2946	.1013	809013	a9 80		lda #$80		lda #$80
2947	.1015	809015	8d b3 00	sta $8000b3		sta PlayerData.yDeltaAccum.lo
2948	.1018	809018	a9 ff		lda #$ff		lda #$FF
2949	.101a	80901a	8d b4 00	sta $8000b4		sta PlayerData.yDeltaAccum.hi							; set to hash fall speed -1.5
2950	.101d	80901d	60		rts			rts

2952	.101e	80901e					StartJump
2953	.101e	80901e					_ASSERT_axy8
2954	.101e	80901e	a9 01		lda #$01		lda #1
2955	.1020	809020	8d ab 00	sta $8000ab		sta PlayerData.hasJumpedNZ								; we are jumping
2956	.1023	809023	a9 03		lda #$03		lda #kPlayerState.jump
2957	.1025	809025	8d a2 00	sta $8000a2		sta PlayerData.state										; enter the jump state
2958	.1028	809028	9c ac 00	stz $8000ac		stz PlayerData.isFallingNZ								; not falling
2959	.102b	80902b	9c aa 00	stz $8000aa		stz PlayerData.OnGroundNZ								; not on the ground
2960	.102e	80902e	9c b3 00	stz $8000b3		stz PlayerData.yDeltaAccum.lo							; set the Y jump accleration
2961	.1031	809031	9c b2 00	stz $8000b2		stz PlayerData.forceJumpNZ
2962	.1034	809034	a9 50		lda #$50		lda #kTimers.floatTimer									; reset the float timer
2963	.1036	809036	8d a9 00	sta $8000a9		sta PlayerData.floatTimer
2964	.1039	809039	a9 fe		lda #$fe		lda #kPlayerParams.jumpStartDelta					; set the upper half of jump accleration
2965	.103b	80903b	8d b4 00	sta $8000b4		sta PlayerData.yDeltaAccum.hi
2966	.103e	80903e	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck				; which is also how much we are moving this frame
2967	.1041	809041	20 ab 90	jsr $8090ab		jsr changePlayerAnimForCurrentDir					; update the animation
2968							;	ldx #kSFX.jump
2969							;	jmp playSFX
2970	.1044	809044	60		rts			rts

2972	.1045	809045					handleFall
2973	.1045	809045					_ASSERT_axy8
2974	.1045	809045	ad a2 00	lda $8000a2		lda PlayerData.state
2975	.1048	809048	c9 03		cmp #$03		cmp #kPlayerState.jump
2976	.104a	80904a	d0 0c		bne $809058		bne _didntJustStartFalling								; are we still "jumping"
2977	.104c	80904c	ad 7d 00	lda $80007d			lda joyUp												; if we just start falling, and joy is up and we have spring float
2978	.104f	80904f	f0 07		beq $809058			beq _didntJustStartFalling							; if we don't have the spring we don't to this function.
2979	.1051	809051	a9 02		lda #$02				lda #kPlayerState.flap
2980	.1053	809053	8d a2 00	sta $8000a2				sta PlayerData.state								; enter flap state
2981	.1056	809056	80 14		bra $80906c				bra _dontStopFloat
2982										;
2983	.1058	809058					_didntJustStartFalling
2984	.1058	809058	ad a2 00	lda $8000a2		lda PlayerData.state
2985	.105b	80905b	c9 02		cmp #$02		cmp #kPlayerState.flap
2986	.105d	80905d	d0 1d		bne $80907c		bne _checkUpStart											; if we are falling, and not already flapping check up
2987	.105f	80905f	ad 86 00	lda $800086			lda joyUpStop
2988	.1062	809062	f0 08		beq $80906c			beq _dontStopFloat									; did we just release up?
2989	.1064	809064	a9 03		lda #$03				lda #kPlayerState.jump
2990	.1066	809066	8d a2 00	sta $8000a2				sta PlayerData.state								; we are now just "jumping" and handle as normal
2991	.1069	809069	4c e6 8f	jmp $808fe6				jmp normalJumpUpdate
2992	.106c	80906c					_dontStopFloat
2993	.106c	80906c	ad a9 00	lda $8000a9		lda PlayerData.floatTimer								; can we still "float"
2994	.106f	80906f	10 03		bpl $809074		bpl +
2995	.1071	809071	4c e6 8f	jmp $808fe6			jmp normalJumpUpdate									; nope, go back to normal to fall
2996	.1074	809074	ce a9 00	dec $8000a9	+	dec PlayerData.floatTimer
2997	.1077	809077	a2 02		ldx #$02		ldx #kJumpIndexs.floaty
2998	.1079	809079	4c e8 8f	jmp $808fe8		jmp customJumpUpdate										; do a floaty jump then
2999								;
3000	.107c	80907c					_checkUpStart
3001	.107c	80907c	ad 85 00	lda $800085		lda joyUpStart
3002	.107f	80907f	d0 03		bne $809084		bne +
3003	.1081	809081	4c e6 8f	jmp $808fe6			jmp normalJumpUpdate									; no up don't enter float so carry on as normal
3004	.1084	809084	a9 02		lda #$02	+	lda #kPlayerState.flap
3005	.1086	809086	8d a2 00	sta $8000a2		sta PlayerData.state
3006	.1089	809089	a2 02		ldx #$02		ldx #kJumpIndexs.floaty
3007	.108b	80908b	4c e8 8f	jmp $808fe8		jmp customJumpUpdate										; enter float state and do floaty jump

3009	.108e	80908e					enterOnGround
3010	.108e	80908e					_ASSERT_jsr
3011	.108e	80908e					_ASSERT_axy8
3012	.108e	80908e	a9 01		lda #$01		lda #kPlayerState.normal ; == 1
3013	.1090	809090	8d a2 00	sta $8000a2		sta PlayerData.state
3014								.cerror kPlayerState.normal != 1, "need to add lda #1"
3015	.1093	809093	8d aa 00	sta $8000aa		sta PlayerData.OnGroundNZ								; we are now in normal mode and on the ground
3016	.1096	809096	8d b3 00	sta $8000b3		sta PlayerData.yDeltaAccum.lo							; tiny bit down
3017	.1099	809099	9c ab 00	stz $8000ab		stz PlayerData.hasJumpedNZ								; not jumping, or falling, or moving slow
3018	.109c	80909c	9c ac 00	stz $8000ac		stz PlayerData.isFallingNZ
3019	.109f	80909f	9c b4 00	stz $8000b4		stz PlayerData.yDeltaAccum.hi
3020	.10a2	8090a2	9c b0 00	stz $8000b0		stz PlayerData.slowMoveNZ
3021	.10a5	8090a5	ad ad 00	lda $8000ad		lda PlayerData.facingRight								; set the right direction and update animation to standing
3022								; fall through
3023	.10a8	8090a8					changePlayerDir
3024	.10a8	8090a8					_ASSERT_axy8
3025	.10a8	8090a8	8d ad 00	sta $8000ad		sta PlayerData.facingRight
3026	.10ab	8090ab					changePlayerAnimForCurrentDir
3027	.10ab	8090ab					_ASSERT_axy8
3028	.10ab	8090ab	ad a2 00	lda $8000a2		lda PlayerData.state
3029	.10ae	8090ae	c9 02		cmp #$02		cmp #kPlayerState.flap									; if flap then flap animation
3030	.10b0	8090b0	d0 04		bne $8090b6		bne _notFlap
3031	.10b2	8090b2	a9 06		lda #$06			lda #kPlayerAnimsIndex.flapRight
3032	.10b4	8090b4	80 14		bra $8090ca			bra _still
3033									;
3034	.10b6	8090b6					_notFlap
3035	.10b6	8090b6	ad aa 00	lda $8000aa		lda PlayerData.OnGroundNZ								; else if not on ground, jump animation
3036	.10b9	8090b9	d0 04		bne $8090bf		bne _onGround
3037	.10bb	8090bb	a9 04		lda #$04			lda #kPlayerAnimsIndex.jumpRight
3038	.10bd	8090bd	80 0b		bra $8090ca			bra _still
3039									;
3040	.10bf	8090bf					_onGround
3041	.10bf	8090bf	ad af 00	lda $8000af		lda PlayerData.movingLRNZ								; else if moving, walk animation
3042	.10c2	8090c2	f0 04		beq $8090c8		beq _notMoving
3043	.10c4	8090c4	a9 02		lda #$02			lda #kPlayerAnimsIndex.standWalkRight
3044	.10c6	8090c6	80 02		bra $8090ca			bra _still
3045	.10c8	8090c8					_notMoving
3046	.10c8	8090c8	a9 00		lda #$00		lda #kPlayerAnimsIndex.standRight					; else stand animation
3047	.10ca	8090ca					_still
3048	.10ca	8090ca	18		clc			clc
3049	.10cb	8090cb	6d ad 00	adc $8000ad		adc PlayerData.facingRight								; convert to left if needed
3050	.10ce	8090ce	80 1d		bra $8090ed		gra setPlayerAnimeTo_88
3051								;rts ;above is now a jmp


3054	.10d0	8090d0					incPlayerYDeltaAndReturn
3055	.10d0	8090d0					_ASSERT_jsr
3056	.10d0	8090d0					_ASSERT_axy8
239:1	.10d0	8090d0	c2 20		rep #$20		REP #$20
3058:4	.10d2	8090d2	ad b3 00	lda $8000b3		lda PlayerData.yDeltaAccum								; yDelta += JumpSpeed[normal/float]
3059	.10d5	8090d5	18		clc			clc
3060	.10d6	8090d6	7d f8 91	adc $8091f8,x		adc PlayerJumpLUT,x
3061	.10d9	8090d9	8d b3 00	sta $8000b3		sta PlayerData.yDeltaAccum
235:1	.10dc	8090dc	e2 20		sep #$20		SEP #$20
3063:4	.10de	8090de	ad b4 00	lda $8000b4		lda PlayerData.yDeltaAccum.hi
3064	.10e1	8090e1	30 06		bmi $8090e9		bmi +															; if negative then we are fine
3065	.10e3	8090e3	c9 04		cmp #$04			cmp # kPlayerParams.maxFallSpeed					; has the hi reached max fall velocity
3066	.10e5	8090e5	90 02		bcc $8090e9			bcc +														; nope
3067	.10e7	8090e7	a9 04		lda #$04				lda # kPlayerParams.maxFallSpeed				; yes clip it, however lo remains untouched
3068	.10e9	8090e9	8d b4 00	sta $8000b4	+	sta PlayerData.yDeltaAccum.hi							; so fall can be a bit random
3069	.10ec	8090ec	60		rts			rts

3071							.as
3072							.xs
3073	.10ed	8090ed					setPlayerAnimeTo_88
3074	.10ed	8090ed					_ASSERT_jsr
3075	.10ed	8090ed					_ASSERT_axy8
3076	.10ed	8090ed	cd b5 00	cmp $8000b5		cmp PlayerData.currAnim									; if already in this state don't change
3077	.10f0	8090f0	f0 0d		beq $8090ff		beq _dontchange											; this way I can just always do a "change anim"
3078	.10f2	8090f2	8d b5 00	sta $8000b5			sta PlayerData.currAnim								; and it won't muck the animation up
3079	.10f5	8090f5	aa		tax				tax
3080	.10f6	8090f6	bd ee 91	lda $8091ee,x			lda PlayerFrameData.animFrameRate,x				; read the frames speed
3081	.10f9	8090f9	8d c0 00	sta $8000c0			sta TickDowns.playerAnim							; set the anim timer to new speed
3082	.10fc	8090fc	9c b6 00	stz $8000b6			stz PlayerData.frameOffset							; reset to frame zero as new anim may have less frames then current
3083	.10ff	8090ff					_dontchange
3084	.10ff	8090ff	60		rts			rts

3086							.as
3087							.xs
3088	.1100	809100					setPlayerSpritePtrFromFrameNumber_88
3089	.1100	809100					_ASSERT_jsr
3090	.1100	809100					_ASSERT_axy8
3091	.1100	809100	ae b5 00	ldx $8000b5		ldx PlayerData.currAnim
3092	.1103	809103	bd a6 91	lda $8091a6,x		lda PlayerFrameData.animFrameIndexs,x					; get the curent base index for this animation
3093	.1106	809106	18		clc			clc
3094	.1107	809107	6d b6 00	adc $8000b6		adc PlayerData.frameOffset									; offset by current frame
3095	.110a	80910a	a8		tay			tay
3096	.110b	80910b	b9 b0 91	lda $8091b0,y		lda PlayerFrameData.animFrameChar,y						; store the char number
3097	.110e	80910e	8d f5 03	sta $8003f5		sta OAMMirror+2
3098	.1111	809111	18		clc			clc																; on the off chance this is 16x32 set the lower sprite as well
3099	.1112	809112	69 20		adc #$20		adc #32															; its faster than checking, the X/Y setting will move
3100	.1114	809114	8d f9 03	sta $8003f9		sta OAMMirror+6												; it offscreen if not needed
3101	.1117	809117	b9 ca 91	lda $8091ca,y		lda PlayerFrameData.animFrameAttri,y
3102	.111a	80911a	8d f6 03	sta $8003f6		sta OAMMirror+3
3103	.111d	80911d	69 00		adc #$00		adc #0															; add carry if we cross boundary
3104	.111f	80911f	8d fa 03	sta $8003fa		sta OAMMirror+7
3105	.1122	809122	60		rts			rts


3108							.as
3109							.xs
3110	.1123	809123					updatePlayerAnim_88
3111	.1123	809123					_ASSERT_jsr
3112	.1123	809123					_ASSERT_axy8
3113							; returns carry clear if anim did not loop
3114							; carry is set if it did
3115	.1123	809123	ae b5 00	ldx $8000b5		ldx PlayerData.currAnim
3116	.1126	809126	bd 92 91	lda $809192,x		lda PlayerFrameData.animTypes,x
3117	.1129	809129	c9 00		cmp #$00		cmp #kSpriteAnimationType.none							; is this a hold frame?
3118	.112b	80912b	f0 06		beq $809133		beq _skip
3119	.112d	80912d	ad c0 00	lda $8000c0			lda TickDowns.playerAnim								; time for next frame?
3120	.1130	809130	f0 02		beq $809134			beq _itTime
3121	.1132	809132	18		clc					clc
3122	.1133	809133					_skip
3123	.1133	809133	60		rts			rts

3125	.1134	809134					_itTime
3126	.1134	809134	ad b6 00	lda $8000b6		lda PlayerData.frameOffset
3127	.1137	809137	18		clc			clc
3128	.1138	809138	69 01		adc #$01		adc #1
3129	.113a	80913a	dd e4 91	cmp $8091e4,x		cmp PlayerFrameData.animFrameCount,x					; add and reset to 0 if over
3130	.113d	80913d	90 02		bcc $809141		bcc _store
3131	.113f	80913f	a9 00		lda #$00			lda #0
3132	.1141	809141					_store
3133	.1141	809141	8d b6 00	sta $8000b6		sta PlayerData.frameOffset
3134	.1144	809144	08		php			php																; if we overflowed c will be set, else clear
3135	.1145	809145	bd ee 91	lda $8091ee,x			lda PlayerFrameData.animFrameRate,x
3136	.1148	809148	8d c0 00	sta $8000c0			sta TickDowns.playerAnim								; reset timer
3137	.114b	80914b	20 00 91	jsr $809100			jsr setPlayerSpritePtrFromFrameNumber_88			; update the sprite
3138	.114e	80914e	28		plp			plp																; restore carry state
3139	.114f	80914f	60		rts			rts

3141							.as
3142							.xs
3143	.1150	809150					setPlayerToSpawnPoint_88
3144	.1150	809150					_ASSERT_jsr
3145	.1150	809150					_ASSERT_axy8
3146	.1150	809150	ad 9b 00	lda $80009b		lda LevelData.playerIndex									; get the spwan map index
3147	.1153	809153					setPlayerToIndexA
3148	.1153	809153	48		pha			pha																; save A for Y extration
3149	.1154	809154	0a		asl a				asl a
3150	.1155	809155	0a		asl a				asl a
3151	.1156	809156	0a		asl a				asl a
3152	.1157	809157	0a		asl a				asl a															; mul X by 16 which also clears out the Y
3153	.1158	809158	8d 84 03	sta $800384			sta mplexBuffer.xpos										; save the X
3154	.115b	80915b	9c a5 03	stz $8003a5			stz mplexBuffer.xmsb										; no MSB from a fixed tile
3155	.115e	80915e	68		pla			pla																; restore index value
3156	.115f	80915f	29 f0		and #$f0		and #$F0															; mask off Y value which is already x16
3157	.1161	809161	8d c6 03	sta $8003c6		sta mplexBuffer.ypos											; save the Y
3158								; make sure the bullet is off the screen
3159	.1164	809164	a9 e0		lda #$e0		lda #kSpriteEmptyVal
3160	.1166	809166	8d c7 03	sta $8003c7		sta mplexBuffer.ypos+kBulletSpriteOffset
3161	.1169	809169	8d 85 03	sta $800385		sta mplexBuffer.xpos+kBulletSpriteOffset
3162	.116c	80916c	60		rts			rts

3164							.as
3165							.xs
3166	.116d	80916d					clearPlayerStuct_88
3167	.116d	80916d					_ASSERT_jsr
3168	.116d	80916d					_ASSERT_axy8
3169	.116d	80916d	a2 1c		ldx #$1c		ldx #size(sPlayerData)-1
3170	.116f	80916f	9e a2 00	stz $8000a2,x	-	stz PlayerData,x												; just set it all to 0
3171	.1172	809172	ca		dex			dex
3172	.1173	809173	10 fa		bpl $80916f		bpl -
3173	.1175	809175	60		rts			rts

3175							.as
3176							.xs
3177	.1176	809176					removePickups_88
3178	.1176	809176					_ASSERT_jsr
3179	.1176	809176					_ASSERT_axy8
3180	.1176	809176	9c a8 00	stz $8000a8		stz PlayerData.canFloatNZ
3181	.1179	809179	9c b7 00	stz $8000b7		stz PlayerData.bulletActive
3182	.117c	80917c	9c bb 00	stz $8000bb		stz PlayerData.numBulletEgg
3183	.117f	80917f	4c 80 a1	jmp $80a180		jmp clearShieldState											; shield has timmers and other state with it
3184								;

3186							.as
3187							.xs
3188	.1182	809182					awardLife_88
3189	.1182	809182					_ASSERT_jsr
3190	.1182	809182					_ASSERT_axy8
3191							;	lda PasswordInfiLives
3192							;	beq +
3193							;		rts
3194	.1182	809182	ee 88 00	inc $800088	+	inc GameData.lives
3195	.1185	809185	4c 13 88	jmp $808813		jmp pltLives


3198							; ----- @Player Animation Data@ -----

3200	.1188	809188					kSpriteType .block
3201	=0							s16x16 = 0
3202	=1							s16x32 = 1
3203	=2							s32x32 = 2
3204							.bend

3206	.1188	809188					kSpriteAnimationType .block
3207	=0							none = 0
3208	=1							loop = 1
3209							.bend

3211	=36						kPlayerSprFlags = kSpri_2 | kSPal_2

3213							; this is all the raw word data for each sprite that makes up the animations
3214	=(9216,)					RightFrames = ( fSprDef(0,0,kPlayerSprFlags), )
3215	=(25600,)					LeftFrames = ( fSprDef(0,0,kPlayerSprFlags|kSFlipX), )
3216	=(9248,9250,9252,9254)				WalkRightFrames = ( fSprDef(0,1,kPlayerSprFlags), fSprDef(1,1,kPlayerSprFlags),fSprDef(2,1,kPlayerSprFlags),fSprDef(3,1,kPlayerSprFlags))
3217	=(25632,25634,25636,25638)			WalkLeftFrames = ( fSprDef(0,1,kPlayerSprFlags|kSFlipX), fSprDef(1,1,kPlayerSprFlags|kSFlipX),fSprDef(2,1,kPlayerSprFlags|kSFlipX),fSprDef(3,1,kPlayerSprFlags|kSFlipX))
3218	=(9280,9282)					JumpRightFrames = ( fSprDef(0,2,kPlayerSprFlags), fSprDef(1,2,kPlayerSprFlags) )
3219	=(25664,25666)					JumpLeftFrames = ( fSprDef(0,2,kPlayerSprFlags|kSFlipX), fSprDef(1,2,kPlayerSprFlags|kSFlipX) )
3220	=(9224,9228)					FlapRightFrames = ( fSprDef(4,0,kPlayerSprFlags), fSprDef(6,0,kPlayerSprFlags) )
3221	=(25608,25612)					FlapLeftFrames = ( fSprDef(4,0,kPlayerSprFlags|kSFlipX), fSprDef(6,0,kPlayerSprFlags|kSFlipX) )
3222	=(9284,9286,9288,9290)				DeadFramesUpper = ( fSprDef(2,2,kPlayerSprFlags), fSprDef(3,2,kPlayerSprFlags),fSprDef(4,2,kPlayerSprFlags),fSprDef(5,2,kPlayerSprFlags))
3223	=(9312,9314,25696,25698)			ExitFrames = ( fSprDef(0,3,kPlayerSprFlags), fSprDef(1,3,kPlayerSprFlags),fSprDef(0,3,kPlayerSprFlags|kSFlipX), fSprDef(1,3,kPlayerSprFlags|kSFlipX) )

3225							; each animation then has data such as the frame size, mode, rate etc
3226							; sizes, animation style, frames, anim X offset, animation frame rate
3227	=[(0,0,(9216,),0,255)]				PlayerFrameSpec :=  [(kSpriteType.s16x16, kSpriteAnimationType.none, RightFrames,		0,		255)]
3228	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255)]	PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.none, LeftFrames,			0,		255)]
3229	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkRightFrames,	0,		8)]
3230	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkLeftFrames,	0,		8)]
3231	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpRightFrames,	0,		8)]
3232	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpLeftFrames,	0,		8)]
3233	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapRightFrames,	0,		8)]
3234	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapLeftFrames,	-16,	8)]
3235	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x32, kSpriteAnimationType.loop, DeadFramesUpper,	0,		8)]
3236	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8),(0,1,(9312,9314,25696,25698),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, ExitFrames,			0,		8)]

3238							; now we extract all the info and do an Array of Structs to Struct of Arraies conversion
3239	.1188	809188					PlayerFrameData .block
3240	>1188	809188	00 00 00 00 00 00 02 02			sizes					.byte PlayerFrameSpec[:,0]		; the size for each animation
	>1190	809190	01 00
3241	>1192	809192	00 00 01 01 01 01 01 01			animTypes			.byte PlayerFrameSpec[:,1]		; if its static or looping
	>119a	80919a	01 01
3242	>119c	80919c	00 00 00 00 00 00 00 f0			animXOffset			.char PlayerFrameSpec[:,3]		; any player to sprite X offset needed
	>11a4	8091a4	00 00
3243	=[]							_animDataIndex := []										; we need to get all the sprite def words but also
3244	=[]							_frameWords := []											; keep a track of the starting point into the list of all
3245	=[]							_frameCount := []											; off them for each animation, and how long each anim is
3246								.for frames in PlayerFrameSpec[:,2]
3247	=[0]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,)							_frameWords ..= frames								; append this animations frames to the list
3249	=[1]								_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600)							_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1]								_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254)				_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4]							_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4]							_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2]							_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10,12]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2,2]							_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10,12,14]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10,12,14,16]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10,12,14,16,18]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2,2,2,2,4]						_frameCount ..= [len(frames)]						; append the number of frames
3247	=[0,1,2,6,10,12,14,16,18,22]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3248	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290,9312,9314,25696,25698)
									_frameWords ..= frames								; append this animations frames to the list
3249	=[1,1,4,4,2,2,2,2,4,4]						_frameCount ..= [len(frames)]						; append the number of frames
3250								.next
3251	>11a6	8091a6	00 01 02 06 0a 0c 0e 10			animFrameIndexs	.byte (_animDataIndex)			; write all the start indexs for the frames
	>11ae	8091ae	12 16
3252	>11b0	8091b0	00 00 20 22 24 26 20 22			animFrameChar		.byte <(_frameWords)				; the low of the char number
	>11b8	8091b8	24 26 40 42 40 42 08 0c 08 0c 44 46 48 4a 60 62
	>11c8	8091c8	60 62
3253	>11ca	8091ca	24 64 24 24 24 24 64 64			animFrameAttri		.byte >(_frameWords)				; the high + attributes
	>11d2	8091d2	64 64 24 24 64 64 24 24 64 64 24 24 24 24 24 24
	>11e2	8091e2	64 64
3254	>11e4	8091e4	01 01 04 04 02 02 02 02			animFrameCount		.byte (_frameCount)				; number of frames
	>11ec	8091ec	04 04
3255	>11ee	8091ee	ff ff 08 08 08 08 08 08			animFrameRate		.byte (PlayerFrameSpec[:,4])	; and the rate
	>11f6	8091f6	08 08
3256							.bend

3258							; simple lut to handle normal jumping and floating acceleration rates
3259	>11f8	8091f8	13 00 04 00			PlayerJumpLUT .word kPlayerParams.jumpDeltaAccum, kPlayerParams.jumpDeltaAccumFloat

3261							; for the flash affect, we have a whole two colours, yellow and blue
3262	.11fc	8091fc					PlayerColourLUT .block
3263	=(16250,28144)						_colours = (fRGBToSNES(214,222,123),fRGBToSNES(132,123,222))
3264	>11fc	8091fc	7a f0					lo .byte <(_colours)
3265	>11fe	8091fe	3f 6d					hi .byte >(_colours)
3266							.bend

3268							; ----- @Bullet Routines@ -----

3270	.1200	809200					startBullet
3271	.1200	809200					_ASSERT_jsr
3272	.1200	809200					_ASSERT_axy8
3273	.1200	809200	a9 01		lda #$01		lda #1
3274	.1202	809202	8d b7 00	sta $8000b7		sta PlayerData.bulletActive					; we have a bullet there is only 1
3275								;ldx #kSFX.bubble
3276								;jsr playSFX
3277	.1205	809205	9c b8 00	stz $8000b8		stz PlayerData.bulletUD							; it goes up with to start
3278	.1208	809208	9c ba 00	stz $8000ba		stz PlayerData.bulletBurstNZ					; its not dead either
3279	.120b	80920b	ad ad 00	lda $8000ad		lda PlayerData.facingRight
3280	.120e	80920e	8d b9 00	sta $8000b9		sta PlayerData.bulletLR							; make it move forward
3281	.1211	809211	a9 c8		lda #$c8		lda #200
3282	.1213	809213	8d c2 00	sta $8000c2		sta TickDowns.bulletLifeTimer					; it lives for 4 seconds (PAL)
3283	.1216	809216	ad 84 03	lda $800384		lda mplexBuffer.xpos
3284	.1219	809219	8d 85 03	sta $800385		sta mplexBuffer.xpos+kBulletSpriteOffset	; same X as the player
3285	.121c	80921c	ad c6 03	lda $8003c6		lda mplexBuffer.ypos
3286	.121f	80921f	38		sec			sec
3287	.1220	809220	e9 03		sbc #$03		sbc #3
3288	.1222	809222	8d c7 03	sta $8003c7		sta mplexBuffer.ypos+kBulletSpriteOffset	; 3 above the player
3289	.1225	809225	ad a5 03	lda $8003a5		lda mplexBuffer.xmsb
3290	.1228	809228	8d a6 03	sta $8003a6		sta mplexBuffer.xmsb+kBulletSpriteOffset	; copy players MSB (not really needed on SNES)
3291	.122b	80922b	ad bb 00	lda $8000bb		lda PlayerData.numBulletEgg					; is this a bubble or an egg bullet
3292								;ora PasswordRedBullets
3293	.122e	80922e	f0 04		beq $809234		beq _normal
3294	.1230	809230	a9 08		lda #$08			lda #kSprites.bulletRed
3295	.1232	809232	80 02		bra $809236			bra _store
3296	.1234	809234					_normal
3297	.1234	809234	a9 00		lda #$00		lda #kSprites.bulletSprite
3298	.1236	809236					_store
3299	.1236	809236	8d 92 02	sta $800292		sta bulletFrame
3300	.1239	809239	60		rts			rts

3302	.123a	80923a					updateBullet
3303	.123a	80923a					_ASSERT_jsr
3304	.123a	80923a					_ASSERT_axy8
3305	.123a	80923a	ad b7 00	lda $8000b7		lda PlayerData.bulletActive
3306	.123d	80923d	f0 15		beq $809254		beq bulletExit
3307	.123f	80923f	ad c2 00	lda $8000c2			lda TickDowns.bulletLifeTimer			; has it expired?
3308	.1242	809242	d0 21		bne $809265			bne bulletNotDead
3309									;
3310	.1244	809244					removeBullet
3311	.1244	809244					_ASSERT_jsr
3312	.1244	809244					_ASSERT_axy8
3313	.1244	809244	9c b7 00	stz $8000b7		stz PlayerData.bulletActive				; no longer alive
3314	.1247	809247	ad bb 00	lda $8000bb		lda PlayerData.numBulletEgg				; if I have an egg dec it
3315	.124a	80924a	f0 03		beq $80924f		beq +												; this leads to an exploit, if you fire collect then you loose the egg
3316									;lda PasswordRedBullets
3317									;bne +
3318	.124c	80924c	ce bb 00	dec $8000bb				dec PlayerData.numBulletEgg
3319	.124f	80924f	a9 e0		lda #$e0	+	lda #kSpriteEmptyVal							; set bullet off screen
3320	.1251	809251	8d c7 03	sta $8003c7		sta mplexBuffer.ypos+kBulletSpriteOffset
3321	.1254	809254					bulletExit
3322	.1254	809254	60		rts			rts

3324	.1255	809255					burstBullet
3325	.1255	809255					_ASSERT_jsr
3326	.1255	809255					_ASSERT_axy8
3327	.1255	809255	a9 06		lda #$06		lda #kSprites.bulletSplat
3328	.1257	809257	8d 92 02	sta $800292		sta bulletFrame								; we splat
3329	.125a	80925a	a9 10		lda #$10		lda #16
3330	.125c	80925c	8d c2 00	sta $8000c2		sta TickDowns.bulletLifeTimer				; hold it for 16 frames
3331	.125f	80925f	a9 01		lda #$01		lda #1
3332	.1261	809261	8d ba 00	sta $8000ba		sta PlayerData.bulletBurstNZ				; mark it as burst
3333							;	ldx #kSFX.ebubble
3334							;	jmp playSFX
3335	.1264	809264	60		rts			rts

3337	.1265	809265					bulletNotDead
3338	.1265	809265					_ASSERT_jsr
3339	.1265	809265					_ASSERT_axy8
3340	.1265	809265	ad ba 00	lda $8000ba		lda PlayerData.bulletBurstNZ
3341	.1268	809268	d0 ea		bne $809254		bne bulletExit										; if not burst
3342	.126a	80926a	ad bb 00	lda $8000bb			lda PlayerData.numBulletEgg
3343									;ora PasswordRedBullets
3344	.126d	80926d	d0 14		bne $809283			bne _bulletFull								; are we full?
3345	.126f	80926f	ad 92 02	lda $800292				lda bulletFrame
3346	.1272	809272	c9 04		cmp #$04				cmp #kSprites.bulletSprite+(2*2)		; have we reached the full size, word index
3347	.1274	809274	f0 0d		beq $809283				beq _bulletFull
3348	.1276	809276	ad c2 00	lda $8000c2					lda TickDowns.bulletLifeTimer		; is it time to update the frame?
3349	.1279	809279	29 07		and #$07					and #$07									; every 8 frames
3350	.127b	80927b	d0 06		bne $809283					bne _bulletFull
3351	.127d	80927d	ee 92 02	inc $800292						inc bulletFrame					; next frame
3352	.1280	809280	ee 92 02	inc $800292						inc bulletFrame					; next frame word index
3353	.1283	809283					_bulletFull
3354	.1283	809283	a9 01		lda #$01		lda #kBulletCollisionbox
3355	.1285	809285	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set collision size to the bullets
3356								; lda #kBulletSpriteOffset ; same as kBulletCollisionbox
3357	.1287	809287	85 1d		sta $1d			sta CollideSpriteToCheck
239:1	.1289	809289	c2 20		rep #$20		REP #$20
3359:4	.128b	80928b	a9 a2 92	lda #$92a2		lda #<>UpdateBulletEndYColl
3360	.128e	80928e	85 06		sta $06			sta Pointer1										; set post collision callback
235:1	.1290	809290	e2 20		sep #$20		SEP #$20
3362:4	.1292	809292	a9 00		lda #$00		lda #0
3363	.1294	809294	85 05		sta $05			sta CollisionResult
3364	.1296	809296	a8		tay			tay ; ldy #0
3365	.1297	809297	ad b8 00	lda $8000b8		lda PlayerData.bulletUD							; which Y direction are we moving?
3366	.129a	80929a	f0 03		beq $80929f		beq +
3367	.129c	80929c	4c de 95	jmp $8095de			jmp entDown
3368	.129f	80929f	4c 92 95	jmp $809592	+	jmp entUp

3370	.12a2	8092a2					UpdateBulletEndYColl
3371	.12a2	8092a2					_ASSERT_jsr
3372	.12a2	8092a2					_ASSERT_axy8
3373	.12a2	8092a2	a5 05		lda $05			lda CollisionResult
3374	.12a4	8092a4	f0 0a		beq $8092b0		beq _updateY										; did the egg hit something
3375	.12a6	8092a6	ad b8 00	lda $8000b8			lda PlayerData.bulletUD						; yes
3376	.12a9	8092a9	49 01		eor #$01			eor #1
3377	.12ab	8092ab	8d b8 00	sta $8000b8			sta PlayerData.bulletUD						; change direction
3378	.12ae	8092ae	10 0a		bpl $8092ba		bpl _checkX
3379	.12b0	8092b0					_updateY
3380	.12b0	8092b0	ad c7 03	lda $8003c7		lda mplexBuffer.ypos+kBulletSpriteOffset
3381	.12b3	8092b3	18		clc			clc
3382	.12b4	8092b4	6d 8c 02	adc $80028c		adc checkSpriteToCharData.yDeltaCheck		; update the Y
3383	.12b7	8092b7	8d c7 03	sta $8003c7		sta mplexBuffer.ypos+kBulletSpriteOffset
3384	.12ba	8092ba					_checkX
239:1	.12ba	8092ba	c2 20		rep #$20		REP #$20
3386:4	.12bc	8092bc	a9 d3 92	lda #$92d3		lda #<>UpdateBulletEndXColl						; set the x collision callback
3387	.12bf	8092bf	85 06		sta $06			sta Pointer1
235:1	.12c1	8092c1	e2 20		sep #$20		SEP #$20
3389:4	.12c3	8092c3	a9 00		lda #$00		lda #$00
3390	.12c5	8092c5	85 05		sta $05			sta CollisionResult								; clear the result
3391	.12c7	8092c7	a8		tay			tay ;ldy #0
3392	.12c8	8092c8	ad b9 00	lda $8000b9		lda PlayerData.bulletLR							; which way are we moving?
3393	.12cb	8092cb	d0 03		bne $8092d0		bne +
3394	.12cd	8092cd	4c 6d 95	jmp $80956d			jmp entRight
3395	.12d0	8092d0	4c b7 95	jmp $8095b7	+	jmp entLeft

3397							; do some more collision checking here
3398	.12d3	8092d3					UpdateBulletEndXColl
3399	.12d3	8092d3					_ASSERT_jsr
3400	.12d3	8092d3					_ASSERT_axy8
3401	.12d3	8092d3	a5 05		lda $05			lda CollisionResult								; did we hit something?
3402	.12d5	8092d5	f0 0a		beq $8092e1		beq _updateX
3403	.12d7	8092d7	ad b9 00	lda $8000b9			lda PlayerData.bulletLR						; go the other way
3404	.12da	8092da	49 01		eor #$01			eor #1
3405	.12dc	8092dc	8d b9 00	sta $8000b9			sta PlayerData.bulletLR
3406	.12df	8092df	10 11		bpl $8092f2			bpl _checkEnts
3407	.12e1	8092e1					_updateX
3408	.12e1	8092e1	a2 01		ldx #$01		ldx #kBulletSpriteOffset
3409	.12e3	8092e3	20 72 85	jsr $808572		jsr addXWithMSBAndClip_88						; move on the X
3410	.12e6	8092e6	a5 2f		lda $2f			lda DidClipX										; did we hit an edge?
3411	.12e8	8092e8	f0 08		beq $8092f2		beq _checkEnts
3412	.12ea	8092ea	ad b9 00	lda $8000b9			lda PlayerData.bulletLR						; bounce the other way
3413	.12ed	8092ed	49 01		eor #$01			eor #1
3414	.12ef	8092ef	8d b9 00	sta $8000b9			sta PlayerData.bulletLR
3415	.12f2	8092f2					_checkEnts
3416	.12f2	8092f2	20 e2 9e	jsr $809ee2		jsr collideBulletAgainstRest					; did we hit an enmey
3417	.12f5	8092f5	90 27		bcc $80931e		bcc _exit2											; didn't hit one
3418	.12f7	8092f7	bd ce 00	lda $8000ce,x			lda EntityData.type,x						; yes, is it a boss?
3419	.12fa	8092fa	20 74 9b	jsr $809b74			jsr isTypeBoss
3420	.12fd	8092fd	b0 20		bcs $80931f			bcs _boss
3421	.12ff	8092ff	a9 ff		lda #$ff				lda #kEntity.removedFromBullet		; we make an entity removed by bullet
3422	.1301	809301	ac bb 00	ldy $8000bb				ldy PlayerData.numBulletEgg			; so we can put it back latter
3423	.1304	809304	f0 02		beq $809308				beq +
3424	.1306	809306	a9 fe		lda #$fe					lda #kEntity.deadFromRedBullet	; if it was red we don't restore them
3425	.1308	809308	9d 96 01	sta $800196,x			+	sta EntityData.entState,x
3426	.130b	80930b	a9 ff		lda #$ff				lda #255										; disable Ent
3427	.130d	80930d	9d c8 03	sta $8003c8,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
3428	.1310	809310	9d 19 01	sta $800119,x				sta EntityData.movTimer,x
3429	.1313	809313	1a		inc a					inc a											; 0
3430	.1314	809314	9d 00 01	sta $800100,x				sta EntityData.active,x
3431	.1317	809317	1a		inc a					inc a											; 1
3432	.1318	809318	9d 13 02	sta $800213,x				sta EntityData.speed,x
3433	.131b	80931b	4c 55 92	jmp $809255				jmp burstBullet
3434	.131e	80931e						_exit2
3435	.131e	80931e	60		rts				rts
3436	.131f	80931f					_boss
3437	.131f	80931f	ad bb 00	lda $8000bb		lda PlayerData.numBulletEgg
3438							;	ora PasswordRedBullets
3439	.1322	809322	f0 fa		beq $80931e		beq _exit2											; only accept eggs for the boss
3440	.1324	809324	bd ce 00	lda $8000ce,x			lda EntityData.type,x
3441	.1327	809327	20 84 9b	jsr $809b84			jsr isTypeBossBounceDetect					; look for the actual bear not the dummies
3442	.132a	80932a	b0 03		bcs $80932f			bcs _found
3443	.132c	80932c	ca		dex					dex											; doesn't affect C
3444	.132d	80932d	80 f0		bra $80931f				bra _boss
3445	.132f	80932f					_found
3446	.132f	80932f	20 90 9b	jsr $809b90		jsr hurtBoss
3447	.1332	809332	4c 55 92	jmp $809255		jmp burstBullet

3449	=(9420,9422,9452,9454,9676)			PlayerBulletFrames = (fSprDef(6,6,kPlayerSprFlags), fSprDef(7,6,kPlayerSprFlags), fSprDef(6,7,kPlayerSprFlags), fSprDef(7,7,kPlayerSprFlags), fSprDef(6,14,kPlayerSprFlags))
3450	.1335	809335					PlayerBulletAnimData .block
3451	>1335	809335	cc 24 ce 24 ec 24 ee 24			.word <>(PlayerBulletFrames)
	>133d	80933d	cc 25
3452							;	lo .byte <(PlayerBulletFrames)
3453							;	hi .byte >(PlayerBulletFrames)
3454							.bend

3456							; ----- @Entity system@ -----

3458							mConvertXToEntSpriteX .macro ; skip past player + bullet
3461							.endm

3463							mRestoreEntSpriteX .macro ; go back past player + bullet
3466							.endm

3468	.133f	80933f					kBoss .block
3469	=7							hitPoints = 7
3470	=9							hitPointsOctopuss = 9
3471	=25							deathAnimTime = 25
3472	=0							normal = 0
3473	=1							dead = 1
3474							.bend

3476	.133f	80933f					kFishLimits .block
3477	=181							startTwo = 250-21-(8*6) ; 165
3478	=197							maxY = 255-8-50
3479							.bend

3481	.133f	80933f					kSpiderValues .block
3482	=2							yFallDelta = 2
3483	=209							rightStartWiggle = 255-32-14 ; 32 pixels but compenstating for the sprite width
3484	=225							rightStartFall = 255-16-14 ; 16 pixels
3485	=46							leftStartWiggle = 32+14
3486	=30							leftStartFall = 16+14
3487	=32							pauseEndFallFrames = 32
3488	=3							riseDelayTime = 3
3489							.bend

3491							.as
3492							.xs
3493	.133f	80933f					unpackEntityBytes
3494	.133f	80933f					_ASSERT_jsr
3495	.133f	80933f					_ASSERT_axy8
3496								; asume we don't have any bosses and reset the sprites back to normal
3497	.133f	80933f	a9 62		lda #$62		lda #kDefault_OBSEL
3498	.1341	809341	8d 01 21	sta $802101		sta $802101
3499	.1344	809344	a0 00		ldy #$00		ldy #0
3500	.1346	809346	a2 18		ldx #$18		ldx #kEntity.maxEntities-1				; clear all entities
3501	.1348	809348	9e 4b 01	stz $80014b,x	-	stz EntityData.animBase,x
3502	.134b	80934b	9e 64 01	stz $800164,x		stz EntityData.animFrame,x
3503	.134e	80934e	9e 96 01	stz $800196,x		stz EntityData.entState,x
3504	.1351	809351	9e 45 02	stz $800245,x		stz EntityData.palleteOffset,x
3505	.1354	809354	ca		dex			dex
3506	.1355	809355	10 f1		bpl $809348		bpl -
3507	.1357	809357	b1 00		lda ($00),y		lda (EntityDataPointer),y				; read the number of entities
3508	.1359	809359	85 10		sta $10			sta ZPTemp2									; number of entities
3509	.135b	80935b	8d cd 00	sta $8000cd		sta EntityData.number
3510	.135e	80935e	f0 40		beq $8093a0		beq _e										; check for if we have none, handy while testing layouts etc
3511	.1360	809360	c8		iny				iny										; next byte
3512	.1361	809361	a2 00		ldx #$00			ldx #0
3513	.1363	809363	85 04		sta $04				sta EntNum
3514	.1365	809365						_l
3515	.1365	809365	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read entity tile index for starting pos
3516	.1367	809367	20 66 8d	jsr $808d66			jsr convertIndexToEntSpriteXY
3517	.136a	80936a	c8		iny				iny			; next byte
3518	.136b	80936b	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read TTTTXDDDD T = type X = don't care D = starting direction
3519	.136d	80936d	4a		lsr a				lsr a
3520	.136e	80936e	4a		lsr a				lsr a
3521	.136f	80936f	4a		lsr a				lsr a
3522	.1370	809370	4a		lsr a				lsr a										; extract the type
3523	.1371	809371	9d ce 00	sta $8000ce,x			sta EntityData.type,x				; store it
3524	.1374	809374	c9 08		cmp #$08			cmp #kEntity.Bear						; do we have a bear boss?
3525	.1376	809376	d0 02		bne $80937a			bne +
3526	.1378	809378	80 51		bra $8093cb				gra _BossBear						; handle the custom case
3527	.137a	80937a	c9 09		cmp #$09		+	cmp #kEntity.Octopuss				; same with the octopuss
3528	.137c	80937c	d0 03		bne $809381			bne +
3529	.137e	80937e	4c 56 94	jmp $809456				jmp _BossOctopuss
3530	.1381	809381	a5 0f		lda $0f			+	lda ZPTemp								; convertIndexToEntSpriteXY returns the Y in ZPTemp
3531	.1383	809383	9d 7d 01	sta $80017d,x			sta EntityData.originalY,x
3532	.1386	809386	9e 96 01	stz $800196,x			stz EntityData.entState,x			; clear the state, and speed all ents are spawned slow
3533	.1389	809389	9e 13 02	stz $800213,x			stz EntityData.speed,x
3534	.138c	80938c	b1 00		lda ($00),y			lda (EntityDataPointer),y			; extract the D from the byte
3535	.138e	80938e	29 03		and #$03			and #3
3536	.1390	809390	9d e7 00	sta $8000e7,x			sta EntityData.direction,x
3537	.1393	809393	a9 01		lda #$01			lda #1
3538	.1395	809395	9d 00 01	sta $800100,x			sta EntityData.active,x				; it's alive
3539	.1398	809398						_nextEnt
3540	.1398	809398	c8		iny				iny										; next byte
3541	.1399	809399	e8		inx				inx
3542	.139a	80939a	c6 10		dec $10				dec ZPTemp2								; have we done all ents?
3543	.139c	80939c	a5 10		lda $10				lda ZPTemp2
3544	.139e	80939e	d0 c5		bne $809365			bne _l
3545	.13a0	8093a0					_e
3546	.13a0	8093a0	ae cd 00	ldx $8000cd		ldx EntityData.number					; now we can start any bubbles if we need them
3547	.13a3	8093a3	8e 68 02	stx $800268		stx EntityData.pipeBubbleStart
3548	.13a6	8093a6	ad 5e 02	lda $80025e		lda EntityData.numPipes					; do we need them?
3549	.13a9	8093a9	f0 1f		beq $8093ca		beq _noPipes
3550									.cerror kEntity.maxNumBubblesPerMaker != 2, "need to change code so it handles new mul"
3551	.13ab	8093ab	0a		asl a				asl a										; times two
3552	.13ac	8093ac	18		clc				clc										; probably not needed as num pipes must be below 128
3553	.13ad	8093ad	6d cd 00	adc $8000cd			adc EntityData.number
3554	.13b0	8093b0	8d cd 00	sta $8000cd			sta EntityData.number				; add the bubble ents
3555	.13b3	8093b3						_setupBubbleLoop
3556	.13b3	8093b3	a9 0c		lda #$0c			lda #kEntity.bubble
3557	.13b5	8093b5	9d ce 00	sta $8000ce,x			sta EntityData.type,x				; we have a bubble
3558	.13b8	8093b8	9e 96 01	stz $800196,x			stz EntityData.entState,x			; zero state
3559	.13bb	8093bb	9e e7 00	stz $8000e7,x			stz EntityData.direction,x			; up
3560	.13be	8093be	9e 00 01	stz $800100,x			stz EntityData.active,x				; not active
3561	.13c1	8093c1	9e 45 02	stz $800245,x			stz EntityData.palleteOffset,x	; stock colour
3562	.13c4	8093c4	e8		inx				inx
3563	.13c5	8093c5	ec cd 00	cpx $8000cd			cpx EntityData.number				; done all of them?
3564	.13c8	8093c8	d0 e9		bne $8093b3			bne _setupBubbleLoop
3565	.13ca	8093ca					_noPipes
3566	.13ca	8093ca	60		rts			rts
3567								;
3568	.13cb	8093cb					_BossBear
3569	.13cb	8093cb	a9 08		lda #$08		lda #kEntity.bear										; bosses are actually 4 entites
3570	.13cd	8093cd	9d ce 00	sta $8000ce,x		sta EntityData.type,x
3571	.13d0	8093d0	a9 0a		lda #$0a		lda #kEntity.bearBody								; the body
3572	.13d2	8093d2	9d cf 00	sta $8000cf,x		sta EntityData.type+1,x
3573	.13d5	8093d5	a9 07		lda #$07		lda #kBoss.hitPoints
3574	.13d7	8093d7	9d 00 01	sta $800100,x		sta EntityData.active,x								; abuse active as a hit points counter
3575	.13da	8093da	a9 6a		lda #$6a		lda #kDefault_OBSEL|kBossBearBankOR				; enable the bear boss sprite bank
3576	.13dc	8093dc					_sharedBoss
3577	.13dc	8093dc	8d 01 21	sta $802101		sta $802101												; set the sprite bank
3578	.13df	8093df	a9 0d		lda #$0d		lda #kEntity.bossDummy
3579	.13e1	8093e1	9d d0 00	sta $8000d0,x		sta EntityData.type+2,x								; 3 and 4 are dumnmy ents
3580	.13e4	8093e4	9d d1 00	sta $8000d1,x		sta EntityData.type+3,x								; which just show a sprite
3581	.13e7	8093e7	ad cd 00	lda $8000cd		lda EntityData.number
3582	.13ea	8093ea	18		clc			clc
3583	.13eb	8093eb	69 03		adc #$03		adc #3													; insert 3 more ents for the rest of the boss
3584	.13ed	8093ed	8d cd 00	sta $8000cd		sta EntityData.number
3585	.13f0	8093f0	a9 01		lda #$01		lda #1
3586	.13f2	8093f2	9d 01 01	sta $800101,x		sta EntityData.active+1,x
3587	.13f5	8093f5	9d 02 01	sta $800102,x		sta EntityData.active+2,x
3588	.13f8	8093f8	9d 03 01	sta $800103,x		sta EntityData.active+3,x							; set all 4 active
3589	.13fb	8093fb	8a		txa			txa
3590	.13fc	8093fc	9d 97 01	sta $800197,x		sta EntityData.entState+1,x						; set the state of the extras to point to the "first"
3591	.13ff	8093ff	9d 98 01	sta $800198,x		sta EntityData.entState+2,x
3592	.1402	809402	9d 99 01	sta $800199,x		sta EntityData.entState+3,x
3593	.1405	809405	bd a7 03	lda $8003a7,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x		; copy the MSB from the first to the others
3594	.1408	809408	9d a8 03	sta $8003a8,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+1,x	; which technically doesn't work but mostly works
3595	.140b	80940b	9d a9 03	sta $8003a9,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+2,x	; but this is the SNES so it will be all 0 anyway
3596	.140e	80940e	9d aa 03	sta $8003aa,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+3,x
3597	.1411	809411	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; the boss is moved up 9 pixels so the sits on the top of blocks
3598	.1414	809414	38		sec			sec
3599	.1415	809415	e9 09		sbc #$09		sbc #9
3600	.1417	809417	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3601	.141a	80941a	9d c9 03	sta $8003c9,x		sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
3602	.141d	80941d	18		clc			clc
3603	.141e	80941e	69 15		adc #$15		adc #21													; and the bottom sprites are 21 lower (c64 sprits are 24x21)
3604	.1420	809420	9d ca 03	sta $8003ca,x		sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
3605	.1423	809423	9d cb 03	sta $8003cb,x		sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
3606	.1426	809426	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; we move the sprites -8 from spawn position
3607	.1429	809429	38		sec			sec
3608	.142a	80942a	e9 08		sbc #$08		sbc #8
3609	.142c	80942c	9d 86 03	sta $800386,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3610	.142f	80942f	9d 88 03	sta $800388,x		sta mplexBuffer.xpos+kEntsSpriteOffset+2,x	; right sprites are 24 over from that
3611	.1432	809432	18		clc			clc
3612	.1433	809433	69 18		adc #$18		adc #24
3613	.1435	809435	9d 87 03	sta $800387,x		sta mplexBuffer.xpos+kEntsSpriteOffset+1,x
3614	.1438	809438	9d 89 03	sta $800389,x		sta mplexBuffer.xpos+kEntsSpriteOffset+3,x
3615	.143b	80943b	9e 96 01	stz $800196,x		stz EntityData.entState,x							; the main state is 0
3616	.143e	80943e	9e 13 02	stz $800213,x		stz EntityData.speed,x								; slow speed
3617	.1441	809441	b1 00		lda ($00),y		lda (EntityDataPointer),y							; get the type and starting direction
3618	.1443	809443	29 03		and #$03		and #3
3619	.1445	809445	9d e7 00	sta $8000e7,x		sta EntityData.direction,x
3620	.1448	809448	a9 19		lda #$19		lda #25
3621	.144a	80944a	9d 19 01	sta $800119,x		sta EntityData.movTimer,x							; set the move rate, so the boss pauses for a bit before starting
3622	.144d	80944d	9d 1a 01	sta $80011a,x		sta EntityData.movTimer+1,x
3623	.1450	809450	e8		inx			inx
3624	.1451	809451	e8		inx			inx
3625	.1452	809452	e8		inx			inx														; x is now + 3 so when nextEnt is called it will be +4
3626	.1453	809453	4c 98 93	jmp $809398		jmp _nextEnt
3627								;

3629	.1456	809456					_BossOctopuss
3630	.1456	809456	a9 09		lda #$09		lda #kEntity.octopuss
3631	.1458	809458	9d ce 00	sta $8000ce,x		sta EntityData.type,x								; we are octopuss
3632	.145b	80945b	a9 0b		lda #$0b		lda #kEntity.octopussBody
3633	.145d	80945d	9d cf 00	sta $8000cf,x		sta EntityData.type+1,x								; and the body
3634	.1460	809460	a9 09		lda #$09		lda #kBoss.hitPointsOctopuss
3635	.1462	809462	9d 00 01	sta $800100,x		sta EntityData.active,x								; and use active for the number of hit points
3636	.1465	809465	a9 72		lda #$72		lda #kDefault_OBSEL|kBossOctoBankOR				; enable the bear boss sprite bank
3637	.1467	809467	4c dc 93	jmp $8093dc		jmp _sharedBoss

3639							.as
3640							.xs
3641	.146a	80946a					setEntitySprites
3642	.146a	80946a					_ASSERT_jsr
3643	.146a	80946a					_ASSERT_axy8
3644	.146a	80946a	ae cd 00	ldx $8000cd		ldx EntityData.number								; do we have any
3645	.146d	80946d	f0 1c		beq $80948b		beq _exit
3646	.146f	80946f						_active
3647	.146f	80946f	86 02		stx $02				stx CurrentEntity
3648	.1471	809471	bd ce 00	lda $8000ce,x			lda EntityData.type,x							; what type is it
3649	.1474	809474	c9 08		cmp #$08			cmp #kEntity.bear
3650	.1476	809476	f0 26		beq $80949e			beq _bossBear										; handle boss sprites
3651	.1478	809478	c9 0a		cmp #$0a				cmp #kEntity.bearBody
3652	.147a	80947a	f0 0c		beq $809488				beq _nextEnt									; body is done by main
3653	.147c	80947c	c9 09		cmp #$09					cmp #kEntity.octopuss					; handle octoposs
3654	.147e	80947e	f0 30		beq $8094b0					beq _bossOctopuss
3655	.1480	809480	c9 0b		cmp #$0b						cmp #kEntity.octopussBody			; again body is done my main
3656	.1482	809482	f0 04		beq $809488						beq _nextEnt
3657	.1484	809484	a8		tay				tay
3658	.1485	809485	20 fe 99	jsr $8099fe			jsr setEntSpriteForDirection					; set the sprite
3659	.1488	809488						_nextEnt
3660	.1488	809488	ca		dex				dex
3661	.1489	809489	10 e4		bpl $80946f			bpl _active
3662	.148b	80948b					_exit
3663	.148b	80948b	ad 5e 02	lda $80025e		lda EntityData.numPipes								; do we have any pipes
3664	.148e	80948e	f0 0d		beq $80949d		beq _exit2
3665	.1490	809490	ae 68 02	ldx $800268			ldx EntityData.pipeBubbleStart
3666	.1493	809493	a9 ff		lda #$ff			lda #$ff
3667	.1495	809495					_loop
3668	.1495	809495	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x		; set all the bubbles off screen
3669	.1498	809498	e8		inx			inx
3670	.1499	809499	e0 19		cpx #$19		cpx #kEntity.maxEntities
3671	.149b	80949b	d0 f8		bne $809495		bne _loop
3672	.149d	80949d					_exit2
3673	.149d	80949d	60		rts			rts
3674								;
3675	.149e	80949e					_bossBear
239:1	.149e	80949e	c2 20		rep #$20		REP #$20
3677:4	.14a0	8094a0	a9 40 43	lda #$4340		lda #BearEntAnimData[1]<<8 | BearEntAnimData[0]		; set to frame for head right
3678	.14a3	8094a3	9d 4b 01	sta $80014b,x		sta EntityData.animBase,x
3679	.14a6	8094a6	a9 4c 4e	lda #$4e4c		lda #BearBodyAnimData[1]<<8 | BearBodyAnimData[0]	; set to frame for body right
3680	.14a9	8094a9	9d 4d 01	sta $80014d,x		sta EntityData.animBase+2,x
235:1	.14ac	8094ac	e2 20		sep #$20		SEP #$20
3682:4	.14ae	8094ae	80 d8		bra $809488		bra _nextEnt

3684	.14b0	8094b0					_bossOctopuss
239:1	.14b0	8094b0	c2 20		rep #$20		REP #$20
3686:4	.14b2	8094b2	a9 46 49	lda #$4946		lda #OctopussEntAnimData[1]<<8 |	OctopussEntAnimData[0]		; set to frame for head right
3687	.14b5	8094b5	9d 4b 01	sta $80014b,x		sta EntityData.animBase,x
3688	.14b8	8094b8	a9 50 52	lda #$5250		lda #OctopussBodyAnimData[1]<<8 | OctopussBodyAnimData[0]	; set to frame for body right
3689	.14bb	8094bb	9d 4d 01	sta $80014d,x		sta EntityData.animBase+2,x
235:1	.14be	8094be	e2 20		sep #$20		SEP #$20
3691:4	.14c0	8094c0	80 c6		bra $809488		bra _nextEnt

3693							.as
3694							.xs
3695	.14c2	8094c2					deactivateAllEntities
3696	.14c2	8094c2					_ASSERT_jsr
3697	.14c2	8094c2					_ASSERT_axy8
3698	.14c2	8094c2	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3699	.14c4	8094c4	9e 00 01	stz $800100,x	-	stz EntityData.active,x
3700	.14c7	8094c7	ca		dex			dex
3701	.14c8	8094c8	10 fa		bpl $8094c4		bpl -
3702	.14ca	8094ca	60		rts			rts

3704							.as
3705							.xs
3706							; build hte collision data for each ent first
3707	.14cb	8094cb					BuildEntCollisionTable
3708	.14cb	8094cb					_ASSERT_jsr
3709	.14cb	8094cb					_ASSERT_axy8
3710	.14cb	8094cb	a2 18		ldx #$18		ldx # kEntity.maxEntities-1	; for all possible ents
3711	.14cd	8094cd					-
3712	.14cd	8094cd	bd 00 01	lda $800100,x		lda EntityData.active,x			; if it active
3713	.14d0	8094d0	f0 03		beq $8094d5		beq +
3714	.14d2	8094d2	20 05 a0	jsr $80a005			jsr MakeMinMaxXYForX			; calc the collision box
3715	.14d5	8094d5					+
3716	.14d5	8094d5	ca		dex			dex
3717	.14d6	8094d6	10 f5		bpl $8094cd		bpl -
3718	.14d8	8094d8	60		rts			rts

3720							.as
3721							.xs
3722	.14d9	8094d9					addYDeltaEnt
3723	.14d9	8094d9					_ASSERT_jsr
3724	.14d9	8094d9					_ASSERT_axy8
3725	.14d9	8094d9	a6 02		ldx $02			ldx CurrentEntity
3726	.14db	8094db	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3727	.14de	8094de	18		clc			clc
3728	.14df	8094df	6d 8c 02	adc $80028c		adc checkSpriteToCharData.yDeltaCheck
3729	.14e2	8094e2	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3730	.14e5	8094e5	60		rts			rts

3732							.as
3733							.xs
3734	.14e6	8094e6					updateEntities
3735	.14e6	8094e6					_ASSERT_jsr
3736	.14e6	8094e6					_ASSERT_axy8
3737	.14e6	8094e6	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3738	.14e8	8094e8					innerEntitiesLoop
3739	.14e8	8094e8	bd 00 01	lda $800100,x		lda EntityData.active,x												; is it active
3740	.14eb	8094eb	d0 23		bne $809510		bne EntitiesActive
3741	.14ed	8094ed	bd 96 01	lda $800196,x			lda EntityData.entState,x										; if the state is positive then its dead dead
3742	.14f0	8094f0	10 1a		bpl $80950c			bpl updateEntitiesLoop
3743	.14f2	8094f2	c9 fe		cmp #$fe				cmp #kEntity.deadFromRedBullet							; is this dead dead?
3744	.14f4	8094f4	f0 16		beq $80950c				beq updateEntitiesLoop
3745	.14f6	8094f6	de 19 01	dec $800119,x					dec EntityData.movTimer,x								; count down the respawn timer
3746	.14f9	8094f9	bd 19 01	lda $800119,x					lda EntityData.movTimer,x
3747	.14fc	8094fc	d0 0e		bne $80950c					bne updateEntitiesLoop
3748	.14fe	8094fe	bd 7d 01	lda $80017d,x						lda EntityData.originalY,x							; put the enemy back in the visible screen
3749	.1501	809501	9d c8 03	sta $8003c8,x						sta mplexBuffer.yPos+kEntsSpriteOffset,x
3750	.1504	809504	9e 96 01	stz $800196,x						stz EntityData.entState,x							; clear the state
3751	.1507	809507	a9 01		lda #$01						lda #1
3752	.1509	809509	9d 00 01	sta $800100,x						sta EntityData.active,x								; make it active again
3753	.150c	80950c					updateEntitiesLoop
3754	.150c	80950c	ca		dex			dex
3755	.150d	80950d	10 d9		bpl $8094e8		bpl innerEntitiesLoop
3756	.150f	80950f	60		rts			rts

3758								.as
3759							.xs
3760	.1510	809510					EntitiesActive
3761	.1510	809510	86 02		stx $02			stx CurrentEntity
3762	.1512	809512	bd ce 00	lda $8000ce,x		lda EntityData.type,x
3763	.1515	809515	0a		asl a			asl a
3764	.1516	809516	aa		tax			tax
3765	.1517	809517	7c 1a 95	jmp ($80951a,x)		jmp (EntUpdateFuncLUT,x)
3766								; this table needs to be in kEntity order
3767	>151a	80951a	36 95 9e 97 36 95 69 99		EntUpdateFuncLUT .word <>(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)
	>1522	809522	b5 98 5d 96 01 96 25 97 87 9a 87 9a d2 99 d2 99
	>1532	809532	d7 99 d2 99

3769							.as
3770							.xs
3771	.1536	809536					entNormalMovement								; this if for things that just move and don't stop till dead
3772	.1536	809536					_ASSERT_jsr
3773	.1536	809536					_ASSERT_axy8
3774	.1536	809536	a6 02		ldx $02			ldx CurrentEntity
3775	.1538	809538	20 16 9a	jsr $809a16		jsr updateEntAnimAndSetSprite			; updatge the animation
3776	.153b	80953b	b9 a5 9c	lda $809ca5,y		lda EntityAnimData.collisionBox,y	; y is the ent type
3777	.153e	80953e	85 1e		sta $1e			sta CollideSpriteBoxIndex
3459	.1540	809540	e8		inx			inx
3460	.1541	809541	e8		inx			inx
3779	.1542	809542	86 1d		stx $1d			stx CollideSpriteToCheck
239:1	.1544	809544	c2 20		rep #$20		REP #$20
3781:4	.1546	809546	a9 8e 99	lda #$998e		lda #<>handleEntCollisionResult		; set the post collision callback
3782	.1549	809549	85 06		sta $06			sta Pointer1
235:1	.154b	80954b	e2 20		sep #$20		SEP #$20
3784:4	.154d	80954d	a6 02		ldx $02			ldx CurrentEntity
3785	.154f	80954f	bd 13 02	lda $800213,x		lda EntityData.speed,x					; cache the ent move speed in to y
3786	.1552	809552	a8		tay			tay
3787	.1553	809553	bd e7 00	lda $8000e7,x		lda EntityData.direction,x				; dispatch based upon direction
3788	.1556	809556	0a		asl a			asl a
3789	.1557	809557	aa		tax			tax
3790	.1558	809558	64 05		stz $05			stz CollisionResult
3791	.155a	80955a	7c 5d 95	jmp ($80955d,x)		jmp (ENTDirectionCheckFuncLUT,x)
3792	>155d	80955d	6d 95 92 95 b7 95 de 95		ENTDirectionCheckFuncLUT .word <>(entRight,entUp,entLeft,entDown)

3794							; this is ent direction per row and then slow,fast delta values
3795	>1565	809565	02 04				entPositiveTBL		.byte  2, 4
3796	>1567	809567	01 02				entPositiveTBLUD	.byte  1, 2
3797	>1569	809569	fe fc				entNegativeTBL		.char -2,-4
3798	>156b	80956b	ff fe				entNegativeTBLUD	.char -1,-2

3800	.156d	80956d					entRight
3801	.156d	80956d					_ASSERT_axy8
3802	.156d	80956d	b9 65 95	lda $809565,y		lda entPositiveTBL,y
3803	.1570	809570	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck
3804	.1573	809573	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
3805	.1576	809576	a9 00		lda #$00		lda #0
3806	.1578	809578	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck	; set X +ve Y 0
3807	.157b	80957b	8d 8d 02	sta $80028d		sta checkSpriteToCharData.yDeltaCheck.hi
3808	.157e	80957e					entRightNoDelta
3809	.157e	80957e					_ASSERT_axy8
3810	.157e	80957e	20 85 9f	jsr $809f85		jsr newCollision								; check it against the world
3811	.1581	809581	a5 22		lda $22			lda CollideCharTRC							; get the Top right character
3812	.1583	809583	20 39 a0	jsr $80a039		jsr checkSolidTile							; is that solid?
3813	.1586	809586	26 05		rol $05			rol CollisionResult							; store the C flag into the result
3814	.1588	809588	a5 26		lda $26			lda CollideCharBRC							; get the Bottom right character
3815	.158a	80958a	20 39 a0	jsr $80a039		jsr checkSolidTile							; is that solid?
3816	.158d	80958d	26 05		rol $05			rol CollisionResult							; store the C flag into the result so we have both
3817	.158f	80958f	6c 06 00	jmp ($0006)		jmp (Pointer1)									; call the callback

3819	.1592	809592					entUp
3820	.1592	809592					_ASSERT_axy8
3821	.1592	809592	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck
3822	.1595	809595	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
3823	.1598	809598	b9 6b 95	lda $80956b,y		lda entNegativeTBLUD,y
3824	.159b	80959b	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck	; set X 0 Y -ve
3825	.159e	80959e	a9 ff		lda #$ff		lda #$ff
3826	.15a0	8095a0	8d 8d 02	sta $80028d		sta checkSpriteToCharData.yDeltaCheck.hi
3827	.15a3	8095a3					entUpNoDelta
3828	.15a3	8095a3					_ASSERT_axy8
3829	.15a3	8095a3	20 85 9f	jsr $809f85		jsr newCollision
3830	.15a6	8095a6	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3831	.15a8	8095a8	20 39 a0	jsr $80a039		jsr checkSolidTile
3832	.15ab	8095ab	26 05		rol $05			rol CollisionResult
3833	.15ad	8095ad	a5 22		lda $22			lda CollideCharTRC							; check Top Right Char
3834	.15af	8095af	20 39 a0	jsr $80a039		jsr checkSolidTile
3835	.15b2	8095b2	26 05		rol $05			rol CollisionResult
3836	.15b4	8095b4	6c 06 00	jmp ($0006)		jmp (Pointer1)

3838	.15b7	8095b7					entLeft
3839	.15b7	8095b7					_ASSERT_axy8
3840	.15b7	8095b7	b9 69 95	lda $809569,y		lda entNegativeTBL,y
3841	.15ba	8095ba	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck
3842	.15bd	8095bd	a9 ff		lda #$ff		lda #$ff
3843	.15bf	8095bf	8d 8b 02	sta $80028b		sta checkSpriteToCharData.xDeltaCheck.hi
3844	.15c2	8095c2	a9 00		lda #$00		lda #0
3845	.15c4	8095c4	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck	; set X -ve Y 0
3846	.15c7	8095c7	8d 8d 02	sta $80028d		sta checkSpriteToCharData.yDeltaCheck.hi
3847	.15ca	8095ca					entLeftNoDelta
3848	.15ca	8095ca					_ASSERT_axy8
3849	.15ca	8095ca	20 85 9f	jsr $809f85		jsr newCollision
3850	.15cd	8095cd	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3851	.15cf	8095cf	20 39 a0	jsr $80a039		jsr checkSolidTile
3852	.15d2	8095d2	26 05		rol $05			rol CollisionResult
3853	.15d4	8095d4	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3854	.15d6	8095d6	20 39 a0	jsr $80a039		jsr checkSolidTile
3855	.15d9	8095d9	26 05		rol $05			rol CollisionResult
3856	.15db	8095db	6c 06 00	jmp ($0006)		jmp (Pointer1)

3858	.15de	8095de					entDown
3859	.15de	8095de					_ASSERT_axy8
3860	.15de	8095de	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck
3861	.15e1	8095e1	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
3862	.15e4	8095e4	b9 67 95	lda $809567,y		lda entPositiveTBLUD,y
3863	.15e7	8095e7	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck	; set X - Y +ve
3864	.15ea	8095ea	9c 8d 02	stz $80028d		stz checkSpriteToCharData.yDeltaCheck.hi
3865	.15ed	8095ed					entDownNoDelta
3866	.15ed	8095ed					_ASSERT_axy8
3867	.15ed	8095ed	20 85 9f	jsr $809f85		jsr newCollision
3868	.15f0	8095f0	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3869	.15f2	8095f2	20 39 a0	jsr $80a039		jsr checkSolidTile
3870	.15f5	8095f5	26 05		rol $05			rol CollisionResult
3871	.15f7	8095f7	a5 26		lda $26			lda CollideCharBRC							; check Bottom Right Char
3872	.15f9	8095f9	20 39 a0	jsr $80a039		jsr checkSolidTile
3873	.15fc	8095fc	26 05		rol $05			rol CollisionResult
3874	.15fe	8095fe	6c 06 00	jmp ($0006)		jmp (Pointer1)

3876	.1601	809601					entFishFunc
3877	.1601	809601					_ASSERT_axy8
3878	.1601	809601	a6 02		ldx $02			ldx CurrentEntity
3879	.1603	809603	de 19 01	dec $800119,x		dec EntityData.movTimer,x
3880	.1606	809606	bd 19 01	lda $800119,x		lda EntityData.movTimer,x					; time to update ?
3881	.1609	809609	30 0e		bmi $809619		bmi _next
3882	.160b	80960b	29 01		and #$01			and #1										; if an even frame skip
3883	.160d	80960d	d0 07		bne $809616			bne _exit
3884	.160f	80960f	bd 96 01	lda $800196,x				lda EntityData.entState,x			; if we were moved to have to move faster
3885	.1612	809612	f0 02		beq $809616				beq _exit
3886	.1614	809614	80 17		bra $80962d					bra _keepGoing						; move again, aka double the speed
3887	.1616	809616					_exit
3888	.1616	809616	4c d2 99	jmp $8099d2		jmp NextEnt
3889								;
3890	.1619	809619					_next
3891	.1619	809619	a9 04		lda #$04		lda #4
3892	.161b	80961b	9d 19 01	sta $800119,x		sta EntityData.movTimer,x
3893	.161e	80961e					_moveFish
3894	.161e	80961e	bd 96 01	lda $800196,x		lda EntityData.entState,x					; in ent state
3895	.1621	809621	18		clc			clc
3896	.1622	809622	69 01		adc #$01		adc #1
3897	.1624	809624	c9 22		cmp #$22		cmp #kSinJumpMax								; move to next in table and clamp highest
3898	.1626	809626	d0 02		bne $80962a		bne _storeDirect
3899	.1628	809628	a9 21		lda #$21			lda #kSinJumpMax-1
3900	.162a	80962a					_storeDirect
3901	.162a	80962a	9d 96 01	sta $800196,x		sta EntityData.entState,x
3902	.162d	80962d					_keepGoing
3903	.162d	80962d	a8		tay			tay
3904	.162e	80962e	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3905	.1631	809631	18		clc			clc
3906	.1632	809632	79 bb 9c	adc $809cbb,y		adc SinJumpTable,y							; add Y up to to the limit
3907	.1635	809635	c9 c5		cmp #$c5		cmp #kFishLimits.maxY
3908	.1637	809637	90 0a		bcc $809643		bcc _store
3909	.1639	809639	9e 96 01	stz $800196,x			stz EntityData.entState,x				; reset the state
3910	.163c	80963c	a9 20		lda #$20			lda #32
3911	.163e	80963e	9d 19 01	sta $800119,x			sta EntityData.movTimer,x				; pause for a bit while you flip
3912	.1641	809641	a9 c5		lda #$c5			lda #kFishLimits.maxY
3913	.1643	809643					_store
3914	.1643	809643	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3915	.1646	809646	bd 96 01	lda $800196,x		lda EntityData.entState,x					; set the anim frame from table index / 4
3916	.1649	809649	4a		lsr a			lsr a
3917	.164a	80964a	4a		lsr a			lsr a												; div 4
3918	.164b	80964b	c9 08		cmp #$08		cmp #8
3919	.164d	80964d	90 02		bcc $809651		bcc _safe
3920	.164f	80964f	a9 07		lda #$07			lda #7
3921	.1651	809651					_safe
3922	.1651	809651	18		clc			clc
3923	.1652	809652	69 30		adc #$30		adc #FishRawAnimData[0]						; use the left frame
3924	.1654	809654	9d 4b 01	sta $80014b,x		sta EntityData.animBase,x
3925	.1657	809657	9e 64 01	stz $800164,x		stz EntityData.animFrame,x
3926	.165a	80965a	4c d2 99	jmp $8099d2		jmp nextEnt

3928	.165d	80965d					entSpiderFunc
3929	.165d	80965d					_ASSERT_axy8
3930	.165d	80965d	a6 02		ldx $02			ldx CurrentEntity
3931	.165f	80965f	bd 96 01	lda $800196,x		lda EntityData.entState,x
3932	.1662	809662	0a		asl a			asl a
3933	.1663	809663	aa		tax			tax
3934	.1664	809664	7c 67 96	jmp ($809667,x)		jmp (SpiderEntFuncLUT,x)
3935	>1667	809667	6d 96 c2 96 05 97		SpiderEntFuncLUT .word <> (spiderLookPlayer,spiderFall,spiderRise)

3937	.166d	80966d					spiderLookPlayer
3938	.166d	80966d					_ASSERT_axy8
3939	.166d	80966d	a2 00		ldx #$00		ldx #0
3940	.166f	80966f	86 10		stx $10			stx ZPTemp2
3941	.1671	809671	ad 84 03	lda $800384		lda mplexBuffer.xpos
3942	.1674	809674	85 0f		sta $0f			sta ZPTemp											; store the player X
3943	.1676	809676	a6 02		ldx $02			ldx CurrentEntity
3459	.1678	809678	e8		inx			inx
3460	.1679	809679	e8		inx			inx
3945	.167a	80967a	bd 84 03	lda $800384,x		lda mplexBuffer.xpos,x
3946	.167d	80967d	e5 0f		sbc $0f			sbc ZPTemp
3947	.167f	80967f	85 0f		sta $0f			sta ZPTemp											; my X - playerX
3948	.1681	809681	b0 26		bcs $8096a9		bcs _left
3949	.1683	809683	c9 d1		cmp #$d1			cmp #kSpiderValues.rightStartWiggle		; player is to my right but are they in wiggle distance
3950	.1685	809685	90 11		bcc $809698			bcc +
3951	.1687	809687	a9 01		lda #$01				lda #1										; yes set animation to wiggle
3952	.1689	809689	85 10		sta $10					sta ZPTemp2
3953	.168b	80968b	a5 0f		lda $0f					lda ZPTemp
3954	.168d	80968d	c9 e1		cmp #$e1				cmp #kSpiderValues.rightStartFall	; is it it fall distance
3955	.168f	80968f	90 07		bcc $809698				bcc +
3956	.1691	809691	a9 01		lda #$01					lda #1
3957	.1693	809693	a6 02		ldx $02						ldx CurrentEntity
3958	.1695	809695	9d 96 01	sta $800196,x					sta EntityData.entState,x			; set to falling state
3959	.1698	809698	a9 2a		lda #$2a		+	lda #kSprites.spiderRight					; no
3960	.169a	80969a						_storeSprite
3961	.169a	80969a	a6 02		ldx $02				ldx CurrentEntity
3962	.169c	80969c	9d 4b 01	sta $80014b,x			sta EntityData.animBase,x					; store the animation
3963	.169f	80969f	a5 10		lda $10				lda ZPTemp2
3964	.16a1	8096a1	f0 03		beq $8096a6			beq _noAnim										; are we going to wiggle?
3965	.16a3	8096a3	20 16 9a	jsr $809a16				jsr updateEntAnimAndSetSprite
3966	.16a6	8096a6						_noAnim
3967	.16a6	8096a6	4c d2 99	jmp $8099d2			jmp nextEnt
3968									;
3969	.16a9	8096a9					_left
3970	.16a9	8096a9	c9 2e		cmp #$2e		cmp #kSpiderValues.leftStartWiggle			; left side, are we on the left side
3971	.16ab	8096ab	b0 11		bcs $8096be		bcs +
3972	.16ad	8096ad	a9 01		lda #$01			lda #1
3973	.16af	8096af	85 10		sta $10				sta ZPTemp2										; we want wriggle animation
3974	.16b1	8096b1	a5 0f		lda $0f				lda ZPTemp
3975	.16b3	8096b3	c9 1e		cmp #$1e			cmp #kSpiderValues.leftStartFall			; in fall distance
3976	.16b5	8096b5	b0 07		bcs $8096be			bcs +
3977	.16b7	8096b7	a9 01		lda #$01				lda #1
3978	.16b9	8096b9	a6 02		ldx $02					ldx CurrentEntity							; go the fall difference
3979	.16bb	8096bb	9d 96 01	sta $800196,x				sta EntityData.entState,x
3980	.16be	8096be	a9 28		lda #$28	+	lda #kSprites.spiderLeft						; set to left animation
3981	.16c0	8096c0	80 d8		bra $80969a		bra _storeSprite
3982								;

3984	.16c2	8096c2					spiderFall
3985	.16c2	8096c2					_ASSERT_axy8
3986	.16c2	8096c2	a6 02		ldx $02			ldx CurrentEntity
3987	.16c4	8096c4	20 16 9a	jsr $809a16		jsr updateEntAnimAndSetSprite					; update the animation as we are wiggling
3988	.16c7	8096c7	ad aa 9c	lda $809caa		lda EntityAnimData.collisionBox+kEntity.spider
3989	.16ca	8096ca	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set the collision as we fall till we hit something
3990	.16cc	8096cc	a6 02		ldx $02			ldx CurrentEntity
3459	.16ce	8096ce	e8		inx			inx
3460	.16cf	8096cf	e8		inx			inx
3992	.16d0	8096d0	86 1d		stx $1d			stx CollideSpriteToCheck
3993	.16d2	8096d2	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck
3994	.16d5	8096d5	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
3995	.16d8	8096d8	a9 02		lda #$02		lda #kSpiderValues.yFallDelta
3996	.16da	8096da	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck		; check below me
3997	.16dd	8096dd	20 85 9f	jsr $809f85		jsr newCollision
3998	.16e0	8096e0	a5 24		lda $24			lda CollideCharBLC								; is the bottom left char solid
3999	.16e2	8096e2	20 39 a0	jsr $80a039		jsr checkSolidTile								; spiders are tile aligned so if you hit the left you hit the right
4000	.16e5	8096e5	90 0f		bcc $8096f6		bcc _noColide
4001	.16e7	8096e7						_collide
4002	.16e7	8096e7	a9 02		lda #$02			lda #2
4003	.16e9	8096e9	a6 02		ldx $02				ldx CurrentEntity
4004	.16eb	8096eb	9d 96 01	sta $800196,x			sta EntityData.entState,x					; set to the rise state
4005	.16ee	8096ee	a9 20		lda #$20			lda #kSpiderValues.pauseEndFallFrames
4006	.16f0	8096f0	9d 19 01	sta $800119,x			sta EntityData.movTimer,x					; make it stop for a bit first
4007	.16f3	8096f3	4c d2 99	jmp $8099d2			jmp nextEnt
4008									;
4009	.16f6	8096f6					_noColide
4010	.16f6	8096f6	a6 02		ldx $02			ldx CurrentEntity
4011	.16f8	8096f8	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4012	.16fb	8096fb	c9 b0		cmp #$b0		cmp #kBounds.screenMaxY-16						; make sure we don't go off the bottom of the screen
4013	.16fd	8096fd	b0 e8		bcs $8096e7		bcs _collide
4014	.16ff	8096ff	20 d9 94	jsr $8094d9			jsr addYDeltaEnt
4015	.1702	809702	4c d2 99	jmp $8099d2			jmp nextEnt

4017	.1705	809705					spiderRise
4018	.1705	809705					_ASSERT_axy8
4019	.1705	809705	a6 02		ldx $02			ldx CurrentEntity
4020	.1707	809707	de 19 01	dec $800119,x		dec EntityData.movTimer,x
4021	.170a	80970a	10 16		bpl $809722		bpl +
4022	.170c	80970c	a9 03		lda #$03			lda #kSpiderValues.riseDelayTime				; set to the slower rise time
4023	.170e	80970e	9d 19 01	sta $800119,x			sta EntityData.movTimer,x
4024	.1711	809711	bd c8 03	lda $8003c8,x			lda mplexBuffer.ypos+kEntsSpriteOffset,x
4025	.1714	809714	38		sec				sec
4026	.1715	809715	e9 01		sbc #$01			sbc #1
4027	.1717	809717	9d c8 03	sta $8003c8,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x	; move up slowly
4028	.171a	80971a	dd 7d 01	cmp $80017d,x			cmp EntityData.originalY,x						; until we hit the spawn height
4029	.171d	80971d	d0 03		bne $809722			bne +
4030	.171f	80971f	9e 96 01	stz $800196,x				stz EntityData.entState,x					; return to wait state
4031	.1722	809722	4c d2 99	jmp $8099d2	+	jmp nextEnt

4033	.1725	809725					circlerFunc
4034	.1725	809725					_ASSERT_axy8
4035	.1725	809725	a6 02		ldx $02			ldx CurrentEntity
4036	.1727	809727	de 19 01	dec $800119,x		dec EntityData.movTimer,x							; time to move?
4037	.172a	80972a	30 03		bmi $80972f		bmi _cirActive
4038	.172c	80972c	4c d2 99	jmp $8099d2			jmp nextEnt
4039	.172f	80972f					_cirActive
4040	.172f	80972f	a9 04		lda #$04		lda #4
4041	.1731	809731	9d 19 01	sta $800119,x		sta EntityData.movTimer,x							; set timer
4042	.1734	809734	bd 96 01	lda $800196,x		lda EntityData.entState,x							; state in this case is circle table index
4043	.1737	809737	a4 02		ldy $02			ldy CurrentEntity
4044	.1739	809739	aa		tax			tax
4045	.173a	80973a	bd 00 9d	lda $809d00,x		lda CircleJumpTableStart,x
4046	.173d	80973d	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck			; set the x Delta
4047	.1740	809740	10 07		bpl $809749		bpl +
4048	.1742	809742	a9 ff		lda #$ff			lda #$ff
4049	.1744	809744	8d 8b 02	sta $80028b			sta checkSpriteToCharData.xDeltaCheck.hi
4050	.1747	809747	80 03		bra $80974c			bra ++
4051	.1749	809749	9c 8b 02	stz $80028b	+	stz checkSpriteToCharData.xDeltaCheck.hi
4052	.174c	80974c					+	; add X with MSB offset
4053	.174c	80974c	b9 86 03	lda $800386,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4054	.174f	80974f	18		clc			clc
4055	.1750	809750	6d 8a 02	adc $80028a		adc checkSpriteToCharData.xDeltaCheck
4056	.1753	809753	85 0f		sta $0f			sta ZPTemp												; get the new X position
4057								; xdelta +ve if this is +ve but original was -ve we have gone over
4058	.1755	809755	ad 8a 02	lda $80028a		lda checkSpriteToCharData.xDeltaCheck
4059	.1758	809758	30 10		bmi $80976a		bmi _subbedX
4060	.175a	80975a	b9 86 03	lda $800386,y			lda mplexBuffer.xpos+kEntsSpriteOffset,y
4061	.175d	80975d	10 19		bpl $809778			bpl _loadX
4062										; so last pos in negative >80
4063	.175f	80975f	a5 0f		lda $0f					lda ZPTemp
4064	.1761	809761	30 15		bmi $809778				bmi _storeX
4065										; new pos is positive 0-80
4066	.1763	809763	a9 01		lda #$01					lda #1			; enable MSB
4067	.1765	809765	99 a7 03	sta $8003a7,y					sta mplexBuffer.xmsb+kEntsSpriteOffset,y ; was >80 now <80 gone over 256
4068	.1768	809768	80 0e		bra $809778					bra _storeX
4069	.176a	80976a					_subbedX
4070								; xdelta -ve if this is -ve but original was +ve we have gone over
4071	.176a	80976a	b9 86 03	lda $800386,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4072	.176d	80976d	30 09		bmi $809778		bmi _loadX
4073									; last post is positive >80
4074	.176f	80976f	a5 0f		lda $0f				lda ZPTemp
4075	.1771	809771	10 05		bpl $809778			bpl _storeX
4076	.1773	809773	a9 00		lda #$00				lda #0												; was <80 now > 80 gone under 0
4077	.1775	809775	99 a7 03	sta $8003a7,y				sta mplexBuffer.xmsb+kEntsSpriteOffset,y	; clear msb
4078	.1778	809778					_loadX
4079	.1778	809778					_storeX
4080	.1778	809778	a5 0f		lda $0f			lda ZPTemp
4081	.177a	80977a	99 86 03	sta $800386,y		sta mplexBuffer.xpos+kEntsSpriteOffset,y			; set final X position
4082								; now to do it for the Y
4083	.177d	80977d	b9 c8 03	lda $8003c8,y		lda mplexBuffer.ypos+kEntsSpriteOffset,y
4084	.1780	809780	18		clc			clc
4085	.1781	809781	7d 0d 9d	adc $809d0d,x		adc CircleJumpTableStart+(CircleJumpTableCount/4)+1,x	; this is basically COS Theta = SIN Theta+90
4086	.1784	809784	99 c8 03	sta $8003c8,y		sta mplexBuffer.ypos+kEntsSpriteOffset,y					; the table is longer with repeats to avoid needing to wrap
4087	.1787	809787	a6 02		ldx $02			ldx CurrentEntity
4088	.1789	809789	bd 96 01	lda $800196,x		lda EntityData.entState,x
4089	.178c	80978c	18		clc			clc
4090	.178d	80978d	69 01		adc #$01		adc #1
4091	.178f	80978f	c9 30		cmp #$30		cmp # CircleJumpTableCount
4092	.1791	809791	d0 02		bne $809795		bne _cirStore
4093	.1793	809793	a9 00		lda #$00			lda #0
4094	.1795	809795					_cirStore
4095	.1795	809795	9d 96 01	sta $800196,x		sta EntityData.entState,x										; cicle index += 1 and wrap at length
4096	.1798	809798	20 16 9a	jsr $809a16		jsr updateEntAnimAndSetSprite
4097	.179b	80979b	4c d2 99	jmp $8099d2		jmp nextEnt

4099	.179e	80979e					springEntFunc
4100	.179e	80979e	a6 02		ldx $02			ldx CurrentEntity
4101	.17a0	8097a0	de 19 01	dec $800119,x		dec EntityData.movTimer,x										; time to move?
4102	.17a3	8097a3	30 03		bmi $8097a8		bmi _move
4103	.17a5	8097a5	4c d2 99	jmp $8099d2			jmp nextEnt
4104									;
4105	.17a8	8097a8					_move
4106	.17a8	8097a8	a9 03		lda #$03		lda #3
4107	.17aa	8097aa	9d 19 01	sta $800119,x		sta EntityData.movTimer,x
4108								; update Y component
4109	.17ad	8097ad	bd 96 01	lda $800196,x		lda EntityData.entState,x
4110	.17b0	8097b0	85 0f		sta $0f			sta ZPTemp
4111	.17b2	8097b2	a8		tay			tay
4112	.17b3	8097b3	b9 bb 9c	lda $809cbb,y		lda SinJumpTable,y
4113	.17b6	8097b6	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck						; first we check down on the jump
4114	.17b9	8097b9	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck
4115	.17bc	8097bc	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
4116	.17bf	8097bf	64 05		stz $05			stz CollisionResult
4117	.17c1	8097c1	a9 02		lda #$02		lda #2																; this might change per frame
4118	.17c3	8097c3	85 1e		sta $1e			sta CollideSpriteBoxIndex										; it hasn't but that is something you might want to improve
3459	.17c5	8097c5	e8		inx			inx
3460	.17c6	8097c6	e8		inx			inx
4120	.17c7	8097c7	86 1d		stx $1d			stx CollideSpriteToCheck
239:1	.17c9	8097c9	c2 20		rep #$20		REP #$20
4122:4	.17cb	8097cb	a9 e4 97	lda #$97e4		lda #<>springEntYCollideEnd									; set post collision callback
4123	.17ce	8097ce	85 06		sta $06			sta Pointer1
235:1	.17d0	8097d0	e2 20		sep #$20		SEP #$20
4125:4	.17d2	8097d2	a5 0f		lda $0f			lda ZPTemp
4126	.17d4	8097d4	c9 11		cmp #$11		cmp #kSinJumpFall													; this is the index where the table goes from -ve to +ve
4127	.17d6	8097d6	b0 07		bcs $8097df		bcs _falling
4128									; rising
4129	.17d8	8097d8	a9 11		lda #$11			lda #kSinJumpFall												; start falling index in case of contact
4130	.17da	8097da	85 10		sta $10				sta ZPTemp2
4131	.17dc	8097dc	4c a3 95	jmp $8095a3			jmp entUpNoDelta
4132									;
4133	.17df	8097df					_falling
4134	.17df	8097df	64 10		stz $10			stz ZPTemp2															; hit ground, start jumping
4135	.17e1	8097e1	4c ed 95	jmp $8095ed		jmp entDownNoDelta
4136								;
4137	.17e4	8097e4					springEntYCollideEnd
4138	.17e4	8097e4					_ASSERT_axy8
4139	.17e4	8097e4	a5 05		lda $05			lda CollisionResult
4140	.17e6	8097e6	d0 21		bne $809809		bne _hit
4141	.17e8	8097e8	20 14 9f	jsr $809f14			jsr collideEntAgainstRest
4142	.17eb	8097eb	b0 1c		bcs $809809			bcs _hit
4143	.17ed	8097ed	a6 02		ldx $02					ldx CurrentEntity											; didn't hit so carry on
4144	.17ef	8097ef	bd c8 03	lda $8003c8,x				lda mplexBuffer.ypos+kEntsSpriteOffset,x
4145										;clc
4146	.17f2	8097f2	6d 8c 02	adc $80028c				adc checkSpriteToCharData.yDeltaCheck
4147	.17f5	8097f5	9d c8 03	sta $8003c8,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
4148	.17f8	8097f8	bd 96 01	lda $800196,x				lda EntityData.entState,x								; move to next state in the arc
4149	.17fb	8097fb	18		clc					clc
4150	.17fc	8097fc	69 01		adc #$01				adc #1
4151	.17fe	8097fe	c9 22		cmp #$22				cmp #kSinJumpMax											; clamp to max fall speed
4152	.1800	809800	90 02		bcc $809804				bcc _store
4153	.1802	809802	a9 21		lda #$21					lda #kSinJumpMax-1
4154	.1804	809804					_store
4155	.1804	809804					_ASSERT_A_lt_34
4156	.1804	809804	9d 96 01	sta $800196,x		sta EntityData.entState,x
4157	.1807	809807	80 07		bra $809810		gra springEntHandleX
4158								;
4159	.1809	809809					_hit
4160	.1809	809809	a6 02		ldx $02			ldx CurrentEntity
4161	.180b	80980b	a5 10		lda $10			lda ZPTemp2															; this was set to the target jump index pre coll function
4162	.180d	80980d						_ASSERT2_A_lt_34
4163	.180d	80980d	9d 96 01	sta $800196,x		sta EntityData.entState,x
4164	.1810	809810					springEntHandleX
4165	.1810	809810	9c 8c 02	stz $80028c		stz checkSpriteToCharData.yDeltaCheck						; now Y has been delt with, do the X
4166	.1813	809813	64 05		stz $05			stz CollisionResult
239:1	.1815	809815	c2 20		rep #$20		REP #$20
4168:4	.1817	809817	a9 3d 98	lda #$983d		lda #<>springEntXCollideEnd									; set the post collision callback
4169	.181a	80981a	85 06		sta $06			sta Pointer1
235:1	.181c	80981c	e2 20		sep #$20		SEP #$20
4171:4	.181e	80981e	bd e7 00	lda $8000e7,x		lda EntityData.direction,x
4172	.1821	809821	85 0f		sta $0f			sta ZPTemp															; preserve the direction
4173	.1823	809823	18		clc			clc
4174	.1824	809824	69 04		adc #$04		adc #4																; the table is -4 and + 4 values, but indexing is unsinged
4175	.1826	809826	a8		tay			tay																	; so offset by 4 to make it 0 based
4176	.1827	809827	b9 b3 9c	lda $809cb3,y		lda SpringDirectionToDeltaLUT,y
4177	.182a	80982a	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck
4178	.182d	80982d	30 06		bmi $809835		bmi _left
4179	.182f	80982f	9c 8b 02	stz $80028b			stz checkSpriteToCharData.xDeltaCheck.hi
4180	.1832	809832	4c 7e 95	jmp $80957e			jmp entRightNoDelta
4181									;
4182	.1835	809835					_left
4183	.1835	809835	a9 ff		lda #$ff		lda #$ff
4184	.1837	809837	8d 8b 02	sta $80028b		sta checkSpriteToCharData.xDeltaCheck.hi
4185	.183a	80983a	4c ca 95	jmp $8095ca		jmp entLeftNoDelta
4186								;
4187	.183d	80983d					springEntXCollideEnd
4188	.183d	80983d	a6 02		ldx $02			ldx CurrentEntity
4189	.183f	80983f	a5 0f		lda $0f			lda ZPTemp
4190	.1841	809841	30 30		bmi $809873		bmi springEntXLeft												; is the preserved direction negative
4191	.1843	809843	a5 05		lda $05				lda CollisionResult
4192	.1845	809845	f0 09		beq $809850			beq _noCollideRight
4193	.1847	809847							_hit
4194	.1847	809847	a9 ff		lda #$ff				lda #-1
4195	.1849	809849	a6 02		ldx $02					ldx CurrentEntity
4196	.184b	80984b	9d e7 00	sta $8000e7,x				sta EntityData.direction,x								; go the other way slowly at first
4197	.184e	80984e	80 54		bra $8098a4				bra springEndAnimate
4198										;
4199	.1850	809850						_noCollideRight
4200	.1850	809850	20 14 9f	jsr $809f14			jsr collideEntAgainstRest									; did we hit any ents?
4201	.1853	809853	b0 f2		bcs $809847			bcs _hit
4202	.1855	809855	a6 02		ldx $02					ldx CurrentEntity
3459	.1857	809857	e8		inx			inx
3460	.1858	809858	e8		inx			inx
4204	.1859	809859	20 72 85	jsr $808572				jsr addXWithMSBAndClip_88								; didn't hit so move x
3464	.185c	80985c	ca		dex			dex
3465	.185d	80985d	ca		dex			dex
4206	.185e	80985e	a5 2f		lda $2f					lda DidClipX												; if we clip then we need to go the other way
4207	.1860	809860	f0 04		beq $809866				beq _noclip
4208	.1862	809862	a9 ff		lda #$ff					lda #-1
4209	.1864	809864	30 08		bmi $80986e					bmi _store
4210	.1866	809866							_noclip
4211	.1866	809866	bd e7 00	lda $8000e7,x				lda EntityData.direction,x								; accelerate right, this gives the spring a sense of interia
4212	.1869	809869	18		clc					clc
4213	.186a	80986a	69 01		adc #$01				adc #1
4214	.186c	80986c	29 03		and #$03				and #3
4215	.186e	80986e							_store
4216	.186e	80986e	9d e7 00	sta $8000e7,x				sta EntityData.direction,x
4217	.1871	809871	80 31		bra $8098a4				gra springEndAnimate
4218										;
4219	.1873	809873					springEntXLeft
4220	.1873	809873	a5 05		lda $05			lda CollisionResult
4221	.1875	809875	f0 09		beq $809880		beq _noCollideLeft
4222	.1877	809877						_hit
4223	.1877	809877	a9 01		lda #$01			lda #1
4224	.1879	809879	a6 02		ldx $02				ldx CurrentEntity
4225	.187b	80987b	9d e7 00	sta $8000e7,x			sta EntityData.direction,x									; hit wall, so start moving right slowly
4226	.187e	80987e	80 24		bra $8098a4			gra springEndAnimate
4227									;
4228	.1880	809880					_noCollideLeft
4229	.1880	809880	20 14 9f	jsr $809f14		jsr collideEntAgainstRest										; did we hit an ent?
4230	.1883	809883	b0 f2		bcs $809877		bcs _hit
4231	.1885	809885	a6 02		ldx $02				ldx CurrentEntity												; no move on the X
3459	.1887	809887	e8		inx			inx
3460	.1888	809888	e8		inx			inx
4233	.1889	809889	20 72 85	jsr $808572			jsr addXWithMSBAndClip_88
3464	.188c	80988c	ca		dex			dex
3465	.188d	80988d	ca		dex			dex
4235	.188e	80988e	a5 2f		lda $2f				lda DidClipX													; did we hit a wall?
4236	.1890	809890	f0 04		beq $809896			beq _noclip2
4237	.1892	809892	a9 01		lda #$01				lda #1
4238	.1894	809894	80 0b		bra $8098a1				bra _store2													; start going right slowly then
4239										;
4240	.1896	809896					_noClip2
4241	.1896	809896	bd e7 00	lda $8000e7,x		lda EntityData.direction,x
4242	.1899	809899	38		sec			sec
4243	.189a	80989a	e9 01		sbc #$01		sbc #1
4244	.189c	80989c	c9 fb		cmp #$fb		cmp #256-5															; accelerate left
4245	.189e	80989e	d0 01		bne $8098a1		bne _store2
4246	.18a0	8098a0	1a		inc a				inc a  ;256-4
4247	.18a1	8098a1					_store2
4248	.18a1	8098a1	9d e7 00	sta $8000e7,x		sta EntityData.direction,x
4249	.18a4	8098a4					springEndAnimate
4250	.18a4	8098a4	a6 02		ldx $02			ldx CurrentEntity
4251	.18a6	8098a6	bc 96 01	ldy $800196,x		ldy EntityData.entState,x
4252	.18a9	8098a9	b9 de 9c	lda $809cde,y		lda SpringFrameFrameTable,y
4253	.18ac	8098ac	9d 4b 01	sta $80014b,x		sta EntityData.animBase,x										; explicty set the frame
4254	.18af	8098af	9e 64 01	stz $800164,x		stz EntityData.animFrame,x										; with no offset
4255	.18b2	8098b2	4c d2 99	jmp $8099d2		jmp nextEnt
4256								;

4258	.18b5	8098b5					entGhostFunc
4259	.18b5	8098b5					_ASSERT_axy8
4260	.18b5	8098b5	a6 02		ldx $02			ldx CurrentEntity
239:1	.18b7	8098b7	c2 20		rep #$20		REP #$20
4262:4	.18b9	8098b9	a9 e0 98	lda #$98e0		lda #<>entGhostXResults											; set post collsion callback
4263	.18bc	8098bc	85 06		sta $06			sta Pointer1
235:1	.18be	8098be	e2 20		sep #$20		SEP #$20
3459:4	.18c0	8098c0	e8		inx			inx
3460	.18c1	8098c1	e8		inx			inx
4266	.18c2	8098c2	86 1d		stx $1d			stx CollideSpriteToCheck
4267	.18c4	8098c4	a6 02		ldx $02			ldx CurrentEntity
4268	.18c6	8098c6	bd 13 02	lda $800213,x		lda EntityData.speed,x
4269	.18c9	8098c9	a8		tay			tay																	; read the speed and prep it for the call
4270	.18ca	8098ca	bd e7 00	lda $8000e7,x		lda EntityData.direction,x										; read the direction and clamp it if needed
4271	.18cd	8098cd	c9 04		cmp #$04		cmp #4
4272	.18cf	8098cf	90 05		bcc $8098d6		bcc +
4273	.18d1	8098d1	a9 00		lda #$00			lda #0
4274	.18d3	8098d3	9d e7 00	sta $8000e7,x			sta EntityData.direction,x
4275								; 0 00= UpRight
4276								; 1 01= UpLeft
4277	.18d6	8098d6	29 01		and #$01	+	and #1
4278	.18d8	8098d8	f0 03		beq $8098dd		beq ghostLeft
4279							; ghostRight
4280	.18da	8098da	4c 6d 95	jmp $80956d			jmp entRight
4281	.18dd	8098dd					ghostLeft
4282	.18dd	8098dd	4c b7 95	jmp $8095b7		jmp entLeft
4283								;

4285	.18e0	8098e0					entGhostXResults
4286	.18e0	8098e0					_ASSERT_axy8
4287	.18e0	8098e0	a6 02		ldx $02			ldx CurrentEntity
4288	.18e2	8098e2	a5 05		lda $05			lda CollisionResult
4289	.18e4	8098e4	f0 1b		beq $809901		beq _addXDelta
4290	.18e6	8098e6						_toggleX
4291	.18e6	8098e6	a6 02		ldx $02				ldx CurrentEntity
4292	.18e8	8098e8	bd 2c 02	lda $80022c,x			lda EntityData.ignoreColl,x						; this end moves diagionally, which presents issues forf
4293	.18eb	8098eb	d0 23		bne $809910			bne _ignoreCollision									; choosing the next move direction, as you can hit a corner
4294	.18ed	8098ed	09 01		ora #$01				ora #1												; and need to go both right and down at once
4295	.18ef	8098ef	9d 2c 02	sta $80022c,x				sta EntityData.ignoreColl,x					; I use ignoreColl to hold collision state to make a final decision
4296	.18f2	8098f2						_toggleXForce
4297	.18f2	8098f2	a6 02		ldx $02				ldx CurrentEntity
4298	.18f4	8098f4	bd e7 00	lda $8000e7,x			lda EntityData.direction,x
4299	.18f7	8098f7	49 01		eor #$01			eor #1
4300	.18f9	8098f9	9d e7 00	sta $8000e7,x			sta EntityData.direction,x							; toggle the x oomponent
4301	.18fc	8098fc	20 fe 99	jsr $8099fe			jsr setEntSpriteForDirection
4302	.18ff	8098ff	80 18		bra $809919			gra entGhostCheckY
4303									;
4304	.1901	809901					_addXDelta
4305	.1901	809901	20 14 9f	jsr $809f14		jsr collideEntAgainstRest								; do we hit an ent?
4306	.1904	809904	b0 e0		bcs $8098e6		bcs _togglex
4307	.1906	809906	a6 02		ldx $02				ldx CurrentEntity
4308	.1908	809908	bd 2c 02	lda $80022c,x			lda EntityData.ignoreColl,x
4309	.190b	80990b	29 fe		and #$fe			and #$fe ; clear bit 0
4310	.190d	80990d	9d 2c 02	sta $80022c,x			sta EntityData.ignoreColl,x						; we don't worry about flipping on the x anymore as its an ent
4311	.1910	809910					_ignoreCollision
3459	.1910	809910	e8		inx			inx
3460	.1911	809911	e8		inx			inx
4313	.1912	809912	20 72 85	jsr $808572		jsr addXWithMSBAndClip_88								; update the x
4314	.1915	809915	a5 2f		lda $2f			lda DidClipX												; if we clip, got to flip it
4315	.1917	809917	d0 d9		bne $8098f2			bne _toggleXForce
4316	.1919	809919					entGhostCheckY
239:1	.1919	809919	c2 20		rep #$20		REP #$20
4318:4	.191b	80991b	a9 35 99	lda #$9935		lda #<>entGhostYResults									; set the Y post collision pointer
4319	.191e	80991e	85 06		sta $06			sta Pointer1
235:1	.1920	809920	e2 20		sep #$20		SEP #$20
4321:4	.1922	809922	a6 02		ldx $02			ldx CurrentEntity
4322	.1924	809924	bd 13 02	lda $800213,x		lda EntityData.speed,x
4323	.1927	809927	a8		tay			tay															; cache the speed
4324	.1928	809928	bd e7 00	lda $8000e7,x		lda EntityData.direction,x								; and dispatch based upon speed
4325	.192b	80992b	29 02		and #$02		and #2
4326							; 2 10= DownRight
4327							; 3 11= DownLeft
4328	.192d	80992d	d0 03		bne $809932		bne _down
4329								; up
4330	.192f	80992f	82 60 fc	brl $809592		gra entUp
4331	.1932	809932					_down
4332	.1932	809932	82 a9 fc	brl $8095de		gra entDown
4333								;
4334	.1935	809935					entGhostYResults
4335	.1935	809935					_ASSERT_axy8
4336	.1935	809935	a6 02		ldx $02			ldx CurrentEntity
4337	.1937	809937	a5 05		lda $05			lda CollisionResult
4338	.1939	809939	f0 17		beq $809952		beq _entGhostCheckSprites
4339	.193b	80993b						_toggleY
4340	.193b	80993b	a6 02		ldx $02				ldx CurrentEntity
4341	.193d	80993d	bd 2c 02	lda $80022c,x			lda EntityData.ignoreColl,x
4342	.1940	809940	d0 1f		bne $809961			bne _ignoreCollision								; if we already changed
4343	.1942	809942	09 02		ora #$02				ora #2
4344	.1944	809944	9d 2c 02	sta $80022c,x				sta EntityData.ignoreColl,x				; set to make sure we don't again
4345	.1947	809947	bd e7 00	lda $8000e7,x				lda EntityData.direction,x					; toggle the y
4346	.194a	80994a	49 02		eor #$02				eor #2
4347	.194c	80994c	9d e7 00	sta $8000e7,x				sta EntityData.direction,x
4348	.194f	80994f						_entHitAndGoNext
4349	.194f	80994f	82 80 00	brl $8099d2			gra nextEnt
4350	.1952	809952					_entGhostCheckSprites
4351	.1952	809952	20 14 9f	jsr $809f14		jsr collideEntAgainstRest							; did we hit another ent?
4352	.1955	809955	b0 e4		bcs $80993b		bcs _toggleY											; force toggle
4353	.1957	809957	a6 02		ldx $02				ldx CurrentEntity
4354	.1959	809959	bd 2c 02	lda $80022c,x			lda EntityData.ignoreColl,x					; no, clear the lock flag then
4355	.195c	80995c	29 fd		and #$fd			and #%11111101
4356	.195e	80995e	9d 2c 02	sta $80022c,x			sta EntityData.ignoreColl,x
4357	.1961	809961					_ignoreCollision
4358	.1961	809961	20 d9 94	jsr $8094d9		jsr addYDeltaEnt
4359	.1964	809964	20 16 9a	jsr $809a16		jsr updateEntAnimAndSetSprite
4360	.1967	809967	80 69		bra $8099d2		gra nextEnt

4362	.1969	809969					entBat
4363	.1969	809969					_ASSERT_axy8
4364	.1969	809969	a6 02		ldx $02			ldx CurrentEntity											; we check to see if we can fall down
4365	.196b	80996b	ad a8 9c	lda $809ca8		lda EntityAnimData.collisionBox+kEntity.bat		; this might change per frame
4366	.196e	80996e	85 1e		sta $1e			sta CollideSpriteBoxIndex
3459	.1970	809970	e8		inx			inx
3460	.1971	809971	e8		inx			inx
4368	.1972	809972	86 1d		stx $1d			stx CollideSpriteToCheck
239:1	.1974	809974	c2 20		rep #$20		REP #$20
4370:4	.1976	809976	a9 82 99	lda #$9982		lda #<>entBatYResults									; set post collision callback
4371	.1979	809979	85 06		sta $06			sta Pointer1
235:1	.197b	80997b	e2 20		sep #$20		SEP #$20
4373:4	.197d	80997d	a0 01		ldy #$01		ldy #1														; fall fast
4374	.197f	80997f	82 5c fc	brl $8095de		gra entDown
4375								;
4376	.1982	809982					entBatYResults
4377	.1982	809982	a6 02		ldx $02			ldx CurrentEntity
4378	.1984	809984	a5 05		lda $05			lda CollisionResult
4379	.1986	809986	d0 03		bne $80998b		bne _dontFall
4380	.1988	809988	20 d9 94	jsr $8094d9			jsr addYDeltaEnt										; yes update Y
4381	.198b	80998b					_dontFall
4382	.198b	80998b	4c 36 95	jmp $809536		jmp entNormalMovement									; jump to normal left right update


4385	.198e	80998e					handleEntCollisionResult
4386	.198e	80998e					_ASSERT_axy8
4387	.198e	80998e	a6 02		ldx $02			ldx CurrentEntity
4388	.1990	809990	a5 05		lda $05			lda CollisionResult										; did we hit something
4389	.1992	809992	f0 13		beq $8099a7		beq _addDeltas												; no add deltas and away we go
4390	.1994	809994	80 0c		bra $8099a2			bra _skipIgnore										; yes well react to it
4391								;
4392	.1996	809996					_entHitAndGoNext
4393	.1996	809996	a6 02		ldx $02			ldx CurrentEntity
4394	.1998	809998	bd 2c 02	lda $80022c,x		lda EntityData.ignoreColl,x							; does this have ignore flags
4395	.199b	80999b	d0 1c		bne $8099b9		bne _ignoreCollision
4396	.199d	80999d	a9 04		lda #$04			lda #4
4397	.199f	80999f	9d 2c 02	sta $80022c,x			sta EntityData.ignoreColl,x						; set ignore collision, this is so they don't stick together
4398	.19a2	8099a2					_skipIgnore
4399	.19a2	8099a2	20 f0 99	jsr $8099f0		jsr setNextEntDir
4400	.19a5	8099a5	80 2b		bra $8099d2		gra nextEnt
4401								;
4402	.19a7	8099a7					_addDeltas
4403	.19a7	8099a7	20 14 9f	jsr $809f14		jsr collideEntAgainstRest
4404	.19aa	8099aa	b0 ea		bcs $809996		bcs _entHitAndGoNext
4405	.19ac	8099ac	a6 02		ldx $02				ldx CurrentEntity
4406	.19ae	8099ae	bd 2c 02	lda $80022c,x			lda EntityData.ignoreColl,x
4407	.19b1	8099b1	f0 06		beq $8099b9			beq _ignoreCollision
4408	.19b3	8099b3	38		sec					sec													; hasn't collided so clear flag
4409	.19b4	8099b4	e9 01		sbc #$01				sbc #1
4410	.19b6	8099b6	9d 2c 02	sta $80022c,x				sta EntityData.ignoreColl,x					; countdown ignore
4411	.19b9	8099b9					_ignoreCollision
4412	.19b9	8099b9	20 d9 94	jsr $8094d9		jsr addYDeltaEnt											; will set X to current Ent
3459	.19bc	8099bc	e8		inx			inx
3460	.19bd	8099bd	e8		inx			inx
4414	.19be	8099be	20 72 85	jsr $808572		jsr addXWithMSBAndClip_88
4415	.19c1	8099c1	a5 2f		lda $2f			lda DidClipX
4416	.19c3	8099c3	f0 0d		beq $8099d2		beq _skipFlipDueToX
4417	.19c5	8099c5	bd 84 03	lda $800384,x			lda mplexBuffer.xpos,x								; x was increased above
4418	.19c8	8099c8	38		sec				sec
4419	.19c9	8099c9	ed 8a 02	sbc $80028a			sbc checkSpriteToCharData.xDeltaCheck			; undo the move
4420	.19cc	8099cc	9d 84 03	sta $800384,x			sta mplexBuffer.xpos,x
4421	.19cf	8099cf	20 f0 99	jsr $8099f0			jsr setNextEntDir
4422	.19d2	8099d2					_skipFlipDueToX
4423	.19d2	8099d2					nextEnt
4424	.19d2	8099d2	a6 02		ldx $02			ldx CurrentEntity
4425	.19d4	8099d4	4c 0c 95	jmp $80950c		jmp updateEntitiesLoop

4427	.19d7	8099d7					entBubble
4428	.19d7	8099d7					_ASSERT_axy8
4429	.19d7	8099d7	a6 02		ldx $02			ldx CurrentEntity
4430	.19d9	8099d9	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x			; bubbles move up
4431	.19dc	8099dc	38		sec			sec
4432	.19dd	8099dd	e9 01		sbc #$01		sbc #1
4433	.19df	8099df	c9 f0		cmp #$f0		cmp #240														; have we reached off the top of the screen
4434	.19e1	8099e1	d0 05		bne $8099e8		bne _safe
4435	.19e3	8099e3	9e 00 01	stz $800100,x			stz EntityData.active,x
4436	.19e6	8099e6	a9 e0		lda #$e0			lda #kSpriteEmptyVal									; disable sprite
4437	.19e8	8099e8					_safe
4438	.19e8	8099e8	9d c8 03	sta $8003c8,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
4439	.19eb	8099eb	20 16 9a	jsr $809a16		jsr updateEntAnimAndSetSprite
4440	.19ee	8099ee	80 e2		bra $8099d2		gra nextEnt
4441								;

4443	.19f0	8099f0					setNextEntDir
4444	.19f0	8099f0					_ASSERT_axy8
4445	.19f0	8099f0	20 08 9a	jsr $809a08		jsr getEntTableIndex
4446	.19f3	8099f3	b9 3d 9d	lda $809d3d,y		lda NextDirectionLUT,y									; look up the direction based upon current direction
4447	.19f6	8099f6	9d e7 00	sta $8000e7,x		sta EntityData.direction,x
4448	.19f9	8099f9	05 0f		ora $0f			ora ZPTemp													; add the ent type offset to it
4449	.19fb	8099fb	a8		tay			tay
4450	.19fc	8099fc	80 03		bra $809a01		gra setEntFrameForDir									; update the animation
4451								;

4453	.19fe	8099fe					setEntSpriteForDirection
4454	.19fe	8099fe					_ASSERT_jsr
4455	.19fe	8099fe					_ASSERT_axy8
4456	.19fe	8099fe	20 08 9a	jsr $809a08		jsr getEntTableIndex
4457								; fall through
4458	.1a01	809a01					setEntFrameForDir
4459	.1a01	809a01					_ASSERT_axy8
4460	.1a01	809a01	b9 5d 9d	lda $809d5d,y		lda BaseAnimeFrameForDir,y
4461	.1a04	809a04	9d 4b 01	sta $80014b,x		sta EntityData.animBase,x
4462	.1a07	809a07	60		rts			rts

4464	.1a08	809a08					getEntTableIndex
4465	.1a08	809a08					_ASSERT_jsr
4466	.1a08	809a08					_ASSERT_axy8
4467	.1a08	809a08	a6 02		ldx $02			ldx CurrentEntity
4468	.1a0a	809a0a	bd ce 00	lda $8000ce,x		lda EntityData.type,x				; newDirection = table[ent*4+direction]
4469	.1a0d	809a0d	0a		asl a			asl a
4470	.1a0e	809a0e	0a		asl a			asl a
4471	.1a0f	809a0f	85 0f		sta $0f			sta ZPTemp
4472	.1a11	809a11	1d e7 00	ora $8000e7,x		ora EntityData.direction,x
4473	.1a14	809a14	a8		tay			tay
4474	.1a15	809a15	60		rts			rts

4476	.1a16	809a16					updateEntAnimAndSetSprite
4477	.1a16	809a16					_ASSERT_jsr
4478	.1a16	809a16					_ASSERT_axy8
4479	.1a16	809a16	bd ce 00	lda $8000ce,x		lda EntityData.type,x						; get the type for latter
4480	.1a19	809a19	a8		tay			tay
4481	.1a1a	809a1a	fe 32 01	inc $800132,x		inc EntityData.animTimer,x					; inc frame timer
4482	.1a1d	809a1d	bd 32 01	lda $800132,x		lda EntityData.animTimer,x
4483	.1a20	809a20	d9 89 9c	cmp $809c89,y		cmp EntityAnimData.frameRate,y
4484	.1a23	809a23	d0 11		bne $809a36		bne _notAnimUpdate							; nope rts
4485	.1a25	809a25	9e 32 01	stz $800132,x			stz EntityData.animTimer,x				; clear timer
4486	.1a28	809a28	fe 64 01	inc $800164,x			inc EntityData.animFrame,x				; inc and loop frame if needed
4487	.1a2b	809a2b	bd 64 01	lda $800164,x			lda EntityData.animFrame,x
4488	.1a2e	809a2e	d9 7b 9c	cmp $809c7b,y			cmp EntityAnimData.frameCount,y
4489	.1a31	809a31	d0 03		bne $809a36			bne _notAnimUpdate
4490	.1a33	809a33	9e 64 01	stz $800164,x				stz EntityData.animFrame,x
4491	.1a36	809a36					_notAnimUpdate
4492	.1a36	809a36	60		rts			rts


4495	.1a37	809a37					updateBubbles
4496	.1a37	809a37					_ASSERT_jsr
4497	.1a37	809a37					_ASSERT_axy8
4498	.1a37	809a37	ae 5e 02	ldx $80025e		ldx EntityData.numPipes								; does this level have any bubble spawners?
4499	.1a3a	809a3a	f0 4a		beq $809a86		beq _exit
4500	.1a3c	809a3c	ad c5 00	lda $8000c5			lda TickDowns.bubbleTimer
4501	.1a3f	809a3f	d0 45		bne $809a86			bne _exit
4502	.1a41	809a41	ae 68 02	ldx $800268				ldx EntityData.pipeBubbleStart			; run through the ents looking for a free slot to use
4503	.1a44	809a44					_findFreeEnt
4504	.1a44	809a44	bd 00 01	lda $800100,x		lda EntityData.active,x
4505	.1a47	809a47	f0 08		beq $809a51		beq _foundOne
4506	.1a49	809a49	e8		inx				inx
4507	.1a4a	809a4a	ec cd 00	cpx $8000cd			cpx EntityData.number
4508	.1a4d	809a4d	d0 f5		bne $809a44			bne _findFreeEnt
4509	.1a4f	809a4f	80 35		bra $809a86				bra _exit										; no free slots
4510	.1a51	809a51					_foundOne
4511	.1a51	809a51	86 10		stx $10			stx ZPTemp2												; bubble ent number
4512	.1a53	809a53	a9 01		lda #$01		lda #1
4513	.1a55	809a55	9d 00 01	sta $800100,x		sta EntityData.active,x								; mark it active
4514	.1a58	809a58	ac 67 02	ldy $800267		ldy EntityData.lastPipeUsed
4515	.1a5b	809a5b	b9 5f 02	lda $80025f,y		lda EntityData.pipeIndex,y
4516	.1a5e	809a5e	20 66 8d	jsr $808d66		jsr convertIndexToEntSpriteXY						; spawn at the next pipe
4517	.1a61	809a61	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; bubbles are 24 wide so -4 from spawn pos to centre it
4518	.1a64	809a64	38		sec			sec
4519	.1a65	809a65	e9 04		sbc #$04		sbc #4
4520	.1a67	809a67	9d 86 03	sta $800386,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
4521	.1a6a	809a6a	b0 05		bcs $809a71		bcs +
4522	.1a6c	809a6c	a9 03		lda #$03			lda #3
4523	.1a6e	809a6e	9d a7 03	sta $8003a7,x			sta mplexBuffer.xmsb+kEntsSpriteOffset,x	; handle MSB which is important for the fist slot only
4524	.1a71	809a71	a9 1e		lda #$1e	+	lda #kTimers.spawnBubble
4525	.1a73	809a73	8d c5 00	sta $8000c5		sta TickDowns.bubbleTimer							; reset the timer
4526	.1a76	809a76	ad 67 02	lda $800267		lda EntityData.lastPipeUsed
4527	.1a79	809a79	18		clc			clc
4528	.1a7a	809a7a	69 01		adc #$01		adc #1
4529	.1a7c	809a7c	cd 5e 02	cmp $80025e		cmp EntityData.numPipes								; move to the next pipe
4530	.1a7f	809a7f	d0 02		bne $809a83		bne _store
4531	.1a81	809a81	a9 00		lda #$00			lda #0												; wrap as needed
4532	.1a83	809a83					_store
4533	.1a83	809a83	8d 67 02	sta $800267		sta EntityData.lastPipeUsed
4534	.1a86	809a86					_exit
4535	.1a86	809a86	60		rts			rts

4537	.1a87	809a87					entBoss
4538	.1a87	809a87					_ASSERT_axy8
4539	.1a87	809a87	a6 02		ldx $02			ldx CurrentEntity
4540	.1a89	809a89	bd 96 01	lda $800196,x		lda EntityData.entState,x
4541	.1a8c	809a8c	0a		asl a			asl a
4542	.1a8d	809a8d	aa		tax			tax
4543	.1a8e	809a8e	7c 91 9a	jmp ($809a91,x)		jmp (BossLUT,x)
4544	>1a91	809a91	95 9a 00 9b			BossLut .word <>(BossNormal,BossDeath)

4546	.1a95	809a95					BossNormal
4547	.1a95	809a95					_ASSERT_axy8
4548	.1a95	809a95	a6 02		ldx $02			ldx CurrentEntity
4549	.1a97	809a97	bd 1a 01	lda $80011a,x		lda EntityData.movTimer+1,x											; Ent + 1 timer is used as a flash timer
4550	.1a9a	809a9a	f0 0f		beq $809aab		beq _notFlash
4551	.1a9c	809a9c	de 1a 01	dec $80011a,x			dec EntityData.movTimer+1,x
4552	.1a9f	809a9f	d0 0a		bne $809aab			bne _notFlash
239:1	.1aa1	809aa1	c2 20		rep #$20		REP #$20
4554:4	.1aa3	809aa3	9e 45 02	stz $800245,x				stz EntityData.palleteOffset,x								; clear palette shift on all 4 sub ents
4555	.1aa6	809aa6	9e 47 02	stz $800247,x				stz EntityData.palleteOffset+2,x
235:1	.1aa9	809aa9	e2 20		sep #$20		SEP #$20
4557:4	.1aab	809aab					_notFlash
4558	.1aab	809aab	20 4b 9b	jsr $809b4b		jsr AnimateUpperHalfBoss												; make it look left or right for player tracking
4559	.1aae	809aae	de 19 01	dec $800119,x		dec EntityData.movTimer,x												; time to move?
4560	.1ab1	809ab1	f0 3f		beq $809af2		beq _doneMove
4561	.1ab3	809ab3	bd 19 01	lda $800119,x			lda EntityData.movTimer,x											; the boses move and pause and move the pause
4562	.1ab6	809ab6	c9 10		cmp #$10			cmp #16																	; bears are 50/50 while the octopus is 66/33
4563	.1ab8	809ab8	b0 41		bcs $809afb			bcs _noMove
4564	.1aba	809aba	20 35 9b	jsr $809b35				jsr AnimateLowerHalfBoss
4565	.1abd	809abd	bd e7 00	lda $8000e7,x				lda EntityData.direction,x
4566	.1ac0	809ac0	d0 1b		bne $809add				bne _left
4567	.1ac2	809ac2	de 86 03	dec $800386,x					dec mplexBuffer.xpos+kEntsSpriteOffset,x
4568	.1ac5	809ac5	de 87 03	dec $800387,x					dec mplexBuffer.xpos+kEntsSpriteOffset+1,x
4569	.1ac8	809ac8	de 88 03	dec $800388,x					dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4570	.1acb	809acb	de 89 03	dec $800389,x					dec mplexBuffer.xpos+kEntsSpriteOffset+3,x		; move all 4 sub ents left
4571	.1ace	809ace	bd 86 03	lda $800386,x					lda mplexBuffer.xpos+kEntsSpriteOffset,x
4572											; cmp #kBounds.screenMinX this is now 0
4573											.cerror kBounds.screenMinX != 0, "put cmp back"
4574	.1ad1	809ad1	d0 28		bne $809afb					bne _noMove
4575	.1ad3	809ad3									_toggleDir
4576	.1ad3	809ad3	bd e7 00	lda $8000e7,x						lda EntityData.direction,x
4577	.1ad6	809ad6	49 02		eor #$02						eor #2														; switch from 0 & 2
4578	.1ad8	809ad8	9d e7 00	sta $8000e7,x						sta EntityData.direction,x
4579	.1adb	809adb	80 1e		bra $809afb						bra _noMove
4580	.1add	809add						_left
4581	.1add	809add	fe 86 03	inc $800386,x			inc mplexBuffer.xpos+kEntsSpriteOffset,x
4582	.1ae0	809ae0	fe 87 03	inc $800387,x			inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; move all 4 sub ents right
4583	.1ae3	809ae3	fe 88 03	inc $800388,x			inc mplexBuffer.xpos+kEntsSpriteOffset+2,x
4584	.1ae6	809ae6	fe 89 03	inc $800389,x			inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4585	.1ae9	809ae9	bd 87 03	lda $800387,x			lda mplexBuffer.xpos+kEntsSpriteOffset+1,x					; get the Top Right sprite
4586	.1aec	809aec	c9 e7		cmp #$e7			cmp #$ff-24
4587	.1aee	809aee	f0 e3		beq $809ad3			beq _toggleDir
4588	.1af0	809af0	80 09		bra $809afb				bra _noMove
4589	.1af2	809af2					_doneMove
4590	.1af2	809af2	bc ce 00	ldy $8000ce,x		ldy EntityData.type,x
4591	.1af5	809af5	b9 f6 9a	lda $809af6,y		lda BossMoveTimerLut - kEntity.bear,y							; octopuss is the next ent after the bear so '- bear'
4592	.1af8	809af8	9d 19 01	sta $800119,x		sta EntityData.movTimer,x											; make y effectily 0 or 1
4593	.1afb	809afb					_noMove
4594	.1afb	809afb	4c d2 99	jmp $8099d2		jmp nextEnt

4596	>1afe	809afe	20 18				BossMoveTimerLut .byte 32,24

4598	.1b00	809b00					BossDeath
4599	.1b00	809b00					_ASSERT_jsr
4600	.1b00	809b00					_ASSERT_axy8
4601	.1b00	809b00	a6 02		ldx $02			ldx CurrentEntity
4602	.1b02	809b02	de c8 03	dec $8003c8,x		dec mplexBuffer.ypos+kEntsSpriteOffset,x
4603	.1b05	809b05	de c9 03	dec $8003c9,x		dec mplexBuffer.ypos+kEntsSpriteOffset+1,x					; left sprites to the left
4604	.1b08	809b08	fe ca 03	inc $8003ca,x		inc mplexBuffer.ypos+kEntsSpriteOffset+2,x					; right sprites to the right
4605	.1b0b	809b0b	fe cb 03	inc $8003cb,x		inc mplexBuffer.ypos+kEntsSpriteOffset+3,x
4606	.1b0e	809b0e	de 86 03	dec $800386,x		dec mplexBuffer.xpos+kEntsSpriteOffset,x						; upper sprites up
4607	.1b11	809b11	de 88 03	dec $800388,x		dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4608	.1b14	809b14	fe 87 03	inc $800387,x		inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; bottom sprites down
4609	.1b17	809b17	fe 89 03	inc $800389,x		inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4610	.1b1a	809b1a	de 19 01	dec $800119,x		dec EntityData.movTimer,x											; time up?
4611	.1b1d	809b1d	d0 13		bne $809b32		bne _exit
239:1	.1b1f	809b1f	c2 20		rep #$20		REP #$20
4613:4	.1b21	809b21	9e 00 01	stz $800100,x			stz EntityData.active,x											; disable all 4 sprites
4614	.1b24	809b24	9e 02 01	stz $800102,x			stz EntityData.active+2,x
4615	.1b27	809b27	a9 e0 e0	lda #$e0e0			lda #kSpriteEmptyVal<<8|kSpriteEmptyVal
4616	.1b2a	809b2a	9d c8 03	sta $8003c8,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x					; put them offscreen
4617	.1b2d	809b2d	9d ca 03	sta $8003ca,x			sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
235:1	.1b30	809b30	e2 20		sep #$20		SEP #$20
4619:4	.1b32	809b32					_exit
4620	.1b32	809b32	4c d2 99	jmp $8099d2		jmp nextEnt

4622	.1b35	809b35					AnimateLowerHalfBoss
4623	.1b35	809b35					_ASSERT_jsr
4624	.1b35	809b35					_ASSERT_axy8
4625	.1b35	809b35	de 32 01	dec $800132,x		dec EntityData.animTimer,x											; first ent sprite is the anim timer
4626	.1b38	809b38	d0 10		bne $809b4a		bne _exit
4627	.1b3a	809b3a	a9 04		lda #$04			lda #4
4628	.1b3c	809b3c	9d 32 01	sta $800132,x			sta EntityData.animTimer,x
4629	.1b3f	809b3f	bd 66 01	lda $800166,x			lda EntityData.animFrame+2,x									; toggle the anim frame number for the lower
4630	.1b42	809b42	49 01		eor #$01			eor #1																; two ents
4631	.1b44	809b44	9d 66 01	sta $800166,x			sta EntityData.animFrame+2,x
4632	.1b47	809b47	9d 67 01	sta $800167,x			sta EntityData.animFrame+3,x
4633	.1b4a	809b4a					_exit
4634	.1b4a	809b4a	60		rts			rts

4636							;<<<<<24--0--24>>>>>
4637	.1b4b	809b4b					AnimateUpperHalfBoss
4638	.1b4b	809b4b					_ASSERT_jsr
4639	.1b4b	809b4b					_ASSERT_axy8
4640	.1b4b	809b4b	86 0f		stx $0f			stx ZPTemp
3459	.1b4d	809b4d	e8		inx			inx
3460	.1b4e	809b4e	e8		inx			inx
4642	.1b4f	809b4f	bd 84 03	lda $800384,x		lda mplexBuffer.xpos,x
4643	.1b52	809b52	85 10		sta $10			sta ZPTemp2							; Ent's X pos
4644	.1b54	809b54	ad 84 03	lda $800384		lda mplexBuffer.xpos				; player
4645	.1b57	809b57	85 11		sta $11			sta ZPTemp3							; Player's X pos
4646	.1b59	809b59	c5 10		cmp $10			cmp ZPTemp2							; Ent's X pos
4647	.1b5b	809b5b	90 0c		bcc $809b69		bcc _playerLeft
4648	.1b5d	809b5d	e5 10		sbc $10				sbc ZPTemp2						; carry is already set
4649	.1b5f	809b5f	c9 18		cmp #$18			cmp #24							; if PlayerX - EntX  < 24
4650	.1b61	809b61	90 03		bcc $809b66			bcc _under
4651	.1b63	809b63	a9 02		lda #$02				lda #2						; look right
4652	>1b65	809b65	2c							.byte $2c					; bit XXXX
4653	.1b66	809b66						_under
4654	.1b66	809b66	a9 01		lda #$01			lda #1							; look straight ahead
4655	>1b68	809b68	2c						.byte $2c						; bit XXXX
4656	.1b69	809b69					_playerLeft
4657	.1b69	809b69	a9 00		lda #$00		lda #0								; look left
4658	.1b6b	809b6b	a6 0f		ldx $0f			ldx ZPTemp							; the ent number we called it with
4659	.1b6d	809b6d	9d 64 01	sta $800164,x		sta EntityData.animFrame,x		; set both upper sprites to the frame
4660	.1b70	809b70	9d 65 01	sta $800165,x		sta EntityData.animFrame+1,x
4661	.1b73	809b73	60		rts			rts

4663							.as
4664							.xs
4665	.1b74	809b74					isTypeBoss
4666							; return C = 0 for not and C = 1 for is
4667	.1b74	809b74					_ASSERT_jsr
4668	.1b74	809b74					_ASSERT_axy8
4669	.1b74	809b74	c9 08		cmp #$08		cmp #kEntity.bear					; is there a bear in there?
4670	.1b76	809b76	90 08		bcc $809b80		bcc _notBoss
4671	.1b78	809b78	c9 0c		cmp #$0c		cmp #kEntity.octopussBody+1	; well is the number <bear or >OctopussBody
4672	.1b7a	809b7a	90 06		bcc $809b82		bcc _boss
4673	.1b7c	809b7c	c9 0d		cmp #$0d		cmp #kEntity.bossDummy			; and not the dummy?
4674	.1b7e	809b7e	f0 02		beq $809b82		beq _boss
4675	.1b80	809b80					_notBoss
4676	.1b80	809b80	18		clc				clc
4677	.1b81	809b81	60		rts				rts
4678	.1b82	809b82					_boss
4679	.1b82	809b82	38		sec			sec
4680	.1b83	809b83	60		rts			rts

4682							.as
4683							.xs
4684	.1b84	809b84					isTypeBossBounceDetect
4685							; bounce detection is handled by the collision rect of only 1 of the 4
4686							; so we need to get just bear or just ocotpuss and not the other 3
4687							; C = 0 yes, C = 1 no
4688	.1b84	809b84					_ASSERT_jsr
4689	.1b84	809b84					_ASSERT_axy8
4690	.1b84	809b84	c9 08		cmp #$08		cmp #kEntity.bear
4691	.1b86	809b86	f0 06		beq $809b8e		beq _yes
4692	.1b88	809b88	c9 09		cmp #$09			cmp #kEntity.octopuss
4693	.1b8a	809b8a	f0 02		beq $809b8e			beq _yes
4694	.1b8c	809b8c	18		clc					clc
4695	.1b8d	809b8d	60		rts					rts
4696	.1b8e	809b8e					_yes
4697	.1b8e	809b8e	38		sec			sec
4698	.1b8f	809b8f	60		rts			rts

4700							.as
4701							.xs
4702	.1b90	809b90					hurtBoss
4703	.1b90	809b90					_ASSERT_jsr
4704	.1b90	809b90					_ASSERT_axy8
4705	.1b90	809b90	bd 96 01	lda $800196,x		lda EntityData.entState,x				; can't hurt if it already dead
4706	.1b93	809b93	c9 01		cmp #$01		cmp #kBoss.dead
4707	.1b95	809b95	f0 21		beq $809bb8		beq _exit
4708	.1b97	809b97	bd 1a 01	lda $80011a,x			lda EntityData.movTimer+1,x		; the flash acts a count down, other wise if you have the shield you can
4709	.1b9a	809b9a	d0 1c		bne $809bb8			bne _exit								; jump into body, get pushed up and Quick Kill them in one jump
4710	.1b9c	809b9c	de 00 01	dec $800100,x				dec EntityData.active,x			; this is abused to hold "life points"
4711	.1b9f	809b9f	bd 00 01	lda $800100,x				lda EntityData.active,x
4712	.1ba2	809ba2	c9 01		cmp #$01				cmp #1								; 1 is "dead" as the must remain active for the death animation
4713	.1ba4	809ba4	f0 13		beq $809bb9				beq _killedBoss
4714											; we need to flash them so the player knows they did something
239:1	.1ba6	809ba6	c2 20		rep #$20		REP #$20
4716:4	.1ba8	809ba8	a9 02 02	lda #$0202					lda #kSPal_1<<8|kSPal_1		; next pal
4717	.1bab	809bab	9d 45 02	sta $800245,x					sta EntityData.palleteOffset,x
4718	.1bae	809bae	9d 47 02	sta $800247,x					sta EntityData.palleteOffset+2,x
235:1	.1bb1	809bb1	e2 20		sep #$20		SEP #$20
4720:4	.1bb3	809bb3	a9 10		lda #$10					lda #16							; store the flash timer in the 2nd sprite
4721	.1bb5	809bb5	9d 1a 01	sta $80011a,x					sta EntityData.movTimer+1,x
4722	.1bb8	809bb8					_exit
4723	.1bb8	809bb8	60		rts			rts
4724	.1bb9	809bb9					_killedBoss										; well just killed the boss
4725	.1bb9	809bb9	a9 01		lda #$01		lda #kBoss.dead
4726	.1bbb	809bbb	9d 96 01	sta $800196,x		sta EntityData.entState,x				; got to death state
4727	.1bbe	809bbe	a9 19		lda #$19		lda #kBoss.deathAnimTime
4728	.1bc0	809bc0	9d 19 01	sta $800119,x		sta EntityData.movTimer,x				; set death animation timer
4729	.1bc3	809bc3	86 0f		stx $0f			stx ZPTemp
4730	.1bc5	809bc5	a9 03		lda #$03		lda #kScoreIndex.boss					; award points
4731	.1bc7	809bc7	20 a8 85	jsr $8085a8		jsr giveScore
4732	.1bca	809bca	a6 0f		ldx $0f			ldx ZPTemp									; restore X, which holds the current ent number
4733	.1bcc	809bcc	60		rts			rts

4735	=32						kESprFlags = kSPri_2|kSPal_0

4737							; ----- @Entity Data@ -----

4739							; fSprDef takes a sprite 16x16 grid x,y and the attributes data and makes a "word" for OAM bytes 3 and 4
4740							; note newer versions of 64tass don't support multiline so keep each def on one line
4741	=(8320,8322,8324,8326,8352,8354,8356,8358)	HeliRawFrames = (fSprDef(0,4,kESprFlags),fSprDef(1,4,kESprFlags),fSprDef(2,4,kESprFlags),fSprDef(3,4,kESprFlags),fSprDef(0,5,kESprFlags),fSprDef(1,5,kESprFlags),fSprDef(2,5,kESprFlags),fSprDef(3,5,kESprFlags))
4742	=(8320,8322,8324,8326,8352,8354,8356,8358)	allEntFrames := HeliRawFrames
4743														; ent frames index left
4744															; ent frames index right
4745																; number of frames
4746																	; anim frame rate
4747																		; anim frame size
4748																			; collision bounding box index
4749							; heli only has 1 8 frame animation for all directions
4750	=(0,0,8,8,0,0)					HeliRawAnimData =  (0,0,len(HeliRawFrames),8,kSpriteType.s16x16,0)

4752	=(8268,8270,8328,8330,8332,8334,8392,8394)	SpringRawFrames = (fSprDef(6,2,kESprFlags),fSprDef(7,2,kESprFlags),fSprDef(4,4,kESprFlags),fSprDef(5,4,kESprFlags),fSprDef(6,4,kESprFlags),fSprDef(7,4,kESprFlags),fSprDef(4,6,kESprFlags),fSprDef(5,6,kESprFlags))
4753							; again the spring is a rather complex entity that transends left and right concepts
4754	=(8,8,8,2,1,0)					SpringRawAnimData = (len(allEntFrames),len(allEntFrames),len(SpringRawFrames),2,kSpriteType.s16x32,0)
4755	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394)
							allEntFrames ..= SpringRawFrames

4757							;the worm has a Left and a Right set
4758	=(8384,8386,8388,8390)				WormRawFramesLeft = (fSprDef(0,6,kESprFlags),fSprDef(1,6,kESprFlags),fSprDef(2,6,kESprFlags),fSprDef(3,6,kESprFlags))
4759	=(8416,8418,8420,8422)				WormRawFramesRight = (fSprDef(0,7,kESprFlags),fSprDef(1,7,kESprFlags),fSprDef(2,7,kESprFlags),fSprDef(3,7,kESprFlags))

4761	=(16,20,4,8,0,0)				WormRawAnimData = (len(allEntFrames), len(allEntFrames)+len(WormRawFramesLeft),len(WormRawFramesLeft),8,kSpriteType.s16x16,0)
4762	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390)
							allEntFrames ..= WormRawFramesLeft
4763	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422)
							allEntFrames ..= WormRawFramesRight

4765	=(8448,8450,8452,8454)				BatRawAnimDataLeft = (fSprDef(0,8,kESprFlags),fSprDef(1,8,kESprFlags),fSprDef(2,8,kESprFlags),fSprDef(3,8,kESprFlags))
4766	=(24832,24834,24836,24838)			BatRawAnimDataRight = (fSprDef(0,8,kESprFlags|kSFlipX),fSprDef(1,8,kESprFlags|kSFlipX),fSprDef(2,8,kESprFlags|kSFlipX),fSprDef(3,8,kESprFlags|kSFlipX))
4767	=(24,28,4,8,0,0)				BatRawAnimData = (len(allEntFrames), len(allEntFrames)+len(BatRawAnimDataLeft),len(BatRawAnimDataLeft),8,kSpriteType.s16x16,0)
4768	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454)
							allEntFrames ..= BatRawAnimDataLeft
4769	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838)
							allEntFrames ..= BatRawAnimDataRight

4771	=(8480,8482,8484,8486)				GhostRawFramesLeft = (fSprDef(0,9,kESprFlags),fSprDef(1,9,kESprFlags),fSprDef(2,9,kESprFlags),fSprDef(3,9,kESprFlags))
4772	=(24864,24866,24868,24870)			GhostRawFramesRight = (fSprDef(0,9,kESprFlags|kSFlipX),fSprDef(1,9,kESprFlags|kSFlipX),fSprDef(2,9,kESprFlags|kSFlipX),fSprDef(3,9,kESprFlags|kSFlipX))
4773	=(32,36,4,8,0,0)				GhostRawAnimData = (len(allEntFrames), len(allEntFrames)+len(GhostRawFramesLeft),len(GhostRawFramesLeft),8,kSpriteType.s16x16,0)
4774	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486)
							allEntFrames ..= GhostRawFramesLeft
4775	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870)
							allEntFrames ..= GhostRawFramesRight

4777							; spider needs 4 animations, for waiting and for falling.
4778							; I could be tempted to make the falling the next entity type to keep the structure
4779							; however can't be bothered to change the code too much, just going to make a define
4780							; to handle the offset
4781	=(8512,8514)					SpiderRawFramesWaitLeft = (fSprDef(0,10,kESprFlags),fSprDef(1,10,kESprFlags))
4782	=(8516,8518)					SpiderRawFramesWaitRight = (fSprDef(2,10,kESprFlags),fSprDef(3,10,kESprFlags))
4783	=(8544,8546)					SpiderRawFramesFallLeft = (fSprDef(0,11,kESprFlags),fSprDef(1,11,kESprFlags))
4784	=(8548,8550)					SpiderRawFramesFallRight = (fSprDef(2,11,kESprFlags),fSprDef(3,11,kESprFlags))
4785	=(40,42,2,8,0,0)				SpiderRawAnimData = (len(allEntFrames), len(allEntFrames)+len(SpiderRawFramesWaitLeft),len(SpiderRawFramesWaitLeft),8,kSpriteType.s16x16,0)
4786	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514)
							allEntFrames ..= SpiderRawFramesWaitLeft
4787	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518)
							allEntFrames ..= SpiderRawFramesWaitRight
4788	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546)
							allEntFrames ..= SpiderRawFramesFallLeft
4789	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550)
							allEntFrames ..= SpiderRawFramesFallRight
4790	=4						kSpiderFallAnimOffset = len(SpiderRawFramesWaitLeft) + len(SpiderRawFramesWaitRight)

4792	=(8576,8578,8580,8582)				FishRawFramesUp = (fSprDef(0,12,kESprFlags),fSprDef(1,12,kESprFlags),fSprDef(2,12,kESprFlags),fSprDef(3,12,kESprFlags))
4793	=(8608,8610,8612,8614)				FishRawFramesDown = (fSprDef(0,13,kESprFlags),fSprDef(1,13,kESprFlags),fSprDef(2,13,kESprFlags),fSprDef(3,13,kESprFlags))
4794	=(48,52,4,1,0,0)				FishRawAnimData = (len(allEntFrames), len(allEntFrames)+len(FishRawFramesUp), len(FishRawFramesUp),1,kSpriteType.s16x16,0)
4795	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582)
							allEntFrames ..= FishRawFramesUp
4796	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614)
							allEntFrames ..= FishRawFramesDown

4798	=(8640,8642,8644,8646)				CirclerRawFramesLeft = (fSprDef(0,14,kESprFlags),fSprDef(1,14,kESprFlags),fSprDef(2,14,kESprFlags),fSprDef(3,14,kESprFlags))
4799	=(8672,8674,8676,8678)				CirclerRawFramesRight = (fSprDef(0,15,kESprFlags),fSprDef(1,15,kESprFlags),fSprDef(2,15,kESprFlags),fSprDef(3,15,kESprFlags))
4800	=(56,60,4,2,0,0)				CirclerRawAnimData = (len(allEntFrames), len(allEntFrames)+len(CirclerRawFramesLeft),len(CirclerRawFramesLeft),2,kSpriteType.s16x16,0)
4801	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646)
							allEntFrames ..= CirclerRawFramesLeft
4802	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678)
							allEntFrames ..= CirclerRawFramesRight

4804	=(8448,8452,8456)				BearRawFramesLeft = (fSprDef(0,16,kESprFlags),fSprDef(2,16,kESprFlags),fSprDef(4,16,kESprFlags))
4805	=(8460,8512,8516)				BearRawFramesRight = (fSprDef(6,16,kESprFlags),fSprDef(0,18,kESprFlags),fSprDef(2,18,kESprFlags))
4806	=(64,67,3,4,2,4)				BearEntAnimData = (len(allEntFrames), len(allEntFrames)+len(BearRawFramesLeft),len(BearRawFramesLeft),4,kSpriteType.s32x32,4)
4807	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456)
							allEntFrames ..= BearRawFramesLeft
4808	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= BearRawFramesRight

4810	=(8448,8452,8456)				OctopussRawFramesLeft = (fSprDef(0,24,kESprFlags),fSprDef(2,24,kESprFlags),fSprDef(4,24,kESprFlags))
4811	=(8460,8512,8516)				OctopussRawFramesRight = (fSprDef(6,24,kESprFlags),fSprDef(0,26,kESprFlags),fSprDef(2,26,kESprFlags))
4812	=(70,73,3,4,2,4)				OctopussEntAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussRawFramesLeft),len(OctopussRawFramesLeft),4,kSpriteType.s32x32,4)
4813	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456)
							allEntFrames ..= OctopussRawFramesLeft
4814	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= OctopussRawFramesRight

4816	=(8520,8524)					BearBodyRawFramesLeft = (fSprDef(4,18,kESprFlags), fSprDef(6,18,kESprFlags))
4817	=(8576,8580)					BearBodyRawFramesRight = (fSprDef(0,20,kESprFlags), fSprDef(2,20,kESprFlags))
4818	=(76,78,2,4,2,5)				BearBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(BearBodyRawFramesLeft),len(BearBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4819	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524)
							allEntFrames ..= BearBodyRawFramesLeft
4820	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580)
							allEntFrames ..= BearBodyRawFramesRight

4822	=(8520,8524)					OctopussBodyRawFramesLeft = (fSprDef(4,26,kESprFlags), fSprDef(6,26,kESprFlags))
4823	=(8576,8580)					OctopussBodyRawFramesRight = (fSprDef(0,28,kESprFlags), fSprDef(2,28,kESprFlags))
4824	=(80,82,2,4,2,5)				OctopussBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussBodyRawFramesLeft),len(OctopussBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4825	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524)
							allEntFrames ..= OctopussBodyRawFramesLeft
4826	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580)
							allEntFrames ..= OctopussBodyRawFramesRight

4828	=(8456,8460,8520)				BubbleRawFrames = (fSprDef(4,8,kESprFlags), fSprDef(6,8,kESprFlags), fSprDef(4,10,kESprFlags))
4829	=(84,84,3,12,2,7)				BubbleAnimData = (len(allEntFrames),len(allEntFrames),len(BubbleRawFrames),12,kSpriteType.s32x32,7)
4830	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580,8456,8460,8520)
							allEntFrames ..= BubbleRawFrames
4831							; this one doesn't matter so much, its more for the collision frame number which is basically blowing a lot of bytes for one, but oh well
4832	=(87,87,2,12,2,6)				BossDummyAnimData = (len(allEntFrames),len(allEntFrames),len(BearBodyRawFramesLeft),12,kSpriteType.s32x32,6)

4834							;this has to be in kEntity order
4835							; older 64tass versions let you spread a single define across multiple lines
4836							; newer versions removed this feature so I'm using := and ..= to split over multiple lines
4837	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0))
							AllAnimData  := (HeliRawAnimData,SpringRawAnimData,WormRawAnimData,BatRawAnimData)
4838	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0))
							AllAnimData ..= (GhostRawAnimData,SpiderRawAnimData,FishRawAnimData,CirclerRawAnimData)
4839	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5))
							AllAnimData ..= (BearEntAnimData,OctopussEntAnimData,BearBodyAnimData,OctopussBodyAnimData)
4840	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5),(84,84,3,12,2,7),(87,87,2,12,2,6))
							AllAnimData ..= (BubbleAnimData,BossDummyAnimData)

4842	.1bcd	809bcd					EntityFrameData .block
4843	>1bcd	809bcd	80 82 84 86 a0 a2 a4 a6			lo .byte <(allEntFrames)						; this is 3rd byte of OAM for each frame
	>1bd5	809bd5	4c 4e 88 8a 8c 8e c8 ca c0 c2 c4 c6 e0 e2 e4 e6
	>1be5	809be5	00 02 04 06 00 02 04 06 20 22 24 26 20 22 24 26
	>1bf5	809bf5	40 42 44 46 60 62 64 66 80 82 84 86 a0 a2 a4 a6
	>1c05	809c05	c0 c2 c4 c6 e0 e2 e4 e6 00 04 08 0c 40 44 00 04
	>1c15	809c15	08 0c 40 44 48 4c 80 84 48 4c 80 84 08 0c 48
4844	>1c24	809c24	20 20 20 20 20 20 20 20			hi .byte >(allEntFrames)						; this is 4th byte of OAM for each frame
	>1c2c	809c2c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
	>1c3c	809c3c	21 21 21 21 61 61 61 61 21 21 21 21 61 61 61 61
	>1c4c	809c4c	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1c5c	809c5c	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1c6c	809c6c	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
4845							.bend

4847	.1c7b	809c7b					EntityAnimData .block
4848	>1c7b	809c7b	08 08 04 04 04 02 04 04			frameCount		.byte (AllAnimData[:,2])	; number of frames each animation has
	>1c83	809c83	03 03 02 02 03 02
4849	>1c89	809c89	08 02 08 08 08 08 01 02			frameRate		.byte (AllAnimData[:,3])	; the rate for the animation
	>1c91	809c91	04 04 04 04 0c 0c
4850	>1c97	809c97	00 01 00 00 00 00 00 00			frameSize		.byte (AllAnimData[:,4])	; the sprite size for the animation
	>1c9f	809c9f	02 02 02 02 02 02
4851	>1ca5	809ca5	00 00 00 00 00 00 00 00			collisionBox	.byte (AllAnimData[:,5])	; the index in collisionboxes this animation wants
	>1cad	809cad	04 04 05 05 07 06
4852							.bend

4854	.1cb3	809cb3					kSprites .block
4855	=48							fish				= AllAnimData[kEntity.fish,0]			; the anim frame data index for the start of the fish frames
4856	=40							spiderLeft		= AllAnimData[kEntity.spider,0]		; like wise for spider left
4857	=42							spiderRight		= AllAnimData[kEntity.spider,1]
4858	=8							springNormal	= AllAnimData[kEntity.spring,0]
4859	=9							springCompress = AllAnimData[kEntity.spring,0]+1
4860	=10							springExpand	= AllAnimData[kEntity.spring,0]+2
4861	=11							springFull		= AllAnimData[kEntity.spring,0]+3
4862	=12							springFall		= AllAnimData[kEntity.spring,0]+4
4863	=84							bubbles			= AllAnimData[kEntity.bubble,0]
4864	=0							bulletSprite	= 0											; these are frame deltas for parts of the bullet
4865	=6							bulletSplat		= 3*2
4866	=8							bulletRed		= 4*2											; convert to word index
4867							.bend

4869	.1cb3	809cb3					SpringDirectionToDeltaLUT
4870	>1cb3	809cb3	fe ff ff ff 01 01 01 02		.char -2,-1,-1,-1, 1, 1, 1, 2									; this is the springs X deltas, used to give it a sense of intertia

4872	.1cbb	809cbb					SinJumpTable														; this is the sin table the springs use to jump
4873	>1cbb	809cbb	fb fb fc fc fb fd		.char -5, -5, -4, -4, -5, -3
4874	>1cc1	809cc1	fc fd fe fd ff fe ff 00		.char -4, -3, -2, -3, -1, -2, -1, 0, -1, -1, 0
	>1cc9	809cc9	ff ff 00
4875	=17						kSinJumpFall = * - SinJumpTable								; this is the index the table flips from up to down
4876	>1ccc	809ccc	01 02 01 03 02 03 04		.char  1,  2,  1,  3,  2,  3,  4
4877	>1cd3	809cd3	03 05 04 05 06 05 06 06		.char  3,  5,  4,  5,  6,  5, 6,  6, 7, 8, 8
	>1cdb	809cdb	07 08 08
4878	=34						kSinJumpMax = * - SinJumpTable - 1

4880	.1cde	809cde					SpringFrameFrameTable											; this is the frame it should use for said index into the sin table
4881	>1cde	809cde	09 09 09 09 09			.byte kSprites.(springCompress,springCompress,springCompress,springCompress,springCompress)
4882	>1ce3	809ce3	0a 0a 0a 0a 08 08 0b 0b		.byte kSprites.(springExpand,springExpand,springExpand,springExpand,springNormal,springNormal,springFull,springFull,springFull,springFull,springFull)
	>1ceb	809ceb	0b 0b 0b
4883	>1cee	809cee	0c 0d 0e 0f 0e 0d 0c		.byte kSprites.(springFall,springFall,springFall,springFall,springFall,springFall,springFall)+(0,1,2,3,2,1,0)
4884	>1cf5	809cf5	0b 0b 0b 0b 0b 0b 0b 0b		.byte kSprites.(springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull)
	>1cfd	809cfd	0b 0b 0b
4885							.cerror (*-SpringFrameFrameTable) != kSinJumpMax, "under by " , kSinJumpMax-(*-SpringFrameFrameTable)

4887							; this is the table used by the circler to go in a circle
4888	.1d00	809d00					CircleJumpTableStart
4889	>1d00	809d00	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0,-1,-1,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5
	>1d08	809d08	02 02 01 01 00 ff ff fe fe fd fc fc fc fb fb fb
	>1d18	809d18	fb
4890	>1d19	809d19	fb fb fb fc fc fc fd fd		.char -5,-5,-5,-4,-4,-4,-3,-3,-2,-1,-1, 0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5
	>1d21	809d21	fe ff ff 00 01 01 02 03 03 04 04 04 05 05 05
4891	=48						CircleJumpTableCount = * - CircleJumpTableStart	; table ends here
4892	>1d30	809d30	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0		; duplicate to save wrapping the index on the phase shift
	>1d38	809d38	02 02 01 01 00
4893																							; the code would be smaller but since this is idential it compresses better than

4895							; given my current direction, and I hit something which way do I go next
4896							; i.e heli going up with index of 1 is to go 3 which is down while heli 3 returns 1
4897	.1d3d	809d3d					NextDirectionLUT
4898	>1d3d	809d3d	03 03 01 01			.byte 3,3,1,1 ; heli
4899	>1d41	809d41	00 00 00 00			.byte 0,0,0,0 ; spring
4900	>1d45	809d45	02 02 00 00			.byte 2,2,0,0 ; worm
4901	>1d49	809d49	02 02 00 00			.byte 2,2,0,0 ; bat
4902	>1d4d	809d4d	03 00 01 02			.byte 3,0,1,2 ; ghost
4903	>1d51	809d51	03 03 01 01			.byte 3,3,1,1 ; spider
4904	>1d55	809d55	00 00 00 00			.byte 0,0,0,0 ; fish - not used
4905	>1d59	809d59	00 00 00 00			.byte 0,0,0,0 ; flying thing - not used
4906	.1d5d	809d5d					BaseAnimeFrameForDir
4907							; 0 = right, 1 = up, 2 = left, 3 = down
4908	>1d5d	809d5d	00 00 00 00			.byte HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0]		; heli
4909	>1d61	809d61	08 08 08 08			.byte SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0]		; spring
4910	>1d65	809d65	14 14 10 10			.byte WormRawAnimData[1],		WormRawAnimData[1],		WormRawAnimData[0],		WormRawAnimData[0]		; worm
4911	>1d69	809d69	1c 1c 18 18			.byte BatRawAnimData[1],		BatRawAnimData[1],		BatRawAnimData[0],		BatRawAnimData[0]			; bat
4912	>1d6d	809d6d	20 24 20 24			.byte GhostRawAnimData[0],		GhostRawAnimData[1],		GhostRawAnimData[0],		GhostRawAnimData[1]		; ghost
4913	>1d71	809d71	28 28 28 28			.byte SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0]		; spider
4914	>1d75	809d75	30 30 34 34			.byte FishRawAnimData[0],		FishRawAnimData[0],		FishRawAnimData[1],		FishRawAnimData[1]		; fish
4915	>1d79	809d79	3c 3c 38 38			.byte CirclerRawAnimData[1],	CirclerRawAnimData[1],	CirclerRawAnimData[0],	CirclerRawAnimData[0]	; flying thing
4916	>1d7d	809d7d	00 00 00 00			.byte 0,0,0,0 ; bear
4917	>1d81	809d81	00 00 00 00			.byte 0,0,0,0 ; other bear
4918	>1d85	809d85	00 00 00 00			.byte 0,0,0,0 ; octopus
4919	>1d89	809d89	00 00 00 00			.byte 0,0,0,0 ; other octopus
4920	>1d8d	809d8d	54 54 54 54			.byte BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0]			; bubble


4923							; ----- @Collision system@ -----


4926							.as
4927							.xs
4928	.1d91	809d91					checkSpriteToCharCollision_88
4929	.1d91	809d91					_ASSERT_JSR
4930	.1d91	809d91					_ASSERT_axy8
239:1	.1d91	809d91	c2 20		rep #$20		REP #$20
4932:4	.1d93	809d93	ad 8c 02	lda $80028c		lda checkSpriteToCharData.yDeltaCheck
4933	.1d96	809d96	8d 90 02	sta $800290		sta checkSpriteToCharData.yDeltaBackup
4934	.1d99	809d99	ad 8a 02	lda $80028a		lda checkSpriteToCharData.xDeltaCheck
4935	.1d9c	809d9c	8d 8e 02	sta $80028e		sta checkSpriteToCharData.xDeltaBackup			; cache the deltas
4936	.1d9f	809d9f	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck			; check just Y first
235:1	.1da2	809da2	e2 20		sep #$20		SEP #$20
4938:4	.1da4	809da4	64 1d		stz $1d			stz CollideSpriteToCheck
4939	.1da6	809da6	64 1e		stz $1e			stz CollideSpriteBoxIndex							; clear results
4940	.1da8	809da8	20 11 9e	jsr $809e11		jsr CSTCCY												; Check Sprite To Char Collision Y
4941	.1dab	809dab	a5 23		lda $23			lda CollideCharBLI									; get bottom left index
4942	.1dad	809dad	85 15		sta $15			sta ActiveTileIndex
4943	.1daf	809daf	a5 24		lda $24			lda CollideCharBLC									; and the actual tile
4944	.1db1	809db1	85 16		sta $16			sta ActiveTile
4945	.1db3	809db3	20 5e a0	jsr $80a05e		jsr checkOnDissTile									; do I stand on a diss tile?
4946	.1db6	809db6	a5 23		lda $23			lda CollideCharBLI
4947	.1db8	809db8	c5 25		cmp $25			cmp CollideCharBRI									; are both sides of me on the same tile
4948	.1dba	809dba	f0 0b		beq $809dc7		beq _otherIsSame										; so we don't diss twice as fast sometimes
4949	.1dbc	809dbc	a5 25		lda $25				lda CollideCharBRI								; no check the right index as well
4950	.1dbe	809dbe	85 15		sta $15				sta ActiveTileIndex
4951	.1dc0	809dc0	a5 26		lda $26				lda CollideCharBRC
4952	.1dc2	809dc2	85 16		sta $16				sta ActiveTile
4953	.1dc4	809dc4	20 5e a0	jsr $80a05e			jsr checkOnDissTile
4954	.1dc7	809dc7					_otherIsSame
239:1	.1dc7	809dc7	c2 20		rep #$20		REP #$20
4956:4	.1dc9	809dc9	ad 8e 02	lda $80028e		lda checkSpriteToCharData.xDeltaBackup			; Y done, lets check the X
4957	.1dcc	809dcc	8d 8a 02	sta $80028a		sta checkSpriteToCharData.xDeltaCheck			; restore X
4958	.1dcf	809dcf	9c 8c 02	stz $80028c		stz checkSpriteToCharData.yDeltaCheck			; clear Y
235:1	.1dd2	809dd2	e2 20		sep #$20		SEP #$20
4960:4	.1dd4	809dd4	20 7c 9e	jsr $809e7c		jsr CSTCCX												; Check Sprite To Char Collision X
239:1	.1dd7	809dd7	c2 20		rep #$20		REP #$20
4962:4	.1dd9	809dd9	ad 90 02	lda $800290		lda checkSpriteToCharData.yDeltaBackup			; restore Y
4963	.1ddc	809ddc	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaCheck
235:1	.1ddf	809ddf	e2 20		sep #$20		SEP #$20
4965:4	.1de1	809de1	a6 1f		ldx $1f			ldx CollideCharTLI
4966	.1de3	809de3	a5 20		lda $20			lda CollideCharTLC
4967	.1de5	809de5	20 b0 a0	jsr $80a0b0		jsr checkActionTile									; is the Top Left an action tile?
4968	.1de8	809de8	a5 21		lda $21			lda CollideCharTRI
4969	.1dea	809dea	c5 1f		cmp $1f			cmp CollideCharTLI									; is top right and top left the same tile?
4970	.1dec	809dec	f0 06		beq $809df4		beq _skipTR
4971	.1dee	809dee	aa		tax				tax
4972	.1def	809def	a5 22		lda $22				lda CollideCharTRC
4973	.1df1	809df1	20 b0 a0	jsr $80a0b0			jsr checkActionTile								; no check the right one as well
4974	.1df4	809df4					_skipTR
4975	.1df4	809df4	a5 23		lda $23			lda CollideCharBLI									; check bottom left if different
4976	.1df6	809df6	c5 1f		cmp $1f			cmp CollideCharTLI
4977	.1df8	809df8	f0 06		beq $809e00		beq _skipBL
4978	.1dfa	809dfa	aa		tax				tax
4979	.1dfb	809dfb	a5 24		lda $24				lda CollideCharBLC
4980	.1dfd	809dfd	20 b0 a0	jsr $80a0b0			jsr checkActionTile
4981	.1e00	809e00					_skipBL
4982	.1e00	809e00	a5 25		lda $25			lda CollideCharBRI
4983	.1e02	809e02	c5 21		cmp $21			cmp CollideCharTRI									; check bottom right if different
4984	.1e04	809e04	f0 0a		beq $809e10		beq _skipBR
4985	.1e06	809e06	c5 23		cmp $23				cmp CollideCharBLI
4986	.1e08	809e08	f0 06		beq $809e10			beq _skipBR
4987	.1e0a	809e0a	aa		tax					tax
4988	.1e0b	809e0b	a5 26		lda $26					lda CollideCharBRC
4989	.1e0d	809e0d	20 b0 a0	jsr $80a0b0				jsr checkActionTile
4990	.1e10	809e10					_skipBR
4991	.1e10	809e10	60		rts			rts

4993							.as
4994							.xs
4995	.1e11	809e11					CSTCCY															; Check Sprite To Char Collision Y
4996	.1e11	809e11					_ASSERT_jsr
4997	.1e11	809e11					_ASSERT_axy8
4998	.1e11	809e11	a2 00		ldx #$00		ldx #0
4999	.1e13	809e13	86 0f		stx $0f			stx ZPTemp													; clear the 4 tile solid flags
5000	.1e15	809e15	86 10		stx $10			stx ZPTemp2
5001	.1e17	809e17	86 11		stx $11			stx ZPTemp3
5002	.1e19	809e19	86 12		stx $12			stx ZPTemp4
5003	.1e1b	809e1b	a0 00		ldy #$00		ldy #0
5004	.1e1d	809e1d	20 85 9f	jsr $809f85		jsr newCollision											; perform collsion
5005	.1e20	809e20	a5 20		lda $20			lda CollideCharTLC
5006	.1e22	809e22	20 39 a0	jsr $80a039		jsr checkSolidTile
5007	.1e25	809e25	26 0f		rol $0f			rol ZPTemp													; roll the C into variable
5008	.1e27	809e27	a5 22		lda $22			lda CollideCharTRC
5009	.1e29	809e29	20 39 a0	jsr $80a039		jsr checkSolidTile										; C = 0 clear, C = 1 solid
5010	.1e2c	809e2c	26 10		rol $10			rol ZPTemp2
5011	.1e2e	809e2e	a5 24		lda $24			lda CollideCharBLC
5012	.1e30	809e30	20 39 a0	jsr $80a039		jsr checkSolidTile
5013	.1e33	809e33	26 11		rol $11			rol ZPTemp3
5014	.1e35	809e35	a5 26		lda $26			lda CollideCharBRC
5015	.1e37	809e37	20 39 a0	jsr $80a039		jsr checkSolidTile
5016	.1e3a	809e3a	26 12		rol $12			rol ZPTemp4													; for all 4
5017	.1e3c	809e3c	ad 8c 02	lda $80028c		lda checkSpriteToCharData.yDeltaCheck
5018	.1e3f	809e3f	10 25		bpl $809e66		bpl _checkDown
5019									; check up
5020	.1e41	809e41	a5 0f		lda $0f				lda ZPTemp
5021	.1e43	809e43	05 10		ora $10				ora ZPTemp2												; if top left or top right
5022	.1e45	809e45	f0 34		beq $809e7b			beq _exit												; if nothing solid 0
5023										; abort jump
5024	.1e47	809e47	ad b1 00	lda $8000b1				lda PlayerData.hitBubbleNum					; unless I hit a bubble
5025	.1e4a	809e4a	f0 04		beq $809e50				beq _startFall										; at which point just start falling
5026	.1e4c	809e4c	9c 90 02	stz $800290					stz checkSpriteToCharData.yDeltaBackup	; clear the Y delta in this case
5027	.1e4f	809e4f	60		rts						rts
5028											;
5029	.1e50	809e50						_startFall
5030	.1e50	809e50	a9 01		lda #$01			lda #1
5031	.1e52	809e52	8d ac 00	sta $8000ac			sta PlayerData.isFallingNZ							; set falling
5032	.1e55	809e55	1a		inc a				inc a ;  #2
5033	.1e56	809e56	8d b3 00	sta $8000b3			sta PlayerData.yDeltaAccum.lo						; set delta to 2.0078125 aka 2
5034	.1e59	809e59	8d b4 00	sta $8000b4			sta PlayerData.yDeltaAccum.hi
5035	.1e5c	809e5c	60		rts				rts
5036									;
5037	.1e5d	809e5d						_onGround
5038	.1e5d	809e5d	9c 90 02	stz $800290			stz checkSpriteToCharData.yDeltaBackup			; can't fall anymore
5039	.1e60	809e60	9c 8c 02	stz $80028c			stz checkSpriteToCharData.yDeltaCheck
5040	.1e63	809e63	4c 8e 90	jmp $80908e			jmp enterOnGround
5041									;
5042	.1e66	809e66					_checkDown
5043	.1e66	809e66	ad b1 00	lda $8000b1		lda PlayerData.hitBubbleNum							; is it a bubble
5044	.1e69	809e69	d0 10		bne $809e7b		bne _exit
5045	.1e6b	809e6b	a5 11		lda $11				lda ZPTemp3												; no
5046	.1e6d	809e6d	05 12		ora $12				ora ZPTemp4												; check bottom two
5047	.1e6f	809e6f	d0 ec		bne $809e5d			bne _onGround											; if solid stand on ground
5048	.1e71	809e71	ae aa 00	ldx $8000aa				ldx PlayerData.OnGroundNZ
5049	.1e74	809e74	9c aa 00	stz $8000aa				stz PlayerData.OnGroundNZ						; if we were on the ground, i.e just walked off the ledge
5050	.1e77	809e77	e0 00		cpx #$00				cpx #0
5051	.1e79	809e79	d0 d5		bne $809e50				bne _startFall										; we need to start falling
5052	.1e7b	809e7b					_exit
5053	.1e7b	809e7b	60		rts			rts

5055							.as
5056							.xs
5057	.1e7c	809e7c					CSTCCX													; Check Sprite To Char Collision X
5058	.1e7c	809e7c					_ASSERT_jsr
5059	.1e7c	809e7c					_ASSERT_axy8
5060	.1e7c	809e7c	a2 00		ldx #$00		ldx #0
5061	.1e7e	809e7e	86 0f		stx $0f			stx ZPTemp
5062	.1e80	809e80	86 10		stx $10			stx ZPTemp2
5063	.1e82	809e82	86 11		stx $11			stx ZPTemp3
5064	.1e84	809e84	86 12		stx $12			stx ZPTemp4											; clear the solid char flags
5065	.1e86	809e86	a0 00		ldy #$00		ldy #0
5066	.1e88	809e88	20 85 9f	jsr $809f85		jsr newCollision									; do collision
5067	.1e8b	809e8b	a5 20		lda $20			lda CollideCharTLC								; check if each point is solid and store in ZP Temps
5068	.1e8d	809e8d	20 39 a0	jsr $80a039		jsr checkSolidTile								; C = 0 not solid, C = 1 solid
5069	.1e90	809e90	26 0f		rol $0f			rol ZPTemp
5070	.1e92	809e92	a5 22		lda $22			lda CollideCharTRC
5071	.1e94	809e94	20 39 a0	jsr $80a039		jsr checkSolidTile
5072	.1e97	809e97	26 10		rol $10			rol ZPTemp2
5073	.1e99	809e99	a5 24		lda $24			lda CollideCharBLC
5074	.1e9b	809e9b	20 39 a0	jsr $80a039		jsr checkSolidTile
5075	.1e9e	809e9e	26 11		rol $11			rol ZPTemp3
5076	.1ea0	809ea0	a5 26		lda $26			lda CollideCharBRC
5077	.1ea2	809ea2	20 39 a0	jsr $80a039		jsr checkSolidTile
5078	.1ea5	809ea5	26 12		rol $12			rol ZPTemp4
5079	.1ea7	809ea7	ad 8a 02	lda $80028a		lda checkSpriteToCharData.xDeltaCheck		; do I actually want to move sidways?
5080	.1eaa	809eaa	f0 15		beq $809ec1		beq _exit
5081	.1eac	809eac	10 0d		bpl $809ebb		bpl _checkRight
5082									; left
5083	.1eae	809eae	a5 0f		lda $0f				lda ZPtemp
5084	.1eb0	809eb0	05 11		ora $11				ora ZPtemp3										; the top left or bottom left solid?
5085	.1eb2	809eb2	f0 0d		beq $809ec1			beq _exit										; no exit
5086	.1eb4	809eb4					_noX
5087	.1eb4	809eb4	9c 8a 02	stz $80028a		stz checkSpriteToCharData.xDeltaCheck		; clear X movement
5088	.1eb7	809eb7	9c 8b 02	stz $80028b		stz checkSpriteToCharData.xDeltaCheck.hi
5089	.1eba	809eba	60		rts			rts
5090								;
5091	.1ebb	809ebb					_checkRight
5092	.1ebb	809ebb	a5 10		lda $10			lda ZPtemp2
5093	.1ebd	809ebd	05 12		ora $12			ora ZPtemp4											; the top right and bottom right solid?
5094	.1ebf	809ebf	d0 f3		bne $809eb4		bne _noX
5095	.1ec1	809ec1					_exit
5096	.1ec1	809ec1	60		rts			rts

5098							; these are the collision boxes for the sprites, each animation indexes into this table
5099	>1ec2	809ec2	02 02 02 04 00 e8 0c 04		CollisionBoxesX .char 02,02,02,04,00,-24,12,04
5100	>1eca	809eca	0d 0d 0d 10 30 30 01 10		CollisionBoxesW .char 13,13,13,16,48, 48,01,16
5101	>1ed2	809ed2	02 02 00 04 00 0c 0c 01		CollisionBoxesY .char 02,02,00,04,00, 12,12,01
5102	>1eda	809eda	0c 10 14 10 0c 1e 01 08		CollisionBoxesH .char 12,16,20,16,12, 30,01,08

5104							.as
5105							.xs
5106	.1ee2	809ee2					collideBulletAgainstRest
5107	.1ee2	809ee2					_ASSERT_jsr
5108	.1ee2	809ee2					_ASSERT_axy8
5109	.1ee2	809ee2	a0 03		ldy #$03		ldy #3								; bullet uses 4th collision box
5110	.1ee4	809ee4	a2 01		ldx #$01		ldx #1								; and is sprite 1
5111	.1ee6	809ee6	80 04		bra $809eec		bra collideAgainstRestEntry
5112								;
5113	.1ee8	809ee8					collidePlayerAgainstRest
5114	.1ee8	809ee8					_ASSERT_jsr
5115	.1ee8	809ee8					_ASSERT_axy8
5116	.1ee8	809ee8	a2 00		ldx #$00		ldx #0								; player uses 1st collision box
5117	.1eea	809eea	a0 00		ldy #$00		ldy #0								; and is sprite 0
5118	.1eec	809eec					collideAgainstRestEntry
5119	.1eec	809eec	bd c6 03	lda $8003c6,x		lda mplexBuffer.ypos,x
5120	.1eef	809eef	18		clc			clc
5121	.1ef0	809ef0	79 d2 9e	adc $809ed2,y		adc CollisionBoxesY,y
5122	.1ef3	809ef3	85 0a		sta $0a			sta Pointer3.lo					; Pointer3.lo = testingSprite.y+CollisionBoxY
5123	.1ef5	809ef5	85 19		sta $19			sta TestingSprY1
5124	.1ef7	809ef7	18		clc			clc
5125	.1ef8	809ef8	79 da 9e	adc $809eda,y		adc CollisionBoxesH,y			; += CollisionBoxHeight
5126	.1efb	809efb	85 0b		sta $0b			sta Pointer3.hi
5127	.1efd	809efd	85 1a		sta $1a			sta TestingSprY2
5128	.1eff	809eff	bd 84 03	lda $800384,x		lda mplexBuffer.xpos,x
5129	.1f02	809f02	18		clc			clc
5130	.1f03	809f03	79 c2 9e	adc $809ec2,y		adc CollisionBoxesX,y
5131	.1f06	809f06	85 17		sta $17			sta TestingSprX1					; = testingSprite.x+CollisionBoxX
5132	.1f08	809f08	18		clc			clc
5133	.1f09	809f09	79 ca 9e	adc $809eca,y		adc CollisionBoxesW,y			; += CollisionBoxWidth
5134	.1f0c	809f0c	85 18		sta $18			sta TestingSprX2
5135	.1f0e	809f0e	a9 ff		lda #$ff		lda #$FF
5136	.1f10	809f10	85 02		sta $02			sta CurrentEntity					; so we don't skip any
5137	.1f12	809f12	80 28		bra $809f3c		bra collideAgainstEntPlayerEntry
5138								;
5139	.1f14	809f14					collideEntAgainstRest
5140	.1f14	809f14					_ASSERT_jsr
5141	.1f14	809f14					_ASSERT_axy8
5142								; start at the mplex y + 1 and check to see if the Y is in Range
5143								; to do this we need to know which collsiion box the ent we are is using
5144								; and the one that the other is using
5145								; a hit is if my x1 <= y2 && y1 <= x2
5146								; where x1 = my Ent Y, x2 = my Ent Y+Height
5147								; y1 = Other Ent Y, y2 = other Ent Y+Height
5148	.1f14	809f14	a6 02		ldx $02			ldx CurrentEntity
5149	.1f16	809f16	a0 00		ldy #$00		ldy #0
5150	.1f18	809f18	bd af 01	lda $8001af,x		lda EntityData.collisionX1,x
5151	.1f1b	809f1b	18		clc			clc
5152	.1f1c	809f1c	6d 8a 02	adc $80028a		adc checkSpriteToCharData.xDeltaCheck	; move the ent sprite off by the movement deltas
5153	.1f1f	809f1f	85 17		sta $17			sta TestingSprX1
5154	.1f21	809f21	bd c8 01	lda $8001c8,x		lda EntityData.collisionX2,x				; as their collision X1/2 Y1/2 are pre caculated
5155	.1f24	809f24	18		clc			clc
5156	.1f25	809f25	6d 8a 02	adc $80028a		adc checkSpriteToCharData.xDeltaCheck
5157	.1f28	809f28	85 18		sta $18			sta TestingSprX2
5158	.1f2a	809f2a	bd e1 01	lda $8001e1,x		lda EntityData.collisionY1,x
5159	.1f2d	809f2d	18		clc			clc
5160	.1f2e	809f2e	6d 8c 02	adc $80028c		adc checkSpriteToCharData.yDeltaCheck
5161	.1f31	809f31	85 19		sta $19			sta TestingSprY1
5162	.1f33	809f33	bd fa 01	lda $8001fa,x		lda EntityData.collisionY2,x
5163	.1f36	809f36	18		clc			clc
5164	.1f37	809f37	6d 8c 02	adc $80028c		adc checkSpriteToCharData.yDeltaCheck
5165	.1f3a	809f3a	85 1a		sta $1a			sta TestingSprY2
5166	.1f3c	809f3c					collideAgainstEntPlayerEntry
5167	.1f3c	809f3c					_ASSERT_axy8
5168	.1f3c	809f3c	a0 02		ldy #$02		ldy #2 ; other slot
5169	.1f3e	809f3e	a2 00		ldx #$00		ldx #0
5170	.1f40	809f40	e4 02		cpx $02		-	cpx CurrentEntity
5171	.1f42	809f42	f0 1f		beq $809f63		beq Ent_Ent_Coll_skipSelf				; don't collide against one self
5172	.1f44	809f44	bd 00 01	lda $800100,x			lda EntityData.active,x
5173	.1f47	809f47	f0 1a		beq $809f63			beq Ent_Ent_Coll_skipSelf			; don't collide against in-active or "dead" entities
5174	.1f49	809f49	30 18		bmi $809f63			bmi Ent_Ent_Coll_skipSelf			; if there active is 0 or - don't collide
5175	.1f4b	809f4b	64 0f		stz $0f					stz ZPTemp
5176	.1f4d	809f4d	a5 19		lda $19					lda TestingSprY1
5177	.1f4f	809f4f	dd fa 01	cmp $8001fa,x				cmp EntityData.collisionY2,x	; test my Y1 against their Y2
5178	.1f52	809f52	20 2f a0	jsr $80a02f				jsr doMinMaxBitTest
5179	.1f55	809f55	bd e1 01	lda $8001e1,x				lda EntityData.collisionY1,x	; and thier Y1 against my Y2
5180	.1f58	809f58	c5 1a		cmp $1a					cmp TestingSprY2
5181	.1f5a	809f5a	20 2f a0	jsr $80a02f				jsr doMinMaxBitTest
5182	.1f5d	809f5d	a5 0f		lda $0f					lda ZPTemp							; if my.Y1 < their.Y2 && their.Y1 < my.Y2 we collide
5183	.1f5f	809f5f	29 03		and #$03				and #3								; both tests pass
5184	.1f61	809f61	f0 08		beq $809f6b				beq hitY								; then are Y are in range
5185	.1f63	809f63					Ent_Ent_Coll_skipSelf
5186	.1f63	809f63	e8		inx			inx
5187	.1f64	809f64	ec cd 00	cpx $8000cd		cpx EntityData.number
5188	.1f67	809f67	d0 d7		bne $809f40		bne -
5189	.1f69	809f69	18		clc			clc
5190	.1f6a	809f6a	60		rts			rts

5192							.as
5193							.xs
5194	.1f6b	809f6b					hitY												; now we need to do the same thing but for the X
5195	.1f6b	809f6b					_ASSERT_axy8
5196	.1f6b	809f6b	64 0f		stz $0f			stz ZPTemp									; clear the flags
5197	.1f6d	809f6d	a5 17		lda $17			lda TestingSprX1
5198	.1f6f	809f6f	dd c8 01	cmp $8001c8,x		cmp EntityData.collisionX2,x			; my X1 vs their X2
5199	.1f72	809f72	20 2f a0	jsr $80a02f		jsr doMinMaxBitTest
5200	.1f75	809f75	bd af 01	lda $8001af,x		lda EntityData.collisionX1,x			; their X1 vs my X2
5201	.1f78	809f78	c5 18		cmp $18			cmp TestingSprX2
5202	.1f7a	809f7a	20 2f a0	jsr $80a02f		jsr doMinMaxBitTest
5203	.1f7d	809f7d	a5 0f		lda $0f			lda ZPTemp									; if my.X1 < their.X2 && their.X1 < my.X2 we collide
5204	.1f7f	809f7f	29 03		and #$03		and #3
5205	.1f81	809f81	d0 e0		bne $809f63		bne Ent_Ent_Coll_skipSelf
5206	.1f83	809f83					hitX
5207	.1f83	809f83	38		sec			sec
5208	.1f84	809f84	60		rts			rts

5210							.as
5211							.xs
5212	.1f85	809f85					newCollision									; there was an original but its all gone now
5213	.1f85	809f85					_ASSERT_jsr
5214	.1f85	809f85					_ASSERT_axy8
5215	.1f85	809f85	a6 1d		ldx $1d			ldx CollideSpriteToCheck
5216	.1f87	809f87	a4 1e		ldy $1e			ldy CollideSpriteBoxIndex				; get the ent and the collision box
5217								; calc the final Xs
5218	.1f89	809f89	bd 84 03	lda $800384,x		lda mplexBuffer.xpos,x
5219	.1f8c	809f8c	18		clc			clc
5220	.1f8d	809f8d	79 c2 9e	adc $809ec2,y		adc CollisionBoxesX,y
5221	.1f90	809f90	6d 8a 02	adc $80028a		adc checkSpriteToCharData.xDeltaCheck
5222	.1f93	809f93	85 27		sta $27			sta CollideInternalSprTLX				; TLX = X + collisionBoxX + XDelta
5223	.1f95	809f95	18		clc			clc
5224	.1f96	809f96	79 ca 9e	adc $809eca,y		adc CollisionBoxesW,y					; BRX = X + collisionBoxX + XDelta + collisionBoxWidth
5225	.1f99	809f99	85 28		sta $28			sta CollideInternalSprBRX
5226								; calc the final Ys
5227	.1f9b	809f9b	bd c6 03	lda $8003c6,x		lda mplexBuffer.ypos,x
5228	.1f9e	809f9e	18		clc			clc
5229	.1f9f	809f9f	79 d2 9e	adc $809ed2,y		adc CollisionBoxesY,y
5230	.1fa2	809fa2	6d 8c 02	adc $80028c		adc checkSpriteToCharData.yDeltaCheck
5231	.1fa5	809fa5	20 99 85	jsr $808599		jsr ClipY									; we need to clip it because odd things happen in the exlucsion zone
5232	.1fa8	809fa8	85 29		sta $29			sta CollideInternalSprTLY				; TLY = clip(Y + CollisionBoxY + YDelta)
5233	.1faa	809faa	18		clc			clc
5234	.1fab	809fab	79 da 9e	adc $809eda,y		adc CollisionBoxesH,y
5235	.1fae	809fae	20 99 85	jsr $808599		jsr ClipY
5236	.1fb1	809fb1	85 2a		sta $2a			sta CollideInternalSprBRY				; TLY = clip(Y + CollisionBoxY + YDelta + collisionBoxHeight)
5237								; calc the tile index
5238	.1fb3	809fb3	a2 01		ldx #$01		ldx #1
5239	.1fb5	809fb5	b5 27		lda $27,x	-	lda CollideInternalSprTLX,x			; sprite Test Left X and Right X
5240	.1fb7	809fb7	4a		lsr a			lsr a
5241	.1fb8	809fb8	4a		lsr a			lsr a
5242	.1fb9	809fb9	4a		lsr a			lsr a
5243	.1fba	809fba	4a		lsr a			lsr a											; /16
5244	.1fbb	809fbb	95 2b		sta $2b,x		sta CollideInternalTTLX,x				; Tile Test Left X and Right X
5245	.1fbd	809fbd	ca		dex			dex
5246	.1fbe	809fbe	10 f5		bpl $809fb5		bpl -
5247	.1fc0	809fc0	a5 2b		lda $2b			lda CollideInternalTTLX
5248	.1fc2	809fc2	c5 2c		cmp $2c			cmp CollideInternalTBRX					; make sure right has not wrapped and is not < left
5249	.1fc4	809fc4	90 02		bcc $809fc8		bcc +
5250	.1fc6	809fc6	85 2c		sta $2c				sta CollideInternalTBRX				; clamp the Right to be the same as the left if it has wrapped.
5251	.1fc8	809fc8					+													; this stop being able to pick up things on the left of the map from the right
5252	.1fc8	809fc8	a5 29		lda $29			lda CollideInternalSprTLY
5253	.1fca	809fca	29 f0		and #$f0		and #$f0
5254	.1fcc	809fcc	85 2d		sta $2d			sta CollideInternalTTLY					; convert SpriteY to Tile Y which is /16*16 or mask upper 4 bits
5255	.1fce	809fce	a5 2a		lda $2a			lda CollideInternalSprBRY
5256	.1fd0	809fd0	29 f0		and #$f0		and #$f0
5257	.1fd2	809fd2	85 2e		sta $2e			sta CollideInternalTBRY					; same with the bottom
5258								; convert the tile X,Y into a the index and pull Char
5259	.1fd4	809fd4	a5 2d		lda $2d			lda CollideInternalTTLY
5260	.1fd6	809fd6	05 2b		ora $2b			ora CollideInternalTTLX
5261	.1fd8	809fd8	85 1f		sta $1f			sta CollideCharTLI						; calc index
5262	.1fda	809fda	aa		tax			tax
5263	.1fdb	809fdb	bd 94 02	lda $800294,x		lda tileMapTemp,x							; read tile from map
5264	.1fde	809fde	85 20		sta $20			sta CollideCharTLC

5266	.1fe0	809fe0	a5 2d		lda $2d			lda CollideInternalTTLY					; do for all 4 points
5267	.1fe2	809fe2	05 2c		ora $2c			ora CollideInternalTBRX
5268	.1fe4	809fe4	85 21		sta $21			sta CollideCharTRI
5269	.1fe6	809fe6	aa		tax			tax
5270	.1fe7	809fe7	bd 94 02	lda $800294,x		lda tileMapTemp,x
5271	.1fea	809fea	85 22		sta $22			sta CollideCharTRC

5273	.1fec	809fec	a5 2e		lda $2e			lda CollideInternalTBRY
5274	.1fee	809fee	05 2b		ora $2b			ora CollideInternalTTLX
5275	.1ff0	809ff0	85 23		sta $23			sta CollideCharBLI
5276	.1ff2	809ff2	aa		tax			tax
5277	.1ff3	809ff3	bd 94 02	lda $800294,x		lda tileMapTemp,x
5278	.1ff6	809ff6	85 24		sta $24			sta CollideCharBLC

5280	.1ff8	809ff8	a5 2e		lda $2e			lda CollideInternalTBRY
5281	.1ffa	809ffa	05 2c		ora $2c			ora CollideInternalTBRX
5282	.1ffc	809ffc	85 25		sta $25			sta CollideCharBRI
5283	.1ffe	809ffe	aa		tax			tax
5284	.1fff	809fff	bd 94 02	lda $800294,x		lda tileMapTemp,x
5285	.2002	80a002	85 26		sta $26			sta CollideCharBRC
5286	.2004	80a004	60		rts			rts

5288	.2005	80a005					makeMinMaxXYForX
5289	.2005	80a005					_ASSERT_jsr
5290	.2005	80a005					_ASSERT_axy8
5291	.2005	80a005	bc ce 00	ldy $8000ce,x		ldy EntityData.type,x								; get the type
5292	.2008	80a008	b9 a5 9c	lda $809ca5,y		lda EntityAnimData.collisionBox,y				; get the collision box we want to use
5293	.200b	80a00b	a8		tay			tay
5294	.200c	80a00c	bd 86 03	lda $800386,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; get the ents X position
5295	.200f	80a00f	18		clc			clc
5296	.2010	80a010	79 c2 9e	adc $809ec2,y		adc CollisionBoxesX,y								; offset by Box X
5297	.2013	80a013	9d af 01	sta $8001af,x		sta EntityData.collisionX1,x						; store it
5298	.2016	80a016	18		clc			clc
5299	.2017	80a017	79 ca 9e	adc $809eca,y		adc CollisionBoxesW,y								; add the width
5300	.201a	80a01a	9d c8 01	sta $8001c8,x		sta EntityData.collisionX2,x						; store it
5301	.201d	80a01d	bd c8 03	lda $8003c8,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; get the Y
5302	.2020	80a020	18		clc			clc
5303	.2021	80a021	79 d2 9e	adc $809ed2,y		adc CollisionBoxesY,y								; offset by the Box Y
5304	.2024	80a024	9d e1 01	sta $8001e1,x		sta EntityData.collisionY1,x						; store it
5305	.2027	80a027	18		clc			clc
5306	.2028	80a028	79 da 9e	adc $809eda,y		adc CollisionBoxesH,y								; add the height
5307	.202b	80a02b	9d fa 01	sta $8001fa,x		sta EntityData.collisionY2,x						; store it
5308	.202e	80a02e	60		rts			rts

5310	.202f	80a02f					doMinMaxBitTest
5311	.202f	80a02f					_ASSERT_jsr
5312	.202f	80a02f					_ASSERT_axy8
5313	.202f	80a02f	f0 04		beq $80a035		beq _secPass
5314	.2031	80a031	90 02		bcc $80a035		bcc _secPass					; <= Pass
5315	.2033	80a033	b0 01		bcs $80a036			bcs _secFail				; C = 1 and return fall
5316	.2035	80a035					_secPass
5317	.2035	80a035	18		clc			clc								; needed as BEQ will have C = 1
5318	.2036	80a036					_secFail
5319	.2036	80a036	26 0f		rol $0f			rol ZPTemp						; record bit
5320	.2038	80a038	60		rts			rts

5322							.as
5323							.xs
5324							; carry set = not safe, clear = safe
5325	.2039	80a039					checkSolidTile
5326	.2039	80a039					_ASSERT_jsr
5327	.2039	80a039					_ASSERT_axy8
5328	.2039	80a039	ae 97 00	ldx $800097		ldx GameData.exitOpenNZ				; closed doors are solid, open ones are not
5329	.203c	80a03c	d0 04		bne $80a042		bne _skipDoorCheck
5330	.203e	80a03e	c9 11		cmp #$11			cmp #kTiles.exit
5331	.2040	80a040	f0 14		beq $80a056			beq _notSafe
5332	.2042	80a042					_skipDoorCheck
5333	.2042	80a042	c9 13		cmp #$13		cmp #kTiles.pipe						; is it a pipe?
5334	.2044	80a044	f0 10		beq $80a056		beq _notSafe
5335	.2046	80a046	c9 21		cmp #$21			cmp #kTiles.dissNoColide		; an empty dissolve char?
5336	.2048	80a048	f0 12		beq $80a05c			beq _exitSafe
5337	.204a	80a04a	c9 14		cmp #$14			cmp #kTiles.diss
5338	.204c	80a04c	b0 0a		bcs $80a058				bcs _checkNotShadow			; > diss solid?
5339	.204e	80a04e	c9 01		cmp #$01					cmp #kTiles.wall
5340	.2050	80a050	90 0a		bcc $80a05c					bcc _exitSafe				; < wall ?
5341	.2052	80a052	c9 06		cmp #$06						cmp #kTiles.spike		; >= spike?
5342	.2054	80a054	b0 06		bcs $80a05c						bcs _exitSafe
5343	.2056	80a056					_notsafe
5344	.2056	80a056	38		sec			sec
5345	.2057	80a057	60		rts			rts
5346								;
5347	.2058	80a058					_checkNotShadow
5348	.2058	80a058	c9 21		cmp #$21		cmp #kTiles.dissNoColide
5349	.205a	80a05a	90 fa		bcc $80a056		bcc _notsafe
5350	.205c	80a05c					_exitSafe
5351	.205c	80a05c	18		clc				clc
5352	.205d	80a05d	60		rts				rts
5353									;


5356							.as
5357							.xs
5358	.205e	80a05e					checkOnDissTile
5359	.205e	80a05e					_ASSERT_jsr
5360	.205e	80a05e					_ASSERT_axy8
5361	.205e	80a05e	ad aa 00	lda $8000aa		lda PlayerData.OnGroundNZ						; can't be on it if I'm not on the ground
5362	.2061	80a061	d0 01		bne $80a064		bne _c
5363	.2063	80a063					_exit
5364	.2063	80a063	60		rts				rts
5365									;
5366	.2064	80a064					_c	; get the tile below the player
5367	.2064	80a064	ad bf 00	lda $8000bf		lda TickDowns.dissBlocks						; is it time to dissolve some more?
5368	.2067	80a067	d0 fa		bne $80a063		bne _exit
5369	.2069	80a069	a5 16		lda $16				lda ActiveTile
5370	.206b	80a06b	c9 14		cmp #$14			cmp #kTiles.diss								; is the active tile < diss?
5371	.206d	80a06d	90 f4		bcc $80a063			bcc _exit
5372	.206f	80a06f	c9 21		cmp #$21				cmp #kTiles.dissNoColide				; >- diss noColide
5373	.2071	80a071	b0 f0		bcs $80a063				bcs _exit
5374	.2073	80a073	a9 08		lda #$08					lda #kTimers.dissBlocksValue		; no, then we are on a diss tile
5375	.2075	80a075	8d bf 00	sta $8000bf					sta TickDowns.dissBlocks			; reset the count down
5376	.2078	80a078	a6 15		ldx $15						ldx ActiveTileIndex					; get the index
5377	.207a	80a07a	fe 94 02	inc $800294,x					inc tileMapTemp,x						; disolve it 1 bit more
5378	.207d	80a07d	bd 94 02	lda $800294,x					lda tileMapTemp,x
5379	.2080	80a080	c9 20		cmp #$20					cmp #kTiles.dissNoColide-1			; until done
5380	.2082	80a082	08		php						php										; save compare
5381	.2083	80a083	20 f8 8c	jsr $808cf8						jsr pltSingleTile					; update the tile in question on the screen mirror
5382	.2086	80a086	28		plp						plp										; restore compare
5383	.2087	80a087	d0 da		bne $80a063					bne _exit								; not final tile, exit
5384	.2089	80a089					CheckForShadowPlots
5385	.2089	80a089					_ASSERT_axy8
5386	.2089	80a089	a2 01		ldx #$01		ldx #1
5387	.208b	80a08b	20 95 a0	jsr $80a095		jsr _checkRemoveTile								; when one removes a tile, one must check to the right
5388	.208e	80a08e	a2 10		ldx #$10		ldx #16
5389	.2090	80a090	20 95 a0	jsr $80a095		jsr _checkRemoveTile								; below it
5390	.2093	80a093	a2 11		ldx #$11		ldx #17
5391	.2095	80a095					_checkRemoveTile										; and bellow to the right for new shadow pieces
5392	.2095	80a095	86 0f		stx $0f			stx ZPTemp											; store the offset we want
5393	.2097	80a097	a5 15		lda $15			lda ActiveTileIndex								; get the main tile
5394	.2099	80a099	48		pha			pha													; save it
5395	.209a	80a09a	18		clc				clc
5396	.209b	80a09b	65 0f		adc $0f				adc ZPTemp										; offset it
5397	.209d	80a09d	c9 c0		cmp #$c0			cmp #kLevelSizeMax							; still on the map?
5398	.209f	80a09f	b0 0b		bcs $80a0ac			bcs _exit2
5399	.20a1	80a0a1	85 15		sta $15					sta ActiveTileIndex						; make it the active for now
5400	.20a3	80a0a3	a8		tay					tay
5401	.20a4	80a0a4	20 59 8c	jsr $808c59				jsr tileIsSafeToChange_88				; is it something we need to add shadow to?
5402	.20a7	80a0a7	90 03		bcc $80a0ac				bcc _exit2
5403	.20a9	80a0a9	20 e9 8c	jsr $808ce9					jsr clearTile							; "clear" it
5404	.20ac	80a0ac					_exit2
5405	.20ac	80a0ac	68		pla			pla													; restore the actual active tile
5406	.20ad	80a0ad	85 15		sta $15			sta ActiveTileIndex
5407	.20af	80a0af	60		rts			rts

5409							.as
5410							.xs
5411	.20b0	80a0b0					checkActionTile
5412	.20b0	80a0b0					_ASSERT_jsr
5413	.20b0	80a0b0					_ASSERT_axy8
5414	.20b0	80a0b0	85 16		sta $16			sta ActiveTile										; for later
5415	.20b2	80a0b2	86 15		stx $15			stx ActiveTileIndex								; for later
5416	.20b4	80a0b4	a0 00		ldy #$00		ldy #0
5417	.20b6	80a0b6	d9 c7 a0	cmp $80a0c7,y	-	cmp TileFuncLookup,y								; does this tile have a function to handle it?
5418	.20b9	80a0b9	f0 06		beq $80a0c1		beq _found
5419	.20bb	80a0bb	c8		iny				iny
5420	.20bc	80a0bc	c0 0c		cpy #$0c			cpy # size(TileFuncLookup)
5421	.20be	80a0be	d0 f6		bne $80a0b6			bne -
5422	.20c0	80a0c0	60		rts				rts												; no, no action then
5423									;
5424	.20c1	80a0c1					_found
5425	.20c1	80a0c1					_ASSERT_Y_LT_12
5426	.20c1	80a0c1	98		tya			tya
5427	.20c2	80a0c2	0a		asl a			asl a													; dispatch the function then
5428	.20c3	80a0c3	aa		tax			tax
5429	.20c4	80a0c4	7c d3 a0	jmp ($80a0d3,x)		jmp (TileFuncLUT,x)


5432	>20c7	80a0c7	08 07 09 0a 0b 0c 06 0e		TileFuncLookup .byte kTiles.fruit,kTiles.flower,kTiles.key1,kTiles.key2,kTiles.key3,kTiles.key4,kTiles.spike,kTiles.spring,kTiles.potion,kTiles.shield,kTiles.exit,kTiles.egg
	>20cf	80a0cf	0f 0d 11 10
5433	>20d3	80a0d3	eb a0 f4 a0 0f a1 0f a1		TileFuncLUT .word <>(fruitFunc, flowerFunc, keyFunc, keyFunc, keyFunc, keyFunc, spikeFunc, springFunc, potionFunc, shildFunction, exitFunc, eggFunc)
	>20db	80a0db	0f a1 0f a1 35 a1 3b a1 44 a1 63 a1 8d a1 a3 a1

5435							.as
5436							.xs
5437	.20eb	80a0eb					fruitFunc
5438	.20eb	80a0eb					_ASSERT_jsr
5439	.20eb	80a0eb					_ASSERT_axy8
5440	.20eb	80a0eb	20 e9 8c	jsr $808ce9		jsr clearTile					; fruit, remove it
5441	.20ee	80a0ee	a9 00		lda #$00		lda #kScoreIndex.Fruit		; give some points
5442	.20f0	80a0f0	20 a8 85	jsr $8085a8		jsr giveScore
5443								;ldx #kSFX.collect
5444								;jmp playSFX
5445	.20f3	80a0f3	60		rts			rts

5447							.as
5448							.xs
5449	.20f4	80a0f4					flowerFunc
5450	.20f4	80a0f4					_ASSERT_jsr
5451	.20f4	80a0f4					_ASSERT_axy8
5452	.20f4	80a0f4	20 e9 8c	jsr $808ce9		jsr clearTile				; flower, remove it
5453	.20f7	80a0f7	a9 00		lda #$00		lda #kScoreIndex.fruit	; give same amount of points as fruit
5454	.20f9	80a0f9	20 a8 85	jsr $8085a8		jsr giveScore
5455							;	ldx #kSFX.flower
5456							;	jsr playSFX
5457	.20fc	80a0fc	ee 89 00	inc $800089		inc GameData.flowers		; add 1 flower to collection
5458	.20ff	80a0ff	ad 89 00	lda $800089		lda GameData.flowers
5459	.2102	80a102	c9 08		cmp #$08		cmp #8						; enough for a life?
5460	.2104	80a104	d0 06		bne $80a10c		bne _exit
5461	.2106	80a106	9c 89 00	stz $800089			stz GameData.flowers	; trade them all in
5462	.2109	80a109	20 82 91	jsr $809182			jsr awardLife_88		; get life
5463	.210c	80a10c					_exit
5464	.210c	80a10c	4c 33 88	jmp $808833		jmp pltFlowers				; update the HUD

5466							.as
5467							.xs
5468	.210f	80a10f					keyFunc
5469	.210f	80a10f					_ASSERT_axy8
5470	.210f	80a10f	20 e9 8c	jsr $808ce9		jsr clearTile					; key, remove it
5471	.2112	80a112	a9 02		lda #$02		lda #kScoreIndex.key			; give points
5472	.2114	80a114	20 a8 85	jsr $8085a8		jsr giveScore
5473	.2117	80a117	ce 99 00	dec $800099		dec LevelData.numKeysLeft	; count down total number of keys left
5474	.211a	80a11a	a5 16		lda $16			lda ActiveTile
5475	.211c	80a11c	20 3e 8e	jsr $808e3e		jsr countTempMapTile_88		; do we have any more of these keys still ( there are actually 4 keys )
5476	.211f	80a11f	d0 08		bne $80a129		bne _done						; yes
5477	.2121	80a121	a5 16		lda $16				lda ActiveTile				; no remove all the walls that match the key number
5478	.2123	80a123	38		sec				sec
5479	.2124	80a124	e9 07		sbc #$07			sbc #kKeyToWallDelta
5480	.2126	80a126	20 4f 8e	jsr $808e4f			jsr removeAllTilesOf_88
5481	.2129	80a129					_done
5482	.2129	80a129	ad 99 00	lda $800099		lda LevelData.numKeysLeft	; do we have any keys left
5483	.212c	80a12c	f0 01		beq $80a12f		beq _changeDoor				; no, open the door
5484									;ldx #kSFX.collect
5485									;jmp playSFX
5486	.212e	80a12e	60		rts				rts ; above is now jmp
5487	.212f	80a12f					_changeDoor
5488	.212f	80a12f	a9 01		lda #$01		lda #1
5489	.2131	80a131	8d 97 00	sta $800097		sta GameData.exitOpenNZ		; set door to open
5490							;	tax ; ldx #kSFX.door ;=1
5491							;	jmp playSFX
5492	.2134	80a134	60		rts			rts ; above is now jmp

5494							.as
5495							.xs
5496	.2135	80a135					spikeFunc
5497	.2135	80a135					_ASSERT_axy8
5498	.2135	80a135	a9 01		lda #$01		lda #1
5499	.2137	80a137	8d a4 00	sta $8000a4		sta PlayerData.deadNZ	; hit spike, you die
5500	.213a	80a13a	60		rts			rts

5502							.as
5503							.xs
5504	.213b	80a13b					springFunc
5505	.213b	80a13b					_ASSERT_axy8
5506	.213b	80a13b	20 e9 8c	jsr $808ce9		jsr clearTile					; remove the tile
5507							;	ldx #kSFX.powerup
5508							;	jsr playSFX
5509	.213e	80a13e	a9 01		lda #$01		lda #1
5510	.2140	80a140	8d a8 00	sta $8000a8		sta PlayerData.canFloatNZ	; give float power
5511	.2143	80a143	60		rts			rts

5513							.as
5514							.xs
5515	.2144	80a144					potionFunc
5516	.2144	80a144					_ASSERT_axy8
5517	.2144	80a144	20 e9 8c	jsr $808ce9		jsr clearTile					; remove tile
5518	.2147	80a147	a2 00		ldx #$00		ldx #0
5519	.2149	80a149	86 15		stx $15			stx ActiveTileIndex			; start at top left
5520	.214b	80a14b					_loop
5521	.214b	80a14b	bd 94 02	lda $800294,x		lda tileMapTemp,x
5522	.214e	80a14e	c9 06		cmp #$06		cmp #kTiles.spike				; is this a spike ?
5523	.2150	80a150	d0 08		bne $80a15a		bne _next
5524	.2152	80a152	a9 08		lda #$08			lda #kTiles.fruit			; its is now fruit
5525	.2154	80a154	9d 94 02	sta $800294,x			sta tileMapTemp,x
5526	.2157	80a157	20 f8 8c	jsr $808cf8			jsr pltSingleTile			; update screen mirror
5527	.215a	80a15a					_next
5528	.215a	80a15a	e6 15		inc $15			inc ActiveTileIndex
5529	.215c	80a15c	a6 15		ldx $15			ldx ActiveTileIndex
5530	.215e	80a15e	e0 c0		cpx #$c0		cpx #kLevelSizeMax			; until all are scanned
5531	.2160	80a160	d0 e9		bne $80a14b		bne _loop
5532							;	ldx #kSFX.powerup
5533							;	jmp playSFX
5534	.2162	80a162	60		rts			rts ; above is now jmp

5536							.as
5537							.xs
5538	.2163	80a163					shildFunction
5539	.2163	80a163					_ASSERT_axy8
5540	.2163	80a163	20 e9 8c	jsr $808ce9		jsr clearTile									; remove the tile
5541	.2166	80a166	a9 01		lda #$01		lda #1
5542	.2168	80a168	8d a5 00	sta $8000a5		sta PlayerData.hasShieldNZ					; give the shield power
5543							;	ldx #kSFX.powerup
5544							;	jsr playSFX
5545	.216b	80a16b	a9 f4		lda #$f4		lda #<kShieldTimer
5546	.216d	80a16d	8d a6 00	sta $8000a6		sta PlayerData.shieldTimer.lo				; reset the timer
5547	.2170	80a170	a9 01		lda #$01		lda #>kShieldTimer
5548	.2172	80a172	8d a7 00	sta $8000a7		sta PlayerData.shieldTimer.hi
5549	.2175	80a175	a9 32		lda #$32		lda #50
5550	.2177	80a177	8d c4 00	sta $8000c4		sta TickDowns.shieldFlashTimerSpeedUp	; and the speed up timer value
5551	.217a	80a17a	a9 10		lda #$10		lda #16
5552	.217c	80a17c	8d be 00	sta $8000be		sta PlayerData.baseFlashTimeDelta		; and the base delta
5553	.217f	80a17f	60		rts			rts

5555							.as
5556							.xs
5557	.2180	80a180					clearShieldState
5558	.2180	80a180					_ASSERT_jsr
5559	.2180	80a180					_ASSERT_axy8
5560	.2180	80a180	9c a5 00	stz $8000a5		stz PlayerData.hasShieldNZ					; no power
5561	.2183	80a183	9c bd 00	stz $8000bd		stz PlayerData.flashColour					; no flash
5562	.2186	80a186	9c a6 00	stz $8000a6		stz PlayerData.shieldTimer.lo				; timer is 0
5563	.2189	80a189	9c a7 00	stz $8000a7		stz PlayerData.shieldTimer.hi
5564	.218c	80a18c	60		rts			rts

5566							.as
5567							.xs
5568	.218d	80a18d					exitFunc
5569	.218d	80a18d					_ASSERT_jsr
5570	.218d	80a18d					_ASSERT_axy8
5571	.218d	80a18d	ad 97 00	lda $800097		lda GameData.exitOpenNZ						; it is open right?
5572	.2190	80a190	f0 10		beq $80a1a2		beq _notOpen
5573	.2192	80a192	9c 97 00	stz $800097			stz GameData.exitOpenNZ					; its closed now then
5574	.2195	80a195	a5 15		lda $15				lda ActiveTileIndex
5575	.2197	80a197	8d bc 00	sta $8000bc			sta PlayerData.exitAtIndex				; set the exit position ( there are up to 2 per level )
5576	.219a	80a19a	a9 04		lda #$04			lda #kPlayerState.exit					; set player to exit state
5577	.219c	80a19c	8d a2 00	sta $8000a2			sta PlayerData.state
5578	.219f	80a19f	8d a3 00	sta $8000a3			sta PlayerData.minorState				; set minor to "entering death state"
5579	.21a2	80a1a2					_notOpen
5580	.21a2	80a1a2	60		rts			rts

5582							.as
5583							.xs
5584	.21a3	80a1a3					eggFunc
5585	.21a3	80a1a3					_ASSERT_jsr
5586	.21a3	80a1a3					_ASSERT_axy8
5587	.21a3	80a1a3	20 e9 8c	jsr $808ce9		jsr clearTile								; remove tile
5588	.21a6	80a1a6	ee bb 00	inc $8000bb		inc PlayerData.numBulletEgg			; give 1 more bullet egg
5589							;	ldx #kSFX.powerup
5590							;	gra playSFX
5591	.21a9	80a1a9	60		rts			rts ; above is now jmp

5593							.as
5594							.xs
5595	.21aa	80a1aa					animateDoor_88
5596	.21aa	80a1aa					_ASSERT_jsr
5597	.21aa	80a1aa					_ASSERT_axy8
5598	.21aa	80a1aa	ad 97 00	lda $800097		lda GameData.exitOpenNZ					; its open right?
5599	.21ad	80a1ad	f0 1c		beq $80a1cb		beq aDexit
5600	.21af	80a1af	ad c1 00	lda $8000c1			lda TickDowns.doorAnim				; time for next frame?
5601	.21b2	80a1b2	d0 17		bne $80a1cb			bne aDexit
5602	.21b4	80a1b4	a9 0a		lda #$0a				lda #kTimers.DoorAnimeRate
5603	.21b6	80a1b6	8d c1 00	sta $8000c1				sta TickDowns.doorAnim			; reset timer
5604	.21b9	80a1b9	ad 9c 00	lda $80009c				lda LevelData.exitIndex			; set the tile index
5605	.21bc	80a1bc	85 15		sta $15					sta ActiveTileIndex
5606	.21be	80a1be	20 cc a1	jsr $80a1cc				jsr animateInternal_88			; animate it
5607	.21c1	80a1c1	ad 9d 00	lda $80009d				lda LevelData.exitIndex+1		; do we have two doors?
5608	.21c4	80a1c4	c9 ff		cmp #$ff				cmp #$ff
5609	.21c6	80a1c6	f0 03		beq $80a1cb				beq aDexit
5610	.21c8	80a1c8	85 15		sta $15						sta ActiveTileIndex			; yes, animate it too
5611	.21ca	80a1ca	f0		beq						gne animateInternal_88
5612	.21cb	80a1cb					aDexit
5613	.21cb	80a1cb	60		rts			rts

5615							.as
5616							.xs
5617	.21cc	80a1cc					animateInternal_88
5618	.21cc	80a1cc					_ASSERT_jsr
5619	.21cc	80a1cc					_ASSERT_axy8
5620	.21cc	80a1cc	ad 9e 00	lda $80009e		lda LevelData.exitFrame
5621	.21cf	80a1cf	cd 9f 00	cmp $80009f		cmp LevelData.exitTargetFrame			; have we reached the target frame
5622	.21d2	80a1d2	f0 f7		beq $80a1cb		beq aDexit									; which is either fully open or fully closed
5623	.21d4	80a1d4	18		clc			clc
5624	.21d5	80a1d5	6d a0 00	adc $8000a0		adc LevelData.exitFrameDelta			; move to next frames (1 or -1)
5625	.21d8	80a1d8	8d 9e 00	sta $80009e		sta LevelData.exitFrame
5626	.21db	80a1db	82 1e eb	brl $808cfc		gra pltSingleTileNoLookup				; draw it

5628							.as
5629							.xs
5630	.21de	80a1de					setAnimateDoorToOpen_88
5631	.21de	80a1de					_ASSERT_jsr
5632	.21de	80a1de					_ASSERT_axy8
5633	.21de	80a1de	a9 0a		lda #$0a		lda #kDoorClosed
5634	.21e0	80a1e0	8d 9e 00	sta $80009e		sta LevelData.exitFrame					; we start at the closed frame
5635	.21e3	80a1e3	a9 0e		lda #$0e		lda #kDoorOpen
5636	.21e5	80a1e5	8d 9f 00	sta $80009f		sta LevelData.exitTargetFrame			; end on open
5637	.21e8	80a1e8	a9 01		lda #$01		lda #1
5638	.21ea	80a1ea	8d a0 00	sta $8000a0		sta LevelData.exitFrameDelta			; +1 to get to next frame
5639	.21ed	80a1ed	60		rts			rts

5641							.as
5642							.xs
5643	.21ee	80a1ee					setAnimateDoorToClose_88
5644	.21ee	80a1ee					_ASSERT_jsr
5645	.21ee	80a1ee					_ASSERT_axy8
5646	.21ee	80a1ee	a9 0e		lda #$0e		lda #kDoorOpen
5647	.21f0	80a1f0	8d 9e 00	sta $80009e		sta LevelData.exitFrame					; we state at open frame
5648	.21f3	80a1f3	a9 0a		lda #$0a		lda #kDoorClosed
5649	.21f5	80a1f5	8d 9f 00	sta $80009f		sta LevelData.exitTargetFrame			; end of closed
5650	.21f8	80a1f8	a9 ff		lda #$ff		lda #-1
5651	.21fa	80a1fa	8d a0 00	sta $8000a0		sta LevelData.exitFrameDelta			; -1 to get to next frame
5652	.21fd	80a1fd	60		rts			rts


5655							; ----- @Level Data@ -----

5657	>21fe	80a1fe	3c a2 09 a3 d6 a3 a1 a4		LevelTable .word <>(fileTileMap,Level02,Level03,Level04,Level05,Level06,Level07,Level08,Level09,Level10,Level11,Level12,Level13,Level14,Level15,Level16,Level17,Level18,Level19,Level20,Level21,Level22,Level23,Level24,Level25,Level26,Level27,Level28,Level29,Level30,Level31)
	>2206	80a206	70 a5 37 a6 08 a7 db a7 a4 a8 75 a9 3c aa 0b ab
	>2216	80a216	da ab ab ac 7e ad 47 ae 16 af e7 af b8 b0 87 b1
	>2226	80a226	50 b2 21 b3 ec b3 b7 b4 8a b5 55 b6 26 b7 f9 b7
	>2236	80a236	c6 b8 97 b9 62 ba

5659	>223c	80a23c	c4 00 c4 00 00 00 00 00		fileTileMap	.binary "../levels/01.bin"
	>2244	80a244	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>2254	80a254	00 01 01 01 01 01 00 00 00 00 00 00 08 08 08 08
	>2264	80a264	08 09 00 00 00 09 08 08 00 00 00 00 01 01 01 01
	>2274	80a274	01 01 00 00 00 01 01 01 00 00 00 00 07 07 07 01
	>2284	80a284	00 00 00 00 00 00 00 01 08 08 00 00 07 07 07 01
	>2294	80a294	00 00 00 00 00 00 00 01 01 01 00 00 08 08 08 03
	>22a4	80a2a4	00 0a 00 00 00 00 00 02 07 02 09 12 14 14 14 01
	>22b4	80a2b4	01 01 00 00 00 01 01 01 14 01 01 01 06 06 06 06
	>22c4	80a2c4	06 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00
	>22d4	80a2d4	00 01 01 00 01 01 00 00 00 00 00 01 00 00 00 00
	>22e4	80a2e4	00 00 00 00 00 00 00 00 10 00 00 11 01 01 01 01
	>22f4	80a2f4	01 01 01 01 01 01 01 01 01 01 01 01 04 a7 30 47
	>2304	80a304	20 8a 03 6a 01
5660	>2309	80a309	c4 00 c4 00 00 00 00 00		Level02		.binary "../levels/02.bin"
	>2311	80a311	00 00 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>2321	80a321	00 08 08 08 08 08 08 00 00 00 00 00 12 00 09 00
	>2331	80a331	00 08 08 08 08 08 08 00 00 09 00 00 01 01 01 00
	>2341	80a341	00 08 08 08 08 08 08 00 00 01 01 11 00 00 00 00
	>2351	80a351	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 00
	>2361	80a361	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 09
	>2371	80a371	00 00 08 08 08 08 00 00 09 00 00 00 01 01 01 01
	>2381	80a381	00 00 00 01 01 00 00 00 01 01 01 01 00 00 00 00
	>2391	80a391	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>23a1	80a3a1	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>23b1	80a3b1	09 00 00 08 08 00 00 09 00 00 00 00 00 01 01 01
	>23c1	80a3c1	01 00 00 08 08 00 00 01 01 01 01 00 04 2f 10 60
	>23d1	80a3d1	10 a2 03 ad 03
5661	>23d6	80a3d6	c4 00 c4 00 00 00 00 00		Level03		.binary "../levels/03.bin"
	>23de	80a3de	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00
	>23ee	80a3ee	00 00 00 00 00 00 00 00 00 00 00 07 08 00 00 00
	>23fe	80a3fe	00 00 00 00 00 00 00 00 00 00 00 07 01 00 01 01
	>240e	80a40e	01 00 09 00 00 09 00 01 01 01 14 14 00 00 01 00
	>241e	80a41e	00 00 00 00 00 00 00 00 00 01 08 08 00 01 01 00
	>242e	80a42e	00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 00
	>243e	80a43e	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>244e	80a44e	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>245e	80a45e	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>246e	80a46e	00 00 00 00 00 00 00 00 00 06 00 00 07 12 01 00
	>247e	80a47e	00 00 00 00 00 00 00 00 0f 06 06 06 13 01 01 01
	>248e	80a48e	01 01 13 01 01 13 01 01 01 01 01 11 03 94 10 9b
	>249e	80a49e	12 23 20
5662	>24a1	80a4a1	c4 00 c4 00 09 00 00 00		Level04		.binary "../levels/04.bin"
	>24a9	80a4a9	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>24b9	80a4b9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08
	>24c9	80a4c9	08 08 00 00 00 00 08 08 08 00 12 00 00 01 01 01
	>24d9	80a4d9	01 01 00 00 00 00 01 01 01 01 01 00 09 00 00 00
	>24e9	80a4e9	00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00
	>24f9	80a4f9	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 07
	>2509	80a509	00 00 00 00 00 00 00 00 07 00 00 00 02 02 01 01
	>2519	80a519	00 00 00 00 00 00 00 00 01 01 02 02 00 00 00 01
	>2529	80a529	01 14 01 07 07 01 14 01 01 00 00 00 11 00 00 00
	>2539	80a539	03 00 06 00 00 06 00 03 00 00 00 11 01 00 0a 00
	>2549	80a549	03 00 0b 00 00 0b 00 03 00 0a 00 01 01 01 01 01
	>2559	80a559	01 01 01 01 01 01 01 01 01 01 01 01 05 67 22 1b
	>2569	80a569	22 14 20 81 03 8e 03
5663	>2570	80a570	c4 00 c4 00 00 00 00 00		Level05		.binary "../levels/04boss01.bin"
	>2578	80a578	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>2588	80a588	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>2598	80a598	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>25a8	80a5a8	00 00 00 00 00 00 00 00 00 00 00 00 09 00 0d 00
	>25b8	80a5b8	00 00 00 09 09 00 00 00 00 0e 00 09 01 01 01 00
	>25c8	80a5c8	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>25d8	80a5d8	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>25e8	80a5e8	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>25f8	80a5f8	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2608	80a608	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2618	80a618	00 00 00 09 09 00 00 00 00 00 00 11 01 01 01 01
	>2628	80a628	00 00 01 01 01 01 00 00 01 01 01 01 01 67 82
5664	>2637	80a637	c4 00 c4 00 00 00 00 00		Level06		.binary "../levels/05.bin"
	>263f	80a63f	00 00 00 00 00 00 00 00 00 00 08 08 00 00 00 00
	>264f	80a64f	00 00 00 00 00 00 00 00 00 00 08 08 12 09 00 00
	>265f	80a65f	00 00 00 00 00 00 00 00 00 09 08 08 01 01 00 00
	>266f	80a66f	00 01 07 07 07 01 00 00 00 01 01 01 00 00 00 09
	>267f	80a67f	00 00 00 00 00 00 00 09 00 00 00 00 0f 00 00 01
	>268f	80a68f	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
	>269f	80a69f	00 09 00 00 00 09 00 00 00 00 00 00 00 00 00 00
	>26af	80a6af	00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00
	>26bf	80a6bf	00 00 00 09 00 00 00 00 00 00 00 00 14 14 14 01
	>26cf	80a6cf	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01
	>26df	80a6df	00 00 00 00 00 00 00 00 00 00 00 11 06 06 06 01
	>26ef	80a6ef	01 01 01 01 01 01 01 01 01 01 01 01 06 22 20 4c
	>26ff	80a6ff	20 6b 20 8a 23 71 02 ad 40
5665	>2708	80a708	c4 00 c4 00 00 00 00 00		Level07		.binary "../levels/06.bin"
	>2710	80a710	00 09 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>2720	80a720	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>2730	80a730	00 08 08 08 08 08 08 00 00 00 00 00 01 02 02 02
	>2740	80a740	02 01 01 01 01 01 01 03 03 03 03 01 00 00 00 00
	>2750	80a750	00 00 00 00 00 00 00 00 00 00 00 00 0b 01 00 00
	>2760	80a760	00 00 0b 00 00 0b 00 00 00 00 01 0b 00 00 00 00
	>2770	80a770	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2780	80a780	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>2790	80a790	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>27a0	80a7a0	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
	>27b0	80a7b0	00 00 08 08 08 08 00 00 00 00 00 00 00 01 01 01
	>27c0	80a7c0	01 01 01 01 01 01 01 01 01 01 11 00 07 b0 61 bf
	>27d0	80a7d0	62 2d 22 87 20 4b 73 75 01 7a 03
5666	>27db	80a7db	c4 00 c4 00 09 00 00 09		Level08		.binary "../levels/07.bin"
	>27e3	80a7e3	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>27f3	80a7f3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2803	80a803	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>2813	80a813	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>2823	80a823	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2833	80a833	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2843	80a843	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2853	80a853	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>2863	80a863	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>2873	80a873	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2883	80a883	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>2893	80a893	01 01 13 01 01 13 01 01 13 01 01 01 02 a0 22 3e
	>28a3	80a8a3	20
5667	>28a4	80a8a4	c4 00 c4 00 06 00 00 00		Level09		.binary "../levels/08.bin"
	>28ac	80a8ac	00 06 00 00 00 00 06 00 00 00 00 09 00 00 00 00
	>28bc	80a8bc	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>28cc	80a8cc	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>28dc	80a8dc	01 01 01 01 01 01 01 01 01 00 00 00 09 00 00 00
	>28ec	80a8ec	08 00 00 00 00 00 00 01 00 00 00 00 01 00 00 00
	>28fc	80a8fc	01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 12
	>290c	80a90c	01 11 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>291c	80a91c	01 01 01 14 14 01 01 01 01 00 00 00 09 00 00 00
	>292c	80a92c	00 00 00 00 00 00 07 01 00 00 00 09 01 00 00 00
	>293c	80a93c	00 00 00 00 00 00 00 01 00 00 00 01 08 00 00 00
	>294c	80a94c	00 00 00 00 00 00 0f 01 00 00 00 00 01 01 01 01
	>295c	80a95c	01 01 01 14 14 01 01 01 06 06 06 06 06 a3 03 a6
	>296c	80a96c	03 a9 03 5f 02 2f 22 4a 22
5668	>2975	80a975	c4 00 c4 00 00 00 00 00		Level10		.binary "../levels/08boss02.bin"
	>297d	80a97d	09 00 06 06 06 06 00 09 00 00 00 00 09 0d 10 00
	>298d	80a98d	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>299d	80a99d	00 00 00 00 00 00 00 00 00 01 01 01 06 06 00 00
	>29ad	80a9ad	00 00 00 00 00 00 00 00 00 00 06 06 00 00 00 09
	>29bd	80a9bd	00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00
	>29cd	80a9cd	00 01 14 14 14 14 01 00 00 00 00 00 00 00 00 00
	>29dd	80a9dd	00 00 06 06 06 06 00 00 00 00 00 00 09 10 10 00
	>29ed	80a9ed	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>29fd	80a9fd	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>2a0d	80aa0d	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2a1d	80aa1d	00 00 00 00 00 00 00 00 00 0f 00 11 01 01 01 00
	>2a2d	80aa2d	01 01 01 00 00 01 01 01 00 01 01 01 01 87 90
5669	>2a3c	80aa3c	c4 00 c4 00 12 00 00 00		Level11		.binary "../levels/09.bin"
	>2a44	80aa44	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00
	>2a54	80aa54	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
	>2a64	80aa64	01 01 01 00 00 01 01 01 01 01 01 01 09 00 00 00
	>2a74	80aa74	00 00 06 00 00 06 00 00 00 00 00 0f 00 00 00 00
	>2a84	80aa84	00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00
	>2a94	80aa94	00 00 07 00 00 07 00 00 00 00 00 00 00 00 01 00
	>2aa4	80aaa4	00 00 07 00 00 07 00 00 00 01 00 00 00 00 00 00
	>2ab4	80aab4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
	>2ac4	80aac4	01 01 01 08 08 01 01 01 01 01 00 00 00 00 00 00
	>2ad4	80aad4	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2ae4	80aae4	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2af4	80aaf4	00 01 01 06 06 01 01 00 01 01 01 01 05 1f 30 a1
	>2b04	80ab04	40 97 20 52 20 6e 03
5670	>2b0b	80ab0b	c4 00 c4 00 00 11 00 00		Level12		.binary "../levels/10.bin"
	>2b13	80ab13	00 00 00 00 00 00 00 00 00 00 12 00 00 01 00 00
	>2b23	80ab23	00 00 09 00 00 09 00 00 00 00 01 00 00 00 00 00
	>2b33	80ab33	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2b43	80ab43	00 00 08 08 08 08 00 00 00 01 00 00 00 00 00 00
	>2b53	80ab53	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>2b63	80ab63	00 00 01 00 00 01 00 00 01 00 00 00 00 00 00 00
	>2b73	80ab73	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2b83	80ab83	00 00 08 00 00 08 00 00 00 01 00 00 00 00 00 00
	>2b93	80ab93	00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
	>2ba3	80aba3	00 00 07 07 07 07 00 00 00 00 01 00 09 00 00 00
	>2bb3	80abb3	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2bc3	80abc3	01 01 01 06 06 01 01 01 01 01 01 01 05 2e 20 6e
	>2bd3	80abd3	22 41 20 81 22 7c 40
5671	>2bda	80abda	c4 00 c4 00 00 00 00 00		Level13		.binary "../levels/11.bin"
	>2be2	80abe2	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 08
	>2bf2	80abf2	00 00 01 00 00 09 00 00 01 00 00 07 00 00 00 00
	>2c02	80ac02	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 01
	>2c12	80ac12	00 00 09 00 00 01 00 00 06 00 00 01 12 00 00 00
	>2c22	80ac22	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 09
	>2c32	80ac32	00 00 01 00 00 0a 00 00 01 00 00 0b 00 00 00 00
	>2c42	80ac42	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 01
	>2c52	80ac52	00 00 0a 00 00 01 00 00 0b 00 00 01 00 00 00 00
	>2c62	80ac62	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 06
	>2c72	80ac72	00 00 01 00 00 0b 00 00 01 00 00 08 00 00 00 00
	>2c82	80ac82	00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 01
	>2c92	80ac92	00 00 0b 00 00 01 00 00 08 00 00 11 06 09 22 49
	>2ca2	80aca2	22 89 22 a6 20 66 20 26 20
5672	>2cab	80acab	c4 00 c4 00 00 00 00 00		Level14		.binary "../levels/12.bin"
	>2cb3	80acb3	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2cc3	80acc3	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 00
	>2cd3	80acd3	00 00 01 01 01 01 00 00 00 01 01 01 00 00 00 00
	>2ce3	80ace3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2cf3	80acf3	0a 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 01
	>2d03	80ad03	01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00
	>2d13	80ad13	00 00 00 00 00 00 00 00 00 00 00 12 0b 00 00 00
	>2d23	80ad23	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>2d33	80ad33	00 00 06 06 06 06 00 00 00 01 01 01 00 00 00 00
	>2d43	80ad43	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2d53	80ad53	0c 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 01
	>2d63	80ad63	01 01 00 00 00 00 01 01 01 00 00 00 07 b6 61 b9
	>2d73	80ad73	61 94 03 9b 02 1d 30 12 32 58 40
5673	>2d7e	80ad7e	c4 00 c4 00 00 00 00 00		Level15		.binary "../levels/12boss03.bin"
	>2d86	80ad86	06 00 06 00 00 06 00 06 00 00 00 00 09 0d 10 00
	>2d96	80ad96	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>2da6	80ada6	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>2db6	80adb6	09 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00
	>2dc6	80adc6	01 00 00 09 09 00 00 01 00 00 00 00 00 00 00 00
	>2dd6	80add6	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
	>2de6	80ade6	09 00 00 00 00 00 00 09 00 00 00 00 09 10 10 00
	>2df6	80adf6	01 00 00 00 00 00 00 01 00 10 10 09 01 01 01 00
	>2e06	80ae06	00 00 06 00 00 06 00 00 00 01 01 01 00 00 00 00
	>2e16	80ae16	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2e26	80ae26	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>2e36	80ae36	01 00 01 01 01 01 00 01 01 01 01 01 02 87 80 27
	>2e46	80ae46	82
5674	>2e47	80ae47	c4 00 c4 00 09 00 00 00		Level16		.binary "../levels/13.bin"
	>2e4f	80ae4f	00 00 00 00 01 01 01 06 06 06 00 06 01 00 00 00
	>2e5f	80ae5f	00 00 00 00 01 07 01 00 00 00 00 0a 00 00 00 00
	>2e6f	80ae6f	00 00 00 00 02 07 02 00 00 00 00 00 00 00 14 00
	>2e7f	80ae7f	00 00 00 00 02 07 02 00 00 00 0a 00 00 00 00 00
	>2e8f	80ae8f	00 00 00 00 01 07 01 00 00 00 00 00 01 00 00 00
	>2e9f	80ae9f	01 01 01 00 01 01 01 00 00 0a 00 06 09 08 08 08
	>2eaf	80aeaf	01 00 00 00 00 00 01 00 00 00 00 00 01 01 01 00
	>2ebf	80aebf	01 00 00 00 00 00 01 00 0a 00 00 00 07 07 01 00
	>2ecf	80aecf	01 00 00 14 00 00 01 00 00 00 00 00 00 00 01 00
	>2edf	80aedf	01 00 00 00 00 00 01 0a 00 00 00 00 12 00 00 00
	>2eef	80aeef	11 00 00 00 00 00 00 08 08 08 08 00 01 01 01 13
	>2eff	80aeff	01 01 01 06 01 01 01 13 13 13 13 00 05 24 22 42
	>2f0f	80af0f	20 86 01 88 03 1d 32
5675	>2f16	80af16	c4 00 c4 00 00 00 06 00		Level17		.binary "../levels/14.bin"
	>2f1e	80af1e	00 00 06 00 00 00 06 00 00 00 00 00 09 00 00 00
	>2f2e	80af2e	07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00
	>2f3e	80af3e	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
	>2f4e	80af4e	01 00 00 00 01 00 00 00 01 01 00 00 00 00 00 00
	>2f5e	80af5e	00 00 00 00 00 00 00 00 00 06 12 00 01 01 06 01
	>2f6e	80af6e	01 01 06 01 01 01 06 01 00 01 01 01 00 00 00 00
	>2f7e	80af7e	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2f8e	80af8e	09 00 00 00 09 00 00 00 09 11 00 00 00 00 00 00
	>2f9e	80af9e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2fae	80afae	00 00 00 00 00 00 00 00 00 00 00 00 14 14 14 14
	>2fbe	80afbe	14 14 14 14 14 14 14 14 14 01 00 0f 06 06 06 06
	>2fce	80afce	06 06 06 06 06 06 06 06 06 01 00 01 06 21 20 41
	>2fde	80afde	20 72 03 76 03 7a 03 6d 22
5676	>2fe7	80afe7	c4 00 c4 00 01 06 06 06		Level18		.binary "../levels/15.bin"
	>2fef	80afef	01 01 01 00 01 01 01 01 01 01 01 00 01 09 00 00
	>2fff	80afff	08 00 08 00 00 00 00 00 00 0a 01 00 01 00 00 00
	>300f	80b00f	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>301f	80b01f	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>302f	80b02f	08 12 08 00 00 00 00 00 00 00 01 00 01 08 01 01
	>303f	80b03f	01 01 01 01 01 08 01 01 01 01 01 00 01 08 01 00
	>304f	80b04f	00 00 00 00 06 00 06 11 00 00 00 00 01 08 01 00
	>305f	80b05f	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 00
	>306f	80b06f	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 08
	>307f	80b07f	01 01 01 0a 01 00 06 01 01 01 01 01 01 08 08 08
	>308f	80b08f	01 0f 03 00 01 00 06 06 06 06 06 06 01 01 01 01
	>309f	80b09f	01 00 01 01 01 00 00 00 00 00 00 00 06 2a 10 22
	>30af	80b0af	20 76 03 74 01 7c 03 7e 01
5677	>30b8	80b0b8	c4 00 c4 00 09 00 09 00		Level19		.binary "../levels/16.bin"
	>30c0	80b0c0	09 00 00 07 07 00 00 09 00 09 00 09 00 00 00 00
	>30d0	80b0d0	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>30e0	80b0e0	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 06
	>30f0	80b0f0	00 06 00 00 00 00 06 00 06 00 06 00 00 00 00 00
	>3100	80b100	00 00 00 00 00 00 00 00 00 00 00 00 13 00 13 00
	>3110	80b110	13 00 00 00 00 00 00 13 00 13 00 13 01 00 01 00
	>3120	80b120	01 00 00 00 00 00 00 01 00 01 00 01 08 00 00 00
	>3130	80b130	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>3140	80b140	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>3150	80b150	00 00 00 00 00 00 12 00 00 00 00 08 09 00 00 00
	>3160	80b160	00 00 13 00 00 13 11 00 00 00 00 09 01 01 01 00
	>3170	80b170	01 01 01 08 08 01 01 01 01 01 01 01 05 9d 71 92
	>3180	80b180	71 a4 01 ae 42 42 20
5678	>3187	80b187	c4 00 c4 00 00 00 00 00		Level20		.binary "../levels/16boss04.bin"
	>318f	80b18f	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>319f	80b19f	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>31af	80b1af	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>31bf	80b1bf	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>31cf	80b1cf	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 00
	>31df	80b1df	06 00 00 01 01 00 00 06 00 01 01 01 00 00 00 00
	>31ef	80b1ef	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>31ff	80b1ff	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>320f	80b20f	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>321f	80b21f	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>322f	80b22f	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>323f	80b23f	14 14 00 01 01 00 14 14 00 01 01 01 02 67 90 07
	>324f	80b24f	92
5679	>3250	80b250	c4 00 c4 00 00 00 00 00		Level21		.binary "../levels/17.bin"
	>3258	80b258	00 0a 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>3268	80b268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3278	80b278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3288	80b288	00 00 00 01 01 00 00 00 00 00 00 00 09 06 00 0f
	>3298	80b298	00 00 00 00 00 00 00 00 07 00 06 09 00 06 00 01
	>32a8	80b2a8	01 00 00 00 00 00 00 01 01 00 06 00 00 06 00 00
	>32b8	80b2b8	00 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00
	>32c8	80b2c8	01 01 00 00 00 00 01 01 00 00 06 00 00 06 00 00
	>32d8	80b2d8	00 0b 00 00 00 00 0b 00 00 00 06 00 00 06 00 00
	>32e8	80b2e8	00 01 01 08 08 01 01 00 00 00 06 00 00 00 00 00
	>32f8	80b2f8	00 00 00 00 00 00 00 00 00 00 00 12 01 01 01 01
	>3308	80b308	01 01 01 01 01 01 01 01 01 01 01 11 06 63 53 6c
	>3318	80b318	53 a8 22 67 20 01 10 2c 42
5680	>3321	80b321	c4 00 c4 00 09 00 00 09		Level22		.binary "../levels/18.bin"
	>3329	80b329	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>3339	80b339	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3349	80b349	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>3359	80b359	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>3369	80b369	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3379	80b379	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3389	80b389	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3399	80b399	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>33a9	80b3a9	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>33b9	80b3b9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>33c9	80b3c9	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>33d9	80b3d9	01 01 13 01 01 13 01 01 13 01 01 01 03 ad 22 4d
	>33e9	80b3e9	22 52 20
5681	>33ec	80b3ec	c4 00 c4 00 09 00 00 00		Level23		.binary "../levels/19.bin"
	>33f4	80b3f4	00 09 00 00 00 00 09 00 00 00 00 09 12 00 00 00
	>3404	80b404	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>3414	80b414	00 01 00 07 07 00 01 00 08 08 00 01 0a 00 00 00
	>3424	80b424	00 0a 00 00 00 00 0a 00 00 00 00 0a 00 00 00 00
	>3434	80b434	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>3444	80b444	00 01 00 07 07 00 01 00 08 08 00 01 0b 00 00 00
	>3454	80b454	00 0b 00 00 00 00 0b 00 00 00 00 0b 00 00 00 00
	>3464	80b464	00 00 00 00 00 00 00 00 00 00 00 00 11 00 08 08
	>3474	80b474	00 01 00 07 07 00 01 00 08 08 00 01 0c 00 00 00
	>3484	80b484	00 0c 00 00 00 00 0c 00 00 00 00 0c 00 00 00 00
	>3494	80b494	00 00 00 00 00 00 00 00 00 00 00 00 01 13 01 01
	>34a4	80b4a4	13 01 13 01 01 13 01 13 01 01 13 01 03 4f 22 af
	>34b4	80b4b4	22 70 20
5682	>34b7	80b4b7	c4 00 c4 00 00 00 00 00		Level24		.binary "../levels/20.bin"
	>34bf	80b4bf	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>34cf	80b4cf	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>34df	80b4df	00 01 01 01 01 01 01 01 01 01 00 00 01 01 01 14
	>34ef	80b4ef	14 01 00 00 00 00 00 00 00 01 00 0a 00 00 00 00
	>34ff	80b4ff	00 00 00 00 00 00 00 00 00 01 14 01 00 00 00 00
	>350f	80b50f	00 00 00 00 04 04 04 00 00 00 00 01 00 00 08 08
	>351f	80b51f	08 08 00 00 02 0f 03 00 00 12 00 01 00 00 01 06
	>352f	80b52f	06 01 00 00 01 01 01 00 00 01 14 01 00 00 01 00
	>353f	80b53f	00 01 00 00 00 00 00 00 00 00 00 0c 00 01 01 00
	>354f	80b54f	00 01 01 01 00 00 00 05 00 00 00 00 00 08 08 00
	>355f	80b55f	00 07 0b 11 00 00 00 05 00 00 00 00 01 01 01 01
	>356f	80b56f	01 01 01 01 01 00 01 01 01 01 06 06 07 37 53 3b
	>357f	80b57f	53 10 20 40 20 89 20 9d 70 94 03
5683	>358a	80b58a	c4 00 c4 00 00 00 00 00		Level25		.binary "../levels/20boss05.bin"
	>3592	80b592	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>35a2	80b5a2	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>35b2	80b5b2	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>35c2	80b5c2	00 00 00 00 00 00 00 00 00 00 00 00 10 00 09 00
	>35d2	80b5d2	00 0d 00 00 00 00 0e 00 00 09 00 10 01 00 01 00
	>35e2	80b5e2	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>35f2	80b5f2	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>3602	80b602	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>3612	80b612	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>3622	80b622	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>3632	80b632	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>3642	80b642	00 01 00 00 00 00 01 00 00 01 01 01 03 97 80 67
	>3652	80b652	82 37 80
5684	>3655	80b655	c4 00 c4 00 0b 00 00 0a		Level26		.binary "../levels/21.bin"
	>365d	80b65d	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00
	>366d	80b66d	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>367d	80b67d	00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 04
	>368d	80b68d	06 06 06 02 00 00 00 03 03 03 03 00 00 00 00 00
	>369d	80b69d	00 00 00 00 00 00 00 0c 00 00 00 00 14 14 14 14
	>36ad	80b6ad	14 14 02 14 14 14 14 14 05 01 05 00 00 00 00 00
	>36bd	80b6bd	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>36cd	80b6cd	00 00 00 00 00 00 00 00 00 01 00 00 09 00 00 00
	>36dd	80b6dd	00 00 00 00 00 00 00 00 00 0a 00 00 14 00 00 14
	>36ed	80b6ed	00 00 14 00 00 14 00 00 05 05 11 00 00 00 00 00
	>36fd	80b6fd	00 00 00 00 00 00 00 00 00 00 12 00 06 06 06 06
	>370d	80b70d	06 06 00 06 06 06 06 06 05 00 01 05 06 26 22 65
	>371d	80b71d	22 86 20 a5 20 7f 03 46 30
5685	>3726	80b726	c4 00 c4 00 00 00 00 00		Level27		.binary "../levels/22.bin"
	>372e	80b72e	00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 00
	>373e	80b73e	00 00 00 00 00 00 00 00 00 00 00 0f 01 01 00 09
	>374e	80b74e	00 00 00 00 00 09 00 00 00 00 01 01 00 00 00 14
	>375e	80b75e	00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00
	>376e	80b76e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>377e	80b77e	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00
	>378e	80b78e	00 00 14 08 08 00 00 00 14 00 00 00 00 00 00 00
	>379e	80b79e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>37ae	80b7ae	00 00 00 00 00 09 00 00 00 00 00 00 00 00 00 14
	>37be	80b7be	00 00 00 00 00 14 00 00 00 00 00 00 07 07 00 00
	>37ce	80b7ce	00 00 00 00 00 00 00 00 00 00 00 11 01 01 06 06
	>37de	80b7de	06 00 06 06 06 06 00 06 06 06 01 01 07 b5 61 ba
	>37ee	80b7ee	61 04 53 0b 53 4f 22 70 20 1e 10
5686	>37f9	80b7f9	c4 00 c4 00 00 00 00 00		Level28		.binary "../levels/23.bin"
	>3801	80b801	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>3811	80b811	00 00 00 00 00 00 00 00 00 00 00 11 01 00 00 00
	>3821	80b821	00 00 00 00 00 00 00 00 00 00 00 01 00 09 00 00
	>3831	80b831	00 0a 00 00 00 0b 00 00 00 0c 00 00 00 00 00 00
	>3841	80b841	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3851	80b851	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3861	80b861	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00
	>3871	80b871	00 06 00 00 00 06 00 00 00 06 00 00 00 00 00 00
	>3881	80b881	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3891	80b891	00 00 00 00 00 00 00 00 00 00 00 00 07 06 07 00
	>38a1	80b8a1	08 06 08 00 08 06 08 00 07 06 07 07 01 01 01 13
	>38b1	80b8b1	01 01 01 13 01 01 01 13 01 01 01 01 04 50 10 55
	>38c1	80b8c1	13 59 11 5e 12
5687	>38c6	80b8c6	c4 00 c4 00 00 00 00 00		Level29		.binary "../levels/24.bin"
	>38ce	80b8ce	00 00 02 03 04 05 02 03 04 05 00 11 00 12 00 00
	>38de	80b8de	14 14 14 14 14 14 14 14 14 14 14 01 01 01 00 00
	>38ee	80b8ee	06 06 06 06 06 06 06 06 06 06 06 01 01 00 00 00
	>38fe	80b8fe	00 00 00 00 00 00 00 00 0b 00 00 01 01 00 00 14
	>390e	80b90e	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>391e	80b91e	00 00 00 09 00 00 00 00 00 00 00 01 01 00 00 00
	>392e	80b92e	00 00 00 14 14 00 00 00 0c 00 00 01 01 00 00 14
	>393e	80b93e	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>394e	80b94e	00 00 00 0a 00 00 00 00 00 00 00 01 01 00 00 00
	>395e	80b95e	00 00 00 14 14 00 00 00 00 00 00 01 01 00 00 00
	>396e	80b96e	00 00 00 00 00 00 00 00 00 00 00 01 01 01 13 01
	>397e	80b97e	01 01 01 01 01 01 01 01 01 01 01 01 06 04 20 45
	>398e	80b98e	10 7a 10 75 10 4a 10 aa 32
5688	>3997	80b997	c4 00 c4 00 00 00 00 00		Level30		.binary "../levels/24boss06.bin"
	>399f	80b99f	00 00 00 00 00 00 00 00 00 00 00 00 0c 0d 10 00
	>39af	80b9af	00 00 00 14 14 00 00 00 00 10 0e 0b 05 05 05 00
	>39bf	80b9bf	00 00 00 00 00 00 00 00 00 04 04 04 00 00 00 00
	>39cf	80b9cf	0a 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 00
	>39df	80b9df	14 00 00 0c 0c 00 00 14 00 00 00 00 00 00 00 00
	>39ef	80b9ef	00 00 00 14 14 00 00 00 00 00 00 00 00 00 00 00
	>39ff	80b9ff	0a 00 00 00 00 00 00 0b 00 00 00 00 09 10 10 00
	>3a0f	80ba0f	14 00 00 00 00 00 00 14 00 10 10 0a 02 02 02 00
	>3a1f	80ba1f	00 00 00 00 00 00 00 00 00 03 03 03 00 00 00 00
	>3a2f	80ba2f	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>3a3f	80ba3f	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>3a4f	80ba4f	00 01 01 06 06 01 01 00 01 01 01 01 03 97 90 67
	>3a5f	80ba5f	92 27 90
5689	>3a62	80ba62	c4 00 c4 00 12 00 00 00		Level31		.binary "../levels/end.bin"
	>3a6a	80ba6a	00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00
	>3a7a	80ba7a	07 00 07 07 00 07 00 00 00 07 01 00 07 00 00 00
	>3a8a	80ba8a	07 00 07 00 00 07 00 00 00 07 00 01 07 00 00 00
	>3a9a	80ba9a	07 00 07 07 00 07 00 00 00 07 00 00 07 00 07 00
	>3aaa	80baaa	07 00 07 00 00 07 00 00 00 07 00 00 00 07 00 07
	>3aba	80baba	00 00 07 07 00 07 07 07 00 07 07 07 00 00 00 00
	>3aca	80baca	00 00 00 00 00 00 00 00 00 00 00 00 08 08 00 00
	>3ada	80bada	00 08 00 00 08 00 08 00 08 08 08 00 08 00 08 00
	>3aea	80baea	08 00 08 00 08 08 08 00 08 00 00 00 08 00 08 00
	>3afa	80bafa	08 00 08 00 08 08 08 00 08 08 00 09 08 00 08 00
	>3b0a	80bb0a	08 00 08 00 08 08 08 00 08 00 00 11 08 08 00 00
	>3b1a	80bb1a	00 08 00 00 08 00 08 00 08 08 08 01 01 1f 03

5691							; ----- @Titlescreen Data@ -----

5693	.3b29	80bb29					TitleScreenData .block

5695	.3b29	80bb29					SpriteStruct .block
5696	=12620							_QDef = fSprDef(6,10, kSPri_3|kSPal_0)
5697	=12680							_WDef = fSprDef(4,12, kSPri_3|kSPal_0)
5698	=12684							_ADef = fSprDef(6,12, kSPri_3|kSPal_0)
5699	=12744							_KDef = fSprDef(4,14, kSPri_3|kSPal_0)
5700								; this is set up so I can just loop copy to OAM
5701	>3b29	80bb29	3f 0a 4c 31				sprites	.byte 63 ,10, <_QDef, >_QDef
5702	>3b2d	80bb2d	62 0a 88 31							.byte	98,10, <_WDef, >_WDef
5703	>3b31	80bb31	85 0a 8c 31							.byte 133,10, <_ADef, >_ADef
5704	>3b35	80bb35	a8 0a c8 31							.byte	168,10, <_KDef, >_KDef
5705	=$aa							kUpper = %10101010 ; all Large and no MSB
5706							.bend

5708							; each string has the ID, X char, Y char
5709	=(26,8,4)					Version = (kStrings.version,8,4)
5710	=(2,0,6)					Original = (kStrings.original,0,6)
5711	=(4,3,8)					Ported = (kStrings.cx16port,3,8)
5712	=(6,7,10)					Code = (kStrings.program,7,10)
5713	=(8,7,11)					Art = (kStrings.art,7,11)
5714	=(10,7,12)					Music = (kStrings.music,7,12)
5715	=(12,6,14)					Special = (kStrings.specialThanks,6,14)
5716	=(14,7,16)					Soci = (kStrings.soci,7,16)
5717	=(16,10,17)					Didi = (kStrings.didi,10,17)
5718	=(18,13,11)					Saul1 = (kStrings.saul,13,11)
5719	=(18,13,12)					Saul2 = (kStrings.saul,13,12)
5720	=(32,12,18)					Optiroc = (kStrings.optiroc,12,18)
5721	=(24,7,22)					Both = (kStrings.both,7,22)
5722	=(10,15,22)					Music2 = (kStrings.music,15,22)
5723	=(20,24,22)					SFX = (kStrings.sfx,24,22)
5724	=(22,30,22)					None = (kStrings.none,30,22)
5725	=(28,5,19)					Password = (kStrings.password,5,19)
5726	=(30,14,20)					PasswordBlank = (kStrings.passwordBlank,14,20)

5728							; merge all the strings into one, this time I don't use := but make multiple and merge down
5729	=((26,8,4),(2,0,6),(4,3,8),(6,7,10))		G1 = (Version,Original,Ported,Code)
5730	=((8,7,11),(10,7,12),(12,6,14),(14,7,16))	G2 = (Art,Music,Special,Soci)
5731	=((16,10,17),(18,13,11),(18,13,12),(32,12,18))	G3 = (Didi,Saul1,Saul2,Optiroc)
5732							; G4 = (Both, Music2,SFX,None,Password)	; SNES version doesn't need these string yet
5733							; G5 = (PasswordBlank,)
5734	=((26,8,4),(2,0,6),(4,3,8),(6,7,10),(8,7,11),(10,7,12),(12,6,14),(14,7,16),(16,10,17),(18,13,11),(18,13,12),(32,12,18))
							AllStrings = G1 .. G2 .. G3 ; .. G4 .. G5

5736							; this has the index into the String Ptr LUT to draw this string
5737	>3b39	80bb39	1a 00 02 00 04 00 06 00		string .word AllStrings[:,0]..(kStrings.gameOver,)	; tack the Game over on the end so len(AllStrings) gives the index
	>3b41	80bb41	08 00 0a 00 0c 00 0e 00 10 00 12 00 12 00 20 00
	>3b51	80bb51	00 00
5738							; convert the X,Y char to address to copy string to on Screen Mirror
5739	=(8464,8576,8710,8846,8910,8974,9100,9230,9300,8922,8986,9368,8982)
							allPos = (fGetMemoryForScreenChar(<>ScreenMirror,AllStrings[:,1],AllStrings[:,2]))..(fGetMemoryForScreenChar(<>ScreenMirror,11,12),)
5740							; get the dest pointers lo/hi
5741	.3b53	80bb53					stringPos .block
5742	>3b53	80bb53	10 21 80 21 06 22 8e 22			.word <>(allPos)
	>3b5b	80bb5b	ce 22 0e 23 8c 23 0e 24 54 24 da 22 1a 23 98 24
	>3b6b	80bb6b	16 23
5743							.bend

5745							;spriteCol	.byte 7,13,14,10 ; reference by commneted out code

5747							; used for the menu which currently is not in the SNES version
5748							;menuOffsetsStart	.byte (30,23,15,7)*2
5749							;menuOffsetsEnd		.byte (37,30,22,14)*2

5751							.bend ; titlescreendata

5753							; This converts ASICII to the font layout I use in QWAK which is actually mostly just PETSCII order offset
5754							; {{{
5755							.enc "qwak" ;define an ascii->petscii encoding
5756							.cdef "@@", 128
5757							.cdef "AZ", 129
5758							.edef "[",  155
5759							.edef "<U+FFFD>",  156 ; this is the britsh pound smybol if it is corrupt you need to reopen the file as Windows1252 encoding
5760							.edef "]",  157 ; or retype the pound in your current encoding, everything else is UTF-8 safe.
5761							.edef "^",  158
5762							.edef "|",  159;->
5763							.edef " ",  160
5764							.edef "!",  161
5765							.edef "`",  162;"
5766							.edef "#",  163
5767							.edef "~",  164 ;heart
5768							.edef "%",  165
5769							.edef "&",  166
5770							.edef "'",  167
5771							.edef "(",  168
5772							.edef ")",  169
5773							.edef "*",  170
5774							.edef "+",  171
5775							.edef ",",  172
5776							.edef "-",  173
5777							.edef ".",  174
5778							.edef "/",  175
5779							.cdef "09", 176
5780							.edef ":",  186
5781							.edef ";",  187
5782							.edef "<",  188
5783							.edef "=",  189
5784							.edef ">",  190
5785							.edef "?",  191
5786							; }}}

5788							; the index here must match bellow and is use to set the string data in the string,pos
5789	.3b6d	80bb6d					kStrings .block
5790	=0							gameOver = 0*2
5791	=2							original = 1*2
5792	=4							cx16port = 2*2
5793	=6							program = 3*2
5794	=8							art = 4*2
5795	=10							music = 5*2
5796	=12							specialThanks = 6*2
5797	=14							soci = 7*2
5798	=16							didi = 8*2
5799	=18							saul = 9*2
5800	=20							sfx = 10*2
5801	=22							none = 11*2
5802	=24							both = 12*2
5803	=26							version = 13*2
5804	=28							password = 14*2
5805	=30							passwordBlank = 15*2
5806	=32							optiroc = 16*2
5807							.bend

5809							;StringTableLUTLo .byte <GAMEOVER,<ORIGINAL,<CX16PORT,<PROGRAM,<ART,<MUSIC,<SPECIALTHANKS,<SOCI,<MARTINPIPER,<SAUL,<SFX,<NONE,<BOTH,<VERSION,<PASSWORD,<PASSWORDBLANK,<OPTIROC
5810							;StringTableLUTHi .byte >GAMEOVER,>ORIGINAL,>CX16PORT,>PROGRAM,>ART,>MUSIC,>SPECIALTHANKS,>SOCI,>MARTINPIPER,>SAUL,>SFX,>NONE,>BOTH,>VERSION,>PASSWORD,>PASSWORDBLANK,>OPTIROC

5812	>3b6d	80bb6d	8f bb 99 bb ba bb d5 bb		StringTableLUT .word <>(GAMEOVER,ORIGINAL,CX16PORT,PROGRAM,ART,MUSIC,SPECIALTHANKS,SOCI,MARTINPIPER,SAUL,SFX,NONE,BOTH,VERSION,PASSWORD,PASSWORDBLANK,OPTIROC)
	>3b75	80bb75	e8 bb f9 bb 0d bc 22 bc 35 bc ec bb ff bb 03 bc
	>3b85	80bb85	08 bc 4a bc 5b bc 7a bc 42 bc

5814							.enc "qwak"
5815	>3b8f	80bb8f	87 81 8d 85 a0 8f 96 85		GAMEOVER			.text "GAME OVER",$ff
	>3b97	80bb97	92 ff
5816	>3b99	80bb99	8f 92 89 87 89 8e 81 8c		ORIGINAL			.text "ORIGINAL CONCEPT JAMIE WOODHOUSE",$ff
	>3ba1	80bba1	a0 83 8f 8e 83 85 90 94 a0 8a 81 8d 89 85 a0 97
	>3bb1	80bbb1	8f 8f 84 88 8f 95 93 85 ff
5817	>3bba	80bbba	90 8f 92 94 85 84 a0 94		CX16PORT			.text "PORTED TO THE SUPER NES BY",$ff
	>3bc2	80bbc2	8f a0 94 88 85 a0 93 95 90 85 92 a0 8e 85 93 a0
	>3bd2	80bbd2	82 99 ff
5818	>3bd5	80bbd5	83 8f 84 85 a0 a0 ba a0		PROGRAM			.text "CODE  : OZIPHANTOM",$ff
	>3bdd	80bbdd	8f 9a 89 90 88 81 8e 94 8f 8d ff
5819	>3be8	80bbe8	81 92 94 ff			ART				.text "ART",$ff
5820	>3bec	80bbec	ba a0 93 81 95 8c a0 83		SAUL				.text ": SAUL CROSS",$ff
	>3bf4	80bbf4	92 8f 93 93 ff
5821	>3bf9	80bbf9	8d 95 93 89 83 ff		MUSIC				.text "MUSIC",$ff
5822	>3bff	80bbff	93 86 98 ff			SFX				.text "SFX",$ff
5823	>3c03	80bc03	8e 8f 8e 85 ff			NONE				.text "NONE",$ff
5824	>3c08	80bc08	82 8f 94 88 ff			BOTH				.text "BOTH",$ff
5825	>3c0d	80bc0d	93 90 85 83 89 81 8c a0		SPECIALTHANKS	.text "SPECIAL THANKS GO TO",$ff
	>3c15	80bc15	94 88 81 8e 8b 93 a0 87 8f a0 94 8f ff
5826	>3c22	80bc22	93 8f 83 89 ac a0 8d 81		SOCI				.text "SOCI, MARTIN PIPER",$ff
	>3c2a	80bc2a	92 94 89 8e a0 90 89 90 85 92 ff
5827	>3c35	80bc35	84 89 84 89 ac a0 94 88		MARTINPIPER		.text "DIDI, THERYK",$ff
	>3c3d	80bc3d	85 92 99 8b ff
5828	>3c42	80bc42	8f 90 94 89 92 8f 83 ff		OPTIROC			.text "OPTIROC",$ff
5829	>3c4a	80bc4a	93 8e 85 93 a0 85 84 89		VERSION			.text "SNES EDITION 1.3",$ff
	>3c52	80bc52	94 89 8f 8e a0 b1 ae b3 ff
5830	>3c5b	80bc5b	94 99 90 85 a0 90 81 93		PASSWORD			.text "TYPE PASSWORD : SPACE TO CLEAR",$ff
	>3c63	80bc63	93 97 8f 92 84 a0 ba a0 93 90 81 83 85 a0 94 8f
	>3c73	80bc73	a0 83 8c 85 81 92 ff
5831	>3c7a	80bc7a	ad ad ad ad ad ad ad ad		PASSWORDBLANK	.text "------------",$ff
	>3c82	80bc82	ad ad ad ad ff

5833							; the Cheat password bytes not used in SNES yet, left for cribbing, execise to the user etc
5834	>3c87	80bc87	88 8f 94 8f 90 81 81 83		PASSWORD_LIVES		.byte $88,$8f,$94,$8f,$90,$81,$81,$83,$92,$8f,$93,$93 ; hotopaacross
	>3c8f	80bc8f	92 8f 93 93
5835	>3c93	80bc93	89 93 88 8f 8f 94 92 85		PASSWORD_RED		.byte $89,$93,$88,$8f,$8f,$94,$92,$85,$84,$81,$8c,$8c ; ishootredall
	>3c9b	80bc9b	84 81 8c 8c
5836	>3c9f	80bc9f	8d 81 99 84 81 99 8d 81		PASSWORD_SPRING	.byte $8d,$81,$99,$84,$81,$99,$8d,$81,$99,$84,$81,$99 ; maydaymayday
	>3ca7	80bca7	99 84 81 99
5837	>3cab	80bcab	93 94 85 90 90 85 84 8f		PASSWORD_LEVEL		.byte $93,$94,$85,$90,$90,$85,$84,$8f,$96,$85,$92,$81 ; steppedovera
	>3cb3	80bcb3	96 85 92 81


:1	;******  Return to file: QWAKSNES.asm

185							.send

187							.section sBank81
188	>8000	818000	00				.byte 0 ; place holder
189							.send

191							.section sBank82
192	>010000	828000	b0 00 53 00 17 00 e6 00			BackShadowChars	.binary "../back_shadow.bin"
	>010008	828008	0b 00 f0 00 d9 00 ab 00 00 b0 00 53 00 17 00 e6
	>010018	828018	00 0b 00 f0 00 d9 00 ab e6 00 f4 00 cb 00 a8 00
	>010028	828028	17 00 ef 00 0f 00 af 00 00 e6 00 f4 00 cb 00 a8
	>010038	828038	00 17 00 ef 00 0f 00 af 4b 00 88 00 17 00 ef 00
	>010048	828048	1d 00 d6 00 a8 00 e7 00 00 4b 00 88 00 17 00 ef
	>010058	828058	00 1d 00 d6 00 a8 00 e7 05 00 fa 00 f5 00 a4 00
	>010068	828068	48 00 17 00 ef 00 0f 00 00 05 00 fa 00 f5 00 a4
	>010078	828078	00 48 00 17 00 ef 00 0f 10 00 00 00 10 00 a0 00
	>010088	828088	01 00 a0 00 51 00 aa 00 00 10 00 00 00 10 00 a0
	>010098	828098	00 01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00
	>0100a8	8280a8	15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00 00
	>0100b8	8280b8	00 15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00
	>0100c8	8280c8	01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00 00
	>0100d8	8280d8	00 01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00
	>0100e8	8280e8	01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00 00
	>0100f8	8280f8	00 01 00 a0 00 51 00 aa 00 00 02 00 05 00 02 00
	>010108	828108	01 00 a0 00 51 00 aa 00 00 00 00 02 00 05 00 02
	>010118	828118	00 01 00 a0 00 51 00 aa d1 00 83 00 17 00 a6 00
	>010128	828128	03 00 00 00 01 00 0a 00 00 d1 00 83 00 17 00 a6
	>010138	828138	00 03 00 00 00 01 00 0a 01 00 08 00 05 00 0a 00
	>010148	828148	05 00 02 00 00 00 02 00 00 01 00 08 00 05 00 0a
	>010158	828158	00 05 00 02 00 00 00 02 00 00 02 00 05 00 02 00
	>010168	828168	01 00 00 00 01 00 0a 00 00 00 00 02 00 05 00 02
	>010178	828178	00 01 00 00 00 01 00 0a 00 00 55 00 00 00 40 00
	>010188	828188	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010198	828198	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>0101a8	8281a8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>0101b8	8281b8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>0101c8	8281c8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>0101d8	8281d8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>0101e8	8281e8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>0101f8	8281f8	00 02 00 00 00 aa 00 00 ff 30 ff c3 ff 0c ff 3f
	>010208	828208	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010218	828218	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>010228	828228	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>010238	828238	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>010248	828248	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>010258	828258	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>010268	828268	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>010278	828278	00 03 00 cf 00 33 00 fc ff 30 ff c3 ff 0c ff 3f
	>010288	828288	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010298	828298	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>0102a8	8282a8	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>0102b8	8282b8	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>0102c8	8282c8	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>0102d8	8282d8	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>0102e8	8282e8	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>0102f8	8282f8	00 03 00 cf 00 33 00 fc ff ff ff ff ff ff ff 3f
	>010308	828308	ff ff ff 33 ff cc ff 00 00 00 00 00 00 00 00 00
	>010318	828318	00 00 00 cc 00 33 00 ff ff fc ff ff ff fc ff f3
	>010328	828328	ff fc ff 30 ff cc ff 00 00 03 00 00 00 03 00 0c
	>010338	828338	00 03 00 cf 00 33 00 ff ff ff ff ff ff ff ff 33
	>010348	828348	ff cc ff 00 33 00 cc 00 00 00 00 00 00 00 00 cc
	>010358	828358	00 33 00 ff 00 33 00 cc ff fc ff ff ff fc ff 33
	>010368	828368	ff cc ff 00 33 00 cc 00 00 03 00 00 00 03 00 cc
	>010378	828378	00 33 00 ff 00 33 00 cc ff ff ff 33 ff cc ff 00
	>010388	828388	33 00 cc 00 00 00 00 00 00 00 00 cc 00 33 00 ff
	>010398	828398	00 33 00 cc 00 00 00 00 ff fc ff 33 ff cc ff 00
	>0103a8	8283a8	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>0103b8	8283b8	00 33 00 cc 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103c8	8283c8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103d8	8283d8	00 00 00 00 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103e8	8283e8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103f8	8283f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010408	828408	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010418	828418	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010428	828428	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010438	828438	00 00 00 00 00 00 00 00 ff 30 ff c3 ff 0c ff 3f
	>010448	828448	ff cf ff 3f ff ff ff 33 00 c0 00 00 00 00 00 00
	>010458	828458	00 00 00 00 00 00 00 cc ff 0c ff 33 ff ff ff ff
	>010468	828468	ff fc ff ff ff ff ff 33 00 03 00 00 00 00 00 00
	>010478	828478	00 03 00 00 00 00 00 cc ff 30 ff c3 ff 0c ff 3f
	>010488	828488	ff cf ff 33 ff cc ff 00 00 c0 00 00 00 00 00 00
	>010498	828498	00 00 00 cc 00 33 00 ff ff 0c ff 33 ff ff ff ff
	>0104a8	8284a8	ff fc ff 33 ff cc ff 00 00 03 00 00 00 00 00 00
	>0104b8	8284b8	00 03 00 cc 00 33 00 ff ff 30 ff c3 ff 0c ff 33
	>0104c8	8284c8	ff cc ff 00 33 00 cc 00 00 c0 00 00 00 00 00 cc
	>0104d8	8284d8	00 33 00 ff 00 33 00 cc ff 0c ff 33 ff ff ff 33
	>0104e8	8284e8	ff cc ff 00 33 00 cc 00 00 03 00 00 00 00 00 cc
	>0104f8	8284f8	00 33 00 ff 00 33 00 cc ff 30 ff 03 ff 0c ff 00
	>010508	828508	33 00 cc 00 00 00 00 00 00 c0 00 cc 00 33 00 ff
	>010518	828518	00 33 00 cc 00 00 00 00 ff 0c ff 33 ff cc ff 00
	>010528	828528	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>010538	828538	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>010548	828548	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010558	828558	00 00 00 00 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>010568	828568	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>010578	828578	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010588	828588	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010598	828598	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0105a8	8285a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0105b8	8285b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105c8	8285c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105d8	8285d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105e8	8285e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105f8	8285f8	00 00 00 00 00 00 00 00 33 00 cc 00 33 00 c3 00
	>010608	828608	30 00 cf 00 3f 00 3f 00 00 33 00 cc 03 30 00 c3
	>010618	828618	00 30 0c c3 3f 00 33 00 03 00 fc 00 fc 00 f0 00
	>010628	828628	c3 00 30 00 fc 00 fc 00 00 03 fc 00 30 cc c0 30
	>010638	828638	00 c3 00 30 f0 0c fc 00 3f 00 3f 00 3f 00 3f 00
	>010648	828648	0f 00 cf 00 33 00 cc 00 33 00 3f 00 3f 00 0f 30
	>010658	828658	03 0c 0c c3 00 33 00 cc fc 00 fc 00 fc 00 fc 00
	>010668	828668	f3 00 f0 00 c3 00 0c 00 f0 0c c0 3c f0 0c c0 3c
	>010678	828678	00 f3 c0 30 00 c3 00 0c 00 00 bf 00 3f 00 20 00
	>010688	828688	00 00 f9 00 d3 00 02 00 00 00 00 bf 00 3f 00 20
	>010698	828698	00 00 00 f9 00 d3 00 02 00 00 bf 00 3d 00 20 00
	>0106a8	8286a8	00 00 fb 00 f3 00 02 00 00 00 00 bf 00 3d 00 20
	>0106b8	8286b8	00 00 00 fb 00 f3 00 02 00 00 9f 00 3f 00 20 00
	>0106c8	8286c8	00 00 db 00 f3 00 02 00 00 00 00 9f 00 3f 00 20
	>0106d8	8286d8	00 00 00 db 00 f3 00 02 00 00 bd 00 3f 00 20 00
	>0106e8	8286e8	00 00 f9 00 f3 00 02 00 00 00 00 bd 00 3f 00 20
	>0106f8	8286f8	00 00 00 f9 00 f3 00 02 00 00 10 00 20 00 00 00
	>010708	828708	00 00 51 00 e2 00 00 00 00 00 00 10 00 20 00 00
	>010718	828718	00 00 00 51 00 e2 00 00 00 00 00 00 00 00 00 00
	>010728	828728	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010738	828738	00 00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00
	>010748	828748	00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00
	>010758	828758	00 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00
	>010768	828768	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010778	828778	00 00 00 51 00 a2 00 00 00 00 05 00 0a 00 00 00
	>010788	828788	00 00 51 00 a2 00 00 00 00 00 00 05 00 0a 00 00
	>010798	828798	00 00 00 51 00 a2 00 00 00 00 97 00 2b 00 00 00
	>0107a8	8287a8	00 00 01 00 02 00 00 00 00 00 00 97 00 2b 00 00
	>0107b8	8287b8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107c8	8287c8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107d8	8287d8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107e8	8287e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107f8	8287f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>010808	828808	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010818	828818	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010828	828828	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010838	828838	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010848	828848	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010858	828858	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010868	828868	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010878	828878	00 02 00 00 00 aa 00 00 0f 00 00 00 cc 00 3c 00
	>010888	828888	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010898	828898	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>0108a8	8288a8	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>0108b8	8288b8	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>0108c8	8288c8	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>0108d8	8288d8	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>0108e8	8288e8	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>0108f8	8288f8	c0 33 00 c3 00 0c 00 f0 0f 00 00 00 cc 00 3c 00
	>010908	828908	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010918	828918	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>010928	828928	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>010938	828938	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>010948	828948	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>010958	828958	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>010968	828968	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>010978	828978	c0 33 00 c3 00 0c 00 f0 00 00 00 00 00 00 c0 00
	>010988	828988	03 00 cc 00 33 00 ff 00 ff 00 ff 00 ff 00 3f c0
	>010998	828998	fc 03 33 cc 00 33 00 ff 03 00 0f 00 33 00 0f 00
	>0109a8	8289a8	33 00 cf 00 3f 00 ff 00 fc 03 f0 0f c0 33 f0 0f
	>0109b8	8289b8	c0 33 00 cf 00 3f 00 ff 00 00 00 00 00 00 cc 00
	>0109c8	8289c8	33 00 ff 00 33 00 cc 00 ff 00 ff 00 ff 00 33 cc
	>0109d8	8289d8	cc 33 00 ff 00 33 00 cc 03 00 0f 00 33 00 cf 00
	>0109e8	8289e8	33 00 ff 00 33 00 cc 00 fc 03 f0 0f c0 33 30 cf
	>0109f8	8289f8	c0 33 00 ff 00 33 00 cc 00 00 cc 00 33 00 ff 00
	>010a08	828a08	33 00 cc 00 00 00 00 00 ff 00 33 cc cc 33 00 ff
	>010a18	828a18	00 33 00 cc 00 00 00 00 03 00 cf 00 33 00 ff 00
	>010a28	828a28	33 00 cc 00 00 00 00 00 fc 03 30 cf c0 33 00 ff
	>010a38	828a38	00 33 00 cc 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a48	828a48	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a58	828a58	00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a68	828a68	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a78	828a78	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010a88	828a88	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010a98	828a98	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010aa8	828aa8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010ab8	828ab8	00 00 00 00 00 00 00 00 0f 00 00 00 cc 00 3c 00
	>010ac8	828ac8	3c 00 30 00 00 00 cc 00 00 0f 3f 00 33 c0 c3 00
	>010ad8	828ad8	c3 00 cf 00 ff 00 33 cc f0 00 0c 00 03 00 00 00
	>010ae8	828ae8	03 00 00 00 03 00 cc 00 00 f0 f0 0c fc 03 ff 00
	>010af8	828af8	fc 03 ff 00 fc 03 33 cc 0f 00 00 00 cc 00 3c 00
	>010b08	828b08	3c 00 fc 00 33 00 ff 00 00 0f 3f 00 33 c0 c3 00
	>010b18	828b18	c3 00 03 cc cc 33 00 ff f0 00 0c 00 03 00 00 00
	>010b28	828b28	03 00 cc 00 33 00 ff 00 00 f0 f0 0c fc 03 ff 00
	>010b38	828b38	fc 03 33 cc cc 33 00 ff 0f 00 00 00 cc 00 fc 00
	>010b48	828b48	3f 00 ff 00 33 00 cc 00 00 0f 3f 00 33 c0 03 cc
	>010b58	828b58	c0 33 00 ff 00 33 00 cc f0 00 0c 00 03 00 cc 00
	>010b68	828b68	33 00 ff 00 33 00 cc 00 00 f0 f0 0c fc 03 33 cc
	>010b78	828b78	cc 33 00 ff 00 33 00 cc 0f 00 cc 00 ff 00 ff 00
	>010b88	828b88	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 f3 00 ff
	>010b98	828b98	00 33 00 cc 00 00 00 00 f0 00 cc 00 33 00 ff 00
	>010ba8	828ba8	33 00 cc 00 00 00 00 00 00 f0 30 cc cc 33 00 ff
	>010bb8	828bb8	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>010bc8	828bc8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>010bd8	828bd8	00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc 00
	>010be8	828be8	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010bf8	828bf8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c08	828c08	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c18	828c18	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c28	828c28	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c38	828c38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c48	828c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c58	828c58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c68	828c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c78	828c78	00 00 00 00 00 00 00 00 30 00 c3 03 0f 03 cf 03
	>010c88	828c88	0f 0f cf 0f 0f 0f cf 03 00 30 03 c0 03 00 03 c0
	>010c98	828c98	0f 00 0f c0 0f 00 03 cc 03 00 c0 00 f3 c0 f0 c0
	>010ca8	828ca8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 c0 33 c0 30
	>010cb8	828cb8	c0 33 c0 30 c0 33 00 f0 0f 00 c3 00 30 00 c3 00
	>010cc8	828cc8	33 03 c3 00 33 03 cc 00 00 0f 00 c3 00 30 00 c3
	>010cd8	828cd8	03 30 00 c0 03 30 00 cc f3 00 cc 00 03 00 0c 00
	>010ce8	828ce8	c3 00 cc c0 c3 00 0c 00 00 f3 00 cc 00 03 00 0c
	>010cf8	828cf8	00 c3 c0 0c 00 c3 00 0c f2 00 f2 00 e2 00 c4 00
	>010d08	828d08	09 00 13 00 e7 00 0f 00 00 f2 00 f2 00 e2 00 c4
	>010d18	828d18	00 09 00 13 00 e7 00 0f 7f 00 7f 00 7f 00 2f 00
	>010d28	828d28	90 00 c8 00 a7 00 d0 00 00 7f 00 7f 00 7f 00 2f
	>010d38	828d38	00 90 00 c8 00 a7 00 d0 0f 00 e5 00 f2 00 e9 00
	>010d48	828d48	f4 00 f2 00 f2 00 f2 00 00 0f 00 e5 00 f2 00 e9
	>010d58	828d58	00 f4 00 f2 00 f2 00 f2 90 00 27 00 4f 00 9f 00
	>010d68	828d68	3f 00 7f 00 7f 00 7f 00 00 90 00 27 00 4f 00 9f
	>010d78	828d78	00 3f 00 7f 00 7f 00 7f a0 00 50 00 a0 00 40 00
	>010d88	828d88	08 00 11 00 e2 00 05 00 00 a0 00 50 00 a0 00 40
	>010d98	828d98	00 08 00 11 00 e2 00 05 00 00 00 00 00 00 00 00
	>010da8	828da8	80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00 00
	>010db8	828db8	00 80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00
	>010dc8	828dc8	08 00 01 00 02 00 05 00 00 00 00 00 00 00 00 00
	>010dd8	828dd8	00 08 00 01 00 02 00 05 00 00 00 00 00 00 00 00
	>010de8	828de8	08 00 11 00 a2 00 05 00 00 00 00 00 00 00 00 00
	>010df8	828df8	00 08 00 11 00 a2 00 05 02 00 00 00 02 00 04 00
	>010e08	828e08	08 00 11 00 a2 00 05 00 00 02 00 00 00 02 00 04
	>010e18	828e18	00 08 00 11 00 a2 00 05 b2 00 52 00 a2 00 44 00
	>010e28	828e28	08 00 01 00 02 00 05 00 00 b2 00 52 00 a2 00 44
	>010e38	828e38	00 08 00 01 00 02 00 05 0a 00 05 00 02 00 01 00
	>010e48	828e48	00 00 00 00 02 00 00 00 00 0a 00 05 00 02 00 01
	>010e58	828e58	00 00 00 00 00 02 00 00 02 00 00 00 02 00 04 00
	>010e68	828e68	08 00 01 00 02 00 05 00 00 02 00 00 00 02 00 04
	>010e78	828e78	00 08 00 01 00 02 00 05 00 00 55 00 00 00 40 00
	>010e88	828e88	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010e98	828e98	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010ea8	828ea8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010eb8	828eb8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010ec8	828ec8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010ed8	828ed8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010ee8	828ee8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010ef8	828ef8	00 02 00 00 00 aa 00 00 ff 00 ff 00 ff 00 ff 00
	>010f08	828f08	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f18	828f18	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f28	828f28	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f38	828f38	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f48	828f48	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f58	828f58	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f68	828f68	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f78	828f78	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f88	828f88	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f98	828f98	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010fa8	828fa8	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010fb8	828fb8	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010fc8	828fc8	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010fd8	828fd8	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>010fe8	828fe8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>010ff8	828ff8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>011008	829008	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>011018	829018	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>011028	829028	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>011038	829038	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011048	829048	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011058	829058	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011068	829068	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011078	829078	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011088	829088	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011098	829098	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>0110a8	8290a8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0110b8	8290b8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110c8	8290c8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110d8	8290d8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110e8	8290e8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110f8	8290f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011108	829108	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011118	829118	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011128	829128	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011138	829138	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>011148	829148	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011158	829158	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>011168	829168	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>011178	829178	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>011188	829188	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011198	829198	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>0111a8	8291a8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>0111b8	8291b8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>0111c8	8291c8	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>0111d8	8291d8	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>0111e8	8291e8	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>0111f8	8291f8	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011208	829208	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011218	829218	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011228	829228	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011238	829238	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011248	829248	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011258	829258	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011268	829268	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011278	829278	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011288	829288	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011298	829298	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0112a8	8292a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0112b8	8292b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112c8	8292c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112d8	8292d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112e8	8292e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112f8	8292f8	00 00 00 00 00 00 00 00 33 00 cc 00 30 00 c3 00
	>011308	829308	33 00 c3 00 33 00 cc 00 00 33 00 cc 00 30 03 c0
	>011318	829318	03 30 00 c3 00 33 00 cc 33 00 00 00 fc 00 f0 00
	>011328	829328	f3 00 cc 00 c3 00 0c 00 00 33 00 00 f0 0c 30 c0
	>011338	829338	c0 33 c0 0c 00 c3 00 0c 00 00 03 30 c0 3c 00 fc
	>011348	829348	0c f0 30 00 03 00 cc 00 00 00 00 03 00 00 00 00
	>011358	829358	00 0c 00 30 00 03 00 cc 33 00 0c 00 03 30 c0 3c
	>011368	829368	00 fc 0c f0 33 00 cc 00 00 33 00 0c 00 03 00 00
	>011378	829378	00 00 00 0c 00 33 00 cc e0 00 c3 00 8f 00 1c 00
	>011388	829388	30 00 33 00 67 00 6f 00 00 e0 00 c3 00 8f 00 1c
	>011398	829398	00 30 00 33 00 67 00 6f 1f 00 fd 00 f3 00 0f 00
	>0113a8	8293a8	ff 00 ff 00 f7 00 fe 00 00 1f 00 fd 00 f3 00 0f
	>0113b8	8293b8	00 ff 00 ff 00 f7 00 fe 7f 00 ef 00 ff 00 ff 00
	>0113c8	8293c8	f0 00 cf 00 bf 00 f8 00 00 7f 00 ef 00 ff 00 ff
	>0113d8	8293d8	00 f0 00 cf 00 bf 00 f8 f6 00 e6 00 cc 00 0c 00
	>0113e8	8293e8	38 00 f1 00 c3 00 07 00 00 f6 00 e6 00 cc 00 0c
	>0113f8	8293f8	00 38 00 f1 00 c3 00 07 a0 00 40 00 80 00 00 00
	>011408	829408	10 00 22 00 45 00 2a 00 00 a0 00 40 00 80 00 00
	>011418	829418	00 10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00
	>011428	829428	55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00 00
	>011438	829438	00 55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00
	>011448	829448	10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00 00
	>011458	829458	00 10 00 22 00 45 00 2a 00 00 02 00 05 00 08 00
	>011468	829468	10 00 22 00 45 00 2a 00 00 00 00 02 00 05 00 08
	>011478	829478	00 10 00 22 00 45 00 2a 40 00 82 00 05 00 08 00
	>011488	829488	00 00 02 00 05 00 0a 00 00 40 00 82 00 05 00 08
	>011498	829498	00 00 00 02 00 05 00 0a 00 00 02 00 05 00 08 00
	>0114a8	8294a8	00 00 02 00 05 00 0a 00 00 00 00 02 00 05 00 08
	>0114b8	8294b8	00 00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00
	>0114c8	8294c8	00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00 00
	>0114d8	8294d8	00 00 00 02 00 05 00 0a 00 00 05 00 0a 00 00 00
	>0114e8	8294e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0114f8	8294f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>011508	829508	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>011518	829518	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>011528	829528	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>011538	829538	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>011548	829548	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>011558	829558	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>011568	829568	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>011578	829578	00 02 00 00 00 aa 00 00 ff 0f ff c0 ff 00 ff fc
	>011588	829588	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011598	829598	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>0115a8	8295a8	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>0115b8	8295b8	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>0115c8	8295c8	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>0115d8	8295d8	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>0115e8	8295e8	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>0115f8	8295f8	00 00 00 3f 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>011608	829608	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011618	829618	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>011628	829628	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>011638	829638	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>011648	829648	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>011658	829658	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>011668	829668	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>011678	829678	00 00 00 3f 00 00 00 00 0f 00 ff 3f ff 00 fc 00
	>011688	829688	00 00 cc 00 33 00 ff 00 00 0f 3f c0 00 ff 00 fc
	>011698	829698	00 00 00 cc 00 33 00 ff f0 00 ff c0 00 00 03 00
	>0116a8	8296a8	00 00 ff 00 33 00 ff 00 00 f0 c0 3f 00 00 00 03
	>0116b8	8296b8	00 00 00 ff 00 33 00 ff 0f 00 ff 3f ff 00 fc 00
	>0116c8	8296c8	33 00 ff 00 33 00 cc 00 00 0f 3f c0 00 ff 00 fc
	>0116d8	8296d8	00 33 00 ff 00 33 00 cc f0 00 ff c0 00 00 cf 00
	>0116e8	8296e8	33 00 ff 00 33 00 cc 00 00 f0 c0 3f 00 00 00 cf
	>0116f8	8296f8	00 33 00 ff 00 33 00 cc 0f 00 ff 33 ff 00 ff 00
	>011708	829708	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 ff 00 ff
	>011718	829718	00 33 00 cc 00 00 00 00 f0 00 ff 00 33 00 ff 00
	>011728	829728	33 00 cc 00 00 00 00 00 00 f0 00 ff 00 33 00 ff
	>011738	829738	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011748	829748	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011758	829758	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011768	829768	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011778	829778	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011788	829788	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011798	829798	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0117a8	8297a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0117b8	8297b8	00 00 00 00 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>0117c8	8297c8	ff 0f ff 00 ff 00 ff 00 0f f0 c0 00 00 00 fc 03
	>0117d8	8297d8	0f 00 00 ff 00 ff 00 ff ff f0 ff 3f ff ff ff 03
	>0117e8	8297e8	ff f0 ff 3f ff ff ff 30 f0 0f 3f 00 ff 00 03 fc
	>0117f8	8297f8	f0 00 3f c0 ff 00 30 cf ff 0f ff c0 ff 00 ff 30
	>011808	829808	ff 0c ff 00 33 00 cc 00 0f f0 c0 00 00 00 30 cf
	>011818	829818	0c 33 00 ff 00 33 00 cc ff f0 ff 3f ff ff ff 03
	>011828	829828	ff f0 ff 33 ff cc ff 00 f0 0f 3f 00 ff 00 03 fc
	>011838	829838	f0 00 33 cc cc 33 00 ff ff 0f ff 00 ff 00 ff 00
	>011848	829848	33 00 cc 00 00 00 00 00 0f f0 00 cc 00 33 00 ff
	>011858	829858	00 33 00 cc 00 00 00 00 ff f0 ff 33 ff cc ff 00
	>011868	829868	33 00 cc 00 00 00 00 00 f0 0f 33 cc cc 33 00 ff
	>011878	829878	00 33 00 cc 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>011888	829888	00 00 00 00 00 00 00 00 0c f3 00 ff 00 33 00 cc
	>011898	829898	00 00 00 00 00 00 00 00 ff c0 ff 00 33 00 cc 00
	>0118a8	8298a8	00 00 00 00 00 00 00 00 c0 3f 00 ff 00 33 00 cc
	>0118b8	8298b8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118c8	8298c8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118d8	8298d8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118e8	8298e8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118f8	8298f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011908	829908	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011918	829918	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011928	829928	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011938	829938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011948	829948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011958	829958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011968	829968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011978	829978	00 00 00 00 00 00 00 00 33 00 cc 00 33 03 cf 0c
	>011988	829988	0f 0c 3f 3f 3f 3f 3f 0f 00 33 00 cc 00 30 00 c0
	>011998	829998	00 00 00 00 00 00 00 30 33 00 0c 00 c3 c0 f0 f0
	>0119a8	8299a8	f3 f0 fc fc fc f0 f0 c0 00 33 00 0c 00 03 00 00
	>0119b8	8299b8	00 03 00 00 00 0c 00 30 3f 00 3f 00 0c 00 c0 00
	>0119c8	8299c8	00 00 c0 00 30 00 cc 00 00 3f 00 3f 00 0c 00 c0
	>0119d8	8299d8	00 00 03 c0 00 30 00 cc fc 00 f0 00 c0 00 00 00
	>0119e8	8299e8	03 00 0c 00 33 00 cc 00 00 fc 00 f0 00 c0 00 00
	>0119f8	8299f8	30 03 c0 0c 00 33 00 cc
193	>011a00	829a00	ff 00 ff cf ff 03 ff cf			FixedSectionChars	.binary "../fixed_section_chars.bin"
	>011a08	829a08	ff 03 ff cf ff 03 ff 30 00 00 00 00 00 00 00 00
	>011a18	829a18	00 00 00 00 00 00 00 cf ff f3 c0 00 f3 00 c0 00
	>011a28	829a28	f3 00 c0 00 f3 00 00 00 00 0c 00 c0 00 f3 00 c0
	>011a38	829a38	00 f3 00 c0 00 f3 00 00 00 00 3f 0c 3f 33 3f 33
	>011a48	829a48	3f 33 3f 33 3f 33 3f 0c 00 00 00 33 00 00 00 00
	>011a58	829a58	00 00 00 00 00 00 00 33 00 00 00 00 cc 00 cc 00
	>011a68	829a68	cc 00 cc 00 cc 00 00 00 00 00 00 00 00 cc 00 cc
	>011a78	829a78	00 cc 00 cc 00 cc 00 00 0c 00 c0 00 30 00 c0 00
	>011a88	829a88	0c 00 0c 00 c0 00 00 00 00 0c 00 c0 03 00 0f c0
	>011a98	829a98	03 00 33 00 3f 00 3f 00 03 00 c0 00 03 00 30 00
	>011aa8	829aa8	03 00 30 00 cc 00 30 00 00 03 00 00 c0 03 c0 30
	>011ab8	829ab8	f0 00 c0 30 30 cc c0 30 0c 00 33 00 3f 00 c3 00
	>011ac8	829ac8	0c 00 30 00 03 00 c0 00 33 0c 0c 33 00 3f 00 03
	>011ad8	829ad8	00 0c 00 30 00 00 00 c0 c0 00 f3 00 c0 00 00 00
	>011ae8	829ae8	0c 00 3c 00 03 00 0c 00 00 c0 00 f0 00 c0 00 00
	>011af8	829af8	00 0c 00 30 00 03 00 0c 30 00 c3 00 33 00 c3 03
	>011b08	829b08	33 00 c3 03 33 00 cf 03 00 30 00 c0 00 30 03 c0
	>011b18	829b18	00 30 03 c0 00 30 03 c0 33 00 cc c0 f3 f0 f0 c0
	>011b28	829b28	f3 f0 f0 c0 c3 c0 f0 c0 00 33 c0 0c f0 03 c0 30
	>011b38	829b38	f0 03 c0 30 c0 03 c0 00 3f 0c 3c 30 30 30 30 30
	>011b48	829b48	3c 30 3f 0c 0f 03 c0 00 0c 03 30 0c 30 00 30 00
	>011b58	829b58	30 00 0c 30 03 0c 00 c0 fc 30 3c 0c 0c 0c cc 0c
	>011b68	829b68	3c 0c fc 30 f3 c0 0c 00 30 c0 0c 30 0c 00 0c c0
	>011b78	829b78	0c 00 30 0c c0 33 00 0c 00 03 c0 0f 00 0f 0c 33
	>011b88	829b88	00 3f 0c 33 00 3f 00 3f 00 00 00 c0 00 00 00 0c
	>011b98	829b98	00 00 00 0c 00 00 00 00 00 c0 c0 30 03 f0 c0 3c
	>011ba8	829ba8	00 fc 00 fc 0c f0 00 fc 00 00 00 c0 00 03 00 c0
	>011bb8	829bb8	00 00 00 00 00 0c 00 00 0c 33 00 33 00 3f 0c 33
	>011bc8	829bc8	00 3f 0c 33 00 33 0c 33 00 00 00 00 00 00 00 0c
	>011bd8	829bd8	00 00 00 0c 00 00 00 0c 00 fc cc 30 00 fc 0c f0
	>011be8	829be8	c0 30 0c f0 c0 30 00 30 00 00 00 cc 00 00 00 0c
	>011bf8	829bf8	00 c0 00 0c 00 c0 00 00 30 00 c3 00 30 00 c3 03
	>011c08	829c08	0f 0c cf 03 03 00 30 00 00 30 00 c0 00 00 03 c0
	>011c18	829c18	0c 00 03 0c 00 03 00 00 33 00 00 00 0c 00 c0 c0
	>011c28	829c28	f3 f0 f0 c0 c3 00 0c 00 00 33 00 00 00 00 c0 00
	>011c38	829c38	f0 00 c0 30 00 c3 00 00 00 00 c0 00 33 00 c3 00
	>011c48	829c48	0f 00 c3 00 33 00 cc 00 00 00 00 c0 00 33 03 c0
	>011c58	829c58	0f 00 03 c0 03 30 00 cc c3 00 0c 00 03 00 cc 00
	>011c68	829c68	c3 00 f0 00 c3 00 0c 00 00 03 00 0c 00 03 00 cc
	>011c78	829c78	00 c3 30 c0 00 c3 00 0c 30 00 03 00 3f 00 3f 00
	>011c88	829c88	3f 00 3f 00 3f 00 3f 00 00 30 03 00 33 00 33 00
	>011c98	829c98	33 00 3f 00 33 00 3f 00 30 00 c0 00 f0 00 fc 00
	>011ca8	829ca8	f0 00 fc 00 f0 00 fc 00 00 30 00 c0 00 f0 00 fc
	>011cb8	829cb8	00 f0 00 fc 00 f0 00 fc 3f 00 cf 00 0f 00 cf 00
	>011cc8	829cc8	0f 00 c3 00 33 00 cc 00 00 3f 00 cf 0c 03 00 cf
	>011cd8	829cd8	00 0f 00 c3 00 33 00 cc f0 00 c0 00 f3 00 c0 00
	>011ce8	829ce8	f3 00 cc 00 c3 00 0c 00 f0 00 c0 00 f0 03 c0 00
	>011cf8	829cf8	f0 03 c0 0c 00 c3 00 0c c0 00 3f 33 3f 0c c0 00
	>011d08	829d08	3f 33 3f 0c c0 00 3f 33 00 c0 00 00 00 33 00 c0
	>011d18	829d18	00 00 00 33 00 c0 00 00 03 00 00 00 00 00 f3 00
	>011d28	829d28	00 00 30 00 c3 00 00 00 00 03 cc 00 00 00 00 f3
	>011d38	829d38	cc 00 00 30 00 c3 cc 00 3f 0c c0 00 3f 33 3f 0c
	>011d48	829d48	c0 00 3f 33 3f 0c c0 00 00 33 00 c0 00 00 00 33
	>011d58	829d58	00 c0 00 00 00 33 00 c0 00 00 f3 00 00 00 00 00
	>011d68	829d68	f3 00 00 00 00 00 03 00 00 00 00 f3 cc 00 00 00
	>011d78	829d78	00 f3 cc 00 00 00 00 03 30 00 c3 00 30 00 c3 03
	>011d88	829d88	33 03 c3 03 33 03 cf 0f 00 30 00 c0 00 30 00 c0
	>011d98	829d98	00 30 00 c0 00 30 00 c0 33 00 cc c0 33 00 cc c0
	>011da8	829da8	c3 00 cc c0 c3 00 f0 c0 00 33 00 0c 00 33 00 0c
	>011db8	829db8	00 c3 00 0c 00 c3 00 30 0f 03 3f 33 3f 3f 3f 0f
	>011dc8	829dc8	3f 3f 3f 0c 0f 00 c0 00 00 00 00 00 00 00 00 30
	>011dd8	829dd8	00 00 00 33 00 0f 00 c0 f3 f0 fc c0 fc f0 fc c0
	>011de8	829de8	fc 30 fc c0 f3 00 0c 00 00 03 00 3c 00 0c 00 3c
	>011df8	829df8	00 cc 00 3c 00 f3 00 0c 30 00 c0 03 30 03 c3 0c
	>011e08	829e08	03 0c c0 0f 00 3f 30 0f 00 30 00 c0 00 30 00 c0
	>011e18	829e18	00 00 00 c0 00 00 00 30 33 00 0c c0 03 c0 30 c0
	>011e28	829e28	03 f0 30 c0 0c f0 30 c0 00 33 00 0c 00 03 00 30
	>011e38	829e38	00 03 00 30 00 0c 00 30 3f 00 3f 00 0c 00 33 00
	>011e48	829e48	00 00 c0 00 00 00 c0 00 00 3f 00 3f 00 0c 00 33
	>011e58	829e58	00 00 00 c0 00 00 00 c0 fc 00 f0 00 c0 00 0c 00
	>011e68	829e68	00 0c 0c 30 f3 00 0c 00 00 fc 00 f0 00 c0 00 0c
	>011e78	829e78	00 00 00 0c 00 f3 00 0c 30 00 c3 03 0f 03 cf 03
	>011e88	829e88	0f 0f cf 0f 0f 0f cf 03 00 30 00 c0 00 00 00 c0
	>011e98	829e98	00 00 00 c0 00 00 00 cc 03 00 c0 00 f3 c0 f0 c0
	>011ea8	829ea8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 00 33 00 30
	>011eb8	829eb8	00 33 00 30 00 33 00 f0
194	>011ec0	829ec0	00 00 3c 00 66 00 6e 00			Font4BPP				.binary "../font4bpp.bin"
	>011ec8	829ec8	60 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ed8	829ed8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 7e 00
	>011ee8	829ee8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ef8	829ef8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>011f08	829f08	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f18	829f18	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011f28	829f28	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f38	829f38	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 66 00
	>011f48	829f48	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f58	829f58	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f68	829f68	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f78	829f78	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f88	829f88	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f98	829f98	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011fa8	829fa8	66 00 3e 00 06 00 00 00 00 00 00 00 00 00 00 00
	>011fb8	829fb8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7e 00
	>011fc8	829fc8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011fd8	829fd8	00 00 00 00 00 00 00 00 00 00 7e 00 18 00 18 00
	>011fe8	829fe8	18 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ff8	829ff8	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 06 00
	>012008	82a008	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012018	82a018	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7c 00
	>012028	82a028	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012038	82a038	00 00 00 00 00 00 00 00 00 00 60 00 60 00 60 00
	>012048	82a048	66 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012058	82a058	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 66 00
	>012068	82a068	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012078	82a078	00 00 00 00 00 00 00 00 00 00 66 00 76 00 7e 00
	>012088	82a088	6e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012098	82a098	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120a8	82a0a8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120b8	82a0b8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>0120c8	82a0c8	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120d8	82a0d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120e8	82a0e8	6e 00 3c 00 06 00 00 00 00 00 00 00 00 00 00 00
	>0120f8	82a0f8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>012108	82a108	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012118	82a118	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 3c 00
	>012128	82a128	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012138	82a138	00 00 00 00 00 00 00 00 00 00 7e 00 5a 00 18 00
	>012148	82a148	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012158	82a158	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012168	82a168	66 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012178	82a178	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012188	82a188	3c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012198	82a198	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>0121a8	82a1a8	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121b8	82a1b8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3c 00
	>0121c8	82a1c8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121d8	82a1d8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3e 00
	>0121e8	82a1e8	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121f8	82a1f8	00 00 00 00 00 00 00 00 00 00 7e 00 0c 00 18 00
	>012208	82a208	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012218	82a218	00 00 00 00 00 00 00 00 00 00 3c 00 30 00 30 00
	>012228	82a228	30 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012238	82a238	00 00 00 00 00 00 00 00 00 00 1c 00 32 00 78 00
	>012248	82a248	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012258	82a258	00 00 00 00 00 00 00 00 00 00 3c 00 0c 00 0c 00
	>012268	82a268	0c 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012278	82a278	00 00 00 00 00 00 00 00 00 00 18 00 3c 00 7e 00
	>012288	82a288	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012298	82a298	00 00 00 00 00 00 00 00 00 00 08 00 0c 00 7e 00
	>0122a8	82a2a8	0c 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122b8	82a2b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122c8	82a2c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122d8	82a2d8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 18 00
	>0122e8	82a2e8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122f8	82a2f8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 00 00
	>012308	82a308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012318	82a318	00 00 00 00 00 00 00 00 00 00 24 00 7e 00 24 00
	>012328	82a328	7e 00 24 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012338	82a338	00 00 00 00 00 00 00 00 00 00 28 00 7c 00 7c 00
	>012348	82a348	38 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012358	82a358	00 00 00 00 00 00 00 00 00 00 66 00 6c 00 18 00
	>012368	82a368	36 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012378	82a378	00 00 00 00 00 00 00 00 00 00 38 00 28 00 7e 00
	>012388	82a388	6c 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012398	82a398	00 00 00 00 00 00 00 00 00 00 18 00 18 00 30 00
	>0123a8	82a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123b8	82a3b8	00 00 00 00 00 00 00 00 00 00 18 00 30 00 30 00
	>0123c8	82a3c8	30 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123d8	82a3d8	00 00 00 00 00 00 00 00 00 00 18 00 0c 00 0c 00
	>0123e8	82a3e8	0c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123f8	82a3f8	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 18 00
	>012408	82a408	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012418	82a418	00 00 00 00 00 00 00 00 00 00 18 00 18 00 7e 00
	>012428	82a428	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012438	82a438	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012448	82a448	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012458	82a458	00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e 00
	>012468	82a468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012478	82a478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012488	82a488	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012498	82a498	00 00 00 00 00 00 00 00 00 00 06 00 0c 00 18 00
	>0124a8	82a4a8	30 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124b8	82a4b8	00 00 00 00 00 00 00 00 00 00 3c 00 6e 00 66 00
	>0124c8	82a4c8	76 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124d8	82a4d8	00 00 00 00 00 00 00 00 00 00 18 00 38 00 18 00
	>0124e8	82a4e8	18 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124f8	82a4f8	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 3c 00
	>012508	82a508	60 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012518	82a518	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 0c 00
	>012528	82a528	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012538	82a538	00 00 00 00 00 00 00 00 00 00 6c 00 6c 00 7e 00
	>012548	82a548	0c 00 0c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012558	82a558	00 00 00 00 00 00 00 00 00 00 7e 00 60 00 7c 00
	>012568	82a568	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012578	82a578	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 7c 00
	>012588	82a588	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012598	82a598	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 0c 00
	>0125a8	82a5a8	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125b8	82a5b8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3c 00
	>0125c8	82a5c8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125d8	82a5d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3e 00
	>0125e8	82a5e8	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125f8	82a5f8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012608	82a608	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012618	82a618	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012628	82a628	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012638	82a638	00 00 00 00 00 00 00 00 00 00 1c 00 30 00 60 00
	>012648	82a648	30 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012658	82a658	00 00 00 00 00 00 00 00 00 00 00 00 7e 00 00 00
	>012668	82a668	7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012678	82a678	00 00 00 00 00 00 00 00 00 00 38 00 0c 00 06 00
	>012688	82a688	0c 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012698	82a698	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 1c 00
	>0126a8	82a6a8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0126b8	82a6b8	00 00 00 00 00 00 00 00
195	>0126c0	82a6c0	ff 00 ff 00 ff 00 ff 00			TopFixedChars		.binary "../top_fixed_chars.bin"
	>0126c8	82a6c8	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00
	>0126d8	82a6d8	ff 00 ff 00 ff 00 ff 00 03 00 cc 00 0c 03 30 0f
	>0126e8	82a6e8	30 03 30 0f 30 03 30 0f 00 03 00 cc 00 0c 00 30
	>0126f8	82a6f8	00 30 00 30 00 30 00 30 00 00 00 f0 03 f0 c0 3c
	>012708	82a708	00 fc c0 3c 0c 30 c0 3c 00 00 00 00 00 03 00 c0
	>012718	82a718	00 00 00 c0 00 0c 00 c0 33 00 30 0c 30 03 3c 03
	>012728	82a728	30 03 3c 03 30 03 00 03 00 30 00 30 00 30 00 3c
	>012738	82a738	00 30 00 3c 00 30 00 00 00 fc cc 30 00 3c cc 30
	>012748	82a748	00 30 0c 30 00 30 00 30 00 00 00 cc 00 00 00 cc
	>012758	82a758	00 00 00 0c 00 00 00 00 03 00 cf 00 0c 03 33 0c
	>012768	82a768	3c 03 33 0c 30 0f 33 0c 00 03 00 cf 00 0c 00 33
	>012778	82a778	00 3c 00 30 00 30 00 30 c0 00 f0 00 c3 00 cc 30
	>012788	82a788	30 0c cc 30 30 0c cc 30 00 c0 00 f0 00 c3 00 cc
	>012798	82a798	00 30 00 cc 00 30 00 cc 33 0c 33 0c 30 0f 33 0c
	>0127a8	82a7a8	3c 03 33 0c 3c 03 0f 00 00 30 00 30 00 30 00 30
	>0127b8	82a7b8	00 3c 00 33 00 3c 00 0f c0 3c c0 3c 00 3c cc 30
	>0127c8	82a7c8	30 0c cc 30 30 0c cc 30 00 00 00 c0 00 00 00 cc
	>0127d8	82a7d8	00 30 00 cc 00 30 00 cc c0 00 f0 00 33 c0 cc 30
	>0127e8	82a7e8	3c c0 cc 30 0c f0 cc 30 00 c0 00 f0 00 33 00 cc
	>0127f8	82a7f8	00 3c 00 0c 00 0c 00 0c cc 30 cc 30 0c f0 cc 30
	>012808	82a808	3c c0 cc 30 3c c0 f0 00 00 00 00 0c 00 0c 00 0c
	>012818	82a818	00 3c 00 cc 00 3c 00 f0 cc 30 cc 30 0c f0 cc 30
	>012828	82a828	3c c0 cc 30 3c c0 f0 00 00 0c 00 0c 00 0c 00 0c
	>012838	82a838	00 3c 00 cc 00 3c 00 f0 ff 00 dd 00 eb 00 f7 00
	>012848	82a848	eb 00 dd 00 ff 00 ff 00 00 ff 00 dd 00 eb 00 f7
	>012858	82a858	00 eb 00 dd 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012868	82a868	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012878	82a878	00 ff 00 ff 00 ff 00 ff ff cc ff 33 ff c0 ff 3f
	>012888	82a888	ff c0 ff 30 ff c0 ff 30 cc 33 33 cc c0 00 3f c0
	>012898	82a898	c0 0f 30 cf c0 0f 30 cf ff cc ff 33 ff 00 ff ff
	>0128a8	82a8a8	ff 00 ff 00 ff 00 ff 00 cc 33 33 cc 00 00 ff 00
	>0128b8	82a8b8	00 ff 00 ff 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>0128c8	82a8c8	ff c0 ff 30 ff c0 ff 30 c0 0f 30 cf c0 0f 30 cf
	>0128d8	82a8d8	c0 0f 30 cf c0 0f 30 cf ff cc fc 30 ff 00 fc f0
	>0128e8	82a8e8	f3 00 f0 00 f3 00 f0 00 cc 33 30 cc 00 03 f0 0c
	>0128f8	82a8f8	00 f3 00 f0 00 f3 00 f0 f3 00 f0 00 f3 00 f0 00
	>012908	82a908	f3 00 f0 00 f3 00 f0 00 00 f3 00 f0 00 f3 00 f0
	>012918	82a918	00 f3 00 f0 00 f3 00 f0 ff 00 ff 00 ff 00 ff 00
	>012928	82a928	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e0 00 80
	>012938	82a938	00 80 00 00 00 06 00 0f ff 00 ff 00 ff 00 ff 00
	>012948	82a948	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 10
	>012958	82a958	00 10 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>012968	82a968	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e7 00 c3
	>012978	82a978	00 c3 00 c3 00 c3 00 c3 ff 00 ff 00 ff 00 ff 00
	>012988	82a988	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 9c 00 08
	>012998	82a998	00 08 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>0129a8	82a9a8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 0e 00 04
	>0129b8	82a9b8	00 02 00 c2 00 c2 00 02 ff 00 ff 00 ff 00 ff 00
	>0129c8	82a9c8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 30
	>0129d8	82a9d8	00 30 00 20 00 01 00 03 ff f0 ff f9 ff ff ff 7f
	>0129e8	82a9e8	ff 7f ff 1f ff 00 ff 00 00 0f 00 06 00 00 00 80
	>0129f8	82a9f8	00 80 00 e0 00 ff 00 ff ff f7 ff c7 ff b7 ff 7b
	>012a08	82aa08	ff 7b ff b3 ff 00 ff 00 00 08 00 38 00 48 00 84
	>012a18	82aa18	00 84 00 4c 00 ff 00 ff ff 7e ff 7e ff ff ff ff
	>012a28	82aa28	ff e7 ff c3 ff 00 ff 00 00 81 00 81 00 00 00 00
	>012a38	82aa38	00 18 00 3c 00 ff 00 ff ff f7 ff f7 ff f7 ff f7
	>012a48	82aa48	ff ef ff c6 ff 00 ff 00 00 08 00 08 00 08 00 08
	>012a58	82aa58	00 10 00 39 00 ff 00 ff ff fd ff fd ff 3d ff 3d
	>012a68	82aa68	ff 3d ff 19 ff 00 ff 00 00 02 00 02 00 c2 00 c2
	>012a78	82aa78	00 c2 00 e6 00 ff 00 ff ff fc ff fe ff df ff cf
	>012a88	82aa88	ff cf ff 86 ff 00 ff 00 00 03 00 01 00 20 00 30
	>012a98	82aa98	00 30 00 79 00 ff 00 ff ff 00 ff 03 ff 06 ff 03
	>012aa8	82aaa8	ff 04 ff 03 ff 00 ff 00 00 ff 00 fc 00 f9 00 fc
	>012ab8	82aab8	00 fb 00 fc 00 ff 00 ff ff 00 ff c3 ff 26 ff c6
	>012ac8	82aac8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 d9 00 39
	>012ad8	82aad8	00 99 00 3c 00 ff 00 ff ff 00 ff c3 ff 66 ff 06
	>012ae8	82aae8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 99 00 f9
	>012af8	82aaf8	00 99 00 3c 00 ff 00 ff ff 00 ff c7 ff 66 ff 67
	>012b08	82ab08	ff 66 ff c6 ff 00 ff 00 00 ff 00 38 00 99 00 98
	>012b18	82ab18	00 99 00 39 00 ff 00 ff ff 00 ff c3 ff 66 ff c7
	>012b28	82ab28	ff 66 ff 63 ff 00 ff 00 00 ff 00 3c 00 99 00 38
	>012b38	82ab38	00 99 00 9c 00 ff 00 ff ff 00 ff c0 ff 60 ff 00
	>012b48	82ab48	ff 60 ff c0 ff 00 ff 00 00 ff 00 3f 00 9f 00 ff
	>012b58	82ab58	00 9f 00 3f 00 ff 00 ff ff 00 ff 66 ff 66 ff 7e
	>012b68	82ab68	ff 66 ff 66 ff 00 ff 00 00 ff 00 99 00 99 00 81
	>012b78	82ab78	00 99 00 99 00 ff 00 ff ff 00 ff 7e ff 18 ff 18
	>012b88	82ab88	ff 18 ff 7e ff 00 ff 00 00 ff 00 81 00 e7 00 e7
	>012b98	82ab98	00 e7 00 81 00 ff 00 ff ff 00 ff 3c ff 66 ff 60
	>012ba8	82aba8	ff 66 ff 3e ff 06 ff 00 00 ff 00 c3 00 99 00 9f
	>012bb8	82abb8	00 99 00 c1 00 f9 00 ff ff 00 fc 00 f3 03 f3 03
	>012bc8	82abc8	f3 03 f3 03 f3 00 cf 03 00 ff 00 fc 03 f0 03 f0
	>012bd8	82abd8	03 f0 03 f0 00 f3 03 cc 03 00 fc fc fc 30 fc 00
	>012be8	82abe8	30 00 fc c0 fc c0 f0 00 00 03 fc 00 30 cc 00 30
	>012bf8	82abf8	00 30 c0 00 c0 3c 00 f0 cf 0f 3f 0f 3f 3f 3f 3c
	>012c08	82ac08	3f 33 c0 00 f3 03 cf 00 0f c0 0f 30 3f 00 3c 03
	>012c18	82ac18	33 0c 00 c0 03 f0 00 c0 fc fc fc f0 fc fc fc f0
	>012c28	82ac28	f3 c3 0c 00 33 00 3c 3c fc 00 f0 0c fc 00 f0 0c
	>012c38	82ac38	c3 30 00 0c 00 33 3c 00 fc 00 c3 00 30 00 03 03
	>012c48	82ac48	0f 0c cf 03 03 00 30 00 00 fc 00 c0 00 00 03 00
	>012c58	82ac58	0c 00 03 0c 00 03 00 00 ff 00 03 00 0c 00 c0 c0
	>012c68	82ac68	f3 f0 f0 c0 c0 00 0c 00 00 ff 00 03 00 00 c0 00
	>012c78	82ac78	f0 00 c0 30 00 c0 00 00 c0 00 f0 00 f3 00 f3 00
	>012c88	82ac88	cf 00 f3 00 f3 00 fc 00 00 c0 00 f0 00 f3 03 f0
	>012c98	82ac98	0f c0 03 f0 03 f0 00 fc c3 00 0f 00 0f 00 cf 00
	>012ca8	82aca8	cf 00 f3 00 cf 00 3f 00 00 03 00 0f 00 0f 00 cf
	>012cb8	82acb8	00 cf 30 c3 00 cf 00 3f ff 00 ff 00 ff 00 ff 00
	>012cc8	82acc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 91 00 99
	>012cd8	82acd8	00 89 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ce8	82ace8	ff 00 ff 00 ff 00 ff 00 00 ff 00 e7 00 c7 00 e7
	>012cf8	82acf8	00 e7 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d08	82ad08	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 b9 00 c3
	>012d18	82ad18	00 9f 00 81 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d28	82ad28	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 f3
	>012d38	82ad38	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d48	82ad48	ff 00 ff 00 ff 00 ff 00 00 ff 00 93 00 93 00 81
	>012d58	82ad58	00 f3 00 f3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d68	82ad68	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 9f 00 83
	>012d78	82ad78	00 f9 00 83 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d88	82ad88	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 9d 00 83
	>012d98	82ad98	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012da8	82ada8	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 99 00 f3
	>012db8	82adb8	00 e7 00 e7 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012dc8	82adc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c3
	>012dd8	82add8	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012de8	82ade8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c1
	>012df8	82adf8	00 b9 00 c3 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>012e08	82ae08	f0 c0 c0 00 33 00 cc 00 c0 0f 30 cf c0 0f 30 cf
	>012e18	82ae18	c0 30 00 c0 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e28	82ae28	00 00 00 00 33 00 cc 00 00 ff 00 ff 00 ff 00 ff
	>012e38	82ae38	00 00 00 00 00 33 00 cc f3 00 f0 00 f3 00 f0 00
	>012e48	82ae48	03 00 00 00 33 00 cc 00 00 f3 00 f0 00 f3 00 f0
	>012e58	82ae58	00 03 00 00 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e68	82ae68	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e78	82ae78	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012e88	82ae88	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e98	82ae98	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ea8	82aea8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012eb8	82aeb8	00 ff 00 ff 00 ff 00 ff
196	>012ec0	82aec0	00 00 ff 7f d0 1c 2e 67			CharPallete			.binary "../chars.pal"
	>012ec8	82aec8	f1 48 aa 26 a5 4c dd 3b 51 15 ea 00 b8 39 29 25
	>012ed8	82aed8	ef 3d f5 4f ae 75 d6 5a
197	>012ee0	82aee0	00 00 ff 7f d6 5a 10 67			SpritePallete		.binary "../sprites_SNES.pal",0,96 ; we only want first 3 PAL entries
	>012ee8	82aee8	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012ef8	82aef8	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f ff 7f ff 7f
	>012f08	82af08	ff 7f ff 7f ff 7f 8c 31 ff 7f ff 7f ff 7f ff 7f
	>012f18	82af18	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f d6 5a 10 67
	>012f28	82af28	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012f38	82af38	1f 7d 1f 7d 1f 7d 1f 7d
198							.send

200							.section sBank83
201	>018000	838000	03 03 03 00 03 00 03 00			SpritesChars .binary "../sprites_SNES.bin"
	>018008	838008	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018018	838018	03 00 03 00 03 00 0f 00 fc 00 fc cc fc 30 30 30
	>018028	838028	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018038	838038	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>018048	838048	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018058	838058	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018068	838068	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018078	838078	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 00 03 00
	>018088	838088	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018098	838098	03 00 03 00 03 00 0f 00 fc 00 fc 00 fc fc 30 30
	>0180a8	8380a8	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 fc 00 30 00
	>0180b8	8380b8	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>0180c8	8380c8	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>0180d8	8380d8	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 00 fc 30
	>0180e8	8380e8	fc fc fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 fc 00
	>0180f8	8380f8	fc 00 c0 00 fc 00 f0 00 00 00 00 00 03 00 00 00
	>018108	838108	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018118	838118	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018128	838128	00 00 ff c0 ff 0c ff 33 00 00 00 00 03 00 00 00
	>018138	838138	00 00 ff 00 ff 00 f3 00 00 00 00 00 00 00 00 00
	>018148	838148	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018158	838158	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018168	838168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018178	838178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00
	>018188	838188	00 00 00 00 00 00 30 00 00 00 00 00 00 00 0c 00
	>018198	838198	00 00 00 00 00 00 30 00 00 00 00 00 0c 00 00 00
	>0181a8	8381a8	00 00 ff c0 ff 33 ff 0c 00 00 00 00 0c 00 00 00
	>0181b8	8381b8	00 00 ff 00 ff 00 cc 00 00 00 00 00 00 00 30 00
	>0181c8	8381c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00
	>0181d8	8381d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181e8	8381e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181f8	8381f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018208	838208	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018218	838218	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018228	838228	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>018238	838238	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>018248	838248	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018258	838258	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018268	838268	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>018278	838278	f3 00 00 00 3c 00 30 00 0f 00 3f 30 3f 00 3f 03
	>018288	838288	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018298	838298	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182a8	8382a8	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>0182b8	8382b8	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>0182c8	8382c8	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>0182d8	8382d8	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182e8	8382e8	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>0182f8	8382f8	f3 00 00 00 3c 00 30 00 00 00 0c 00 00 00 00 00
	>018308	838308	03 03 0f 0c 3f 30 3f 03 00 00 0c 00 00 00 00 00
	>018318	838318	03 00 0f 00 3f 00 3f 00 f3 03 ff 00 ff c3 f0 f0
	>018328	838328	fc 00 ff 00 ff 03 ff c0 f3 00 fc 00 ff 00 f0 00
	>018338	838338	fc 00 ff 00 ff 00 ff 00 00 00 c0 00 c0 c0 00 00
	>018348	838348	00 00 00 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>018358	838358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018368	838368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018378	838378	00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00
	>018388	838388	03 03 03 00 0f 0c 0f 00 00 00 03 00 00 00 00 00
	>018398	838398	03 00 03 00 0f 00 0f 00 cc 0c ff 00 ff cf f0 f0
	>0183a8	8383a8	fc 00 ff 00 ff 03 ff 00 cc 00 f0 00 ff 00 f0 00
	>0183b8	8383b8	fc 00 ff 00 ff 00 ff 00 c0 00 00 00 00 00 00 00
	>0183c8	8383c8	00 00 00 00 c0 00 00 00 c0 00 00 00 00 00 00 00
	>0183d8	8383d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>0183e8	8383e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0183f8	8383f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018408	838408	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018418	838418	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018428	838428	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018438	838438	30 00 c0 00 fc 00 f0 00 0f 03 03 00 0f 00 03 00
	>018448	838448	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>018458	838458	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>018468	838468	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>018478	838478	f0 00 ff 00 c0 00 f0 00 00 00 0f 03 03 00 0f 00
	>018488	838488	03 00 03 00 03 03 0f 0f 00 00 0f 00 03 00 0f 00
	>018498	838498	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 0c fc 30
	>0184a8	8384a8	f0 00 ff 00 ff 0f f0 f0 00 00 fc 00 fc 00 f0 00
	>0184b8	8384b8	f0 00 fc 00 ff 00 f0 00 0f 03 03 00 0f 00 03 00
	>0184c8	8384c8	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>0184d8	8384d8	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>0184e8	8384e8	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>0184f8	8384f8	f0 00 ff 00 c0 00 f0 00 3c 3c 00 00 00 00 00 00
	>018508	838508	03 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00
	>018518	838518	00 00 00 00 00 00 00 00 ff 03 fc 0c 0f 0c cc 00
	>018528	838528	c0 00 00 00 00 00 00 00 ff 00 fc 00 0f 00 cc 00
	>018538	838538	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018548	838548	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018558	838558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018568	838568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018578	838578	00 00 00 00 00 00 00 00 0f 00 0f 03 03 00 00 00
	>018588	838588	00 00 00 00 00 00 00 00 0f 00 0f 00 00 00 00 00
	>018598	838598	00 00 00 00 00 00 00 00 ff c3 fc 0c c0 00 cc 0c
	>0185a8	8385a8	0f 00 00 00 00 00 00 00 ff 00 fc 00 00 00 0c 00
	>0185b8	8385b8	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185c8	8385c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185d8	8385d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185e8	8385e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185f8	8385f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018608	838608	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018618	838618	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018628	838628	f3 30 00 00 0f 0c 0c 00 fc 00 fc 00 fc 00 fc 00
	>018638	838638	f3 00 00 00 0f 00 0c 00 0f 0c 0f 00 0f 00 0f 00
	>018648	838648	0f 03 00 00 03 03 03 03 0f 00 0f 00 0f 00 0f 00
	>018658	838658	0f 00 00 00 03 00 03 00 fc 00 fc 0c fc c0 fc cc
	>018668	838668	f0 30 f0 00 3c 00 c0 c0 fc 00 fc 00 fc 00 fc 00
	>018678	838678	f0 00 c0 00 00 00 c0 00 0f 0c 3f 3c 3f 0f 33 30
	>018688	838688	03 03 03 03 0c 0c 03 03 0f 00 3f 00 3f 00 33 00
	>018698	838698	03 00 03 00 0c 00 03 00 fc 30 fc 0c fc 00 ff c0
	>0186a8	8386a8	fc 3c 00 00 0f 00 0c 00 fc 00 fc 00 fc 00 ff 00
	>0186b8	8386b8	fc 00 00 00 00 00 00 00 0f 0c 0f 00 0f 00 0f 00
	>0186c8	8386c8	0f 03 00 00 03 00 03 00 0f 00 0f 00 0f 00 0f 00
	>0186d8	8386d8	0f 00 00 00 00 00 00 00 fc 00 fc 0c fc c0 fc cc
	>0186e8	8386e8	f0 30 f0 30 3c 30 c0 00 fc 00 fc 00 fc 00 fc 00
	>0186f8	8386f8	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018708	838708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018718	838718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018728	838728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018738	838738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018748	838748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018758	838758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018768	838768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018778	838778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018788	838788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018798	838798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187a8	8387a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187b8	8387b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187c8	8387c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187d8	8387d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187e8	8387e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187f8	8387f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018808	838808	03 00 03 00 03 03 0f 0f 00 00 03 00 03 00 03 00
	>018818	838818	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018828	838828	30 30 fc 00 fc 3c f0 c0 00 00 fc 00 fc 00 30 00
	>018838	838838	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 03 03 00
	>018848	838848	03 00 03 03 03 03 3f 30 03 00 03 00 03 00 03 00
	>018858	838858	03 00 03 00 03 00 3f 00 fc 00 fc cc fc 30 30 30
	>018868	838868	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018878	838878	c0 00 fc 00 c0 00 f0 00 3f 30 3c 0c 3f 30 00 00
	>018888	838888	00 00 33 00 0f 0c 0f 03 3c 00 3c 00 3c 00 00 00
	>018898	838898	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>0188a8	8388a8	00 00 cc 00 f0 30 f0 c0 3c 00 3c 00 3c 00 00 00
	>0188b8	8388b8	00 00 cc 00 f0 00 c0 00 3f 00 3c 0c 3f 30 00 00
	>0188c8	8388c8	00 00 33 00 0f 0c 0f 03 30 00 3c 00 3f 00 00 00
	>0188d8	8388d8	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 00 00 00
	>0188e8	8388e8	00 00 cc 00 f0 30 f0 c0 fc 00 3c 00 0c 00 00 00
	>0188f8	8388f8	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 30 00 00
	>018908	838908	00 00 33 00 0f 0c 0f 03 33 00 0c 00 33 00 00 00
	>018918	838918	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>018928	838928	00 00 cc 00 f0 30 f0 c0 cc 00 30 00 cc 00 00 00
	>018938	838938	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 00 00 00
	>018948	838948	00 00 33 00 0f 0c 0f 03 3f 00 3c 00 30 00 00 00
	>018958	838958	00 00 33 00 0f 00 0f 00 fc 00 3c 30 fc 0c 00 00
	>018968	838968	00 00 cc 00 f0 30 f0 c0 0c 00 3c 00 fc 00 00 00
	>018978	838978	00 00 cc 00 f0 00 f0 00 00 00 00 00 00 00 0c 0f
	>018988	838988	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>018998	838998	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0189a8	8389a8	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>0189b8	8389b8	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 00 00
	>0189c8	8389c8	0c 0f 3f 30 33 00 f3 c0 00 00 00 00 00 00 00 00
	>0189d8	8389d8	0c 00 30 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>0189e8	8389e8	30 f0 0c fc c0 0c c3 0f 00 00 00 00 00 00 00 00
	>0189f8	8389f8	30 00 0c 00 00 00 03 00 0f 00 3f 30 3f 00 3f 03
	>018a08	838a08	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018a18	838a18	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018a28	838a28	ff 30 0c 00 00 00 00 00 fc 00 fc 00 fc 00 fc 00
	>018a38	838a38	ff 00 0c 00 00 00 00 00 3f 00 ff c3 ff 0c ff 30
	>018a48	838a48	03 03 03 03 0c 0c 0f 0f 3f 00 ff 00 ff 00 ff 00
	>018a58	838a58	03 00 03 00 0c 00 0f 00 fc 00 ff 0c fc 00 fc 0c
	>018a68	838a68	f0 30 f0 00 c0 00 00 00 fc 00 ff 00 fc 00 fc 00
	>018a78	838a78	f0 00 00 00 00 00 00 00 03 03 0f 00 cf 03 ff 0c
	>018a88	838a88	ff 00 3f 0c 3f 0c 0f 00 03 00 0c 00 cf 00 ff 00
	>018a98	838a98	ff 00 3f 00 3f 00 0f 00 c0 c0 f0 00 f3 c0 ff 30
	>018aa8	838aa8	ff 00 fc 30 fc 30 f0 00 c0 00 30 00 f3 00 ff 00
	>018ab8	838ab8	ff 00 fc 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018ac8	838ac8	ff 00 ff 0c 3f 0c 0f 00 03 00 0c 00 0f 00 3f 00
	>018ad8	838ad8	ff 00 ff 00 3f 00 0f 00 c0 c0 f0 00 f0 c0 fc 30
	>018ae8	838ae8	ff 00 ff 30 fc 30 f0 00 c0 00 30 00 f0 00 fc 00
	>018af8	838af8	ff 00 ff 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018b08	838b08	3f 00 ff 0c ff 0c cf 00 03 00 0c 00 0f 00 3f 00
	>018b18	838b18	3f 00 ff 00 ff 00 cf 00 c0 c0 f0 00 f0 c0 fc 30
	>018b28	838b28	fc 00 ff 30 ff 30 f3 00 c0 00 30 00 f0 00 fc 00
	>018b38	838b38	fc 00 ff 00 ff 00 f3 00 0f 0f 0f 00 0f 03 3f 0c
	>018b48	838b48	ff 00 ff 0c 3f 0c 0f 00 0f 00 0c 00 0f 00 3f 00
	>018b58	838b58	ff 00 ff 00 3f 00 0f 00 f0 f0 f0 00 f0 c0 fc 30
	>018b68	838b68	ff 00 ff 30 fc 30 f0 00 f0 00 30 00 f0 00 fc 00
	>018b78	838b78	ff 00 ff 00 fc 00 f0 00 f3 c0 3f c0 cf f0 c0 fc
	>018b88	838b88	30 3c 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>018b98	838b98	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>018ba8	838ba8	3c 3c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>018bb8	838bb8	3c 00 fc 00 f0 00 00 00 33 c0 ff c0 3f c0 cc f0
	>018bc8	838bc8	c0 fc 30 3f 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00
	>018bd8	838bd8	c0 00 30 00 3f 00 0f 00 cf 0f c3 3f cf 3f 03 3f
	>018be8	838be8	0f 3f 3c fc fc fc f0 f0 0f 00 03 00 0f 00 03 00
	>018bf8	838bf8	0f 00 3c 00 fc 00 f0 00 19 00 07 00 1f 00 1f 00
	>018c08	838c08	1f 00 1f 18 1f 07 7f 00 19 00 07 00 1f 00 1f 00
	>018c18	838c18	1f 00 1f 00 1f 00 7f 00 e0 00 e0 60 e0 00 f8 00
	>018c28	838c28	e0 00 e6 60 fe 80 fe 00 e0 00 e0 00 e0 00 e0 00
	>018c38	838c38	e0 00 e6 00 fe 00 fe 00 33 00 0f 00 0f 00 0f 00
	>018c48	838c48	0f 00 0f 0c 0f 03 3f 00 33 00 0f 00 0f 00 0f 00
	>018c58	838c58	0f 00 0f 00 0f 00 3f 00 cc 00 f0 00 f0 00 f0 00
	>018c68	838c68	f0 00 f0 30 fc c0 ff 00 cc 00 f0 00 f0 00 f0 00
	>018c78	838c78	f0 00 f0 00 fc 00 ff 00 0f 00 03 00 0c 00 3c 00
	>018c88	838c88	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 30 00
	>018c98	838c98	00 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ca8	838ca8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cb8	838cb8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018cc8	838cc8	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018cd8	838cd8	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ce8	838ce8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cf8	838cf8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d08	838d08	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d18	838d18	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 3c 00
	>018d28	838d28	00 00 00 00 00 00 00 00 f0 00 c0 00 30 00 3c 00
	>018d38	838d38	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d48	838d48	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d58	838d58	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018d68	838d68	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018d78	838d78	0c 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>018d88	838d88	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018d98	838d98	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>018da8	838da8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>018db8	838db8	30 00 00 00 00 00 00 00 c0 00 00 c0 03 0c 03 0c
	>018dc8	838dc8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018dd8	838dd8	00 00 00 00 00 00 00 00 00 03 03 03 30 f0 30 f0
	>018de8	838de8	30 f0 00 00 00 00 00 00 00 00 03 00 30 00 30 00
	>018df8	838df8	30 00 00 00 00 00 00 00 7f 00 ff 18 ff 18 9f 00
	>018e08	838e08	1f 00 7f 18 00 00 00 00 7f 00 ff 00 ff 00 9f 00
	>018e18	838e18	1f 00 7f 00 00 00 00 00 f8 00 f8 60 e0 60 e0 00
	>018e28	838e28	e0 00 80 00 60 60 78 00 f8 00 f8 00 e0 00 e0 00
	>018e38	838e38	e0 00 80 00 60 00 78 00 ff 00 ff 0c 3f 0c 0f 00
	>018e48	838e48	0f 00 0f 0c 3c 00 00 00 ff 00 ff 00 3f 00 0f 00
	>018e58	838e58	0f 00 0f 00 3c 00 00 00 ff 00 fc 30 f0 30 f0 00
	>018e68	838e68	f0 00 f0 30 3c 00 00 00 ff 00 fc 00 f0 00 f0 00
	>018e78	838e78	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018e88	838e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018e98	838e98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ea8	838ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018eb8	838eb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ec8	838ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ed8	838ed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ee8	838ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ef8	838ef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f08	838f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f18	838f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f28	838f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f38	838f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f48	838f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f58	838f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f68	838f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f78	838f78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f88	838f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f98	838f98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fa8	838fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fb8	838fb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fc8	838fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fd8	838fd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fe8	838fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ff8	838ff8	00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00
	>019008	839008	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019018	839018	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019028	839028	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019038	839038	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019048	839048	00 00 0f 00 3f 30 f0 f0 0f 00 00 00 00 00 00 00
	>019058	839058	00 0f 00 30 30 00 f0 0f fc fc 00 00 c0 c0 00 00
	>019068	839068	00 00 00 00 c0 c0 f0 f0 fc 00 00 00 c0 00 00 00
	>019078	839078	00 f0 00 fc c0 3c f0 0f 00 00 00 00 03 00 00 00
	>019088	839088	00 00 0f 00 cf c3 c3 c3 00 03 00 00 00 00 00 00
	>019098	839098	00 0f 00 30 c3 30 c3 3c 00 00 00 00 c0 c0 00 00
	>0190a8	8390a8	00 00 00 00 00 00 c0 c0 00 c0 00 00 c0 00 00 00
	>0190b8	8390b8	00 f0 00 fc 00 fc c0 3f 3f 00 00 00 03 00 00 00
	>0190c8	8390c8	00 00 0f 00 3f 30 f0 f0 00 00 00 00 00 00 00 00
	>0190d8	8390d8	00 0f 00 30 30 00 f0 0f fc 0c 00 00 c0 c0 00 00
	>0190e8	8390e8	00 00 00 00 c0 c0 f0 f0 0c 00 00 00 c0 00 00 00
	>0190f8	8390f8	00 f0 00 fc c0 3c f0 0f 00 00 00 00 0c 0f 3f 30
	>019108	839108	3f 00 f3 c0 33 c0 f3 c0 00 00 00 00 0c 00 30 00
	>019118	839118	00 00 c0 00 00 00 c0 00 00 00 00 00 30 f0 0c fc
	>019128	839128	c0 3c c3 0f cf 0f c3 0f 00 00 00 00 30 00 0c 00
	>019138	839138	00 00 03 00 0f 00 03 00 0c 0f 3f 30 3f 00 ff c0
	>019148	839148	33 c0 f3 c0 33 c0 cf f0 0c 00 30 00 00 00 c0 00
	>019158	839158	00 00 c0 00 00 00 c0 00 30 f0 0c fc c0 3c c3 3f
	>019168	839168	cf 0f c3 0f cf 0f 03 ff 30 00 0c 00 00 00 03 00
	>019178	839178	0f 00 03 00 0f 00 03 00 00 00 00 00 00 00 0c 0f
	>019188	839188	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019198	839198	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191a8	8391a8	0c fc c0 3c c3 0f c0 0f 00 00 00 00 00 00 30 00
	>0191b8	8391b8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 0c 0f
	>0191c8	8391c8	3f 30 3f 00 cf c0 0f c0 00 00 00 00 00 00 0c 00
	>0191d8	8391d8	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191e8	8391e8	0c fc c0 3c 03 3f 0f 3f 00 00 00 00 00 00 30 00
	>0191f8	8391f8	0c 00 00 00 03 00 0f 00 30 30 00 00 c0 00 c0 00
	>019208	839208	00 00 c0 c0 3f 3f 0c 0c 30 cf 00 f3 00 33 00 33
	>019218	839218	00 f3 c0 3f 3f 00 0c 00 0c 0c 00 00 00 00 03 03
	>019228	839228	03 03 0f 0f ff fc 33 30 0c f3 00 cf 00 cf 03 cc
	>019238	839238	03 cc 0f f0 fc 00 30 00 c0 c0 00 00 00 00 c0 00
	>019248	839248	c0 00 c0 c0 3f 3f 0c 0c c0 3f 00 cf 00 cf 00 0f
	>019258	839258	00 0f c0 3f 3f 00 0c 00 30 30 00 00 00 00 03 03
	>019268	839268	03 03 0f 0c ff fc 30 30 30 cf 00 3f 00 3f 03 3c
	>019278	839278	03 3c 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019288	839288	c0 00 c0 00 3f 3f 0c 0c 00 ff 00 3c 00 3c 00 3c
	>019298	839298	00 3c 00 3f 3f 00 0c 00 c0 c0 00 00 00 00 03 03
	>0192a8	8392a8	03 00 0f 0c fc fc 30 30 c0 3f 00 ff 00 ff 03 fc
	>0192b8	8392b8	00 fc 0c f0 fc 00 30 00 c0 c0 00 00 00 00 00 00
	>0192c8	8392c8	00 00 c0 00 ff 3f 0c 0c c0 3f 00 cf 00 cf 00 cf
	>0192d8	8392d8	00 cf 00 3f 3f 00 0c 00 30 30 00 00 00 00 03 00
	>0192e8	8392e8	03 00 0f 0f fc fc 30 30 30 cf 00 3f 00 3f 00 3c
	>0192f8	8392f8	00 3c 0f f0 fc 00 30 00 3f c0 cf f0 c0 fc 30 3c
	>019308	839308	3f 3f 0f 0f 00 00 00 00 00 00 c0 00 c0 00 30 00
	>019318	839318	3f 00 0f 00 00 00 00 00 cf 3f 03 ff 0f 3f 3c 3c
	>019328	839328	fc fc f0 f0 00 00 00 00 0f 00 03 00 0f 00 3c 00
	>019338	839338	fc 00 f0 00 00 00 00 00 c0 ff 30 3c 3c 3c 0f 0f
	>019348	839348	00 00 03 0c 00 00 c0 00 c0 00 30 00 3c 00 0f 00
	>019358	839358	00 00 00 00 00 00 00 00 0f ff 3c 3c 3c 3c f0 f0
	>019368	839368	00 00 30 f0 00 00 00 03 0f 00 3c 00 3c 00 f0 00
	>019378	839378	00 00 30 00 00 00 00 00 f3 c0 3f c0 cf f0 c0 fc
	>019388	839388	30 3c 3f 3f cf 0f 00 c0 c0 00 00 00 c0 00 c0 00
	>019398	839398	30 00 3f 00 0f 00 00 00 c3 0f c0 3f 03 ff 03 3f
	>0193a8	8393a8	0c 3c fc fc f0 f0 00 00 03 00 00 00 03 00 03 00
	>0193b8	8393b8	0c 00 fc 00 f0 00 00 00 cf c0 3f c0 cf f0 c0 f0
	>0193c8	8393c8	30 30 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>0193d8	8393d8	30 00 3f 00 0f 00 00 00 03 3f cf 3f 03 ff 0f ff
	>0193e8	8393e8	3c fc fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>0193f8	8393f8	3c 00 fc 00 f0 00 00 00 00 00 00 00 03 00 00 00
	>019408	839408	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019418	839418	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019428	839428	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019438	839438	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019448	839448	00 00 0f 00 0f 03 0f 0f 0f 00 00 00 00 00 00 00
	>019458	839458	00 0f 00 30 03 30 0f f0 fc fc 00 00 c0 c0 00 00
	>019468	839468	00 00 00 00 0c 0c 0f 0f fc 00 00 00 c0 00 00 00
	>019478	839478	00 f0 00 fc 0c f0 0f f0 00 00 00 00 03 00 00 00
	>019488	839488	00 00 0f 00 0f 00 03 03 00 03 00 00 00 00 00 00
	>019498	839498	00 0f 00 30 00 30 03 fc 00 00 00 00 c0 c0 00 00
	>0194a8	8394a8	00 00 00 00 c3 c3 c3 c3 00 c0 00 00 c0 00 00 00
	>0194b8	8394b8	00 f0 00 fc c3 3c c3 3c 3f 00 00 00 03 00 00 00
	>0194c8	8394c8	00 00 0f 00 0f 03 0f 0f 00 00 00 00 00 00 00 00
	>0194d8	8394d8	00 0f 00 30 03 30 0f f0 fc 0c 00 00 c0 c0 00 00
	>0194e8	8394e8	00 00 00 00 0c 0c 0f 0f 0c 00 00 00 c0 00 00 00
	>0194f8	8394f8	00 f0 00 fc 0c f0 0f f0 03 0c c0 00 03 cc 00 00
	>019508	839508	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019518	839518	00 00 00 00 00 00 00 00 30 f0 00 03 33 f3 00 00
	>019528	839528	30 f0 00 00 00 00 00 00 30 00 00 00 33 00 00 00
	>019538	839538	30 00 00 00 00 00 00 00 03 cc 00 00 00 00 03 0c
	>019548	839548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019558	839558	00 00 00 00 00 00 00 00 33 f3 00 00 00 00 30 f0
	>019568	839568	00 00 00 00 00 00 00 00 33 00 00 00 00 00 30 00
	>019578	839578	00 00 00 00 00 00 00 00 03 0c 00 00 03 0c 00 00
	>019588	839588	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019598	839598	00 00 00 00 00 00 00 00 30 f3 03 03 30 f0 00 00
	>0195a8	8395a8	30 f0 00 00 00 00 00 00 30 00 03 00 30 00 00 00
	>0195b8	8395b8	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>0195c8	8395c8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0195d8	8395d8	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>0195e8	8395e8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>0195f8	8395f8	30 00 00 00 00 00 00 00 30 30 00 00 00 00 00 00
	>019608	839608	00 00 00 00 ff 3f cc 0c 30 cf 00 f3 00 f3 00 f3
	>019618	839618	00 f3 00 ff 3f 00 0c 00 0c 0c 00 00 03 00 03 00
	>019628	839628	03 03 0f 0f fc fc 30 30 0c f3 00 cf 00 cc 00 cc
	>019638	839638	03 cc 0f f0 fc 00 30 00 0c 0c 00 00 00 00 00 00
	>019648	839648	00 00 c0 00 ff 3f 0c 0c 0c f3 00 fc 00 fc 00 fc
	>019658	839658	00 fc 00 3f 3f 00 0c 00 03 03 00 00 00 00 03 00
	>019668	839668	03 00 0f 0f fc fc 30 30 03 fc 00 f3 00 f3 00 f0
	>019678	839678	00 f0 0f f0 fc 00 30 00 03 03 00 00 00 00 00 00
	>019688	839688	c0 00 c0 00 3f 3f 0c 0c 03 fc 00 ff 00 ff 00 ff
	>019698	839698	00 3f 00 3f 3f 00 0c 00 00 00 00 00 00 00 00 00
	>0196a8	8396a8	03 00 0f 0c fc fc 30 30 00 ff 00 3c 00 3c 00 3c
	>0196b8	8396b8	00 3c 0c f0 fc 00 30 00 0c 0c 00 00 00 00 c0 00
	>0196c8	8396c8	c0 00 c0 c0 3f 3f 0c 0c 0c f3 00 fc 00 fc 00 3c
	>0196d8	8396d8	00 3c c0 3f 3f 00 0c 00 03 03 00 00 00 00 03 03
	>0196e8	8396e8	03 03 0f 0c ff fc 30 30 03 fc 00 f3 00 f3 03 f0
	>0196f8	8396f8	03 f0 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019708	839708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019718	839718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019728	839728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019738	839738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019748	839748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019758	839758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019768	839768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019778	839778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019788	839788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019798	839798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197a8	8397a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197b8	8397b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197c8	8397c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197d8	8397d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197e8	8397e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197f8	8397f8	00 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 0c 33
	>019808	839808	00 0c f3 00 30 00 30 00 0c 03 00 0f 30 03 00 33
	>019818	839818	00 0c 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019828	839828	00 3c c0 0c c0 0c c0 0c 30 c0 00 f0 0c f0 0c f0
	>019838	839838	00 3c 00 0c 00 0c 00 0c 0c 0f 00 0f 3c 33 0c 33
	>019848	839848	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>019858	839858	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019868	839868	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>019878	839878	00 fc 00 3c 00 3c 00 3c 0c 0f 00 0f 3c 33 0c 33
	>019888	839888	00 03 3c 00 0c 00 0c 00 0c 03 00 0f 30 03 00 33
	>019898	839898	00 03 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198a8	8398a8	00 fc 00 fc 00 fc 00 fc 30 c0 00 f0 0c f0 0c f0
	>0198b8	8398b8	00 fc 00 fc 00 fc 00 fc 0c 0f 00 0f 3c 33 0c 33
	>0198c8	8398c8	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>0198d8	8398d8	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198e8	8398e8	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>0198f8	8398f8	00 fc 00 3c 00 3c 00 3c 00 00 00 00 00 00 0c 0f
	>019908	839908	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019918	839918	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019928	839928	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>019938	839938	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 0c 0f
	>019948	839948	3f 30 3f 00 fc c0 3c c0 00 00 00 00 00 00 0c 00
	>019958	839958	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019968	839968	0c fc c0 3c c3 33 c3 33 00 00 00 00 00 00 30 00
	>019978	839978	0c 00 00 00 03 00 03 00 00 00 00 00 00 00 00 00
	>019988	839988	00 00 03 03 0f 0c 0c 0f 00 00 00 00 00 00 00 00
	>019998	839998	00 00 03 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>0199a8	8399a8	00 00 c0 c0 30 f0 f0 f0 00 00 00 00 00 00 00 00
	>0199b8	8399b8	00 00 c0 00 f0 00 f0 00 00 00 00 00 00 00 03 03
	>0199c8	8399c8	0c 0f 33 3c 33 3c 30 3f 00 00 00 00 00 00 03 00
	>0199d8	8399d8	0f 00 3c 00 3c 00 3f 00 00 00 00 00 00 00 c0 c0
	>0199e8	8399e8	30 f0 0c fc 0c fc 0c fc 00 00 00 00 00 00 c0 00
	>0199f8	8399f8	f0 00 fc 00 fc 00 fc 00 00 00 3c 0c 3c 3c 00 03
	>019a08	839a08	00 3f 30 3f 00 0f 0c 0f 00 00 0c 00 3c 00 00 03
	>019a18	839a18	00 3f 30 0f 00 0f 0c 03 00 3c 00 fc 0c fc 0c fc
	>019a28	839a28	30 f0 30 f3 c3 ff 0c fc 00 3c 00 fc 0c f0 0c f0
	>019a38	839a38	30 c0 30 c3 c3 3c 0c f0 00 00 f0 33 f0 f3 00 0f
	>019a48	839a48	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019a58	839a58	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019a68	839a68	30 f0 30 ff cf ff 30 f0 00 fc 00 fc 0c f0 0c f0
	>019a78	839a78	30 c0 30 cf cf 30 30 c0 00 03 c0 0f c0 cf 00 3f
	>019a88	839a88	00 3f 30 3f 00 0f 0c 0f 00 03 00 0f c0 0f 00 3f
	>019a98	839a98	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019aa8	839aa8	30 f0 f0 fc 0c ff 33 f3 00 fc 00 fc 0c f0 0c f0
	>019ab8	839ab8	30 c0 f0 0c 0c f3 33 c0 00 00 f0 33 f0 f3 00 0f
	>019ac8	839ac8	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019ad8	839ad8	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019ae8	839ae8	30 f0 fc fc 03 ff 3c ff 00 fc 00 fc 0c f0 0c f0
	>019af8	839af8	30 c0 fc 00 03 fc 3c c3 f3 c0 3f c0 cf f0 c0 fc
	>019b08	839b08	30 3c 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00 c0 00
	>019b18	839b18	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>019b28	839b28	3c 3c fc fc f0 f3 03 03 03 00 0f 00 03 00 0f 00
	>019b38	839b38	3c 00 fc 00 f0 00 03 00 fc c0 3f c0 cf f0 c0 ff
	>019b48	839b48	30 3f 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>019b58	839b58	30 00 3f 00 0f 00 00 00 c3 33 cf 3f 03 ff 0f 0f
	>019b68	839b68	0c 0c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>019b78	839b78	0c 00 fc 00 f0 00 00 00 0f 0f 0c 0c 03 03 00 00
	>019b88	839b88	00 00 00 00 00 00 00 00 0f 00 0c 00 03 00 00 00
	>019b98	839b98	00 00 00 00 00 00 00 00 30 30 30 30 c0 c0 00 00
	>019ba8	839ba8	00 00 00 00 00 00 00 00 30 00 30 00 c0 00 00 00
	>019bb8	839bb8	00 00 00 00 00 00 00 00 30 3f 3c 3f 3f 3f 0c 0c
	>019bc8	839bc8	03 03 00 00 00 00 00 00 3f 00 3f 00 3f 00 0c 00
	>019bd8	839bd8	03 00 00 00 00 00 00 00 3c fc fc fc 0c 0c 30 30
	>019be8	839be8	c0 c0 00 00 00 00 00 00 fc 00 fc 00 0c 00 30 00
	>019bf8	839bf8	c0 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c08	839c08	00 3c 03 30 03 30 03 30 0c 03 00 0f 30 03 30 03
	>019c18	839c18	00 3c 00 30 00 30 00 30 30 f0 00 f0 0c fc 00 fc
	>019c28	839c28	00 30 cf 00 0c 00 0c 00 30 c0 00 f0 0c f0 00 fc
	>019c38	839c38	00 30 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c48	839c48	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019c58	839c58	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019c68	839c68	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019c78	839c78	00 0c 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c88	839c88	00 3f 00 3f 00 3f 00 3f 0c 03 00 0f 30 03 30 03
	>019c98	839c98	00 3f 00 3f 00 3f 00 3f 30 f0 00 f0 0c fc 00 fc
	>019ca8	839ca8	00 c0 3c 00 30 00 30 00 30 c0 00 f0 0c f0 00 fc
	>019cb8	839cb8	00 c0 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019cc8	839cc8	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019cd8	839cd8	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019ce8	839ce8	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019cf8	839cf8	00 0c 00 00 00 00 00 00 c3 0c 00 c0 03 0c 00 00
	>019d08	839d08	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d18	839d18	00 00 00 00 00 00 00 00 30 f0 00 00 30 f0 00 00
	>019d28	839d28	30 f0 00 00 00 00 00 00 30 00 00 00 30 00 00 00
	>019d38	839d38	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>019d48	839d48	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d58	839d58	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>019d68	839d68	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>019d78	839d78	30 00 00 00 00 00 00 00 00 00 0f 0f 30 3f 03 3c
	>019d88	839d88	cf f0 cf f0 cc f3 c0 ff 00 00 0f 00 3f 00 3c 00
	>019d98	839d98	f0 00 f0 00 f3 00 ff 00 00 00 f0 f0 0c fc 00 fc
	>019da8	839da8	03 ff 03 ff 03 ff 0f ff 00 00 f0 00 fc 00 fc 00
	>019db8	839db8	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 30 0c
	>019dc8	839dc8	0c 3c 03 03 00 00 00 00 00 00 00 00 00 00 0c 00
	>019dd8	839dd8	3c 00 03 00 00 00 00 00 00 00 c0 30 30 f0 c0 c0
	>019de8	839de8	00 00 0c 03 03 0f 30 30 00 00 30 00 f0 00 c0 00
	>019df8	839df8	00 00 03 00 0f 00 30 00 00 3c 00 3f 30 3f 30 3f
	>019e08	839e08	0c 0f 0c cf c3 ff 30 3f 00 3c 00 3f 30 0f 30 0f
	>019e18	839e18	0c 03 0c c3 c3 3c 30 0f 00 00 3c 0c 3c 3c 00 c0
	>019e28	839e28	00 fc 0c fc 00 f0 30 f0 00 00 0c 00 3c 00 00 c0
	>019e38	839e38	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e48	839e48	0c 0f 0c ff f3 ff 0c 0f 00 3f 00 3f 30 0f 30 0f
	>019e58	839e58	0c 03 0c f3 f3 0c 0c 03 00 00 0f c3 0f cf 00 f0
	>019e68	839e68	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019e78	839e78	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e88	839e88	0c 0f 0f 3f 30 ff cc cf 00 3f 00 3f 30 0f 30 0f
	>019e98	839e98	0c 03 0f 30 30 cf cc 03 00 c0 03 f0 03 f3 00 fc
	>019ea8	839ea8	00 fc 0c fc 00 f0 30 f0 00 c0 00 f0 03 f0 00 fc
	>019eb8	839eb8	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019ec8	839ec8	0c 0f 3f 3f c0 ff 3c ff 00 3f 00 3f 30 0f 30 0f
	>019ed8	839ed8	0c 03 3f 00 c0 3f 3c c3 00 00 0f c3 0f cf 00 f0
	>019ee8	839ee8	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019ef8	839ef8	00 fc 0c f0 00 f0 30 c0 00 00 00 00 00 00 00 00
	>019f08	839f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f18	839f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f28	839f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f38	839f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f48	839f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f58	839f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f68	839f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f78	839f78	00 00 00 00 00 00 00 00 c0 ff c0 ff f0 ff ff ff
	>019f88	839f88	0f 0f 30 30 0f 0f 00 00 ff 00 ff 00 ff 00 ff 00
	>019f98	839f98	0f 00 30 00 0f 00 00 00 0f ff 3f ff f3 f3 c3 c3
	>019fa8	839fa8	00 00 0c 0c f0 f0 00 00 ff 00 ff 00 f3 00 c3 00
	>019fb8	839fb8	00 00 0c 00 f0 00 00 00 0c 0c c0 30 30 f0 00 00
	>019fc8	839fc8	03 03 0c 03 03 0f 00 00 0c 00 30 00 f0 00 00 00
	>019fd8	839fd8	03 00 03 00 0f 00 00 00 00 00 00 00 c0 c0 30 0c
	>019fe8	839fe8	0c 3c 00 00 00 00 00 00 00 00 00 00 c0 00 0c 00
	>019ff8	839ff8	3c 00 00 00 00 00 00 00 00 00 3f 0c 0c 00 33 00
	>01a008	83a008	33 00 00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00
	>01a018	83a018	00 33 00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00
	>01a028	83a028	3c 00 ff 0c 00 00 f0 00 00 00 30 c3 0c f3 00 3c
	>01a038	83a038	00 3c 0c f3 00 00 00 f0 3f 30 33 00 0c 00 0c 00
	>01a048	83a048	03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00 00 0c
	>01a058	83a058	00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00 f0 00
	>01a068	83a068	fc 30 00 00 fc 0c fc c0 c0 0c 30 cc 00 f0 00 f0
	>01a078	83a078	30 cc 00 00 0c f0 c0 3c 00 00 3f 30 33 00 0c 00
	>01a088	83a088	0c 00 03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00
	>01a098	83a098	00 0c 00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00
	>01a0a8	83a0a8	f0 00 fc 30 00 00 fc 0c 00 00 c0 0c 30 cc 00 f0
	>01a0b8	83a0b8	00 f0 30 cc 00 00 0c f0 3f 0c 0c 00 33 00 33 00
	>01a0c8	83a0c8	00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00 00 33
	>01a0d8	83a0d8	00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00 3c 00
	>01a0e8	83a0e8	ff 0c 00 00 f0 00 3c 0c 30 c3 0c f3 00 3c 00 3c
	>01a0f8	83a0f8	0c f3 00 00 00 f0 0c 30 00 00 00 00 03 03 03 03
	>01a108	83a108	03 03 0c 0c 0c 0c 0c 0c 00 00 00 00 03 00 03 00
	>01a118	83a118	03 00 0c 00 0c 00 0c 00 3c 3c c3 c3 00 00 3c 00
	>01a128	83a128	3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00 00 00
	>01a138	83a138	00 00 00 00 00 00 00 00 00 00 00 00 c0 c0 c0 c0
	>01a148	83a148	c0 c0 30 30 30 30 30 30 00 00 00 00 c0 00 c0 00
	>01a158	83a158	c0 00 30 00 30 00 30 00 00 00 00 00 00 00 00 00
	>01a168	83a168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a178	83a178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01a188	83a188	0c 0c 0c 0c 0c 0c 30 30 00 00 00 00 00 00 03 00
	>01a198	83a198	0c 00 0c 00 0c 00 30 00 00 00 3c 3c c3 c3 00 00
	>01a1a8	83a1a8	3c 00 3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00
	>01a1b8	83a1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01a1c8	83a1c8	30 30 30 30 30 30 0c 0c 00 00 00 00 00 00 c0 00
	>01a1d8	83a1d8	30 00 30 00 30 00 0c 00 00 00 00 00 00 00 00 00
	>01a1e8	83a1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a1f8	83a1f8	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a208	83a208	03 03 00 00 3c 0c 30 30 00 00 0f 00 0f 00 0f 00
	>01a218	83a218	03 00 00 00 0c 30 30 00 3c 0c 3c 00 3f 33 cf c0
	>01a228	83a228	cf cc 03 00 f3 00 c3 00 0c 30 00 3c 33 0c c0 0f
	>01a238	83a238	cc 03 00 03 00 33 00 c3 0f 0f 0f 0f 0f 0f 0f 0f
	>01a248	83a248	00 00 03 00 0f 0c 0c 0c 0f 00 0f 00 0f 00 0f 00
	>01a258	83a258	00 00 00 00 0c 03 0c 00 3f 03 3f 30 cf c0 cf c0
	>01a268	83a268	0f 00 cf 03 0c 00 00 00 03 3c 30 0f c0 0f c0 0f
	>01a278	83a278	00 0f 03 cc 00 0c 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a288	83a288	0f 0f 00 00 0f 00 0c 00 00 00 0f 00 0f 00 0f 00
	>01a298	83a298	0f 00 00 00 00 03 00 0c fc c0 3f 03 3f 30 cf c0
	>01a2a8	83a2a8	cf c0 0f 00 0f 03 0c 00 c0 3c 03 3c 30 0f c0 0f
	>01a2b8	83a2b8	c0 0f 00 0f 03 0c 00 0c 0f 0f 0f 0f 0f 0f 03 03
	>01a2c8	83a2c8	00 00 0f 03 0f 0c 03 00 0f 00 0f 00 0f 00 03 00
	>01a2d8	83a2d8	00 00 03 0c 0c 00 00 03 3c 00 3f 33 cf c0 cf cc
	>01a2e8	83a2e8	33 30 03 00 c3 00 00 00 00 3c 33 0c c0 0f cc 03
	>01a2f8	83a2f8	30 03 00 03 00 c3 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a308	83a308	0c 0c 0f 0c 0c 0c 0f 0c 0c 00 0c 00 0c 00 0c 00
	>01a318	83a318	0c 00 0f 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a328	83a328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a338	83a338	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a348	83a348	30 30 f0 30 30 30 f0 30 30 00 30 00 30 00 30 00
	>01a358	83a358	30 00 f0 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a368	83a368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a378	83a378	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a388	83a388	30 30 3c 30 0c 0c 0f 0c 30 00 30 00 30 00 30 00
	>01a398	83a398	30 00 3c 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a3a8	83a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3b8	83a3b8	00 00 00 00 00 00 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a3c8	83a3c8	0c 0c 3c 0c 30 30 f0 30 0c 00 0c 00 0c 00 0c 00
	>01a3d8	83a3d8	0c 00 3c 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a3e8	83a3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3f8	83a3f8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a408	83a408	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a418	83a418	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a428	83a428	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a438	83a438	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 0f c0
	>01a448	83a448	33 00 33 00 03 00 0f c0 00 00 00 00 00 00 00 00
	>01a458	83a458	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a468	83a468	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a478	83a478	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a488	83a488	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a498	83a498	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4a8	83a4a8	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a4b8	83a4b8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 c0 0c
	>01a4c8	83a4c8	33 00 33 00 00 00 c0 0c 00 00 00 00 00 00 00 00
	>01a4d8	83a4d8	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4e8	83a4e8	00 30 00 30 00 30 c0 30 00 00 00 00 30 00 00 00
	>01a4f8	83a4f8	00 00 00 00 00 00 00 00 03 03 03 03 03 03 00 00
	>01a508	83a508	00 00 00 00 00 00 00 00 03 00 03 00 03 00 00 00
	>01a518	83a518	00 00 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff c3
	>01a528	83a528	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff 00
	>01a538	83a538	3c 00 00 00 00 00 00 00 c0 c0 c0 c0 c0 c0 00 00
	>01a548	83a548	00 00 00 00 00 00 00 00 c0 00 c0 00 c0 00 00 00
	>01a558	83a558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a568	83a568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a578	83a578	00 00 00 00 00 00 00 00 0f 0c 03 03 00 00 00 00
	>01a588	83a588	00 00 00 00 00 00 00 00 0f 00 03 00 00 00 00 00
	>01a598	83a598	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c3 3c 3c
	>01a5a8	83a5a8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 3c 00
	>01a5b8	83a5b8	00 00 00 00 00 00 00 00 f0 30 c0 c0 00 00 00 00
	>01a5c8	83a5c8	00 00 00 00 00 00 00 00 f0 00 c0 00 00 00 00 00
	>01a5d8	83a5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5e8	83a5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5f8	83a5f8	00 00 00 00 00 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a608	83a608	3c 03 0f 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>01a618	83a618	00 00 00 00 00 00 00 00 00 f0 30 c0 0c fc cc fc
	>01a628	83a628	00 fc 03 ff 30 0f 00 00 00 00 00 00 0c 00 cc 00
	>01a638	83a638	00 00 03 00 00 00 00 00 ff 00 fc 03 00 03 3f 03
	>01a648	83a648	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01a658	83a658	00 00 00 00 00 00 00 00 00 f0 c0 30 00 f0 0c fc
	>01a668	83a668	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 0c 00
	>01a678	83a678	0c 00 00 00 03 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a688	83a688	3c 03 0c 03 0f 00 00 00 00 00 00 00 c0 00 00 00
	>01a698	83a698	00 00 00 00 00 00 00 00 00 f0 30 c0 00 f0 c0 f0
	>01a6a8	83a6a8	00 f0 0c fc 0c fc c0 3c 00 00 00 00 00 00 c0 00
	>01a6b8	83a6b8	00 00 0c 00 0c 00 00 00 ff 00 3f c0 00 c0 fc c3
	>01a6c8	83a6c8	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01a6d8	83a6d8	00 00 00 00 00 00 00 00 c0 30 0c f0 00 30 3c fc
	>01a6e8	83a6e8	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 3c 00
	>01a6f8	83a6f8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00
	>01a708	83a708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a718	83a718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a728	83a728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a738	83a738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a748	83a748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a758	83a758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a768	83a768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a778	83a778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a788	83a788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a798	83a798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7a8	83a7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7b8	83a7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7c8	83a7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7d8	83a7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7e8	83a7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7f8	83a7f8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01a808	83a808	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01a818	83a818	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01a828	83a828	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01a838	83a838	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01a848	83a848	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a858	83a858	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a868	83a868	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a878	83a878	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01a888	83a888	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01a898	83a898	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01a8a8	83a8a8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01a8b8	83a8b8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01a8c8	83a8c8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a8d8	83a8d8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a8e8	83a8e8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a8f8	83a8f8	fc 00 ff 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01a908	83a908	03 03 0c 0c 30 30 30 30 00 00 00 00 00 00 00 00
	>01a918	83a918	03 00 0c 00 30 00 30 00 00 00 00 00 00 00 ff ff
	>01a928	83a928	00 00 00 00 3c 00 3c 00 00 00 00 00 00 00 ff 00
	>01a938	83a938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a948	83a948	c0 c0 30 30 0c 0c 0c 0c 00 00 00 00 00 00 00 00
	>01a958	83a958	c0 00 30 00 0c 00 0c 00 00 00 00 00 00 00 00 00
	>01a968	83a968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a978	83a978	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 30
	>01a988	83a988	3f 30 3f 30 ff c0 fc c0 00 00 0f 00 0c 00 33 00
	>01a998	83a998	3f 00 3f 00 cf 00 fc 00 ff ff ff 00 ff 00 ff 00
	>01a9a8	83a9a8	c3 00 3c 3c c3 c3 c3 c3 ff 00 00 00 ff 00 ff 00
	>01a9b8	83a9b8	c3 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc 0c
	>01a9c8	83a9c8	fc 0c fc 0c ff 03 3f 03 00 00 f0 00 30 00 cc 00
	>01a9d8	83a9d8	fc 00 fc 00 f3 00 3f 00 00 00 00 00 00 00 00 00
	>01a9e8	83a9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a9f8	83a9f8	00 00 00 00 00 00 00 00 c0 cf 00 0f 00 03 00 0f
	>01aa08	83aa08	00 0c c0 0c 0c cf c0 c0 cf 00 0f 00 03 00 0f 00
	>01aa18	83aa18	0c 00 0c 00 cf 00 c0 00 00 f0 00 f3 00 30 03 f0
	>01aa28	83aa28	30 f3 33 f3 c0 c0 00 00 f0 00 f3 00 30 00 f0 00
	>01aa38	83aa38	f3 00 f3 00 c0 00 00 00 00 cf c0 cf 00 0f 00 0f
	>01aa48	83aa48	c0 0c 00 cc cc cf 00 00 cf 00 cf 00 0f 00 0f 00
	>01aa58	83aa58	0c 00 cc 00 cf 00 00 00 00 f3 03 f3 00 f0 00 f0
	>01aa68	83aa68	33 f0 30 f3 c3 c3 00 00 f3 00 f3 00 f0 00 f0 00
	>01aa78	83aa78	f0 00 f3 00 c3 00 00 00 00 0f 00 cf 00 0c c0 0f
	>01aa88	83aa88	0c cf cc cf 03 03 00 00 0f 00 cf 00 0c 00 0f 00
	>01aa98	83aa98	cf 00 cf 00 03 00 00 00 03 f3 00 f0 00 c0 00 f0
	>01aaa8	83aaa8	00 30 03 30 30 f3 03 03 f3 00 f0 00 c0 00 f0 00
	>01aab8	83aab8	30 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aac8	83aac8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aad8	83aad8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aae8	83aae8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aaf8	83aaf8	30 00 33 00 f3 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0
	>01ab08	83ab08	f0 c0 3f 30 3f 30 0f 0c c0 00 c0 00 c0 00 c0 00
	>01ab18	83ab18	f0 00 3f 00 3f 00 0f 00 00 00 00 00 00 00 00 00
	>01ab28	83ab28	00 00 00 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01ab38	83ab38	00 00 00 00 ff 00 ff 00 03 03 03 03 03 03 03 03
	>01ab48	83ab48	0f 03 fc 0c fc 0c f0 30 03 00 03 00 03 00 03 00
	>01ab58	83ab58	0f 00 fc 00 fc 00 f0 00 00 00 00 00 00 00 00 00
	>01ab68	83ab68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ab78	83ab78	00 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 ff c3
	>01ab88	83ab88	ff c3 ff c0 cf c0 3f 30 ff 00 ff 00 ff 00 ff 00
	>01ab98	83ab98	ff 00 fc 00 cf 00 3f 00 00 00 00 00 00 00 00 00
	>01aba8	83aba8	00 00 c3 c3 c3 c3 ff 3c 00 00 00 00 00 00 00 00
	>01abb8	83abb8	00 00 c3 00 c3 00 3c 00 ff c3 ff c3 ff c3 ff c3
	>01abc8	83abc8	ff c3 ff 03 f3 03 fc 3c ff 00 ff 00 ff 00 ff 00
	>01abd8	83abd8	ff 00 3f 00 f3 00 fc 00 00 00 00 00 00 00 00 00
	>01abe8	83abe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01abf8	83abf8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01ac08	83ac08	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01ac18	83ac18	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01ac28	83ac28	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01ac38	83ac38	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01ac48	83ac48	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01ac58	83ac58	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ac68	83ac68	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01ac78	83ac78	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01ac88	83ac88	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01ac98	83ac98	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01aca8	83aca8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01acb8	83acb8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01acc8	83acc8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01acd8	83acd8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ace8	83ace8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01acf8	83acf8	fc 00 ff 00 30 00 c0 00 03 03 00 00 00 00 00 00
	>01ad08	83ad08	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01ad18	83ad18	00 00 00 00 00 00 00 00 ff 00 ff ff 00 00 00 00
	>01ad28	83ad28	00 00 00 00 00 00 00 00 ff 00 ff 00 00 00 00 00
	>01ad38	83ad38	00 00 00 00 00 00 00 00 c0 c0 00 00 00 00 00 00
	>01ad48	83ad48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ad58	83ad58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad68	83ad68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad78	83ad78	00 00 00 00 00 00 00 00 3f 30 33 30 0c 0c 0f 0f
	>01ad88	83ad88	00 00 00 00 00 00 00 00 3f 00 33 00 0c 00 0f 00
	>01ad98	83ad98	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 00 00
	>01ada8	83ada8	ff ff 00 00 00 00 00 00 c3 00 ff 00 ff 00 00 00
	>01adb8	83adb8	ff 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 c3 c3
	>01adc8	83adc8	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 c3 00
	>01add8	83add8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ade8	83ade8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01adf8	83adf8	00 00 00 00 00 00 00 00 c0 cf 0c 03 00 03 00 0f
	>01ae08	83ae08	00 0f c0 0c 0c cf c0 c0 cf 00 03 00 03 00 0f 00
	>01ae18	83ae18	0f 00 0c 00 cf 00 c0 00 00 f0 c0 33 00 30 03 f0
	>01ae28	83ae28	30 f3 33 f3 c0 c0 00 00 f0 00 33 00 30 00 f0 00
	>01ae38	83ae38	f3 00 f3 00 c0 00 00 00 00 cf cc c3 00 03 00 0f
	>01ae48	83ae48	c0 0f 00 cf cc cf 00 00 cf 00 c3 00 03 00 0f 00
	>01ae58	83ae58	0f 00 cf 00 cf 00 00 00 00 f3 c3 33 00 30 00 f0
	>01ae68	83ae68	33 f0 30 f3 c3 c3 00 00 f3 00 33 00 30 00 f0 00
	>01ae78	83ae78	f0 00 f3 00 c3 00 00 00 00 0f 03 cc 00 0c c0 0f
	>01ae88	83ae88	0c cf cc cf 03 03 00 00 0f 00 cc 00 0c 00 0f 00
	>01ae98	83ae98	cf 00 cf 00 03 00 00 00 03 f3 30 c0 00 c0 00 f0
	>01aea8	83aea8	00 f0 03 30 30 f3 03 03 f3 00 c0 00 c0 00 f0 00
	>01aeb8	83aeb8	f0 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aec8	83aec8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aed8	83aed8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aee8	83aee8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aef8	83aef8	30 00 33 00 f3 00 00 00 00 00 00 00 00 00 00 00
	>01af08	83af08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af18	83af18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af28	83af28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af38	83af38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af48	83af48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af58	83af58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af68	83af68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af78	83af78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af88	83af88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af98	83af98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afa8	83afa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afb8	83afb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afc8	83afc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afd8	83afd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afe8	83afe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01aff8	83aff8	00 00 00 00 00 00 00 00 00 00 03 03 0f 03 0f 0f
	>01b008	83b008	3f 3c 3c 3c 3c 3c ff ff 00 00 00 00 00 00 00 00
	>01b018	83b018	00 00 00 00 00 00 00 00 00 00 c0 c0 f0 f0 f0 f0
	>01b028	83b028	3c 3c 3c 3c 3c 3c ff ff 00 00 00 00 30 00 30 00
	>01b038	83b038	3c 00 3c 00 3c 00 3c 00 00 00 03 00 03 00 0f 00
	>01b048	83b048	0c 00 0c 00 0f 03 3f 00 00 00 00 00 00 00 00 00
	>01b058	83b058	00 00 00 00 03 00 00 00 00 00 c0 c0 c0 00 f0 30
	>01b068	83b068	f0 30 f0 30 f0 30 fc 30 00 00 00 00 00 00 00 00
	>01b078	83b078	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 00
	>01b088	83b088	0f 0f 0f 0c 0f 0f 0f 0f 00 00 00 00 00 00 00 00
	>01b098	83b098	0c 00 0c 00 0c 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b0a8	83b0a8	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 00 00 00 00
	>01b0b8	83b0b8	f0 00 30 00 f0 00 f0 00 00 00 03 03 03 03 0f 0f
	>01b0c8	83b0c8	0f 0f 0f 0f 0f 0f 3f 3f 00 00 00 00 00 00 00 00
	>01b0d8	83b0d8	03 00 03 00 03 00 33 00 00 00 c0 c0 c0 c0 f0 f0
	>01b0e8	83b0e8	f0 f0 30 30 30 30 fc fc 00 00 00 00 c0 00 f0 00
	>01b0f8	83b0f8	30 00 30 00 30 00 fc 00 3c 3c ff c3 c3 c3 c3 c3
	>01b108	83b108	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b118	83b118	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b128	83b128	00 00 3c 3c ff c3 c3 c3 00 00 00 00 00 00 00 00
	>01b138	83b138	00 00 3c 00 c3 00 ff 00 3c 3c ff c3 c3 c3 c3 c3
	>01b148	83b148	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b158	83b158	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b168	83b168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b178	83b178	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 33
	>01b188	83b188	3f 3f 3f 3f ff cf fc fc 00 00 0f 00 0c 00 30 00
	>01b198	83b198	30 00 30 00 c0 00 c0 00 ff ff ff 00 ff ff ff ff
	>01b1a8	83b1a8	c3 c3 3c 3c c3 c3 c3 c3 ff 00 00 00 00 00 00 00
	>01b1b8	83b1b8	00 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc cc
	>01b1c8	83b1c8	fc fc fc fc ff f3 3f 3f 00 00 f0 00 30 00 0c 00
	>01b1d8	83b1d8	0c 00 0c 00 03 00 03 00 00 00 00 00 00 00 00 00
	>01b1e8	83b1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b1f8	83b1f8	00 00 00 00 00 00 00 00 ff ff cf cf cf cf 03 03
	>01b208	83b208	0f 03 3f 3f 3c 3c 30 30 00 00 00 00 00 00 00 00
	>01b218	83b218	00 00 00 00 00 00 00 00 ff ff f3 f3 f3 f3 c0 c0
	>01b228	83b228	f0 f0 fc fc 3c 3c 0c 0c 3c 00 30 00 f0 00 c0 00
	>01b238	83b238	00 00 00 00 00 00 00 00 3f 00 3f 00 33 00 03 00
	>01b248	83b248	03 00 0f 00 0f 03 0c 0c 00 00 00 00 00 00 00 00
	>01b258	83b258	00 00 00 00 00 00 00 00 fc 30 fc 30 cc c0 c0 c0
	>01b268	83b268	c0 c0 f0 30 f0 30 30 30 00 00 00 00 00 00 00 00
	>01b278	83b278	00 00 00 00 00 00 00 00 0f 0f 0f 0f 03 03 03 03
	>01b288	83b288	03 00 03 00 03 03 03 03 0c 00 0c 00 03 00 03 00
	>01b298	83b298	00 00 00 00 00 00 00 00 f0 f0 c0 c0 00 00 00 00
	>01b2a8	83b2a8	c0 c0 c0 c0 c0 c0 c0 c0 f0 00 c0 00 00 00 00 00
	>01b2b8	83b2b8	00 00 00 00 c0 00 c0 00 3f 3f 3f 3f 33 33 03 03
	>01b2c8	83b2c8	03 03 0f 0f 0f 0f 0c 0c 33 00 33 00 30 00 00 00
	>01b2d8	83b2d8	00 00 00 00 0f 00 0c 00 fc fc fc fc cc cc c0 c0
	>01b2e8	83b2e8	c0 c0 f0 f0 f0 f0 30 30 fc 00 fc 00 cc 00 c0 00
	>01b2f8	83b2f8	c0 00 f0 00 f0 00 30 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b308	83b308	c3 c3 c3 c3 c3 c3 c3 c0 ff 00 ff 00 ff 00 ff 00
	>01b318	83b318	ff 00 ff 00 ff 00 fc 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b328	83b328	c3 c3 c3 c3 c3 c3 c3 00 ff 00 ff 00 ff 00 ff 00
	>01b338	83b338	ff 00 ff 00 ff 00 3c 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b348	83b348	c3 c3 c3 c3 c3 c3 c3 03 ff 00 ff 00 ff 00 ff 00
	>01b358	83b358	ff 00 ff 00 ff 00 3f 00 00 00 00 00 00 00 00 00
	>01b368	83b368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b378	83b378	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
	>01b388	83b388	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b398	83b398	c3 00 c3 00 c3 00 c3 00 00 00 3c 3c ff c3 ff ff
	>01b3a8	83b3a8	ff ff c3 c3 3c 3c 00 00 00 00 3c 00 c3 00 c3 00
	>01b3b8	83b3b8	c3 00 c3 00 3c 00 00 00 ff ff ff ff ff ff ff ff
	>01b3c8	83b3c8	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b3d8	83b3d8	c3 00 c3 00 c3 00 c3 00 00 00 00 00 00 00 00 00
	>01b3e8	83b3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b3f8	83b3f8	00 00 00 00 00 00 00 00 00 00 30 30 3c 3c 3f 3f
	>01b408	83b408	0f 0f 03 03 cf c3 cf cf 00 00 00 00 00 00 00 00
	>01b418	83b418	00 00 00 00 00 00 00 00 00 00 0c 0c 3c 0c fc fc
	>01b428	83b428	f0 f0 c0 c0 f3 f3 f3 f3 00 00 00 00 00 00 00 00
	>01b438	83b438	00 00 00 00 30 00 30 00 00 00 0c 00 0f 00 0f 00
	>01b448	83b448	03 00 03 00 33 00 3f 00 00 00 00 00 00 00 00 00
	>01b458	83b458	00 00 00 00 00 00 00 00 00 00 30 30 f0 30 f0 30
	>01b468	83b468	c0 c0 c0 c0 cc c0 fc 30 00 00 00 00 00 00 00 00
	>01b478	83b478	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 03
	>01b488	83b488	03 03 03 03 03 03 0f 0c 00 00 00 00 00 00 00 00
	>01b498	83b498	00 00 03 00 03 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b4a8	83b4a8	c0 c0 00 00 00 00 f0 f0 00 00 00 00 00 00 c0 00
	>01b4b8	83b4b8	c0 00 00 00 00 00 30 00 00 00 0c 0c 0f 0f 0f 0f
	>01b4c8	83b4c8	03 03 03 03 33 33 3f 3f 00 00 00 00 0f 00 0f 00
	>01b4d8	83b4d8	00 00 00 00 30 00 33 00 00 00 30 30 f0 f0 f0 f0
	>01b4e8	83b4e8	c0 c0 c0 c0 cc cc fc fc 00 00 00 00 30 00 f0 00
	>01b4f8	83b4f8	c0 00 c0 00 cc 00 fc 00 c0 c0 c0 c0 c0 c0 30 30
	>01b508	83b508	0f 0f 00 00 00 00 00 00 ff 00 ff 00 cf 00 30 00
	>01b518	83b518	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c
	>01b528	83b528	c3 c3 00 00 00 00 00 00 ff 00 ff 00 c3 00 3c 00
	>01b538	83b538	c3 00 00 00 00 00 00 00 03 03 03 03 03 03 0c 0c
	>01b548	83b548	f0 f0 00 00 00 00 00 00 ff 00 ff 00 f3 00 0c 00
	>01b558	83b558	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b568	83b568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b578	83b578	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b588	83b588	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b598	83b598	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5a8	83b5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5b8	83b5b8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b5c8	83b5c8	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b5d8	83b5d8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5e8	83b5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5f8	83b5f8	00 00 00 00 00 00 00 00 ff ff ff ff 3f 3c 3c 3c
	>01b608	83b608	3c 3c 0f 0f 0f 0f 03 03 00 00 00 00 00 00 00 00
	>01b618	83b618	00 00 00 00 00 00 00 00 ff ff ff ff 3c 3c 3c 3c
	>01b628	83b628	3c 3c f0 f0 f0 f0 c0 c0 3c 00 3c 00 3c 00 3c 00
	>01b638	83b638	3c 00 30 00 f0 00 c0 00 3f 00 3f 00 0c 00 0c 00
	>01b648	83b648	0f 03 0f 00 03 00 03 03 00 00 00 00 00 00 00 00
	>01b658	83b658	03 00 00 00 00 00 00 00 fc 30 fc 30 f0 30 f0 30
	>01b668	83b668	f0 30 f0 f0 c0 c0 c0 c0 00 00 00 00 00 00 00 00
	>01b678	83b678	00 00 00 00 00 00 00 00 0f 0c 0f 0f 0f 0f 0f 0f
	>01b688	83b688	0f 0f 03 03 03 03 03 03 0c 00 0c 00 0c 00 0f 00
	>01b698	83b698	0c 00 03 00 03 00 03 00 f0 f0 f0 f0 f0 f0 30 30
	>01b6a8	83b6a8	c0 c0 00 00 00 00 00 00 30 00 f0 00 f0 00 30 00
	>01b6b8	83b6b8	c0 00 00 00 00 00 00 00 3f 3f 3f 3f 0f 0f 0f 0f
	>01b6c8	83b6c8	0f 0f 0f 0f 03 03 03 03 33 00 33 00 03 00 03 00
	>01b6d8	83b6d8	03 00 03 00 00 00 00 00 fc fc fc fc f0 f0 30 30
	>01b6e8	83b6e8	30 30 f0 f0 c0 c0 c0 c0 fc 00 fc 00 30 00 30 00
	>01b6f8	83b6f8	30 00 f0 00 c0 00 c0 00 00 00 00 00 00 00 00 00
	>01b708	83b708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b718	83b718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b728	83b728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b738	83b738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b748	83b748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b758	83b758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b768	83b768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b778	83b778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b788	83b788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b798	83b798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7a8	83b7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7b8	83b7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7c8	83b7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7d8	83b7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7e8	83b7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7f8	83b7f8	00 00 00 00 00 00 00 00 30 00 fc 3c c0 c0 3f 30
	>01b808	83b808	3f 00 ff c0 3c 00 c3 00 00 30 3c c0 c0 00 30 0f
	>01b818	83b818	00 33 c0 3f 00 3c 00 00 0c 00 3f 0f cf cf f0 30
	>01b828	83b828	f0 00 fc 0c fc 00 3c 00 00 0c 0f 30 cf 00 30 c0
	>01b838	83b838	00 f0 0c f0 00 fc 00 3c 00 00 00 00 3f 30 3f 00
	>01b848	83b848	ff c0 3c 00 c3 00 c3 00 00 00 00 00 30 0f 00 33
	>01b858	83b858	c0 3f 00 3c 00 00 00 c3 00 00 00 00 f0 30 f3 03
	>01b868	83b868	fc 0c fc 00 3c 00 3c 00 00 00 00 00 30 c0 03 f0
	>01b878	83b878	0c f0 00 fc 00 3c 00 3c 30 00 fc 3c c0 c0 3f 30
	>01b888	83b888	3f 00 ff c0 cf 00 30 00 00 30 3c c0 c0 00 30 0f
	>01b898	83b898	00 33 c0 3f 00 cf 00 00 0c 00 3f 0f cf cf f0 30
	>01b8a8	83b8a8	f0 00 fc 0c 3c 00 cc 00 00 0c 0f 30 cf 00 30 c0
	>01b8b8	83b8b8	00 f0 0c f0 00 3c 00 0c 00 00 00 00 3f 30 3f 00
	>01b8c8	83b8c8	ff c0 cf 00 30 00 30 00 00 00 00 00 30 0f 00 33
	>01b8d8	83b8d8	c0 3f 00 cf 00 00 00 30 00 00 00 00 f0 30 f3 03
	>01b8e8	83b8e8	fc 0c 3c 00 cc 00 cc 00 00 00 00 00 30 c0 03 f0
	>01b8f8	83b8f8	0c f0 00 3c 00 0c 00 cc 3c 3c ff c3 c3 ff c3 ff
	>01b908	83b908	c3 ff c3 ff c3 ff c3 ff 3c 00 c3 00 c3 3c c3 3c
	>01b918	83b918	c3 3c c3 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01b928	83b928	00 00 00 00 03 03 ff fc 00 00 00 00 00 00 00 00
	>01b938	83b938	00 00 00 00 03 00 fc 00 3c 3c ff c3 c3 ff c3 ff
	>01b948	83b948	c3 ff c3 ff c3 3f 0c fc 3c 00 c3 00 c3 3c c3 3c
	>01b958	83b958	c3 3c c3 3c 03 3c 0c f0 00 00 00 00 00 00 00 00
	>01b968	83b968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b978	83b978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01b988	83b988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01b998	83b998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01b9a8	83b9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01b9b8	83b9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01b9c8	83b9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9d8	83b9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9e8	83b9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9f8	83b9f8	00 00 00 00 00 00 00 00 c3 00 3c 00 ff 00 cf cc
	>01ba08	83ba08	33 00 3f 30 00 00 00 00 00 c3 00 3c 00 ff cc 03
	>01ba18	83ba18	00 33 30 0f 00 00 00 00 3c 00 fc 00 fc 00 fc 0c
	>01ba28	83ba28	f3 03 f3 30 0f 00 3f 33 00 3c 00 fc 00 fc 0c f0
	>01ba38	83ba38	03 f0 30 c3 00 0f 33 0c 3c 00 ff 00 cf cc 33 00
	>01ba48	83ba48	3f 30 00 00 00 00 00 00 00 3c 00 ff cc 03 00 33
	>01ba58	83ba58	30 0f 00 00 00 00 00 00 fc 00 fc 00 fc 0c f3 03
	>01ba68	83ba68	f3 30 0f 00 3f 33 00 00 00 fc 00 fc 0c f0 03 f0
	>01ba78	83ba78	30 c3 00 0f 33 0c 00 00 30 00 cf 00 ff 00 f3 c3
	>01ba88	83ba88	3c 00 3f 30 00 00 00 00 00 30 00 cf 00 ff c3 30
	>01ba98	83ba98	00 3c 30 0f 00 00 00 00 cc 00 3c 00 fc 00 fc 0c
	>01baa8	83baa8	f0 00 f0 30 0c 00 fc cc 00 cc 00 3c 00 fc 0c f0
	>01bab8	83bab8	00 f0 30 c0 00 0c cc 30 cf 00 ff 00 f3 c3 3c 00
	>01bac8	83bac8	3f 30 00 00 00 00 00 00 00 cf 00 ff c3 30 00 3c
	>01bad8	83bad8	30 0f 00 00 00 00 00 00 3c 00 fc 00 fc 0c f0 00
	>01bae8	83bae8	f0 30 0c 00 fc cc 00 00 00 3c 00 fc 0c f0 00 f0
	>01baf8	83baf8	30 c0 00 0c cc 30 00 00 c0 ff c0 ff c0 ff c0 ff
	>01bb08	83bb08	c3 ff c3 ff c3 ff c3 ff c0 3f c0 3f c0 3f c0 3f
	>01bb18	83bb18	c3 3c c3 3c c3 3c c3 3c 00 ff 00 ff 00 ff 00 ff
	>01bb28	83bb28	fc fc 03 03 00 00 00 00 00 ff 00 ff 00 ff 00 ff
	>01bb38	83bb38	fc 00 03 00 00 00 00 00 0c fc 30 f0 30 f0 0c fc
	>01bb48	83bb48	0c fc 03 3f c3 ff c3 ff 0c f0 30 c0 30 c0 0c f0
	>01bb58	83bb58	0c f0 03 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01bb68	83bb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bb78	83bb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01bb88	83bb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01bb98	83bb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01bba8	83bba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01bbb8	83bbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01bbc8	83bbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbd8	83bbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbe8	83bbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbf8	83bbf8	00 00 00 00 00 00 00 00 30 00 fc 3c f3 f3 0f 0c
	>01bc08	83bc08	0f 00 3f 30 3f 00 3c 00 00 30 3c c0 f3 00 0c 03
	>01bc18	83bc18	00 0c 30 0f 00 3f 00 3c 0c 00 3f 0f 03 03 fc 0c
	>01bc28	83bc28	fc 00 ff 03 3c 00 c3 00 00 0c 0f 30 03 00 0c f0
	>01bc38	83bc38	00 fc 03 fc 00 3c 00 00 00 00 00 00 0f 0c cf c0
	>01bc48	83bc48	3f 30 3f 00 3c 00 3c 00 00 00 00 00 0c 03 c0 0c
	>01bc58	83bc58	30 0f 00 3f 00 3c 00 3c 00 00 00 00 fc 0c fc 00
	>01bc68	83bc68	ff 03 3c 00 c3 00 c3 00 00 00 00 00 0c f0 00 fc
	>01bc78	83bc78	03 fc 00 3c 00 00 00 c3 30 00 fc 3c f3 f3 0f 0c
	>01bc88	83bc88	0f 00 3f 30 3c 00 33 00 00 30 3c c0 f3 00 0c 03
	>01bc98	83bc98	00 0c 30 0f 00 3c 00 30 0c 00 3f 0f 03 03 fc 0c
	>01bca8	83bca8	fc 00 ff 03 f3 00 0c 00 00 0c 0f 30 03 00 0c f0
	>01bcb8	83bcb8	00 fc 03 fc 00 f3 00 00 00 00 00 00 0f 0c cf c0
	>01bcc8	83bcc8	3f 30 3c 00 33 00 33 00 00 00 00 00 0c 03 c0 0c
	>01bcd8	83bcd8	30 0f 00 3c 00 30 00 33 00 00 00 00 fc 0c fc 00
	>01bce8	83bce8	ff 03 f3 00 0c 00 0c 00 00 00 00 00 0c f0 00 fc
	>01bcf8	83bcf8	03 fc 00 f3 00 00 00 0c c3 ff c3 ff c3 ff c3 c3
	>01bd08	83bd08	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd18	83bd18	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd28	83bd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd38	83bd38	00 00 00 00 00 00 00 00 c3 ff c3 ff c3 ff c3 c3
	>01bd48	83bd48	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd58	83bd58	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd68	83bd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd78	83bd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd88	83bd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd98	83bd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bda8	83bda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdb8	83bdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdc8	83bdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdd8	83bdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bde8	83bde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdf8	83bdf8	00 00 00 00 00 00 00 00 3c 00 3f 00 3f 00 3f 30
	>01be08	83be08	cf c0 cf 0c f0 00 fc cc 00 3c 00 3f 00 3f 30 0f
	>01be18	83be18	c0 0f 0c 03 00 f0 cc 30 c3 00 3c 00 ff 00 f3 33
	>01be28	83be28	cc 00 fc 0c 00 00 00 00 00 c3 00 3c 00 ff 33 c0
	>01be38	83be38	00 cc 0c f0 00 00 00 00 3f 00 3f 00 3f 30 cf c0
	>01be48	83be48	cf 0c f0 00 fc cc 00 00 00 3f 00 3f 30 0f c0 0f
	>01be58	83be58	0c 03 00 f0 cc 30 00 00 3c 00 ff 00 f3 33 cc 00
	>01be68	83be68	fc 0c 00 00 00 00 00 00 00 3c 00 ff 33 c0 00 cc
	>01be78	83be78	0c f0 00 00 00 00 00 00 33 00 3c 00 3f 00 3f 30
	>01be88	83be88	0f 00 0f 0c 30 00 3f 33 00 33 00 3c 00 3f 30 0f
	>01be98	83be98	00 0f 0c 03 00 30 33 0c 0c 00 f3 00 ff 00 cf c3
	>01bea8	83bea8	3c 00 fc 0c 00 00 00 00 00 0c 00 f3 00 ff c3 0c
	>01beb8	83beb8	00 3c 0c f0 00 00 00 00 3c 00 3f 00 3f 30 0f 00
	>01bec8	83bec8	0f 0c 30 00 3f 33 00 00 00 3c 00 3f 30 0f 00 0f
	>01bed8	83bed8	0c 03 00 30 33 0c 00 00 f3 00 ff 00 cf c3 3c 00
	>01bee8	83bee8	fc 0c 00 00 00 00 00 00 00 f3 00 ff c3 0c 00 3c
	>01bef8	83bef8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf08	83bf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf18	83bf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf28	83bf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf38	83bf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf48	83bf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf58	83bf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf68	83bf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf78	83bf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf88	83bf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf98	83bf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfa8	83bfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfb8	83bfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfc8	83bfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfd8	83bfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfe8	83bfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bff8	83bff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c008	83c008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c018	83c018	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c028	83c028	3c ff 3c ff 33 ff 30 fc 30 0f 00 3f cf 30 3f c0
	>01c038	83c038	3c c3 3c c3 33 cc 30 cc c0 c0 00 c0 00 cf c0 ff
	>01c048	83c048	00 ff 00 ff 30 3f c0 0f c0 00 00 c0 00 cf c0 3f
	>01c058	83c058	00 ff 00 ff 30 0f 00 0f 00 00 00 00 00 00 00 00
	>01c068	83c068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c078	83c078	00 00 00 00 00 00 00 00 00 00 00 00 03 03 00 03
	>01c088	83c088	00 03 00 03 00 03 00 03 00 00 00 00 03 00 00 03
	>01c098	83c098	00 03 00 03 00 03 00 03 c3 ff 00 ff 3c ff ff ff
	>01c0a8	83c0a8	fc ff fc ff f0 ff 30 ff c3 3c 00 ff 3c c3 ff 00
	>01c0b8	83c0b8	fc 03 fc 03 f0 0f 30 cf 00 00 00 00 c0 cf 00 ff
	>01c0c8	83c0c8	00 ff 00 ff cc cf 30 00 00 00 00 00 c0 0f 00 ff
	>01c0d8	83c0d8	00 ff 00 ff cc 03 00 00 00 00 00 00 00 00 00 00
	>01c0e8	83c0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c0f8	83c0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c108	83c108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c118	83c118	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c128	83c128	3f ff 3f ff 3c ff 0c ff 30 0f 00 3f cf 30 3f c0
	>01c138	83c138	3f c0 3f c0 3c c3 0c f3 c0 c0 00 c0 0c ff c0 ff
	>01c148	83c148	00 ff 00 ff 33 f3 0c c0 c0 00 00 c0 0c f3 c0 3f
	>01c158	83c158	00 ff 00 ff 33 c0 00 c0 00 00 00 00 00 00 00 00
	>01c168	83c168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c178	83c178	00 00 00 00 00 00 00 00 03 03 00 03 30 ff 03 ff
	>01c188	83c188	00 ff 00 ff cc cf 30 03 03 00 00 03 30 cf 03 fc
	>01c198	83c198	00 ff 00 ff cc 03 00 03 0c fc 00 fc f3 ff fc ff
	>01c1a8	83c1a8	fc ff fc ff 3c ff 30 ff 0c f0 00 fc f3 0c fc 03
	>01c1b8	83c1b8	fc 03 fc 03 3c c3 30 cf 00 00 00 00 00 00 00 00
	>01c1c8	83c1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1d8	83c1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1e8	83c1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1f8	83c1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c208	83c208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c218	83c218	00 00 00 00 00 00 00 00 c0 fc 33 3f 30 3f 00 0f
	>01c228	83c228	00 0f 00 0f 0c 0f 0c 0f c0 3c 33 0c 30 0f 00 0f
	>01c238	83c238	00 0f 00 0f 0c 03 0c 03 00 0f 30 3f 3c ff 30 00
	>01c248	83c248	00 00 c3 c3 00 c3 3c ff 00 0f 30 0f 3c c3 00 00
	>01c258	83c258	00 00 c3 00 00 c3 3c c3 00 00 00 00 00 00 00 00
	>01c268	83c268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c278	83c278	00 00 00 00 00 00 00 00 03 03 00 00 00 00 00 00
	>01c288	83c288	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01c298	83c298	00 00 00 00 00 00 00 00 00 ff 30 ff 30 3f 00 0f
	>01c2a8	83c2a8	00 0f 0c 0f 0c 0f 00 03 00 ff 30 cf 30 0f 00 0f
	>01c2b8	83c2b8	00 0f 0c 03 0c 03 00 03 00 00 cc cf 03 ff 03 f0
	>01c2c8	83c2c8	00 f0 0c fc 00 fc 03 ff 00 00 cc 03 03 fc 00 f0
	>01c2d8	83c2d8	00 f0 0c f0 00 fc 03 fc 00 00 00 00 00 00 00 00
	>01c2e8	83c2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c2f8	83c2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c308	83c308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c318	83c318	00 00 00 00 00 00 00 00 c0 ff 00 3f 3c 3f 0c 0f
	>01c328	83c328	00 0f 0c 0f 00 03 03 03 c0 3f 00 3f 3c 03 0c 03
	>01c338	83c338	00 0f 0c 03 00 03 03 00 00 c0 33 f3 00 ff 00 ff
	>01c348	83c348	00 ff 00 ff 00 ff 00 ff 00 c0 33 c0 00 ff 00 ff
	>01c358	83c358	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c368	83c368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c378	83c378	00 00 00 00 00 00 00 00 00 03 cc cf 00 ff 00 ff
	>01c388	83c388	00 ff 00 ff 00 ff 00 ff 00 03 cc 03 00 ff 00 ff
	>01c398	83c398	00 ff 00 ff 00 ff 00 ff 03 ff 00 fc 3c fc 30 f0
	>01c3a8	83c3a8	00 f0 30 f0 00 c0 c0 c0 03 fc 00 fc 3c c0 30 c0
	>01c3b8	83c3b8	00 f0 30 c0 00 c0 c0 00 00 00 00 00 00 00 00 00
	>01c3c8	83c3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3d8	83c3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3e8	83c3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3f8	83c3f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c408	83c408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c418	83c418	00 00 00 00 00 00 00 00 00 03 03 03 00 00 03 03
	>01c428	83c428	3f 3f 00 00 00 00 00 00 00 03 03 00 00 00 03 00
	>01c438	83c438	3f 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01c448	83c448	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01c458	83c458	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c468	83c468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c478	83c478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c488	83c488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c498	83c498	00 00 00 00 00 00 00 00 03 03 00 00 00 00 03 03
	>01c4a8	83c4a8	3f 3f 00 00 00 00 00 00 03 00 00 00 00 00 03 00
	>01c4b8	83c4b8	3f 00 00 00 00 00 00 00 03 ff fc ff 0c 0f f0 f0
	>01c4c8	83c4c8	ff ff 00 00 00 00 00 00 03 fc fc 03 0c 03 f0 00
	>01c4d8	83c4d8	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4e8	83c4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4f8	83c4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c508	83c508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c518	83c518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01c528	83c528	3f 3f 00 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01c538	83c538	3f 00 00 00 00 00 00 00 c0 ff 3c 3f 03 03 fc fc
	>01c548	83c548	ff ff 00 00 00 00 00 00 c0 3f 3c 03 03 00 fc 00
	>01c558	83c558	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c568	83c568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c578	83c578	00 00 00 00 00 00 00 00 03 ff 3c fc c0 c0 3f 3f
	>01c588	83c588	ff ff 00 00 00 00 00 00 03 fc 3c c0 c0 00 3f 00
	>01c598	83c598	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01c5a8	83c5a8	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01c5b8	83c5b8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5c8	83c5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5d8	83c5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5e8	83c5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5f8	83c5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c608	83c608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c618	83c618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c628	83c628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c638	83c638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c648	83c648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c658	83c658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c668	83c668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c678	83c678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c688	83c688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c698	83c698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6a8	83c6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6b8	83c6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6c8	83c6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6d8	83c6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6e8	83c6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6f8	83c6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c708	83c708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c718	83c718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c728	83c728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c738	83c738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c748	83c748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c758	83c758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c768	83c768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c778	83c778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c788	83c788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c798	83c798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7a8	83c7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7b8	83c7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7c8	83c7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7d8	83c7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7e8	83c7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7f8	83c7f8	00 00 00 00 00 00 00 00 00 00 00 00 03 f3 00 ff
	>01c808	83c808	00 ff 00 ff 33 f3 0c c0 00 00 00 00 03 f0 00 ff
	>01c818	83c818	00 ff 00 ff 33 c0 00 c0 c3 ff 00 ff 3c ff ff ff
	>01c828	83c828	3f ff 3f ff 0f ff 0c ff c3 3c 00 ff 3c c3 ff 00
	>01c838	83c838	3f c0 3f c0 0f f0 0c f3 00 00 00 00 c0 c0 00 c0
	>01c848	83c848	00 c0 00 c0 00 c0 00 c0 00 00 00 00 c0 00 00 c0
	>01c858	83c858	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01c868	83c868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c878	83c878	00 00 00 00 00 00 00 00 03 03 00 03 00 f3 03 ff
	>01c888	83c888	00 ff 00 ff 0c fc 03 f0 03 00 00 03 00 f3 03 fc
	>01c898	83c898	00 ff 00 ff 0c f0 00 f0 0c fc 00 fc f3 ff fc ff
	>01c8a8	83c8a8	3c ff 3c ff cc ff 0c 3f 0c f0 00 fc f3 0c fc 03
	>01c8b8	83c8b8	3c c3 3c c3 cc 33 0c 33 00 00 00 00 00 00 00 00
	>01c8c8	83c8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8d8	83c8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8e8	83c8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8f8	83c8f8	00 00 00 00 00 00 00 00 03 03 0f 0f 0c 0f 0c 0f
	>01c908	83c908	0c 0f 0c 0f 0f 0f 03 03 03 00 0f 00 0c 03 0c 03
	>01c918	83c918	0c 03 0c 03 0f 00 03 00 ff ff 3f ff 0c fc 0f ff
	>01c928	83c928	00 f3 0f ff 30 f3 f3 f3 ff 00 3f c0 0c f0 0f f0
	>01c938	83c938	00 f3 0f f0 30 c3 f3 00 30 3f c0 ff c0 ff 00 ff
	>01c948	83c948	00 ff 00 ff 00 ff 00 ff 30 0f c0 3f c0 3f 00 ff
	>01c958	83c958	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c968	83c968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c978	83c978	00 00 00 00 00 00 00 00 00 00 03 03 03 03 0f 0f
	>01c988	83c988	0c 0f 0c 0f 0c 0f 0c 0f 00 00 03 00 03 00 0f 00
	>01c998	83c998	0c 03 0c 03 0c 03 0c 03 ff ff fc fc ff ff 33 f3
	>01c9a8	83c9a8	00 f3 0f ff 0c ff 0f ff ff 00 fc 00 ff 00 33 c0
	>01c9b8	83c9b8	00 f3 0f f0 0c f3 0f f0 f0 ff c0 ff c0 ff 00 ff
	>01c9c8	83c9c8	00 ff 00 ff 00 ff 00 ff f0 0f c0 3f c0 3f 00 ff
	>01c9d8	83c9d8	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c9e8	83c9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c9f8	83c9f8	00 00 00 00 00 00 00 00 00 c0 33 f3 c0 ff 00 0f
	>01ca08	83ca08	00 0f 30 3f 00 3f c0 ff 00 c0 33 c0 c0 3f 00 0f
	>01ca18	83ca18	00 0f 30 0f 00 3f c0 3f 00 ff 0c ff 0c fc 00 f0
	>01ca28	83ca28	00 f0 30 f0 30 f0 00 c0 00 ff 0c f3 0c f0 00 f0
	>01ca38	83ca38	00 f0 30 c0 30 c0 00 c0 c0 c0 00 00 00 00 00 00
	>01ca48	83ca48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ca58	83ca58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca68	83ca68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca78	83ca78	00 00 00 00 00 00 00 00 00 f0 0c fc 3c ff 30 00
	>01ca88	83ca88	00 00 c3 c3 00 c3 3c ff 00 f0 0c f0 3c c3 00 00
	>01ca98	83ca98	00 00 c3 00 00 c3 3c c3 03 3f cc fc 0c fc 00 f0
	>01caa8	83caa8	00 f0 00 f0 30 f0 30 f0 03 3c cc 30 0c f0 00 f0
	>01cab8	83cab8	00 f0 00 f0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01cac8	83cac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cad8	83cad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cae8	83cae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01caf8	83caf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01cb08	83cb08	0f 0f 30 3f 00 3f 00 3f 00 00 00 00 00 00 03 00
	>01cb18	83cb18	0f 00 30 0f 00 3f 00 3f 00 03 0f 0f 3c 3f ff ff
	>01cb28	83cb28	ff ff 3f ff 0f ff 0f ff 00 03 0f 00 3c 03 ff 00
	>01cb38	83cb38	ff 00 3f c0 0f f0 0f f0 0c ff 00 ff c0 ff 00 ff
	>01cb48	83cb48	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cb58	83cb58	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cb68	83cb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cb78	83cb78	00 00 00 00 00 00 00 00 0f 0f 03 03 00 00 00 00
	>01cb88	83cb88	03 03 0c 0f 00 0f 00 0f 0f 00 03 00 00 00 00 00
	>01cb98	83cb98	03 00 0c 03 00 0f 00 0f 30 f3 cf cf 3c 3f ff ff
	>01cba8	83cba8	ff ff 0f ff 03 ff 03 ff 30 c3 cf 00 3c 03 ff 00
	>01cbb8	83cbb8	ff 00 0f f0 03 fc 03 fc 0c ff 00 ff c0 ff 00 ff
	>01cbc8	83cbc8	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cbd8	83cbd8	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cbe8	83cbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cbf8	83cbf8	00 00 00 00 00 00 00 00 c0 ff 3f ff 30 f0 0f 0f
	>01cc08	83cc08	ff ff 00 00 00 00 00 00 c0 3f 3f c0 30 c0 0f 00
	>01cc18	83cc18	ff 00 00 00 00 00 00 00 c0 c0 00 00 00 00 c0 c0
	>01cc28	83cc28	fc fc 00 00 00 00 00 00 c0 00 00 00 00 00 c0 00
	>01cc38	83cc38	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc48	83cc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc58	83cc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc68	83cc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc78	83cc78	00 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01cc88	83cc88	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01cc98	83cc98	ff 00 00 00 00 00 00 00 00 c0 c0 c0 00 00 c0 c0
	>01cca8	83cca8	fc fc 00 00 00 00 00 00 00 c0 c0 00 00 00 c0 00
	>01ccb8	83ccb8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccc8	83ccc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccd8	83ccd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cce8	83cce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccf8	83ccf8	00 00 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 3f
	>01cd08	83cd08	0f 0f 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 0f
	>01cd18	83cd18	0f 00 00 00 00 00 00 00 0f ff 0f ff 0f ff 3c fc
	>01cd28	83cd28	f0 f0 00 00 00 00 00 00 0f f0 0f f0 0f f0 3c c0
	>01cd38	83cd38	f0 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cd48	83cd48	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cd58	83cd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd68	83cd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd78	83cd78	00 00 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 0f
	>01cd88	83cd88	03 03 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 03
	>01cd98	83cd98	03 00 00 00 00 00 00 00 03 ff 03 ff 03 ff 0f ff
	>01cda8	83cda8	fc fc 00 00 00 00 00 00 03 fc 03 fc 03 fc 0f f0
	>01cdb8	83cdb8	fc 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cdc8	83cdc8	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cdd8	83cdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cde8	83cde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cdf8	83cdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce08	83ce08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce18	83ce18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce28	83ce28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce38	83ce38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce48	83ce48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce58	83ce58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce68	83ce68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce78	83ce78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce88	83ce88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce98	83ce98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cea8	83cea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ceb8	83ceb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cec8	83cec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ced8	83ced8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cee8	83cee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cef8	83cef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf08	83cf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf18	83cf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf28	83cf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf38	83cf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf48	83cf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf58	83cf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf68	83cf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf78	83cf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf88	83cf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf98	83cf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfa8	83cfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfb8	83cfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfc8	83cfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfd8	83cfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfe8	83cfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cff8	83cff8	00 00 00 00 00 00 00 00 0f ff 03 ff 03 ff 00 ff
	>01d008	83d008	00 ff 00 ff 00 ff 00 ff 0f f0 03 fc 03 fc 00 ff
	>01d018	83d018	00 ff 00 ff 00 ff 00 ff ff ff 3f 3f ff ff cc cf
	>01d028	83d028	00 cf f0 ff 30 ff f0 ff ff 00 3f 00 ff 00 cc 03
	>01d038	83d038	00 cf f0 0f 30 cf f0 0f 00 00 c0 c0 c0 c0 f0 f0
	>01d048	83d048	30 f0 30 f0 30 f0 30 f0 00 00 c0 00 c0 00 f0 00
	>01d058	83d058	30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01d068	83d068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d078	83d078	00 00 00 00 00 00 00 00 0c fc 03 ff 03 ff 00 ff
	>01d088	83d088	00 ff 00 ff 00 ff 00 ff 0c f0 03 fc 03 fc 00 ff
	>01d098	83d098	00 ff 00 ff 00 ff 00 ff ff ff fc ff 30 3f f0 ff
	>01d0a8	83d0a8	00 cf f0 ff 0c cf cf cf ff 00 fc 03 30 0f f0 0f
	>01d0b8	83d0b8	00 cf f0 0f 0c c3 cf 00 c0 c0 f0 f0 30 f0 30 f0
	>01d0c8	83d0c8	30 f0 30 f0 f0 f0 c0 c0 c0 00 f0 00 30 c0 30 c0
	>01d0d8	83d0d8	30 c0 30 c0 f0 00 c0 00 00 00 00 00 00 00 00 00
	>01d0e8	83d0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d0f8	83d0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d108	83d108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d118	83d118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d128	83d128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d138	83d138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d148	83d148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d158	83d158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d168	83d168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d178	83d178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d188	83d188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d198	83d198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1a8	83d1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1b8	83d1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1c8	83d1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1d8	83d1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1e8	83d1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1f8	83d1f8	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d208	83d208	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d218	83d218	03 fc 03 fc 0f f0 fc 00 0c cf f3 f3 3c fc ff ff
	>01d228	83d228	ff ff f0 ff c0 ff c0 ff 0c c3 f3 00 3c c0 ff 00
	>01d238	83d238	ff 00 f0 0f c0 3f c0 3f f0 f0 c0 c0 00 00 00 00
	>01d248	83d248	c0 c0 30 f0 00 f0 00 f0 f0 00 c0 00 00 00 00 00
	>01d258	83d258	c0 00 30 c0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01d268	83d268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d278	83d278	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d288	83d288	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d298	83d298	03 fc 03 fc 0f f0 fc 00 00 c0 f0 f0 3c fc ff ff
	>01d2a8	83d2a8	ff ff fc ff f0 ff f0 ff 00 c0 f0 00 3c c0 ff 00
	>01d2b8	83d2b8	ff 00 fc 03 f0 0f f0 0f 00 00 00 00 00 00 c0 c0
	>01d2c8	83d2c8	f0 f0 0c fc 00 fc 00 fc 00 00 00 00 00 00 c0 00
	>01d2d8	83d2d8	f0 00 0c f0 00 fc 00 fc 00 00 00 00 00 00 00 00
	>01d2e8	83d2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d2f8	83d2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d308	83d308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d318	83d318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d328	83d328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d338	83d338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d348	83d348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d358	83d358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d368	83d368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d378	83d378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d388	83d388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d398	83d398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3a8	83d3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3b8	83d3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3c8	83d3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3d8	83d3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3e8	83d3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3f8	83d3f8	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d408	83d408	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d418	83d418	00 00 00 00 00 00 00 00 c0 ff c0 ff c0 ff f0 ff
	>01d428	83d428	3f 3f 00 00 00 00 00 00 c0 3f c0 3f c0 3f f0 0f
	>01d438	83d438	3f 00 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 f0
	>01d448	83d448	c0 c0 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 c0
	>01d458	83d458	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d468	83d468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d478	83d478	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d488	83d488	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d498	83d498	00 00 00 00 00 00 00 00 f0 ff f0 ff f0 ff 3c 3f
	>01d4a8	83d4a8	0f 0f 00 00 00 00 00 00 f0 0f f0 0f f0 0f 3c 03
	>01d4b8	83d4b8	0f 00 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c fc
	>01d4c8	83d4c8	f0 f0 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c f0
	>01d4d8	83d4d8	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4e8	83d4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4f8	83d4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d508	83d508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d518	83d518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d528	83d528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d538	83d538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d548	83d548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d558	83d558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d568	83d568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d578	83d578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d588	83d588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d598	83d598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5a8	83d5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5b8	83d5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5c8	83d5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5d8	83d5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5e8	83d5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5f8	83d5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d608	83d608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d618	83d618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d628	83d628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d638	83d638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d648	83d648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d658	83d658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d668	83d668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d678	83d678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d688	83d688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d698	83d698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6a8	83d6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6b8	83d6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6c8	83d6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6d8	83d6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6e8	83d6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6f8	83d6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d708	83d708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d718	83d718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d728	83d728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d738	83d738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d748	83d748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d758	83d758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d768	83d768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d778	83d778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d788	83d788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d798	83d798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7a8	83d7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7b8	83d7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7c8	83d7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7d8	83d7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7e8	83d7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7f8	83d7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d808	83d808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d818	83d818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d828	83d828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d838	83d838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d848	83d848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d858	83d858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d868	83d868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d878	83d878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d888	83d888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d898	83d898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8a8	83d8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8b8	83d8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8c8	83d8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8d8	83d8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8e8	83d8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8f8	83d8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d908	83d908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d918	83d918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d928	83d928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d938	83d938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d948	83d948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d958	83d958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d968	83d968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d978	83d978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01d988	83d988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01d998	83d998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01d9a8	83d9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01d9b8	83d9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01d9c8	83d9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9d8	83d9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9e8	83d9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9f8	83d9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da08	83da08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da18	83da18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da28	83da28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da38	83da38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da48	83da48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da58	83da58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da68	83da68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da78	83da78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da88	83da88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da98	83da98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daa8	83daa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dab8	83dab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dac8	83dac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dad8	83dad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dae8	83dae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daf8	83daf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db08	83db08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db18	83db18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db28	83db28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db38	83db38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db48	83db48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db58	83db58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db68	83db68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db78	83db78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01db88	83db88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01db98	83db98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01dba8	83dba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01dbb8	83dbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01dbc8	83dbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbd8	83dbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbe8	83dbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbf8	83dbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc08	83dc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc18	83dc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc28	83dc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc38	83dc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc48	83dc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc58	83dc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc68	83dc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc78	83dc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc88	83dc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc98	83dc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dca8	83dca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcb8	83dcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcc8	83dcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcd8	83dcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dce8	83dce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcf8	83dcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd08	83dd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd18	83dd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd28	83dd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd38	83dd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd48	83dd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd58	83dd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd68	83dd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd78	83dd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd88	83dd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd98	83dd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dda8	83dda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddb8	83ddb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddc8	83ddc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddd8	83ddd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dde8	83dde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddf8	83ddf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de08	83de08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de18	83de18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de28	83de28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de38	83de38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de48	83de48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de58	83de58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de68	83de68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de78	83de78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de88	83de88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de98	83de98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dea8	83dea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01deb8	83deb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dec8	83dec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ded8	83ded8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dee8	83dee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01def8	83def8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df08	83df08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df18	83df18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df28	83df28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df38	83df38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df48	83df48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df58	83df58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df68	83df68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df78	83df78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df88	83df88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df98	83df98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfa8	83dfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfb8	83dfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfc8	83dfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfd8	83dfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfe8	83dfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dff8	83dff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e008	83e008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e018	83e018	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e028	83e028	3f 30 3f 30 3f 03 3f 30 00 00 03 00 0c 03 00 0f
	>01e038	83e038	30 0f 30 0f 03 3c 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e048	83e048	ff 00 ff 30 ff f0 ff 0f 30 0f 00 ff 00 ff 00 3f
	>01e058	83e058	00 3f 30 cf f0 0f 0f f0 00 00 00 00 00 00 00 00
	>01e068	83e068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e078	83e078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e088	83e088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e098	83e098	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e0a8	83e0a8	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e0b8	83e0b8	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e0c8	83e0c8	ff 00 ff 0c ff fc ff 03 30 0f 00 ff 00 ff 00 3f
	>01e0d8	83e0d8	00 3f 0c f3 fc 03 03 fc 00 00 00 00 00 00 00 00
	>01e0e8	83e0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e0f8	83e0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e108	83e108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e118	83e118	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e128	83e128	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e138	83e138	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e148	83e148	ff 00 ff 03 ff 3f ff 00 30 0f 00 ff 00 ff 00 3f
	>01e158	83e158	00 3f 03 fc 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e168	83e168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e178	83e178	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e188	83e188	ff 00 ff c0 ff fc ff 00 0c f0 00 ff 00 ff 00 ff
	>01e198	83e198	00 ff c0 3f fc 03 00 ff 00 00 c0 c0 f0 30 f0 00
	>01e1a8	83e1a8	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e1b8	83e1b8	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e1c8	83e1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1d8	83e1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1e8	83e1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1f8	83e1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e208	83e208	00 00 00 00 00 00 03 03 00 00 00 00 00 00 00 00
	>01e218	83e218	00 00 00 00 00 00 03 00 3f 00 3f 0c 3f 3c 3f 0c
	>01e228	83e228	3c 3c 3f 3f 0f 03 cf cc 00 3f 0c 30 3c 00 0c 30
	>01e238	83e238	3c 00 3f 00 03 0c cc 03 ff 00 ff 00 cf 00 0f 00
	>01e248	83e248	00 00 0f 0f ff c0 ff 00 00 0f 00 00 00 00 00 00
	>01e258	83e258	00 00 0f 00 c0 0f 00 ff 00 00 00 00 00 00 00 00
	>01e268	83e268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e278	83e278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e288	83e288	00 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00
	>01e298	83e298	00 00 00 00 0f 00 00 00 3f 00 3f 03 3f 33 3f 03
	>01e2a8	83e2a8	3f 33 3f 33 0f 00 cf cc 00 3f 03 3c 33 0c 03 3c
	>01e2b8	83e2b8	33 0c 33 0c 00 0f cc 03 ff 00 ff 00 f3 00 c3 00
	>01e2c8	83e2c8	00 00 c3 c3 ff fc ff 00 00 c3 00 00 00 00 00 00
	>01e2d8	83e2d8	00 00 c3 00 fc 00 00 ff 00 00 00 00 00 00 00 00
	>01e2e8	83e2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e2f8	83e2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e308	83e308	00 00 00 00 03 03 00 00 00 00 00 00 00 00 00 00
	>01e318	83e318	00 00 00 00 03 00 00 00 3f 00 3f 00 3f 30 3f 00
	>01e328	83e328	3f 30 3f 30 cf c0 0f 0c 00 3f 00 3f 30 0f 00 3f
	>01e338	83e338	30 0f 30 0f c0 0f 0c 03 ff 00 ff c0 fc c0 f0 c0
	>01e348	83e348	c0 c0 f0 f0 ff 3f ff 00 00 f0 c0 00 c0 00 c0 00
	>01e358	83e358	c0 00 f0 00 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e368	83e368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e378	83e378	00 00 00 00 00 00 00 00 ff 00 ff 03 cf 03 0f 03
	>01e388	83e388	03 03 0f 0f ff fc ff 00 00 0f 03 00 03 00 03 00
	>01e398	83e398	03 00 0f 00 fc 03 00 ff fc 00 fc 00 fc 0c fc 00
	>01e3a8	83e3a8	fc 0c fc 0c f3 03 f0 30 00 fc 00 fc 0c f0 00 fc
	>01e3b8	83e3b8	0c f0 0c f0 03 f0 30 c0 00 00 00 00 00 00 00 00
	>01e3c8	83e3c8	00 00 00 00 c0 c0 00 00 00 00 00 00 00 00 00 00
	>01e3d8	83e3d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>01e3e8	83e3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e3f8	83e3f8	00 00 00 00 00 00 00 00 0c 0c 00 00 0f 0c 0f 00
	>01e408	83e408	3f 30 00 00 00 00 00 00 0c 00 00 00 0c 03 00 03
	>01e418	83e418	30 0f 00 00 00 00 00 00 33 33 03 03 f3 30 ff 00
	>01e428	83e428	ff c0 00 00 00 00 00 00 33 00 03 00 30 c3 00 ff
	>01e438	83e438	c0 3f 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01e448	83e448	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 cf
	>01e458	83e458	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e468	83e468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e478	83e478	00 00 00 00 00 00 00 00 30 30 0f 0c 0f 00 3f 30
	>01e488	83e488	3f 00 00 00 00 00 00 00 30 00 0c 03 00 0c 30 0f
	>01e498	83e498	00 3f 00 00 00 00 00 00 03 03 f3 33 f3 00 ff 00
	>01e4a8	83e4a8	ff c0 00 00 00 00 00 00 03 00 33 c0 00 f3 00 ff
	>01e4b8	83e4b8	c0 3f 00 00 00 00 00 00 ff 03 ff 00 ff 00 ff 00
	>01e4c8	83e4c8	ff c3 00 00 00 00 00 00 03 fc 00 ff 00 ff 00 cf
	>01e4d8	83e4d8	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4e8	83e4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4f8	83e4f8	00 00 00 00 00 00 00 00 0f 0c 0f 00 3f 30 3f 00
	>01e508	83e508	3f 00 00 00 00 00 00 00 0c 03 00 0c 30 0f 00 3f
	>01e518	83e518	00 3f 00 00 00 00 00 00 f3 33 f3 03 ff 0c ff c0
	>01e528	83e528	ff 00 00 00 00 00 00 00 33 c0 03 f0 0c f3 c0 3f
	>01e538	83e538	00 ff 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e548	83e548	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 f3
	>01e558	83e558	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e568	83e568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e578	83e578	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e588	83e588	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 cf
	>01e598	83e598	c3 3c 00 00 00 00 00 00 cf cc cf c0 ff 30 ff 03
	>01e5a8	83e5a8	ff 00 00 00 00 00 00 00 cc 03 c0 0c 30 cf 03 fc
	>01e5b8	83e5b8	00 ff 00 00 00 00 00 00 f0 30 f0 00 fc 0c fc 00
	>01e5c8	83e5c8	fc 00 00 00 00 00 00 00 30 c0 00 f0 0c f0 00 fc
	>01e5d8	83e5d8	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5e8	83e5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5f8	83e5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e608	83e608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e618	83e618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e628	83e628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e638	83e638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e648	83e648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e658	83e658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e668	83e668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e678	83e678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e688	83e688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e698	83e698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6a8	83e6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6b8	83e6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6c8	83e6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6d8	83e6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6e8	83e6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6f8	83e6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e708	83e708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e718	83e718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e728	83e728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e738	83e738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e748	83e748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e758	83e758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e768	83e768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e778	83e778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e788	83e788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e798	83e798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7a8	83e7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7b8	83e7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7c8	83e7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7d8	83e7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7e8	83e7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7f8	83e7f8	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e808	83e808	ff 00 ff 30 ff 3f ff c0 0c f0 00 ff 00 ff 00 ff
	>01e818	83e818	00 ff 30 cf 3f c0 c0 3f 00 00 c0 c0 f0 30 f0 00
	>01e828	83e828	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e838	83e838	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e848	83e848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e858	83e858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e868	83e868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e878	83e878	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e888	83e888	ff 00 ff 0c ff 0f ff f0 0c f0 00 ff 00 ff 00 ff
	>01e898	83e898	00 ff 0c f3 0f f0 f0 0f 00 00 c0 c0 f0 30 f0 00
	>01e8a8	83e8a8	fc 0c fc 0c fc c0 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e8b8	83e8b8	0c f0 0c f0 c0 3c 0c f0 00 00 00 00 00 00 00 00
	>01e8c8	83e8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8d8	83e8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8e8	83e8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8f8	83e8f8	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e908	83e908	3f 30 3f 30 0f 00 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e918	83e918	30 0f 30 0f 00 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e928	83e928	0f 00 0f 00 cf c0 cf c0 30 cf 00 ff cc 33 c0 0f
	>01e938	83e938	00 0c 00 0f c0 0f c0 0f ff 00 ff 00 ff 03 fc 0c
	>01e948	83e948	f0 00 f0 30 f0 30 cc 0c 00 ff 00 ff 03 fc 0c f0
	>01e958	83e958	00 f0 30 c0 30 c0 0c c0 00 00 00 00 00 00 00 00
	>01e968	83e968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e978	83e978	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e988	83e988	3f 00 3f 30 3f 30 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e998	83e998	00 3f 30 0f 30 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e9a8	83e9a8	0f 00 0f 00 cf c0 cf 00 30 cf 00 ff cc 33 c0 0f
	>01e9b8	83e9b8	00 0c 00 0f c0 0f 00 cf ff 00 ff 00 ff 03 fc 0c
	>01e9c8	83e9c8	f0 00 f3 03 f3 33 f3 33 00 ff 00 ff 03 fc 0c f0
	>01e9d8	83e9d8	00 f0 03 f0 33 c0 33 c0 00 00 00 00 00 00 00 00
	>01e9e8	83e9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e9f8	83e9f8	00 00 00 00 00 00 00 00 ff 00 ff 00 f3 00 c3 00
	>01ea08	83ea08	00 00 c3 c3 ff 3f ff 00 00 c3 00 00 00 00 00 00
	>01ea18	83ea18	00 00 c3 00 3f c0 00 ff fc 00 fc c0 fc cc fc c0
	>01ea28	83ea28	fc cc fc cc f0 00 f3 33 00 fc c0 3c cc 30 c0 3c
	>01ea38	83ea38	cc 30 cc 30 00 f0 33 c0 00 00 00 00 00 00 00 00
	>01ea48	83ea48	00 00 00 00 f0 f0 00 00 00 00 00 00 00 00 00 00
	>01ea58	83ea58	00 00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00
	>01ea68	83ea68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ea78	83ea78	00 00 00 00 00 00 00 00 ff 00 ff 00 fc 00 f0 00
	>01ea88	83ea88	00 00 f0 f0 ff 03 ff 00 00 f0 00 00 00 00 00 00
	>01ea98	83ea98	00 00 f0 00 03 3c 00 ff fc 00 fc 30 fc 3c fc 30
	>01eaa8	83eaa8	3c 3c fc fc f0 c0 f3 33 00 fc 30 0c 3c 00 30 0c
	>01eab8	83eab8	3c 00 fc 00 c0 30 33 c0 00 00 00 00 00 00 00 00
	>01eac8	83eac8	00 00 00 00 00 00 c0 c0 00 00 00 00 00 00 00 00
	>01ead8	83ead8	00 00 00 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>01eae8	83eae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eaf8	83eaf8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 03 00 33 30
	>01eb08	83eb08	c3 c0 03 00 0f 0c cf cc 0c 03 0c 03 00 03 30 03
	>01eb18	83eb18	c0 03 00 03 0c 03 cc 03 cf 0c cf 0c c3 00 c3 00
	>01eb28	83eb28	f3 33 c0 00 cc cc 0c 0c 0c c3 0c c3 00 c3 00 c3
	>01eb38	83eb38	33 c0 00 c0 cc 00 0c 00 c0 00 f0 30 f0 30 f0 00
	>01eb48	83eb48	f0 00 fc 0c fc cc 3c 00 00 c0 30 c0 30 c0 00 f0
	>01eb58	83eb58	00 f0 0c f0 cc 30 00 3c 00 00 00 00 00 00 00 00
	>01eb68	83eb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eb78	83eb78	00 00 00 00 00 00 00 00 0f 00 0f 0c 03 00 33 30
	>01eb88	83eb88	33 30 0f 0c 0f 00 cf c0 00 0f 0c 03 00 03 30 03
	>01eb98	83eb98	30 03 0c 03 00 0f c0 0f cf 00 cf 0c cf 0c c3 00
	>01eba8	83eba8	c3 c0 c3 c3 33 33 30 30 00 cf 0c c3 0c c3 00 c3
	>01ebb8	83ebb8	c0 03 c3 00 33 00 30 00 c3 03 cc 0c cc 0c cc 0c
	>01ebc8	83ebc8	c3 03 c0 00 c0 00 c0 00 03 c0 0c c0 0c c0 0c c0
	>01ebd8	83ebd8	03 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01ebe8	83ebe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ebf8	83ebf8	00 00 00 00 00 00 00 00 ff c0 ff 00 ff 00 ff 00
	>01ec08	83ec08	ff c3 00 00 00 00 00 00 c0 3f 00 ff 00 ff 00 cf
	>01ec18	83ec18	c3 3c 00 00 00 00 00 00 c0 c0 cf cc cf 00 ff 00
	>01ec28	83ec28	ff 03 00 00 00 00 00 00 c0 00 cc 03 00 cc 00 ff
	>01ec38	83ec38	03 fc 00 00 00 00 00 00 0c 0c f0 30 f0 00 fc 0c
	>01ec48	83ec48	fc 00 00 00 00 00 00 00 0c 00 30 c0 00 f0 0c f0
	>01ec58	83ec58	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec68	83ec68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec78	83ec78	00 00 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01ec88	83ec88	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 f3
	>01ec98	83ec98	c3 3c 00 00 00 00 00 00 cc cc c0 c0 cf 0c ff 00
	>01eca8	83eca8	ff 03 00 00 00 00 00 00 cc 00 c0 00 0c c3 00 ff
	>01ecb8	83ecb8	03 fc 00 00 00 00 00 00 30 30 00 00 f0 30 f0 00
	>01ecc8	83ecc8	fc 0c 00 00 00 00 00 00 30 00 00 00 30 c0 00 30
	>01ecd8	83ecd8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ece8	83ece8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ecf8	83ecf8	00 00 00 00 00 00 00 00 cf 00 ff c3 3c 3c 00 00
	>01ed08	83ed08	00 00 00 00 00 00 00 00 00 cf c3 3c 3c 00 00 00
	>01ed18	83ed18	00 00 00 00 00 00 00 00 0c 0c 0c 0c 30 30 00 00
	>01ed28	83ed28	00 00 00 00 00 00 00 00 0c 00 0c 00 30 00 00 00
	>01ed38	83ed38	00 00 00 00 00 00 00 00 3f 33 0f 03 0f 03 0f 03
	>01ed48	83ed48	3c 0c 00 00 00 00 00 00 33 0c 03 0c 03 0c 03 0c
	>01ed58	83ed58	0c 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed68	83ed68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed78	83ed78	00 00 00 00 00 00 00 00 0f 03 3c 30 3c 0c 30 00
	>01ed88	83ed88	30 30 00 00 00 00 00 00 03 0c 30 0c 0c 30 00 30
	>01ed98	83ed98	30 00 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01eda8	83eda8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01edb8	83edb8	00 00 00 00 00 00 00 00 f0 30 f0 30 f0 c0 3c 0c
	>01edc8	83edc8	3f 30 00 00 00 00 00 00 30 c0 30 c0 c0 30 0c 30
	>01edd8	83edd8	30 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ede8	83ede8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01edf8	83edf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee08	83ee08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee18	83ee18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee28	83ee28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee38	83ee38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee48	83ee48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee58	83ee58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee68	83ee68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee78	83ee78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee88	83ee88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee98	83ee98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eea8	83eea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eeb8	83eeb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eec8	83eec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eed8	83eed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eee8	83eee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eef8	83eef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef08	83ef08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef18	83ef18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef28	83ef28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef38	83ef38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef48	83ef48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef58	83ef58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef68	83ef68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef78	83ef78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef88	83ef88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef98	83ef98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efa8	83efa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efb8	83efb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efc8	83efc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efd8	83efd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efe8	83efe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eff8	83eff8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f008	83f008	0f 00 cf c0 cf cc cf cc 00 ff 00 ff c0 3f 30 0c
	>01f018	83f018	00 0f c0 0f cc 03 cc 03 ff 0c ff 00 ff 33 f3 03
	>01f028	83f028	f0 00 f0 00 f3 03 f3 00 0c f3 00 ff 33 cc 03 f0
	>01f038	83f038	00 f0 00 f0 03 f0 00 f3 fc 00 fc 00 fc 00 fc 00
	>01f048	83f048	fc 00 fc 0c fc 0c f0 00 00 fc 00 fc 00 fc 00 fc
	>01f058	83f058	00 fc 0c f0 0c f0 00 f0 00 00 00 00 00 00 00 00
	>01f068	83f068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f078	83f078	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f088	83f088	0f 00 0f 0c 0f 0c 33 30 00 ff 00 ff c0 3c 30 0f
	>01f098	83f098	00 0f 0c 03 0c 03 30 03 ff 0c ff 00 ff 33 f3 03
	>01f0a8	83f0a8	f0 00 f0 00 f3 03 f3 03 0c f3 00 ff 33 cc 03 f0
	>01f0b8	83f0b8	00 f0 00 f0 03 f0 03 f0 fc 00 fc 00 fc 00 fc 00
	>01f0c8	83f0c8	fc 0c fc 0c f0 00 f0 00 00 fc 00 fc 00 fc 00 fc
	>01f0d8	83f0d8	0c f0 0c f0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01f0e8	83f0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f0f8	83f0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f108	83f108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f118	83f118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f128	83f128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f138	83f138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f148	83f148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f158	83f158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f168	83f168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f178	83f178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f188	83f188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f198	83f198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1a8	83f1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1b8	83f1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1c8	83f1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1d8	83f1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1e8	83f1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1f8	83f1f8	00 00 00 00 00 00 00 00 c3 c0 33 30 33 30 33 30
	>01f208	83f208	c3 c0 03 00 03 00 03 00 c0 03 30 03 30 03 30 03
	>01f218	83f218	c0 03 00 03 00 03 00 03 f3 00 f3 30 f3 30 c3 00
	>01f228	83f228	c3 03 c3 c3 cc cc 0c 0c 00 f3 30 c3 30 c3 00 c3
	>01f238	83f238	03 c0 c3 00 cc 00 0c 00 f0 00 f0 30 c0 00 cc 0c
	>01f248	83f248	cc 0c f0 30 f0 00 f3 03 00 f0 30 c0 00 c0 0c c0
	>01f258	83f258	0c c0 30 c0 00 f0 03 f0 00 00 00 00 00 00 00 00
	>01f268	83f268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f278	83f278	00 00 00 00 00 00 00 00 33 30 0f 0c cf cc 0f 00
	>01f288	83f288	0f 00 3f 30 3f 33 3c 00 30 03 0c 03 cc 03 00 0f
	>01f298	83f298	00 0f 30 0f 33 0c 00 3c f3 30 f3 30 c3 00 cf 0c
	>01f2a8	83f2a8	c3 c0 33 30 33 33 30 30 30 c3 30 c3 00 c3 0c c3
	>01f2b8	83f2b8	c0 03 30 03 33 00 30 00 f0 30 f0 30 c0 00 cc 0c
	>01f2c8	83f2c8	c3 03 c0 00 f0 30 f3 33 30 c0 30 c0 00 c0 0c c0
	>01f2d8	83f2d8	03 c0 00 c0 30 c0 33 c0 00 00 00 00 00 00 00 00
	>01f2e8	83f2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f2f8	83f2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f308	83f308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f318	83f318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f328	83f328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f338	83f338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f348	83f348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f358	83f358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f368	83f368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f378	83f378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f388	83f388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f398	83f398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3a8	83f3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3b8	83f3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3c8	83f3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3d8	83f3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3e8	83f3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3f8	83f3f8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 0f 03 3c 30
	>01f408	83f408	fc 0c 00 00 00 00 00 00 0c 03 0c 03 03 0c 30 0c
	>01f418	83f418	0c f0 00 00 00 00 00 00 0c 0c 30 30 00 00 00 00
	>01f428	83f428	00 00 00 00 00 00 00 00 0c 00 30 00 00 00 00 00
	>01f438	83f438	00 00 00 00 00 00 00 00 f0 c0 3c 0c 3c 30 0c 00
	>01f448	83f448	0c 0c 00 00 00 00 00 00 c0 30 0c 30 30 0c 00 0c
	>01f458	83f458	0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f468	83f468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f478	83f478	00 00 00 00 00 00 00 00 fc cc f0 c0 f0 c0 f0 c0
	>01f488	83f488	3c 30 00 00 00 00 00 00 cc 30 c0 30 c0 30 c0 30
	>01f498	83f498	30 0c 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01f4a8	83f4a8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01f4b8	83f4b8	00 00 00 00 00 00 00 00 f3 00 ff c3 3c 3c 00 00
	>01f4c8	83f4c8	00 00 00 00 00 00 00 00 00 f3 c3 3c 3c 00 00 00
	>01f4d8	83f4d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4e8	83f4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4f8	83f4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f508	83f508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f518	83f518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f528	83f528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f538	83f538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f548	83f548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f558	83f558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f568	83f568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f578	83f578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f588	83f588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f598	83f598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5a8	83f5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5b8	83f5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5c8	83f5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5d8	83f5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5e8	83f5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5f8	83f5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f608	83f608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f618	83f618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f628	83f628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f638	83f638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f648	83f648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f658	83f658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f668	83f668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f678	83f678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f688	83f688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f698	83f698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6a8	83f6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6b8	83f6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6c8	83f6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6d8	83f6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6e8	83f6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6f8	83f6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f708	83f708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f718	83f718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f728	83f728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f738	83f738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f748	83f748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f758	83f758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f768	83f768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f778	83f778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f788	83f788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f798	83f798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7a8	83f7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7b8	83f7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7c8	83f7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7d8	83f7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7e8	83f7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7f8	83f7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f808	83f808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f818	83f818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f828	83f828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f838	83f838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f848	83f848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f858	83f858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f868	83f868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f878	83f878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f888	83f888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f898	83f898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8a8	83f8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8b8	83f8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8c8	83f8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8d8	83f8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8e8	83f8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8f8	83f8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f908	83f908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f918	83f918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f928	83f928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f938	83f938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f948	83f948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f958	83f958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f968	83f968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f978	83f978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01f988	83f988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01f998	83f998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01f9a8	83f9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01f9b8	83f9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01f9c8	83f9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9d8	83f9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9e8	83f9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9f8	83f9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa08	83fa08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa18	83fa18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa28	83fa28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa38	83fa38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa48	83fa48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa58	83fa58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa68	83fa68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa78	83fa78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa88	83fa88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa98	83fa98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faa8	83faa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fab8	83fab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fac8	83fac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fad8	83fad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fae8	83fae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faf8	83faf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb08	83fb08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb18	83fb18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb28	83fb28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb38	83fb38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb48	83fb48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb58	83fb58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb68	83fb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb78	83fb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01fb88	83fb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01fb98	83fb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01fba8	83fba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01fbb8	83fbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01fbc8	83fbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbd8	83fbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbe8	83fbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbf8	83fbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc08	83fc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc18	83fc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc28	83fc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc38	83fc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc48	83fc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc58	83fc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc68	83fc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc78	83fc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc88	83fc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc98	83fc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fca8	83fca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcb8	83fcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcc8	83fcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcd8	83fcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fce8	83fce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcf8	83fcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd08	83fd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd18	83fd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd28	83fd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd38	83fd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd48	83fd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd58	83fd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd68	83fd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd78	83fd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd88	83fd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd98	83fd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fda8	83fda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdb8	83fdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdc8	83fdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdd8	83fdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fde8	83fde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdf8	83fdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe08	83fe08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe18	83fe18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe28	83fe28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe38	83fe38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe48	83fe48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe58	83fe58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe68	83fe68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe78	83fe78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe88	83fe88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe98	83fe98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fea8	83fea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01feb8	83feb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fec8	83fec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fed8	83fed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fee8	83fee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fef8	83fef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff08	83ff08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff18	83ff18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff28	83ff28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff38	83ff38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff48	83ff48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff58	83ff58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff68	83ff68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff78	83ff78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff88	83ff88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff98	83ff98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffa8	83ffa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffb8	83ffb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffc8	83ffc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffd8	83ffd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffe8	83ffe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fff8	83fff8	00 00 00 00 00 00 00 00
202							.send


205							.section sSharedWRAM
206							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>0037						mINIDISP  .word ?
3	>0039						mOBSEL    .word ?
4	>003b						mBGMODE   .word ?
5	>003d						mMOSIAC   .word ?
6	>003f						mBG1SC    .word ?
7	>0041						mBG2SC    .word ?
8	>0043						mBG3SC    .word ?
9	>0045						mBG4SC    .word ?
10	>0047						mBG12NBA  .word ?
11	>0049						mBG23NBA  .word ?
12	.004b						mBG1HOFS  .dunion HLWord
210:1	>004b							.word ?
211								.struct
212	>004b								lo .byte ?
213	>004c								hi .byte ?
214								.ends
215							.endu
13:5	.004d						mBG1VOFS  .dunion HLWord
210:1	>004d							.word ?
211								.struct
212	>004d								lo .byte ?
213	>004e								hi .byte ?
214								.ends
215							.endu
14:5	.004f						mBG2HOFS  .dunion HLWord
210:1	>004f							.word ?
211								.struct
212	>004f								lo .byte ?
213	>0050								hi .byte ?
214								.ends
215							.endu
15:5	.0051						mBG2VOFS  .dunion HLWord
210:1	>0051							.word ?
211								.struct
212	>0051								lo .byte ?
213	>0052								hi .byte ?
214								.ends
215							.endu
16:5	.0053						mBG3HOFS  .dunion HLWord
210:1	>0053							.word ?
211								.struct
212	>0053								lo .byte ?
213	>0054								hi .byte ?
214								.ends
215							.endu
17:5	.0055						mBG3VOFS  .dunion HLWord
210:1	>0055							.word ?
211								.struct
212	>0055								lo .byte ?
213	>0056								hi .byte ?
214								.ends
215							.endu
18:5	.0057						mBG4HOFS  .dunion HLWord
210:1	>0057							.word ?
211								.struct
212	>0057								lo .byte ?
213	>0058								hi .byte ?
214								.ends
215							.endu
19:5	.0059						mBG4VOFS  .dunion HLWord
210:1	>0059							.word ?
211								.struct
212	>0059								lo .byte ?
213	>005a								hi .byte ?
214								.ends
215							.endu
20:5	>005b						mW12SEL   .word ?
21	>005d						mW34SEL   .word ?
22	>005f						mWOBJSEL  .word ?
23	>0061						mWH0      .word ?
24	>0063						mWH1      .word ?
25	>0065						mWH2      .word ?
26	>0067						mWH3      .word ?
27	>0069						mWBGLOG   .word ?
28	>006b						mOBJLOG   .word ?
29	>006d						mTM       .word ?
30	>006f						mTS       .word ?
31	>0071						mTMW      .word ?
32	>0073						mTSW      .word ?
33	>0075						mCOLDATA  .word ?
34	>0077						mSETINI   .word ?
35	>0079						mNMITIMEN .word ?

37	>007b						joyLeft	 		.byte ?
38	>007c						joyRight 		.byte ?
39	>007d						joyUp	 			.byte ?
40	>007e						joyDown	 		.byte ?
41	>007f						joyFire	 		.byte ?
42	>0080						oldJoyLeft		.byte ?
43	>0081						oldJoyRight 	.byte ?
44	>0082						oldJoyUp			.byte ?
45	>0083						oldJoyDown		.byte ?
46	>0084						oldJoyFire		.byte ?
47	>0085						joyUpStart  	.byte ?
48	>0086						joyUpStop		.byte ?
49	>0087						joyFireEvent 	.byte ?
50	.0088						GameData 		.dstruct sGameData
2:3	>0088						lives 		.byte ?					; player lives
3	>0089						flowers 		.byte ?					; current flowers
4	>008a						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>0090						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>0096						currLevel 	.byte ?					; current level 0 bassed
7	>0097						exitOpenNZ 	.byte ?					; have all keys been collected
8	>0098						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.0099						LevelData 		.dstruct sLevelData
12:3	>0099						numKeysLeft			.byte ?			; number of keys left to collect
13	>009a						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>009b						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>009c						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>009e						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>009f						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>00a0						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>00a1						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.00a2						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>00a2						state 					.byte ?				; major FSM value
35	>00a3						minorState 				.byte ?				; sub FSM in that FSM value

37	>00a4						deadNZ					.byte ?
38	>00a5						hasShieldNZ				.byte ?
39	.00a6						shieldTimer				.dunion HLWord
210:1	>00a6							.word ?
211								.struct
212	>00a6								lo .byte ?
213	>00a7								hi .byte ?
214								.ends
215							.endu
40:3	>00a8						canFloatNZ 				.byte ?				; AKA has collected spring
41	>00a9						floatTimer 				.byte ?

43	>00aa						onGroundNZ 				.byte ?
44	>00ab						hasJumpedNZ				.byte ?
45	>00ac						isFallingNZ				.byte ?
46	>00ad						facingRight 			.byte ?				; this is 0 or 1 only
47	>00ae						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>00af						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>00b0						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>00b1						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>00b2						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.00b3						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>00b3							.word ?
211								.struct
212	>00b3								lo .byte ?
213	>00b4								hi .byte ?
214								.ends
215							.endu
54:3	>00b5						currAnim 				.byte ?				; the players current animation number
55	>00b6						frameOffset 			.byte ?				; the current frame in the animation

57	>00b7						bulletActive 			.byte ?				; this is 0 or 1 only
58	>00b8						bulletUD 				.byte ?				; this is 0 or 1 only
59	>00b9						bulletLR 				.byte ?				; this is 0 or 1 only
60	>00ba						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>00bb						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>00bc						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>00bd						flashColour				.byte ?				; index into the flash colour LUT
66	>00be						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$00bf						TICK_DOWN_START = *
54	.00bf						TickDowns 		.dstruct sTimerTickDowns
23:3	>00bf						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>00c0						playerAnim 					.byte ?	; players animation timer
25	>00c1						doorAnim						.byte ?	; frames till next exit door animation
26	>00c2						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>00c3						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>00c4						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>00c5						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$00cd						TICK_DOWN_END = *
56	.00cd						EntityData 		.dstruct sEntityData
70:3	>00cd						number			 .byte ?									; how many entities are actually in this level
71	>00ce						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>00e7						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>0100						active			 .fill kEntity.maxEntities 		; if it is still active
74	>0119						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0132						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>014b						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0164						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>017d						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>0196						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>01af						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>01c8						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>01e1						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>01fa						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0213						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>022c						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0245						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>025e						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>025f						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>0267						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>0268						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.0269						PasswordTemp .block
58	>0269							lives			.byte ?
59	>026a							flowers		.byte ?
60	>026b							score			.byte ?,?,?,?,?,?
61	>0271							high			.byte ?,?,?,?,?,?
62	>0277							currLevel	.byte ?
63							.bend ;PasswordTemp
64	>0278						ActivePassword 						.fill 12
65	>0284						PasswordEntryIndex 					.byte ?
66	>0285						ValidPassword 							.byte ?
67	>0286						PasswordInfiLives 					.byte ?
68	>0287						PasswordRedBullets 					.byte ?
69	>0288						PasswordHaveSpring 					.byte ?
70	>0289						PasswordLevelSkip 					.byte ?
71	.028a						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	.028a						xDeltaCheck 	.dunion HLWord ; pixels
210:1	>028a							.word ?
211								.struct
212	>028a								lo .byte ?
213	>028b								hi .byte ?
214								.ends
215							.endu
95:3	.028c						yDeltaCheck 	.dunion HLWord	; pixels
210:1	>028c							.word ?
211								.struct
212	>028c								lo .byte ?
213	>028d								hi .byte ?
214								.ends
215							.endu
96:3	.028e						xDeltaBackup 	.dunion HLWord	; pixels
210:1	>028e							.word ?
211								.struct
212	>028e								lo .byte ?
213	>028f								hi .byte ?
214								.ends
215							.endu
97:3	.0290						yDeltaBackup 	.dunion HLWord	; pixels
210:1	>0290							.word ?
211								.struct
212	>0290								lo .byte ?
213	>0291								hi .byte ?
214								.ends
215							.endu
98:3							.ends
72:5	>0292						bulletFrame 							.byte ?
73	>0293						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>0294						tileMapTemp .fill 240
76	.0384						mplexBuffer     .dstruct sMplexBuffer
101:3	>0384						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>03a5						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>03c6						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>03e7						PasswordRAMCache .fill 12

79	>03f3						OAMMirror .fill 256*2
80	>05f3						OAMMirrorHigh .fill 32


:1	;******  Return to file: QWAKSNES.asm

207							.send ;sSharedWRAM

209	.0000						HLWord .union
210	>0000							.word ?
211								.struct
212	>0000								lo .byte ?
213	>0001								hi .byte ?
214								.ends
215							.endu

217	.0000						HLBLong .union
218	>0000							.long ?
219								.struct
220	>0000								lo	.byte ?
221	>0001								hi	.byte ?
222	>0002								bank .byte ?
223								.ends
224								.struct
225	>0000								loWord .word ?
226	>0002								dummy1 .byte ?
227								.ends
228								.struct
229	>0000								dummy2 .byte ?
230	>0001								hiWord .word ?
231								.ends
232							.endu

234							A8 .macro
236							.endm

238							A16 .macro
240							.endm

242							A16Clear .macro
244							.endm

246							XY8 .macro
248							.endm

250							XY16 .macro
252							.endm

254							AXY8 .macro
256							.endm

258							AXY16 .macro
260							.endm


;******  End of listing
