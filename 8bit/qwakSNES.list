
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass.exe -a -b -X -o qwakSNES.sfc --no-caret-diag --dump-labels -l qwakSNES.tass -L qwakSNES.list --verbose-list --line-numbers QWAKSNES.asm
; Fri Jan 14 02:00:28 2022

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: QWAKSNES.asm

1							; LoROM FAST SNES Master
2							.cpu "65816"

4							; setup the ROM MAP
5							* = $000000			; FILE OFFSET
6							.logical $808000	; SNES ADDRESS
7							.dsection sBank80
8							.cerror * > $80FFB0, "Bank 80 overflow by ", *-$80FFB0
9							* = $80FFB0
10							.dsection sHeader
11							*= $80FFE4
12							.dsection s65816Vectors
13							*= $80FFF4
14							.dsection s6502Vectors
15							.here			  ; back to file


18							* = $008000			; FILE OFFSET
19							.logical $818000  ; SNES ADDRESS
20							.dsection sBank81
21							.here
22							.cerror * > $10000, "Bank 81 overflow by ", *-$10000

24							* = $010000			; FILE OFFSET
25							.logical $828000  ; SNES ADDRESS
26							.dsection sBank82
27							.here
28							.cerror * > $18000, "Bank 82 overflow by ", *-$18000

30							* = $018000			; FILE OFFSET
31							.logical $838000	; SNES ADDRESS
32							.dsection sBank83
33							.here
34							.cerror * > $020000, "Bank 83 overflow by ", *-$20000

36							; .. add more banks here ..

38							.if * < $040000
39								* = $040000-1	; make the file 128K
40	>03ffff		00					.byte 0
41							.endif


44							; *** virtual address ***
45							; these exist to the code but are not part of the output file
46							*=$0000
47							.dsection sDP
48							.cerror * > $100, "Direct Page overflow by ", *-$100
49	.0036						gSharedRamStart
50							.dsection sSharedWRAM
51							.cerror * > $1FC0, "Shared WRAM overflow by ", *-$1FC0
52							*=$7e2000
53							.dsection sLoWRAM
54							.cerror * > $7F0000, "Lo WRAM overflow by ", *-$7F0000
55							*=$7f0000
56							.dsection sHiWRAM
57							.cerror * > $800000, "High WRAM overflow by ", *-$800000

59							.include "SNESDef.asm"

:2	;******  Processing file: SNESDef.asm

1	=0						kSPri_0 = 0<<4
2	=16						kSPri_1 = 1<<4
3	=32						kSPri_2 = 2<<4
4	=48						kSPri_3 = 3<<4

6	=0						kSPal_0 = 0<<1
7	=2						kSPal_1 = 1<<1
8	=4						kSPal_2 = 2<<1
9	=6						kSPal_3 = 3<<1
10	=8						kSPal_4 = 4<<1
11	=10						kSPal_5 = 5<<1
12	=12						kSPal_6 = 6<<1
13	=14						kSPal_7 = 7<<1

15	=64						kSFlipX = 64
16	=128						kSFlipY = 128

18	=0						kBaseSize_32x32 = 0
19	=1						kBaseSize_64x32 = 1
20	=2						kBaseSize_32x64 = 2
21	=3						kBaseSize_64x64 = 3

23							;takes the screen base in Word Offset and ScreenLayout in kBaseSize_XXxXX
24							fBGBaseSize .function base,screenLayout
25							.endf ((base/1024)<<2) | screenLayout

27							;takes the 4 screen character base addresses in Word Offset
28							fBGCharAddress .function bg1,bg2,bg3,bg4
29							.endf (bg4/4096)<<12 | (bg3/4096)<<8 | (bg2/4096)<<4 | (bg1/4096)

31							; converts 24bit RGB value into a SNES 16bit word
32							fRGBToSNES .function r,g,b
33							.endf (b&$f8)<<7 | (g&$f8)<<2 | (r&$f8)>>3

35							; this wil convert a sprite X,Y index for 16x16 sprites on the sprite "map" to a tilenum + attributes word
36							; it handles multiple sprite "banks" as well
37							fSprDef .function gridX,gridY,flags
43							.endf (gridX*2+_y*32)|flags<<8

:1	;******  Return to file: QWAKSNES.asm

60	.7f0000						kEntity .block
61	=$00							heli = $00
62	=$01							spring = $01
63	=$02							worm = $02
64	=$03							bat = $03
65	=$04							ghost = $04
66	=$05							spider = $05
67	=$06							fish = $06
68	=$07							circler = $07
69	=$08							bear = $08
70	=$09							octopuss = $09
71	=$0a							bearBody = $0A
72	=$0b							octopussBody = $0B
73	=$0c							bubble = $0C
74	=$0d							bossDummy = $0D
75	=25							maxEntities = 25
76	=8							maxBubbleMakers = 8
77	=2							maxNumBubblesPerMaker = 2
78	=255							removedFromBullet = 255
79	=254							deadFromRedBullet = 254
80							.bend

82	.7f0000						mplex .block
83	=$1f							kMaxSpr = $1f
84							.bend

86							.include "qwak_structs.asm"

:3	;******  Processing file: qwak_structs.asm

1	.0000						sGameData .struct
2	>0000						lives 		.byte ?					; player lives
3	>0001						flowers 		.byte ?					; current flowers
4	>0002						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>0008						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>000e						currLevel 	.byte ?					; current level 0 bassed
7	>000f						exitOpenNZ 	.byte ?					; have all keys been collected
8	>0010						musicMode 	.byte ?					; not actually used, yet
9							.ends

11	.0000						sLevelData .struct
12	>0000						numKeysLeft			.byte ?			; number of keys left to collect
13	>0001						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>0002						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>0003						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>0005						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>0006						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>0007						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>0008						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends

22	.0000						sTimerTickDowns .struct
23	>0000						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>0001						playerAnim 					.byte ?	; players animation timer
25	>0002						doorAnim						.byte ?	; frames till next exit door animation
26	>0003						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>0004						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>0005						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>0006						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends

32	.0000						sPlayerData .struct
33							; state info
34	>0000						state 					.byte ?				; major FSM value
35	>0001						minorState 				.byte ?				; sub FSM in that FSM value

37	>0002						deadNZ					.byte ?
38	>0003						hasShieldNZ				.byte ?
39	.0004						shieldTimer				.dunion HLWord
210:1	>0004							.word ?
211								.struct
212	>0004								lo .byte ?
213	>0005								hi .byte ?
214								.ends
215							.endu
40:3	>0006						canFloatNZ 				.byte ?				; AKA has collected spring
41	>0007						floatTimer 				.byte ?

43	>0008						onGroundNZ 				.byte ?
44	>0009						hasJumpedNZ				.byte ?
45	>000a						isFallingNZ				.byte ?
46	>000b						facingRight 			.byte ?				; this is 0 or 1 only
47	>000c						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>000d						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>000e						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>000f						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>0010						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.0011						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>0011							.word ?
211								.struct
212	>0011								lo .byte ?
213	>0012								hi .byte ?
214								.ends
215							.endu
54:3	>0013						currAnim 				.byte ?				; the players current animation number
55	>0014						frameOffset 			.byte ?				; the current frame in the animation

57	>0015						bulletActive 			.byte ?				; this is 0 or 1 only
58	>0016						bulletUD 				.byte ?				; this is 0 or 1 only
59	>0017						bulletLR 				.byte ?				; this is 0 or 1 only
60	>0018						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>0019						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>001a						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>001b						flashColour				.byte ?				; index into the flash colour LUT
66	>001c						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends

69	.0000						sEntityData .struct
70	>0000						number			 .byte ?									; how many entities are actually in this level
71	>0001						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>001a						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>0033						active			 .fill kEntity.maxEntities 		; if it is still active
74	>004c						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0065						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>007e						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0097						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>00b0						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>00c9						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>00e2						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>00fb						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>0114						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>012d						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0146						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>015f						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0178						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>0191						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>0192						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>019a						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>019b						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends

93	.0000						sCSTCCParams .struct
94	>0000						xDeltaCheck 	.byte ? 		; pixels
95	>0001						yDeltaCheck 	.byte ? 		; pixels
96	>0002						xDeltaBackup 	.byte ? 		; pixels
97	>0003						yDeltaBackup 	.byte ? 		; pixels
98							.ends

100	.0000						sMplexBuffer .struct
101	>0000						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>0020						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>0040						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends


:1	;******  Return to file: QWAKSNES.asm


88							.section sDP
89	.0000						EntityDataPointer	.dunion HLWord
210	>0000							.word ?
211								.struct
212	>0000								lo .byte ?
213	>0001								hi .byte ?
214								.ends
215							.endu
90	>0002						CurrentEntity		.byte ?
91	>0003						CollidedEntity		.byte ?
92	>0004						EntNum				.byte ?
93	>0005						CollisionResult	.byte ?
94	.0006						Pointer1				.dunion HLWord
210	>0006							.word ?
211								.struct
212	>0006								lo .byte ?
213	>0007								hi .byte ?
214								.ends
215							.endu
95	.0008						Pointer2				.dunion HLWord
210	>0008							.word ?
211								.struct
212	>0008								lo .byte ?
213	>0009								hi .byte ?
214								.ends
215							.endu
96	.000a						Pointer3				.dunion HLWord
210	>000a							.word ?
211								.struct
212	>000a								lo .byte ?
213	>000b								hi .byte ?
214								.ends
215							.endu
97	.000c						Pointer4				.dunion HLWord
210	>000c							.word ?
211								.struct
212	>000c								lo .byte ?
213	>000d								hi .byte ?
214								.ends
215							.endu
98	>000e						playerTempCol		.byte ?
99	>000f						ZPTemp				.byte ?
100	>0010						ZPTemp2				.byte ?
101	>0011						ZPTemp3				.byte ?
102	>0012						ZPTemp4				.byte ?
103	>0013						ZPTemp5				.byte ?
104	>0014						TempX					.byte ?
105	>0015						ActiveTileIndex	.byte ?
106	>0016						ActiveTile			.byte ?
107	>0017						TestingSprX1		.byte ?
108	>0018						TestingSprX2		.byte ?
109	>0019						TestingSprY1		.byte ?
110	>001a						TestingSprY2		.byte ?
111	.001b						GameStatePointer	.dunion HLWord
210	>001b							.word ?
211								.struct
212	>001b								lo .byte ?
213	>001c								hi .byte ?
214								.ends
215							.endu

113	>001d						CollideSpriteToCheck		.byte ?
114	>001e						CollideSpriteBoxIndex	.byte ?
115	>001f						CollideCharTLI				.byte ?
116	>0020						CollideCharTLC				.byte ?
117	>0021						CollideCharTRI				.byte ?
118	>0022						CollideCharTRC				.byte ?
119	>0023						CollideCharBLI				.byte ?
120	>0024						CollideCharBLC				.byte ?
121	>0025						CollideCharBRI				.byte ?
122	>0026						CollideCharBRC				.byte ?
123	>0027						CollideInternalSprTLX	.byte ?  ; these 4 MUST be in the same order as below
124	>0028						CollideInternalSprBRX	.byte ?
125	>0029						CollideInternalSprTLY	.byte ?
126	>002a						CollideInternalSprBRY	.byte ?
127	>002b						CollideInternalTTLX		.byte ?
128	>002c						CollideInternalTBRX		.byte ?
129	>002d						CollideInternalTTLY		.byte ?
130	>002e						CollideInternalTBRY		.byte ?
131	>002f						DidClipX						.byte ?  ; this is if the add X with MSB function did clip the Y
132	>0030						HideScreen					.byte ?
133	.0031						ZPLong						.dunion HLBLong
218	>0031							.long ?
219								.struct
220	>0031								lo	.byte ?
221	>0032								hi	.byte ?
222	>0033								bank .byte ?
223								.ends
224								.struct
225	>0031								loWord .word ?
226	>0033								dummy1 .byte ?
227								.ends
228								.struct
229	>0031								dummy2 .byte ?
230	>0032								hiWord .word ?
231								.ends
232							.endu
134							.send

136							; *** instance headers and vectors
137							.enc "none"
138							.section sHeader
139	>7fb0	80ffb0	00 00					.word 0
140	>7fb2	80ffb2	d1 d7 c1 cb				.text "QWAK"
141	>7fb6	80ffb6	00 00 00 00 00 00 00			.fill 7,0
142	>7fbd	80ffbd	00					.byte 0 ; RAM
143	>7fbe	80ffbe	00					.byte 0 ; special version
144	>7fbf	80ffbf	00					.byte 0 ; cart type
145								;					 111111111112
146								;	  	 123456789012345678901
147	>7fc0	80ffc0	51 57 41 4b 20 53 4e 45			.text "qwak snes            "
	>7fc8	80ffc8	53 20 20 20 20 20 20 20 20 20 20 20 20
148							.cerror * != $80ffd5, "name is too short", *
149	>7fd5	80ffd5	30					.byte $30	; Mapping
150	>7fd6	80ffd6	00					.byte $00	; Rom
151	>7fd7	80ffd7	07					.byte $07	; 128K
152	>7fd8	80ffd8	00					.byte $00	; 0 SRAM
153	>7fd9	80ffd9	02					.byte $02	; PAL
154	>7fda	80ffda	33					.byte $33	; Version 3
155	>7fdb	80ffdb	00					.byte $00	; rom version 0
156	>7fdc	80ffdc	00 00					.word $0000 ; complement
157	>7fde	80ffde	00 00					.word $0000 ; CRC
158							.send ; sHeader

160							.section s65816Vectors
161							.block								; scope this so we don't get name clashes
162	>7fe4	80ffe4	a8 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
163	>7fe6	80ffe6	a8 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
164	>7fe8	80ffe8	a8 81				ABORT	.word <>Bank80.justRTI
165	>7fea	80ffea	51 81				NMI	.word <>Bank80.NMI
166	>7fec	80ffec	a8 81				RESET	.word <>Bank80.justRTI
167	>7fee	80ffee	a8 81				IRQ	.word <>Bank80.justRTI
168							.bend
169							.send ; s65816Vectors

171							.section s6502Vectors
172							.block								; scope this so we don't get name clashes
173	>7ff4	80fff4	a8 81				vCOP	.word <>Bank80.justRTI	; COP is a assembly mnemonic so add v
174	>7ff6	80fff6	a8 81				vBRK	.word <>Bank80.justRTI	; BRK is a assembly mnemonic so add v
175	>7ff8	80fff8	a8 81				ABORT	.word <>Bank80.justRTI
176	>7ffa	80fffa	a8 81				NMI	.word <>Bank80.justRTI
177	>7ffc	80fffc	00 80				RESET	.word <>Bank80.RESET
178	>7ffe	80fffe	a8 81				IRQ	.word <>Bank80.justRTI
179							.bend
180							.send ; s65816Vectors

182							; *** instance banks ***
183							.section sBank80
184	.0000	808000					Bank80 .binclude "Bank80.asm"

:4	;******  Processing file: Bank80.asm

1							; Bank 80
2							.virtual $800000+gSharedRamstart
3							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>800036						mINIDISP  .word ?
3	>800038						mOBSEL    .word ?
4	>80003a						mBGMODE   .word ?
5	>80003c						mMOSIAC   .word ?
6	>80003e						mBG1SC    .word ?
7	>800040						mBG2SC    .word ?
8	>800042						mBG3SC    .word ?
9	>800044						mBG4SC    .word ?
10	>800046						mBG12NBA  .word ?
11	>800048						mBG23NBA  .word ?
12	.80004a						mBG1HOFS  .dunion HLWord
210:1	>80004a							.word ?
211								.struct
212	>80004a								lo .byte ?
213	>80004b								hi .byte ?
214								.ends
215							.endu
13:5	.80004c						mBG1VOFS  .dunion HLWord
210:1	>80004c							.word ?
211								.struct
212	>80004c								lo .byte ?
213	>80004d								hi .byte ?
214								.ends
215							.endu
14:5	.80004e						mBG2HOFS  .dunion HLWord
210:1	>80004e							.word ?
211								.struct
212	>80004e								lo .byte ?
213	>80004f								hi .byte ?
214								.ends
215							.endu
15:5	.800050						mBG2VOFS  .dunion HLWord
210:1	>800050							.word ?
211								.struct
212	>800050								lo .byte ?
213	>800051								hi .byte ?
214								.ends
215							.endu
16:5	.800052						mBG3HOFS  .dunion HLWord
210:1	>800052							.word ?
211								.struct
212	>800052								lo .byte ?
213	>800053								hi .byte ?
214								.ends
215							.endu
17:5	.800054						mBG3VOFS  .dunion HLWord
210:1	>800054							.word ?
211								.struct
212	>800054								lo .byte ?
213	>800055								hi .byte ?
214								.ends
215							.endu
18:5	.800056						mBG4HOFS  .dunion HLWord
210:1	>800056							.word ?
211								.struct
212	>800056								lo .byte ?
213	>800057								hi .byte ?
214								.ends
215							.endu
19:5	.800058						mBG4VOFS  .dunion HLWord
210:1	>800058							.word ?
211								.struct
212	>800058								lo .byte ?
213	>800059								hi .byte ?
214								.ends
215							.endu
20:5	>80005a						mW12SEL   .word ?
21	>80005c						mW34SEL   .word ?
22	>80005e						mWOBJSEL  .word ?
23	>800060						mWH0      .word ?
24	>800062						mWH1      .word ?
25	>800064						mWH2      .word ?
26	>800066						mWH3      .word ?
27	>800068						mWBGLOG   .word ?
28	>80006a						mOBJLOG   .word ?
29	>80006c						mTM       .word ?
30	>80006e						mTS       .word ?
31	>800070						mTMW      .word ?
32	>800072						mTSW      .word ?
33	>800074						mCOLDATA  .word ?
34	>800076						mSETINI   .word ?
35	>800078						mNMITIMEN .word ?

37	>80007a						joyLeft	 		.byte ?
38	>80007b						joyRight 		.byte ?
39	>80007c						joyUp	 			.byte ?
40	>80007d						joyDown	 		.byte ?
41	>80007e						joyFire	 		.byte ?
42	>80007f						oldJoyLeft		.byte ?
43	>800080						oldJoyRight 	.byte ?
44	>800081						oldJoyUp			.byte ?
45	>800082						oldJoyDown		.byte ?
46	>800083						oldJoyFire		.byte ?
47	>800084						joyUpStart  	.byte ?
48	>800085						joyUpStop		.byte ?
49	>800086						joyFireEvent 	.byte ?
50	.800087						GameData 		.dstruct sGameData
2:3	>800087						lives 		.byte ?					; player lives
3	>800088						flowers 		.byte ?					; current flowers
4	>800089						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>80008f						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>800095						currLevel 	.byte ?					; current level 0 bassed
7	>800096						exitOpenNZ 	.byte ?					; have all keys been collected
8	>800097						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.800098						LevelData 		.dstruct sLevelData
12:3	>800098						numKeysLeft			.byte ?			; number of keys left to collect
13	>800099						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>80009a						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>80009b						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>80009d						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>80009e						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>80009f						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>8000a0						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.8000a1						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>8000a1						state 					.byte ?				; major FSM value
35	>8000a2						minorState 				.byte ?				; sub FSM in that FSM value

37	>8000a3						deadNZ					.byte ?
38	>8000a4						hasShieldNZ				.byte ?
39	.8000a5						shieldTimer				.dunion HLWord
210:1	>8000a5							.word ?
211								.struct
212	>8000a5								lo .byte ?
213	>8000a6								hi .byte ?
214								.ends
215							.endu
40:3	>8000a7						canFloatNZ 				.byte ?				; AKA has collected spring
41	>8000a8						floatTimer 				.byte ?

43	>8000a9						onGroundNZ 				.byte ?
44	>8000aa						hasJumpedNZ				.byte ?
45	>8000ab						isFallingNZ				.byte ?
46	>8000ac						facingRight 			.byte ?				; this is 0 or 1 only
47	>8000ad						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>8000ae						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>8000af						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>8000b0						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>8000b1						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.8000b2						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>8000b2							.word ?
211								.struct
212	>8000b2								lo .byte ?
213	>8000b3								hi .byte ?
214								.ends
215							.endu
54:3	>8000b4						currAnim 				.byte ?				; the players current animation number
55	>8000b5						frameOffset 			.byte ?				; the current frame in the animation

57	>8000b6						bulletActive 			.byte ?				; this is 0 or 1 only
58	>8000b7						bulletUD 				.byte ?				; this is 0 or 1 only
59	>8000b8						bulletLR 				.byte ?				; this is 0 or 1 only
60	>8000b9						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>8000ba						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>8000bb						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>8000bc						flashColour				.byte ?				; index into the flash colour LUT
66	>8000bd						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$8000be					TICK_DOWN_START = *
54	.8000be						TickDowns 		.dstruct sTimerTickDowns
23:3	>8000be						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>8000bf						playerAnim 					.byte ?	; players animation timer
25	>8000c0						doorAnim						.byte ?	; frames till next exit door animation
26	>8000c1						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>8000c2						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>8000c3						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>8000c4						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$8000cc					TICK_DOWN_END = *
56	.8000cc						EntityData 		.dstruct sEntityData
70:3	>8000cc						number			 .byte ?									; how many entities are actually in this level
71	>8000cd						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>8000e6						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>8000ff						active			 .fill kEntity.maxEntities 		; if it is still active
74	>800118						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>800131						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>80014a						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>800163						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>80017c						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>800195						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>8001ae						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>8001c7						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>8001e0						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>8001f9						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>800212						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>80022b						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>800244						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>80025d						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>80025e						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>800266						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>800267						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.800268						PasswordTemp .block
58	>800268							lives .byte ?
59	>800269							flowers .byte ?
60	>80026a							score .byte ?,?,?,?,?,?
61	>800270							high .byte ?,?,?,?,?,?
62	>800276							currLevel .byte ?
63							.bend ;PasswordTemp
64	>800277						ActivePassword 						.fill 12
65	>800283						PasswordEntryIndex 					.byte ?
66	>800284						ValidPassword 							.byte ?
67	>800285						PasswordInfiLives 					.byte ?
68	>800286						PasswordRedBullets 					.byte ?
69	>800287						PasswordHaveSpring 					.byte ?
70	>800288						PasswordLevelSkip 					.byte ?
71	.800289						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	>800289						xDeltaCheck 	.byte ? 		; pixels
95	>80028a						yDeltaCheck 	.byte ? 		; pixels
96	>80028b						xDeltaBackup 	.byte ? 		; pixels
97	>80028c						yDeltaBackup 	.byte ? 		; pixels
98							.ends
72:5	>80028d						bulletFrame 							.byte ?
73	>80028e						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>80028f						tileMapTemp .fill 240
76	.80037f						mplexBuffer     .dstruct sMplexBuffer
101:3	>80037f						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>80039f						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>8003bf						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>8003df						PasswordRAMCache .fill 12

79	>8003eb						OAMMirror .fill 256*2
80	>8005eb						OAMMirrorHigh .fill 32


:4	;******  Return to file: Bank80.asm

4							.endv

6	.0000	808000					kVRAM .block
7	=0							titleScreen		= $0000/2
8	=1024							gameScreen		= $0800/2
9	=2048							font				= $1000/2
10	=2560							fontDest			= $1400/2
11	=4096							gameChars		= $2000/2
12	=16384							Sprite			= $8000/2
13							.bend

15	=16						kTileXCount = 16
16	=12						kTileYCount = 12
17	=192						kLevelSizeMax = kTileXCount*kTileYCount
18	=0						kSprBase = 0
19	=1						kBulletSpriteOffset = 1
20	=2						kEntsSpriteOffset = 2
21	=1						kBulletCollisionbox = 1
22	.0000	808000					kBounds .block
23	=0							screenMinX = 0
24								;screenMinY = 0
25								;screenMaxX = ( kTileXCount * 16 )
26	=192							screenMaxY = ( kTileYCount * 16 )
27							.bend

29	.0000	808000					kTiles .block
30	=0							back = 0

32	=1							wall = 1
33	=2							wall1 = 2
34	=3							wall2 = 3
35	=4							wall3 = 4
36	=5							wall4 = 5

38	=6							spike = 6
39	=7							flower = 7
40	=8							fruit = 8

42	=9							key1 = 9
43	=10							key2 = 10
44	=11							key3 = 11
45	=12							key4 = 12

47	=13							shield = 13
48	=14							spring = 14
49	=15							potion = 15
50	=16							egg = 16

52	=17							exit = 17
53	=18							player = 18

55	=19							pipe = 19
56	=20							diss = 20
57	=33							dissNoColide = 33

59	=34							underHangStart = 34
60	=35							underHang = 35
61	=36							shadowOpenCorner = 36
62	=37							sideShadow = 37
63	=38							middlesideShadow = 38
64	=39							topLeftCorner = 39
65	=37							intermissionOldWall = 37	; used to look up the tile for the intermission
66							.bend
67	=7						kKeyToWallDelta = kTiles.key1 - kTiles.wall1
68	=10						kDoorClosed = 10
69	=14						kDoorOpen = 14

71	=$62						kDefault_OBSEL  = %01100010 ; 8x8 and 16x16 0 gap and sprites at 8K
72	=$08						kBossBearBankOR = %00001000 ; move the upper half 1 4K bank up
73	=$10						kBossOctoBankOR = %00010000 ; move the upper half 2 4K bank up

75	=500						kShieldTimer = 10*50			; 10 seconds on PAL


78							.as				; Assume A8
79							.xs				; Assume X8
80							.autsiz			; Auto size detect
81							.databank $00	; databank is 00
82							.dpage $0000	; dpage is 0000

84	.0000	808000					RESET
85	.0000	808000	18		clc			clc
86	.0001	808001	fb		xce			xce
87	.0002	808002	a9 01		lda #$01		lda #$01
88	.0004	808004	8d 0d 42	sta $420d		sta $420D	; go fast, because why not?
89	.0007	808007	5c 0b 80 80	jmp $80800b		jml RESETHi
90	.000b	80800b					RESETHi
91	.000b	80800b	c2 30		rep #$30		REP #$30		; AXY 16
92	.000d	80800d	a2 ff 1f	ldx #$1fff		ldx #$1FFF	; set Stack to top of Shared RAM
93	.0010	808010	9a		txs			txs
94	.0011	808011	4b		phk			phk
95	.0012	808012	ab		plb			plb			; set the data bank to also be fast
96							.databank $80
97	.0013	808013	a9 00 00	lda #$0000		lda #0000
98	.0016	808016	5b		tcd			tcd				; set DP to 0
99	.0017	808017	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
100	.001a	80801a	8d 00 21	sta $802100		sta $802100
101	.001d	80801d					ClearWRAM
102	.001d	80801d	a9 08 80	lda #$8008		lda #$8008		; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
103	.0020	808020	8d 00 43	sta $804300		sta $804300
104	.0023	808023	a9 4f 81	lda #$814f		lda #<>DMAZero	; 64Tass | get low word
105	.0026	808026	8d 02 43	sta $804302		sta $804302
106	.0029	808029	a9 80 00	lda #$0080		lda #`DMAZero	; 64Tass | get bank
107	.002c	80802c	8d 04 43	sta $804304		sta $804304
108	.002f	80802f	9c 81 21	stz $802181		stz $802181
109	.0032	808032	9c 82 21	stz $802182		stz $802182		; START AT 7E:0000
110	.0035	808035	9c 05 43	stz $804305		stz $804305		; DO 64K
111	.0038	808038	a9 01 00	lda #$0001		lda #$0001
112	.003b	80803b	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
113	.003e	80803e	8d 0b 42	sta $80420b		sta $80420B		; FIRE IT AGAIN, FOR NEXT 64k
114	.0041	808041					InitSNESAndMirror	; this is defualt init sequence
115	.0041	808041	c2 20		rep #$20		REP #$20			; a16
116	.0043	808043	a9 8f 00	lda #$008f		lda #$008F		; FORCE BLANK, SET OBSEL TO 0
117	.0046	808046	8d 00 21	sta $802100		sta $802100
118	.0049	808049	8d 36 00	sta $800036		sta mINIDISP
119								;stz mOBSEL
120	.004c	80804c	9c 05 21	stz $802105		stz $802105 ;6
121								;stz mBGMODE
122								;stz mMOSIAC
123	.004f	80804f	9c 07 21	stz $802107		stz $802107 ;8
124								;stz mBG1SC
125								;stz mBG2SC
126	.0052	808052	9c 09 21	stz $802109		stz $802109 ;A
127								;stz mBG3SC
128								;stz mBG4SC
129	.0055	808055	9c 0b 21	stz $80210b		stz $80210B ;C
130								;stz mBG12NBA
131								;stz mBG23NBA
132	.0058	808058	9c 0d 21	stz $80210d		stz $80210D ;E
133	.005b	80805b	9c 0d 21	stz $80210d		stz $80210D ;E
134								;stz mBG1HOFS
135								;stz mBG1VOFS
136	.005e	80805e	9c 0f 21	stz $80210f		stz $80210F ;10
137	.0061	808061	9c 0f 21	stz $80210f		stz $80210F ;10
138								;stz mBG2HOFS
139								;stz mBG2VOFS
140	.0064	808064	9c 11 21	stz $802111		stz $802111 ;12
141	.0067	808067	9c 11 21	stz $802111		stz $802111 ;12
142								;stz mBG3HOFS
143								;stz mBG3VOFS
144	.006a	80806a	9c 13 21	stz $802113		stz $802113 ;14
145	.006d	80806d	9c 13 21	stz $802113		stz $802113 ;14
146								;stz mBG4HOFS
147								;stz mBG4VOFS
148	.0070	808070	9c 19 21	stz $802119		stz $802119 ;1A to get Mode7
149	.0073	808073	9c 1b 21	stz $80211b		stz $80211B ;1C these are write twice
150	.0076	808076	9c 1b 21	stz $80211b		stz $80211B ;1C regs
151	.0079	808079	9c 1d 21	stz $80211d		stz $80211D ;1E
152	.007c	80807c	9c 1d 21	stz $80211d		stz $80211D ;1E
153	.007f	80807f	9c 1f 21	stz $80211f		stz $80211F ;20
154	.0082	808082	9c 1f 21	stz $80211f		stz $80211F ;20
155								; add mirrors here if you are doing mode7
156	.0085	808085	9c 23 21	stz $802123		stz $802123 ;24
157								;stz mW12SEL
158								;stz mW34SEL
159	.0088	808088	9c 25 21	stz $802125		stz $802125 ;26
160								;stz mWOBJSEL
161	.008b	80808b	9c 26 21	stz $802126		stz $802126 ;27 YES IT DOUBLES OH WELL
162	.008e	80808e	9c 28 21	stz $802128		stz $802128 ;29
163								;stz mWH0
164								;stz mWH1
165								;stz mWH2
166								;stz mWH3
167	.0091	808091	9c 2a 21	stz $80212a		stz $80212A ;2B
168								;stz mWBGLOG
169								;stz mOBJLOG
170	.0094	808094	9c 2c 21	stz $80212c		stz $80212C ;2D
171	.0097	808097	9c 2e 21	stz $80212e		stz $80212E ;2F
172								;stz mTM
173								;stz mTS
174								;stz mTMW
175								;stz mTSW
176	.009a	80809a	a9 e0 00	lda #$00e0		lda #$00E0
177	.009d	80809d	8d 32 21	sta $802132		sta $802132
178	.00a0	8080a0	8d 74 00	sta $800074		sta mCOLDATA
179								;stz mSETINI
180								;ONTO THE CPU I/O REGS
181	.00a3	8080a3	a9 00 ff	lda #$ff00		lda #$FF00
182	.00a6	8080a6	8d 01 42	sta $804201		sta $804201
183								;stz mNMITIMEN
184	.00a9	8080a9	9c 02 42	stz $804202		stz $804202 ;3
185	.00ac	8080ac	9c 04 42	stz $804204		stz $804204 ;5
186	.00af	8080af	9c 06 42	stz $804206		stz $804206 ;7
187	.00b2	8080b2	9c 08 42	stz $804208		stz $804208 ;9
188	.00b5	8080b5	9c 0a 42	stz $80420a		stz $80420A ;B
189	.00b8	8080b8	9c 0c 42	stz $80420c		stz $80420C ;D
190								; CLEAR VRAM
191	.00bb	8080bb	c2 20		rep #$20		REP #$20			; A16
192	.00bd	8080bd	a9 09 18	lda #$1809		lda #$1809		; A -> B, FIXED SOURCE, WRITE WORD | VRAM
193	.00c0	8080c0	8d 00 43	sta $804300		sta $804300
194	.00c3	8080c3	a9 4f 81	lda #$814f		lda #<>DMAZero ; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
195	.00c6	8080c6	8d 02 43	sta $804302		sta $804302
196	.00c9	8080c9	a9 80 00	lda #$0080		lda #`DMAZero	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
197	.00cc	8080cc	8d 04 43	sta $804304		sta $804304		; AND THE UPPER BYTE WILL BE 0
198	.00cf	8080cf	9c 05 43	stz $804305		stz $804305		; DO 64K
199	.00d2	8080d2	a9 80 00	lda #$0080		lda #$80			; INC ON HI WRITE
200	.00d5	8080d5	8d 15 21	sta $802115		sta $802115
201	.00d8	8080d8	9c 16 21	stz $802116		stz $802116		; START AT 00
202	.00db	8080db	a9 01 00	lda #$0001		lda #$01
203	.00de	8080de	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
204								; CLEAR CG-RAM
205	.00e1	8080e1	a9 08 22	lda #$2208		lda #$2208		; A -> B, FIXED SOURCE, WRITE BYTE | CG-RAM
206	.00e4	8080e4	8d 00 43	sta $804300		sta $804300
207	.00e7	8080e7	a9 00 02	lda #$0200		lda #$200		; 512 BYTES
208	.00ea	8080ea	8d 05 43	sta $804305		sta $804305
209	.00ed	8080ed	e2 20		sep #$20		SEP #$20			; A8
210	.00ef	8080ef	9c 21 21	stz $802121		stz $802121		; START AT 0
211	.00f2	8080f2	a9 01		lda #$01		lda #$01
212	.00f4	8080f4	8d 0b 42	sta $80420b		sta $80420B		; FIRE DMA
213	.00f7	8080f7	64 34		stz $34			stz NMIReadyNF
251:1	.00f9	8080f9	e2 30		sep #$30		SEP #$30
215:4	.00fb	8080fb	a9 80		lda #$80		lda #kHideScreen.hide	; make sure the screen is in the hidden mode, it should be, but doesn't hurt ;)
216	.00fd	8080fd	85 30		sta $30			sta HideScreen
217								.cerror kHideScreen.hide < 128, "need to find an actual negative value for disableUpdateSpritesXYToOAMNF"
218	.00ff	8080ff	8d 8e 02	sta $80028e		sta disableUpdateSpritesXYToOAMNF

220	.0102	808102	20 61 88	jsr $808861		jsr clearSpritesMirror_xx	;sets all sprites to offscreen, small

222	.0105	808105	20 59 8a	jsr $808a59		jsr dmaPalletes_XX			; we have fixed palletes so upload them
223	.0108	808108	20 cd 8a	jsr $808acd		jsr dmaFixedChars_xx			; also the fixed chars which don't change

225								; draw the title screen
226								; since I have enough VRAM to spare I just draw this once
227								; and then set the BG1 to point to it when I want to
228	.010b	80810b	20 4a 86	jsr $80864a		jsr clearScreenMirrorToEmptyChar
229								; draw each string ( exepet for Game Over )
230	.010e	80810e	a2 0b		ldx #$0b		ldx #len(TitleScreenData.AllStrings)-1
231	.0110	808110	86 0f		stx $0f			stx ZPTemp
232	.0112	808112	a6 0f		ldx $0f		-	ldx ZPTemp
233	.0114	808114	20 91 86	jsr $808691		jsr plotStringAAtIndexX
234	.0117	808117	c6 0f		dec $0f			dec ZPTemp
235	.0119	808119	10 f7		bpl $808112		bpl -
236								; put the Screen mirror into VRAM
237	.011b	80811b	20 7e 8b	jsr $808b7e		jsr dmaScreenMirrorToTitleScreen_xx

239								; set up mode and tile pointer
240	.011e	80811e	a9 01		lda #$01		lda #1			; mode 1
241	.0120	808120	8d 05 21	sta $802105		sta $802105
242	.0123	808123	a9 11		lda #$11		lda #%00010001
243	.0125	808125	8d 2c 21	sta $80212c		sta $80212C		; make 1 + sprites on Main Screen

245	.0128	808128	a9 81		lda #$81		lda #%10000001
246	.012a	80812a	8f 00 42 00	sta $004200		sta $4200 		; enable VBlank NMI and enable auto Joypad reading

248								; set the main FSM to point to the title screen FSM
249	.012e	80812e	a9 74		lda #$74		lda #<titleScreenLoop
250	.0130	808130	85 1b		sta $1b			sta GameStatePointer.lo
251	.0132	808132	a9 83		lda #$83		lda #>titleScreenLoop
252	.0134	808134	85 1c		sta $1c			sta GameStatePointer.hi

254								; this is the Main Game loop high level
255								; it will wait for the NMI
256								; dispatch the current high level FSM mode
257								; update sprites in the mirror if required
258	.0136	808136					MainLoop
251:1	.0136	808136	e2 30		sep #$30		SEP #$30
260:4	.0138	808138					MainLoopWait
261	.0138	808138	a5 34		lda $34			lda NMIReadyNF
262	.013a	80813a	10 fc		bpl $808138		bpl MainLoopWait	; Read Flag
263	.013c	80813c	64 34		stz $34			stz NMIReadyNF		; Clear Flag
264	.013e	80813e	a2 00		ldx #$00		ldx #0				; sadly no jsr(XXXX) so dummy x
265	.0140	808140	fc 1b 00	jsr ($80001b,x)		jsr (GameStatePointer,k,x) ; why ,k well if you don't have it you get something like
266																	; "error: address in different program bank address '($001b,x)'"
267																	; ,k is a 64tass modificatgion not a 65816 addressing mode.
268																	; See section 3.9 of the manual for details basically ,k says make this
269																	; "program bank relative" aka "trust me"
251:1	.0143	808143	e2 30		sep #$30		SEP #$30
271:4	.0145	808145	2c 8e 02	bit $80028e		bit disableUpdateSpritesXYToOAMNF
272	.0148	808148	30 03		bmi $80814d		bmi +								; this could be MainLoop but that might cause you pain later if you make mods to this code
273	.014a	80814a	20 9d 88	jsr $80889d			jsr updateAllSpriteXYsToOAMMirror_88
274	.014d	80814d	80 e7		bra $808136	+	bra MainLoop

276							.section sDP
277	>0034						NMIReadyNF .byte ?	; I need the flag and I want it in the DP
278							.send ; sDP

280	>014f	80814f	00 00				DMAZero .word $0000	; DMA needs a memory address for writing fixed values

282	.0151	808151					kHideScreen .block
283	=$80							hide = $80			; force blank, screen brightness 0
284	=$0f							show = $0f			; display on, screen brightness 15
285							.bend

287							; ----- @NMI@ -----

289	.0151	808151					NMI
290	.0151	808151	5c 55 81 80	jmp $808155		jml NMIFast				; Move To 8X:XXXX for speed
291	.0155	808155					NMIFast
292	.0155	808155	8b		phb			phb						; Save Data Bank
293	.0156	808156	4b		phk			phk
294	.0157	808157	ab		plb			plb						; Set Data Bank to Match Program Bank
235:1	.0158	808158	e2 20		sep #$20		SEP #$20
296:4	.015a	80815a	2c 10 42	bit $804210		bit $804210				; Ack NMI
297	.015d	80815d	2c 34 00	bit $800034		bit@W NMIReadyNF,b	; Check if this is safe
298	.0160	808160	10 02		bpl $808164		bpl _ready
299	.0162	808162	ab		plb				plb					; No, restore Data Bank
300	.0163	808163	40		rti				rti					; Exit
301	.0164	808164					_ready						; Safe
255:1	.0164	808164	c2 30		rep #$30		REP #$30
303:4	.0166	808166	48		pha			pha
304	.0167	808167	da		phx			phx
305	.0168	808168	5a		phy			phy						; Save A,X,Y
306	.0169	808169	0b		phd			phd						; Save the DP register
307	.016a	80816a	a9 00 00	lda #$0000		lda #0000				; or where ever you want your NMI DP
308	.016d	80816d	5b		tcd			tcd						; set DP to known value
309								; do update code here
251:1	.016e	80816e	e2 30		sep #$30		SEP #$30
311:4	.0170	808170	a5 30		lda $30			lda HideScreen
312	.0172	808172	8f 00 21 00	sta $002100		sta $2100							; enable screen, or not as case may be
313	.0176	808176	30 23		bmi $80819b		bmi _Notvisible
314	.0178	808178	20 2b 88	jsr $80882b			jsr dmaOAM_xx					; this will take up enough time to ensure auto read works
315	.017b	80817b	20 eb 84	jsr $8084eb			jsr scanJoystick_88			; joystick because Commodore 64 port
316	.017e	80817e	a5 35		lda $35				lda ScreenUpdateRequiredN0	; only DMA screen if something has been updated
317	.0180	808180	f0 05		beq $808187			beq +
318	.0182	808182	20 50 8b	jsr $808b50				jsr dmaScreenMirror_xx
319	.0185	808185	64 35		stz $35					stz ScreenUpdateRequiredN0
320	.0187	808187	a9 a5		lda #$a5		+	lda #128+(2*16)+5 			; sprite pallete, 2nd one, 7 entry index
321	.0189	808189	8d 21 21	sta $802121			sta $802121						; which is the player body colour
322	.018c	80818c	ae bc 00	ldx $8000bc			ldx PlayerData.flashColour
323	.018f	80818f	bd ea 91	lda $8091ea,x			lda PlayerColourLUT.lo,x
324	.0192	808192	8d 22 21	sta $802122			sta $802122						; write a single pallete entry
325	.0195	808195	bd ec 91	lda $8091ec,x			lda PlayerColourLUT.hi,x
326	.0198	808198	8d 22 21	sta $802122			sta $802122
327	.019b	80819b					_Notvisible
235:1	.019b	80819b	e2 20		sep #$20		SEP #$20
329:4	.019d	80819d	a9 ff		lda #$ff		lda #$FF				; Doing this is slightly faster than DEC, but 2 more bytes
330	.019f	80819f	85 34		sta $34			sta NMIReadyNF		; set NMI Done Flag
255:1	.01a1	8081a1	c2 30		rep #$30		REP #$30
332:4	.01a3	8081a3	2b		pld			pld					; restore DP page
333	.01a4	8081a4	7a		ply			ply
334	.01a5	8081a5	fa		plx			plx
335	.01a6	8081a6	68		pla			pla					; Restore A,X,Y
336	.01a7	8081a7	ab		plb			plb					; Restore Data Bank
337	.01a8	8081a8					justRTI
338	.01a8	8081a8	40		rti			rti					; Exit

340							; ----- @Game loop@ -----

342							; this runs the level logic
343							.as
344							.xs
345	.01a9	8081a9					GAMELOOP
251:1	.01a9	8081a9	e2 30		sep #$30		SEP #$30
347:4	.01ab	8081ab	20 dd 84	jsr $8084dd		jsr updateTickdowns_88		; count down the timers
348	.01ae	8081ae	ad a1 00	lda $8000a1		lda PlayerData.state			; dispatch the player state
349	.01b1	8081b1						_ASSERT_A_LT_6					; make sure we don't get a value too high that puts is into the nulabor code wise
350	.01b1	8081b1	0a		asl a			asl a								; the states is set so you could precalc this but inc is handy and we are not tight
351	.01b2	8081b2	aa		tax			tax								; for code
352	.01b3	8081b3	7c b6 81	jmp ($8081b6,x)		jmp (PlayerCodeLUT,x)		; dispatch
353	>01b6	8081b6	c2 81 07 82 07 82 07 82		PlayerCodeLUT .word <>(playerAppear,playerNormal,playerNormal,playerNormal,playerExit,playerDead)
	>01be	8081be	e7 82 24 83

355							.as
356							.xs
357							; this will unpack the level data, dma the screen, sprites and init the player to spawn position
358							; screen should be off when called
359	.01c2	8081c2					playerAppear
251:1	.01c2	8081c2	e2 30		sep #$30		SEP #$30
361:4	.01c4	8081c4	20 61 88	jsr $808861		jsr clearSpritesMirror_xx		; remove all sprites
362	.01c7	8081c7	20 67 8d	jsr $808d67		jsr convertLevelToTileMap_88	; unpack the current level
363	.01ca	8081ca	20 0f 8c	jsr $808c0f		jsr addShadowsToMap_88			; decorate it
364	.01cd	8081cd	20 b4 8b	jsr $808bb4		jsr plotTileMap_88				; draw it to screen mirror
365	.01d0	8081d0	20 c7 86	jsr $8086c7		jsr plotStatusArea				; also draw the status area (actually only needs to be done once but meh)
366	.01d3	8081d3	20 50 8b	jsr $808b50		jsr dmaScreenMirror_xx			; send it to VRAM
367	.01d6	8081d6	20 8d a1	jsr $80a18d		jsr setAnimateDoorToOpen_88	; we want doors to open eventually
368								; this takes care of all DMA operations
369	.01d9	8081d9	9c a3 00	stz $8000a3		stz PlayerData.deadNZ			; we are alive
370	.01dc	8081dc	9c bc 00	stz $8000bc		stz PlayerData.flashColour		; not flashing
371	.01df	8081df	20 40 91	jsr $809140		jsr setPlayerToSpawnPoint_88	; move player to starting position
372	.01e2	8081e2	20 28 93	jsr $809328		jsr unpackEntityBytes			; get the entities for this level
373	.01e5	8081e5	20 53 94	jsr $809453		jsr setEntitySprites				; setup their sprite data

375	.01e8	8081e8	a9 04		lda #$04		lda #fBGBaseSize(kVRAM.gameScreen,kBaseSize_32x32)
376	.01ea	8081ea	8d 07 21	sta $802107		sta $802107							; set the BG1 to the Game Screen
377	.01ed	8081ed	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
378	.01ef	8081ef	8d 0b 21	sta $80210b		sta $80210b							; set the chars to the in game set

380								; we are ready to run the game loop as soon as we exit this basically
381	.01f2	8081f2	a9 01		lda #$01		lda #1
382	.01f4	8081f4	85 34		sta $34			sta NMIReadyNF
383								;	lda #kPlayerState.normal ; == 1
384								.cerror kPlayerState.normal != 1, "need to add lda back"
385	.01f6	8081f6	8d a1 00	sta $8000a1		sta PlayerData.state						; move FSM to the next state
386	.01f9	8081f9	20 9d 90	jsr $80909d		jsr changePlayerAnimForCurrentDir	; make sure the player's animation is correct
387	.01fc	8081fc	9c 96 00	stz $800096		stz GameData.exitOpenNZ					; the door is closed
388	.01ff	8081ff	a9 0f		lda #$0f		lda #kHideScreen.show					; show the screen next NMI
389	.0201	808201	85 30		sta $30			sta HideScreen
390								.cerror kHideScreen.show > 128, "need to find something else positive for disableUpdateSpritesXYToOAMNF"
391	.0203	808203	8d 8e 02	sta $80028e		sta disableUpdateSpritesXYToOAMNF	; we want to update the sprites now as well
392	.0206	808206	60		rts			rts

394							.as
395							.xs
396	.0207	808207					playerNormal
397	.0207	808207	a9 00		lda #$00		lda #0 ; remove me when un commenting code below
398	.0209	808209	20 bc 94	jsr $8094bc		jsr BuildEntCollisionTable						; build the collision sets
399	.020c	80820c	20 97 9e	jsr $809e97		jsr collidePlayerAgainstRest					; did the player hit any entitiies
400	.020f	80820f	86 03		stx $03			stx CollidedEntity								; save the index of the one we hit, if any
401	.0211	808211	ad b0 00	lda $8000b0		lda PlayerData.hitBubbleNum					; save current bubble we are standing on
402	.0214	808214	85 10		sta $10			sta ZPTemp2
403	.0216	808216	a9 00		lda #$00		lda #0
404	.0218	808218	8d b0 00	sta $8000b0		sta PlayerData.hitBubbleNum					; clear current bubble
405	.021b	80821b	2a		rol a			rol a 												; pull is carry set, which is if we collided or not
406	.021c	80821c	85 0f		sta $0f			sta ZPTemp											; cache it so we can restore it. php doesn't really work for this case
407	.021e	80821e	f0 4c		beq $80826c		beq _noSpriteCollision
408	.0220	808220	a6 03		ldx $03				ldx CollidedEntity							; what did we hit
409	.0222	808222	bd cd 00	lda $8000cd,x			lda EntityData.type,x
410	.0225	808225	20 41 9b	jsr $809b41			jsr isTypeBossBounceDetect					; check if this was a boss bounce (which is 2nd boss ent collision)
411	.0228	808228	b0 2a		bcs $808254			bcs _bossBounce
412	.022a	80822a	20 31 9b	jsr $809b31				jsr isTypeBoss								; no bouncing on a boss, check the against a boss
413	.022d	80822d	b0 34		bcs $808263				bcs _checkBossDeath
414	.022f	80822f	ec 67 02	cpx $800267					cpx EntityData.pipeBubbleStart	; was this a bubble?
415	.0232	808232	90 36		bcc $80826a					bcc _normalEnt
416												; so it was a bubble
417	.0234	808234	ad a9 00	lda $8000a9						lda PlayerData.OnGroundNZ		; if on ground or falling
418	.0237	808237	0d ab 00	ora $8000ab						ora PlayerData.isFallingNZ		; don't collide if I'm jumping up
419	.023a	80823a	f0 14		beq $808250						beq _skipDeath
420	.023c	80823c	a6 03		ldx $03								ldx CollidedEntity
421	.023e	80823e	bd c1 03	lda $8003c1,x							lda mplexBuffer.ypos+kEntsSpriteOffset,x
422	.0241	808241	cd bf 03	cmp $8003bf							cmp mplexBuffer.ypos
423	.0244	808244	90 0a		bcc $808250							bcc _skipDeath					; if Bubble Y < player Y pos i.e above me skip
424	.0246	808246	8e b0 00	stx $8000b0								stx PlayerData.hitBubbleNum
425	.0249	808249	c5 10		cmp $10									cmp ZPTemp2
426	.024b	80824b	f0 03		beq $808250								beq _skipDeath				; already on this bubble so skip
427	.024d	80824d	20 80 90	jsr $809080									jsr enterOnGround		; we just landed on a bubble
428	.0250	808250										_skipDeath
429	.0250	808250	a9 00		lda #$00								lda #0						; cancel collision state
430	.0252	808252	80 18		bra $80826c								bra _noSpriteCollision
431	.0254	808254						_bossBounce
432	.0254	808254	ad a4 00	lda $8000a4			lda PlayerData.hasShieldNZ					; boos bounce can only be done with a shield
433	.0257	808257	f0 11		beq $80826a			beq _normalEnt
434	.0259	808259	a6 03		ldx $03					ldx CollidedEntity
435	.025b	80825b	20 4d 9b	jsr $809b4d				jsr hurtBoss								; hurt them
436	.025e	80825e	ee b1 00	inc $8000b1				inc PlayerData.forceJumpNZ				; bounce
437	.0261	808261	80 22		bra $808285				gra _skipDeathCheck
438										;
439	.0263	808263						_checkBossDeath
440	.0263	808263	bd 95 01	lda $800195,x			lda EntityData.entState,x					; if the boss is dead
441	.0266	808266	c9 01		cmp #$01			cmp #kBoss.dead								; ignore the collision
442	.0268	808268	f0 1b		beq $808285			beq _skipDeathCheck							; this is because bosses have a death animation
443	.026a	80826a					_normalEnt
444	.026a	80826a	a5 0f		lda $0f				lda ZPTemp										; this is cache of did we collide
445	.026c	80826c					_noSpriteCollision
446	.026c	80826c	0d a3 00	ora $8000a3			ora PlayerData.deadNZ						; are we dead for some other reason
447	.026f	80826f	f0 14		beq $808285			beq _skipDeathCheck							; no, skip
448	.0271	808271	ad a4 00	lda $8000a4				lda PlayerData.hasShieldNZ				; wait do I have a shield?
449	.0274	808274	d0 0f		bne $808285				bne _skipDeathCheck						; yup, skip
450											; lda PasswordInfiLives				; password system is removed but
451											; bne +									; left if you wish to restore it or add cheat codes
452	.0276	808276	ce 87 00	dec $800087						dec GameData.lives
453	.0279	808279	20 f9 87	jsr $8087f9						jsr pltLives
454	.027c	80827c	a9 05		lda #$05			+		lda #kPlayerState.dead				; set player dead
455	.027e	80827e	8d a1 00	sta $8000a1					sta PlayerData.state					; set to the dead FSM state
456	.0281	808281	8d a2 00	sta $8000a2					sta PlayerData.minorState
457	.0284	808284	60		rts						rts
458											;
459	.0285	808285					_skipDeathCheck
460	.0285	808285	9c a3 00	stz $8000a3			stz PlayerData.deadNZ						; not dead
461	.0288	808288	20 36 8f	jsr $808f36			jsr joyToPlayerDelta_88						; move player based upon
462	.028b	80828b	20 4f 9d	jsr $809d4f			jsr checkSpriteToCharCollision_88		; collide player against world with deltas
463									; level skip
464							;		lda PasswordLevelSkip						; password system removed but left in case you
465							;		beq _noKey										; want to bring it back
466							;			jsr $FF9F ; SCAN KEY
467							;			jsr $ffe4
468							;			cmp #90 ; Z key, we can't detect C=/CX key with gettin
469							;			bne _noKey
470							;			lda #kPlayerState.exit
471							;			sta PlayerData.state
472							;			sta PlayerData.minorState
473							;			rts
474							;_noKey
475	.028e	80828e	ad 89 02	lda $800289			lda checkSpriteToCharData.xDeltaCheck	; are we still moving on the X after collision
476	.0291	808291	f0 05		beq $808298			beq _addY
477									;make sure x reg is 0, and call addXWithMSBAndClip
478	.0293	808293	a2 00		ldx #$00				ldx #0
479	.0295	808295	20 55 85	jsr $808555				jsr addXWithMSBAndClip_88				; offset player X
480	.0298	808298					_addY
481	.0298	808298	ad bf 03	lda $8003bf			lda mplexBuffer.ypos
482	.029b	80829b	18		clc				clc
483	.029c	80829c	6d 8a 02	adc $80028a			adc checkSpriteToCharData.yDeltaCheck	; offset Y
484	.029f	80829f	8d bf 03	sta $8003bf			sta mplexBuffer.ypos							; this is just done because Y can wrap
485	.02a2	8082a2	20 13 91	jsr $809113			jsr updatePlayerAnim_88						; update animation for new state
486	.02a5	8082a5	ad a4 00	lda $8000a4			lda PlayerData.hasShieldNZ					; if I have a shield update the flash
487	.02a8	8082a8	f0 3b		beq $8082e5			beq _noShield
488	.02aa	8082aa	ad a5 00	lda $8000a5				lda PlayerData.shieldTimer.lo
489	.02ad	8082ad	d0 03		bne $8082b2				bne +
490	.02af	8082af	ce a6 00	dec $8000a6					dec PlayerData.shieldTimer.hi
491	.02b2	8082b2	ce a5 00	dec $8000a5		+		dec PlayerData.shieldTimer.lo			; 16 bit dec, this will bn much easier in 16bit version
492	.02b5	8082b5	ad a5 00	lda $8000a5				lda PlayerData.shieldTimer.lo
493	.02b8	8082b8	0d a6 00	ora $8000a6				ora PlayerData.shieldTimer.hi			; how to tell a 16bit value is zero in 8bit mode easily
494	.02bb	8082bb	d0 08		bne $8082c5				bne +
495	.02bd	8082bd	9c a4 00	stz $8000a4						stz PlayerData.hasShieldNZ		; it has expired
496	.02c0	8082c0	9c bc 00	stz $8000bc						stz PlayerData.flashColour		; reset flash colour to be sure
497	.02c3	8082c3	80 20		bra $8082e5						bra _noShield
498												;
499	.02c5	8082c5	ad c2 00	lda $8000c2		+		lda TickDowns.shieldFlashTimer		; need to toggle the flash?
500	.02c8	8082c8	d0 1b		bne $8082e5				bne _noShield
501	.02ca	8082ca	ad bc 00	lda $8000bc					lda PlayerData.flashColour
502	.02cd	8082cd	49 01		eor #$01					eor #1
503	.02cf	8082cf	8d bc 00	sta $8000bc					sta PlayerData.flashColour			; toggle 0->1 1->0
504	.02d2	8082d2	ad c3 00	lda $8000c3					lda TickDowns.shieldFlashTimerSpeedUp
505	.02d5	8082d5	d0 08		bne $8082df					bne +
506	.02d7	8082d7	a9 23		lda #$23						lda #35								; every 35 frames we make the flash faster
507	.02d9	8082d9	8d c3 00	sta $8000c3						sta TickDowns.shieldFlashTimerSpeedUp
508	.02dc	8082dc	ce bd 00	dec $8000bd						dec PlayerData.baseFlashTimeDelta
509	.02df	8082df	ad bd 00	lda $8000bd				+	lda PlayerData.baseFlashTimeDelta
510	.02e2	8082e2	8d c2 00	sta $8000c2					sta TickDowns.shieldFlashTimer	; reset the timer
511	.02e5	8082e5					_noShield
512	.02e5	8082e5	80 72		bra $808359			gra EndOfGameLoop
513									;

515							.as
516							.xs
517	.02e7	8082e7					playerExit
518	.02e7	8082e7	ad a2 00	lda $8000a2		lda PlayerData.minorState
519	.02ea	8082ea	c9 04		cmp #$04		cmp #kPlayerState.exit					; if this is not the first time
520	.02ec	8082ec	d0 13		bne $808301		bne _waitForAnimation					; then skip the init
521	.02ee	8082ee	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit		; we have to set up the exit animation
522	.02f0	8082f0	20 dd 90	jsr $8090dd			jsr setPlayerAnimeTo_88
523									;lda #kPlayerStateExit.waitForAnimation
524									.cerror kPlayerStateExit.waitForAnimation != 0, "need to change stz"
525	.02f3	8082f3	9c a2 00	stz $8000a2			stz PlayerData.minorState			; when entering this state we set minor to same, so 0 to mark it done
526	.02f6	8082f6	ad bb 00	lda $8000bb			lda PlayerData.exitAtIndex
527	.02f9	8082f9	20 43 91	jsr $809143			jsr setPlayerToIndexA				; snap the player to the exit tile
528	.02fc	8082fc	20 66 91	jsr $809166			jsr removePickups_88					; clear any flashing
529	.02ff	8082ff	80 58		bra $808359	_exit	gra EndOfGameLoop
530	.0301	808301					_waitForAnimation
531	.0301	808301	20 13 91	jsr $809113		jsr updatePlayerAnim_88					; returns sec on animation end
532	.0304	808304	90 f9		bcc $8082ff		bcc _exit
533	.0306	808306	a9 f4		lda #$f4			lda #<INTERLOOP						; move on to the interlude
534	.0308	808308	85 1b		sta $1b				sta GameStatePointer.lo
535	.030a	80830a	a9 83		lda #$83			lda #>INTERLOOP
536	.030c	80830c	85 1c		sta $1c				sta GameStatePointer.hi
537									.cerror kPlayerState.appear != 0, "need to change stz"
538	.030e	80830e	9c a1 00	stz $8000a1			stz PlayerData.state					; return back to appear state
539	.0311	808311	20 b3 94	jsr $8094b3			jsr deactivateAllEntities
540	.0314	808314	20 54 88	jsr $808854			jsr disableAllEntSprites_88		; death is level reset so clear all ents
541	.0317	808317	60		rts				rts

543							.as
544							.xs
545	.0318	808318					incLevelGraphicSet
546	.0318	808318					_ASSERT_jsr
547	.0318	808318					_ASSERT_axy8
548	.0318	808318	ad a0 00	lda $8000a0		lda LevelData.levelGraphicsSet		; this has 4 values 0,1,2,3
549	.031b	80831b	18		clc			clc
550	.031c	80831c	69 01		adc #$01		adc #1										; so add 1
551	.031e	80831e	29 03		and #$03		and #3										; and mask it
552	.0320	808320	8d a0 00	sta $8000a0		sta LevelData.levelGraphicsSet
553	.0323	808323	60		rts			rts											; only called once so could be inlined if wanted

555							.as
556							.xs
557	.0324	808324					playerDead
558	.0324	808324	ad a2 00	lda $8000a2		lda PlayerData.minorState
559	.0327	808327	c9 05		cmp #$05		cmp #kPlayerState.dead					; are we entering this state for the first time?
560	.0329	808329	d0 0d		bne $808338		bne _waitForAnimation
561									;ldx #kSFX.hurt
562									;jsr playSFX
563	.032b	80832b	a9 08		lda #$08			lda #kPlayerAnimsIndex.dead		; we have to set up the exit animation
564	.032d	80832d	20 dd 90	jsr $8090dd			jsr setPlayerAnimeTo_88
565									;lda #kPlayerStateDeath.animate
566									.cerror kPlayerStateDeath.animate != 0, "need to change stz"
567	.0330	808330	9c a2 00	stz $8000a2			stz PlayerData.minorState			; mark that we have entered this before
568	.0333	808333	20 66 91	jsr $809166			jsr removePickups_88					; basically removes flashing is the point
569	.0336	808336	80 21		bra $808359	_exit	gra EndOfGameLoop
570	.0338	808338					_waitForAnimation
571	.0338	808338	ce bf 03	dec $8003bf		dec mplexBuffer.ypos						; move player up the screen
572	.033b	80833b	20 13 91	jsr $809113		jsr updatePlayerAnim_88					; update the flap animation
573	.033e	80833e	90 f6		bcc $808336		bcc _exit
574	.0340	808340	ad 87 00	lda $800087			lda GameData.lives					; all used up?
575	.0343	808343	f0 08		beq $80834d			beq _gameOver
576										.cerror kPlayerState.appear != 0, "remove stz"
577										;lda #kPlayerState.appear
578	.0345	808345	9c a1 00	stz $8000a1				stz PlayerData.state
579	.0348	808348	9c a3 00	stz $8000a3				stz PlayerData.deadNZ			; clear and reset level
580	.034b	80834b	80 0c		bra $808359				bra EndOfGameLoop
581										;
582	.034d	80834d					_gameOver
583	.034d	80834d	9c a1 00	stz $8000a1		stz PlayerData.state						; go to game over
584	.0350	808350	a9 7d		lda #$7d		lda #<gameOverLoop
585	.0352	808352	85 1b		sta $1b			sta GameStatePointer.lo
586	.0354	808354	a9 84		lda #$84		lda #>gameOverLoop
587	.0356	808356	85 1c		sta $1c			sta GameStatePointer.hi
588	.0358	808358	60		rts			rts

590							.as
591							.xs
592	.0359	808359					EndOfGameLoop
593	.0359	808359					_ASSERT_axy8
594	.0359	808359	ad 86 00	lda $800086		lda joyFireEvent					; if	  1 1 1 1 0 0 0 0
595	.035c	80835c	4d b6 00	eor $8000b6		eor PlayerData.bulletActive	; eor	  0 0 1 1 0 0 1 1
596	.035f	80835f	2d 86 00	and $800086		and joyFireEvent					; and   1 0 1 0 1 0 1 0
597	.0362	808362	f0 03		beq $808367		beq _noBulletStart				; gives 1 0 0 0 0 0 0 0
598	.0364	808364	20 ee 91	jsr $8091ee			jsr startBullet
599	.0367	808367					_noBulletStart
600	.0367	808367	20 28 92	jsr $809228		jsr updateBullet
601	.036a	80836a	20 d7 94	jsr $8094d7		jsr updateEntities
602	.036d	80836d	20 eb 99	jsr $8099eb		jsr updateBubbles
603	.0370	808370	20 59 a1	jsr $80a159		jsr animateDoor_88
604	.0373	808373	60		rts			rts

606							; ----- @Titlescreen loop@ -----

608							.as
609							.xs
610	.0374	808374					titleScreenLoop
611	.0374	808374					_ASSERT_axy8
612	.0374	808374	ad a1 00	lda $8000a1		lda PlayerData.state
613	.0377	808377	0a		asl a			asl a
614	.0378	808378	aa		tax			tax
615	.0379	808379	7c 7c 83	jmp ($80837c,x)		jmp (TitleScreenLoopFuncLUT,x)
616	>037c	80837c	82 83 c5 83 da 83		TitleScreenLoopFuncLUT .word <>(TSSetup,TSWaitForFire,TSStartGame)

618	.0382	808382					TSSetup
619	.0382	808382					_ASSERT_axy8
620	.0382	808382	20 b3 94	jsr $8094b3		jsr deactivateAllEntities			; so we don't get any stray sprite due to race conditions
621	.0385	808385	20 54 88	jsr $808854		jsr disableAllEntSprites_88 		; this will clear OAM mirror as well
622							;	stz PasswordEntryIndex
623	.0388	808388	9c a0 00	stz $8000a0		stz LevelData.levelGraphicsSet	; reset back to apples
624								; set up the defaults here, in case a password modifies them
625	.038b	80838b	20 5d 91	jsr $80915d		jsr clearPlayerStuct_88				; clear the playerf
626	.038e	80838e	a9 05		lda #$05		lda #5
627	.0390	808390	8d 87 00	sta $800087		sta GameData.lives					; give default lives
628	.0393	808393	9c 95 00	stz $800095		stz GameData.currLevel				; reset to level 1. Change to lda # sta to make a level select for testing
629	.0396	808396	9c 88 00	stz $800088		stz GameData.flowers					; no flowers

631	.0399	808399	a9 00		lda #$00		lda #fBGBaseSize(kVRAM.titleScreen,kBaseSize_32x32)
632	.039b	80839b	8d 07 21	sta $802107		sta $802107								; set TS screen
633	.039e	80839e	a9 01		lda #$01		lda #fBGCharAddress(kVRAM.gameChars,0,0,0)
634	.03a0	8083a0	8d 0b 21	sta $80210b		sta $80210b								; set TS chars/same as game but this will happen first
635	.03a3	8083a3	a9 62		lda #$62		lda #kDefault_OBSEL
636	.03a5	8083a5	8d 01 21	sta $802101		sta $802101								; make sure we are in sprite upper bank 0 to get QWAK sprites

638	.03a8	8083a8	a2 0f		ldx #$0f		ldx #(4*4)-1							; 4 sprites at 4 bytes each
639	.03aa	8083aa	bd d8 ba	lda $80bad8,x	-	lda TitleScreenData.SpriteStruct.sprites,x
640	.03ad	8083ad	9d eb 03	sta $8003eb,x		sta OAMMirror,x
641	.03b0	8083b0	ca		dex			dex
642	.03b1	8083b1	10 f7		bpl $8083aa		bpl -
643	.03b3	8083b3	a9 aa		lda #$aa		lda #TitleScreenData.SpriteStruct.kUpper
644	.03b5	8083b5	8d eb 05	sta $8005eb		sta OAMMirrorHigh
645							;	lda #0
646							;	jsr playMusic
647	.03b8	8083b8	ee a1 00	inc $8000a1		inc PlayerData.state						; move to the wait for fire FSM state
648	.03bb	8083bb	a9 ff		lda #$ff		lda #$FF
649	.03bd	8083bd	8d 8e 02	sta $80028e		sta disableUpdateSpritesXYToOAMNF	; we do not have the player or Entities and so do not want the auto update
650	.03c0	8083c0	a9 0f		lda #$0f		lda #kHideScreen.show
651	.03c2	8083c2	85 30		sta $30			sta HideScreen
652	.03c4	8083c4	60		rts			rts

654	.03c5	8083c5					TSWaitForFire
655	.03c5	8083c5					_ASSERT_axy8
656	.03c5	8083c5	20 dd 84	jsr $8084dd		jsr updateTickdowns_88
657								; in reluanch64 you can just fold this block to skip it
658							.comment ;{{{
763							.endc ;}}}
764	.03c8	8083c8	ad 7e 00	lda $80007e		lda joyFire							; is fire pressed
765	.03cb	8083cb	d0 0c		bne $8083d9		bne _exit							; no
766	.03cd	8083cd	ad 83 00	lda $800083			lda oldJoyFire					; was it pressed last frame
767	.03d0	8083d0	f0 07		beq $8083d9			beq _exit						; no, exit then
768	.03d2	8083d2	ee a1 00	inc $8000a1				inc PlayerData.state		; yes, fire was released and we need to start the game
769	.03d5	8083d5	a9 80		lda #$80				lda #kHideScreen.hide	; hide the screen. for DMA transfers and swaps
770	.03d7	8083d7	85 30		sta $30					sta HideScreen
771	.03d9	8083d9					_exit
772	.03d9	8083d9	60		rts			rts
773							; no password system or keyboard, left in case you wish to crib the password system logic
774							; again you can fold it in Relaunch64. the rts above wasn't there before
775							.comment ;{{{
809							.endc ; }}}

811								;
812							; this has the password entry code, in Commander X16 form
813							; left for cribing if wanted
814							.comment ;{{{
899							.endc ;}}}


902	.03da	8083da					TSStartGame
903	.03da	8083da					_ASSERT_axy8
904	.03da	8083da	ad a0 00	lda $8000a0		lda LevelData.levelGraphicsSet	; get the current set of 4
905	.03dd	8083dd	20 9a 8a	jsr $808a9a		jsr dmaLevelChars_xx					; update the background/fruit characters etc
906	.03e0	8083e0	a9 a9		lda #$a9		lda #<GAMELOOP
907	.03e2	8083e2	85 1b		sta $1b			sta GameStatePointer.lo
908	.03e4	8083e4	a9 81		lda #$81		lda #>GAMELOOP
909	.03e6	8083e6	85 1c		sta $1c			sta GameStatePointer.hi				; set main FSM to game loop
910	.03e8	8083e8	20 54 88	jsr $808854		jsr disableAllEntSprites_88		; clears OAM Mirror as well
911	.03eb	8083eb	20 c7 86	jsr $8086c7		jsr plotStatusArea
912	.03ee	8083ee	a9 00		lda #$00		lda #kPlayerState.appear			; set the player state to appear
913	.03f0	8083f0	8d a1 00	sta $8000a1		sta PlayerData.state
914								;lda #1
915								;jsr playMusic
916	.03f3	8083f3	60		rts			rts

918							; ----- @Intermission loop@ -----

920							.as
921							.xs
922	.03f4	8083f4					INTERLOOP
923	.03f4	8083f4					_ASSERT_axy8
924	.03f4	8083f4	20 dd 84	jsr $8084dd		jsr updateTickdowns_88
925	.03f7	8083f7	ad a1 00	lda $8000a1		lda PlayerData.state
926	.03fa	8083fa	0a		asl a			asl a
927	.03fb	8083fb	aa		tax			tax
928	.03fc	8083fc	7c ff 83	jmp ($8083ff,x)		jmp (InterFuncLUT,x)
929	>03ff	8083ff	05 84 3e 84 66 84		InterFuncLUT .word <>(interSetUp,interMovePlayer,interEnterDoor)

931							.as
932							.xs
933	.0405	808405					interSetUp
934	.0405	808405					_ASSERT_axy8
935	.0405	808405	20 d7 85	jsr $8085d7		jsr PlotTransitionScreenAndMakeNextChars	; also set player index,exit index
936	.0408	808408	20 40 91	jsr $809140		jsr setPlayerToSpawnPoint_88					; to the first spawn point as set in above function
937	.040b	80840b	a9 01		lda #$01		lda #1
938	.040d	80840d	8d ae 00	sta $8000ae		sta PlayerData.movingLRNZ
939	.0410	808410	8d a9 00	sta $8000a9		sta PlayerData.OnGroundNZ						; we are moving and on the ground for anim purposes
940	.0413	808413	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck		; move right
941	.0416	808416	8d 96 00	sta $800096		sta GameData.exitOpenNZ							; we want to close the door
942	.0419	808419	a9 ff		lda #$ff		lda #$FF
943	.041b	80841b	8d 9c 00	sta $80009c		sta LevelData.exitIndex+1						; set the end exit index to dummy value for logic tracking
944	.041e	80841e	1a		inc a			inc a													; a = 0
945	.041f	80841f	20 9a 90	jsr $80909a		jsr changePlayerDir								; make sure player is going right
946	.0422	808422	20 9d a1	jsr $80a19d		jsr setAnimateDoorToClose_88					; set the door to close
947	.0425	808425	ad 95 00	lda $800095		lda GameData.currLevel							; inc and wrap level number
948	.0428	808428	18		clc			clc
949	.0429	808429	69 01		adc #$01		adc #1
950	.042b	80842b	c9 1f		cmp #$1f		cmp #31												; 32 levels in 16K where we mad, probably
951	.042d	80842d	d0 02		bne $808431		bne +
952	.042f	80842f	a9 00		lda #$00			lda #0
953	.0431	808431	8d 95 00	sta $800095	+ 	sta GameData.currLevel
954	.0434	808434	20 b3 94	jsr $8094b3		jsr deactivateAllEntities						; don't want any stray sprites on screen
955	.0437	808437	20 66 91	jsr $809166		jsr removePickups_88								; no flashing either
956	.043a	80843a	ee a1 00	inc $8000a1		inc PlayerData.state								; move to next walk state
957							;	jsr loadPasswordTemp								; this will make and show a password for the user
958							;	jsr makePassword									; disabled in this version but for cribbing
959							;		#appendVeraAddress getGameScreenCharPos(10,4) | kVERA.inc_1
960							;		ldx #11
961							;	-	lda ActivePassword,x
962							;		jsr convertToPasswordLetter
963							;		sta kVERA.DATA_0
964							;		stz kVERA.DATA_0 ; CRAM is 0
965							;		dex
966							;		bpl -
967	.043d	80843d	60		rts			rts

969							.as
970							.xs
971	.043e	80843e					interMovePlayer
972	.043e	80843e					_ASSERT_axy8
973	.043e	80843e	a2 00		ldx #$00		ldx #0
974	.0440	808440	20 55 85	jsr $808555		jsr addXWithMSBAndClip_88						; move player
975	.0443	808443	20 13 91	jsr $809113		jsr updatePlayerAnim_88							; animate player
976	.0446	808446	20 59 a1	jsr $80a159		jsr animateDoor_88								; animate the door
977	.0449	808449	ad 7f 03	lda $80037f		lda mplexBuffer.xpos
978	.044c	80844c	c9 f0		cmp #$f0		cmp #256-16											; are we just before the door?
979	.044e	80844e	90 09		bcc $808459		bcc +
980	.0450	808450	ee a1 00	inc $8000a1			inc PlayerData.state							; move to enter door state
981	.0453	808453	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit				; start exit animation
982	.0455	808455	20 dd 90	jsr $8090dd			jsr setPlayerAnimeTo_88
983	.0458	808458	60		rts				rts
984									;
985	.0459	808459	c9 b0		cmp #$b0	+	cmp #(11*16)										; are we in the middle?
986	.045b	80845b	d0 08		bne $808465		bne +
987	.045d	80845d	20 8d a1	jsr $80a18d			jsr setAnimateDoorToOpen_88				; start opening the next door
988	.0460	808460	a9 5f		lda #$5f			lda #kIntermission.secondExit
989	.0462	808462	8d 9b 00	sta $80009b			sta LevelData.exitIndex						; set the door we want to animate
990									;lda #kSFX.door
991									;jsr playSFX
992	.0465	808465	60		rts		+	rts

994							.as
995							.xs
996	.0466	808466					interEnterDoor
997	.0466	808466					_ASSERT_axy8
998	.0466	808466	20 13 91	jsr $809113		jsr updatePlayerAnim_88							; has the animation completed?
999	.0469	808469	90 11		bcc $80847c		bcc _exit
1000							;		lda GameData.currLevel						; we alternate level music
1001							;		ldx #size(BossLevels)-1						; so this checks if we are on a boss
1002							;	-	cmp BossLevels,x								; level and adjust the tune as needed
1003							;		beq _bossLevel
1004							;			dex
1005							;			bpl -
1006							;			and #1
1007							;			clc
1008							;			adc #1
1009							;			.byte $2c ; BIT XXXXX
1010							;	_bossLevel
1011									;lda #3
1012									;jsr playMusic
1013	.046b	80846b	a9 00		lda #$00		lda #kPlayerState.appear						; set player to appear
1014	.046d	80846d	8d a1 00	sta $8000a1		sta PlayerData.state
1015	.0470	808470	a9 a9		lda #$a9		lda #<GAMELOOP
1016	.0472	808472	85 1b		sta $1b			sta GameStatePointer.lo
1017	.0474	808474	a9 81		lda #$81		lda #>GAMELOOP
1018	.0476	808476	85 1c		sta $1c			sta GameStatePointer.hi							; set the main FSM to Gameloop
1019	.0478	808478	a9 80		lda #$80		lda #kHideScreen.hide							; hide the screen for transition and DMA
1020	.047a	80847a	85 30		sta $30			sta HideScreen
1021	.047c	80847c					_exit
1022	.047c	80847c	60		rts			rts


1025							; ----- @Game Over loop@ -----

1027	.047d	80847d					gameOverLoop
1028	.047d	80847d					_ASSERT_axy8
1029	.047d	80847d	ad a1 00	lda $8000a1		lda PlayerData.state
1030	.0480	808480	0a		asl a			asl a
1031	.0481	808481	aa		tax			tax
1032	.0482	808482	7c 85 84	jmp ($808485,x)		jmp (GameOverFuncLUT,x)
1033	>0485	808485	89 84 c7 84			GameOverFuncLUT .word <>(GOSetup,GOWaitForFire)

1035	.0489	808489					GoSetup
1036	.0489	808489					_ASSERT_axy8
1037								; print string
1038	.0489	808489	a2 0c		ldx #$0c		ldx #len(TitleScreenData.AllStrings)	; this doesn't have Game Over in it, which is added after
1039	.048b	80848b	20 8d 86	jsr $80868d		jsr plotStringAAtIndexXGameScreen		; so it's len is the index for Game Over
1040	.048e	80848e	ee a1 00	inc $8000a1		inc PlayerData.state							; move to wait for firfe state
1041								; remove sprites
1042	.0491	808491	20 b3 94	jsr $8094b3		jsr deactivateAllEntities					; we remove all the entites as well so you stand alone, and they don't move
1043	.0494	808494	20 54 88	jsr $808854		jsr disableAllEntSprites_88
1044								;lda #4
1045								;jsr playMusic
1046								; check to see if this is the new high score
1047	.0497	808497	a2 00		ldx #$00		ldx #0
1048	.0499	808499	bd 89 00	lda $800089,x	-	lda GameData.score,x			; score is stored in most significant digit -> lowest significant digit
1049	.049c	80849c	dd 8f 00	cmp $80008f,x		cmp GameData.high,x
1050	.049f	80849f	f0 04		beq $8084a5		beq _next						; if == next digit
1051	.04a1	8084a1	b0 14		bcs $8084b7		bcs _higher						; if >= new high score take it
1052	.04a3	8084a3	80 05		bra $8084aa			bra _clearScore			; thus < and just clear it no new high
1053	.04a5	8084a5					_next
1054	.04a5	8084a5	e8		inx			inx
1055	.04a6	8084a6	e0 06		cpx #$06		cpx #size(sGameData.score)
1056	.04a8	8084a8	d0 ef		bne $808499		bne -
1057	.04aa	8084aa					_clearScore
1058	.04aa	8084aa	a2 05		ldx #$05		ldx #size(sGameData.score)-1
1059	.04ac	8084ac	a9 00		lda #$00		lda #0
1060	.04ae	8084ae	9d 89 00	sta $800089,x	-	sta GameData.score,x
1061	.04b1	8084b1	ca		dex			dex
1062	.04b2	8084b2	10 fa		bpl $8084ae		bpl -
1063	.04b4	8084b4	4c 50 8b	jmp $808b50		jmp dmaScreenMirror_xx		; update the actual screen. this is risky as I don't know I'm in Blank
1064								;rts								; explicity and I rely on the NMI being short and the DMA only being 2K
1065								;
1066	.04b7	8084b7					_higher
1067	.04b7	8084b7	a2 05		ldx #$05		ldx #size(sGameData.score)-1	; save the current score into the high score
1068	.04b9	8084b9	bd 89 00	lda $800089,x	-	lda GameData.score,x
1069	.04bc	8084bc	9d 8f 00	sta $80008f,x		sta GameData.high,x
1070	.04bf	8084bf	ca		dex			dex
1071	.04c0	8084c0	10 f7		bpl $8084b9		bpl -
1072	.04c2	8084c2	20 db 87	jsr $8087db		jsr pltHighScore					; update the high score on the screen
1073	.04c5	8084c5	80 e3		bra $8084aa		gra _clearScore

1075	.04c7	8084c7					GOWaitForFire
1076	.04c7	8084c7					_ASSERT_axy8
1077								;wait for fire
1078	.04c7	8084c7	ad 7e 00	lda $80007e		lda joyFire									; if !fire && oldFire
1079	.04ca	8084ca	d0 10		bne $8084dc		bne _exit									; aka fire released
1080	.04cc	8084cc	ad 83 00	lda $800083			lda oldJoyFire
1081	.04cf	8084cf	f0 0b		beq $8084dc			beq _exit
1082										; got to Title Screen State
1083	.04d1	8084d1	9c a1 00	stz $8000a1				stz PlayerData.state				; first minor FSM state
1084	.04d4	8084d4	a9 74		lda #$74				lda #<titleScreenLoop
1085	.04d6	8084d6	85 1b		sta $1b					sta GameStatePointer.lo
1086	.04d8	8084d8	a9 83		lda #$83				lda #>titleScreenLoop
1087	.04da	8084da	85 1c		sta $1c					sta GameStatePointer.hi			; move main FSM to titlescreen
1088	.04dc	8084dc					_exit
1089	.04dc	8084dc	60		rts			rts

1091							; ----- @Misc functions@ -----

1093							; these are the inital timer load values
1094	.04dd	8084dd					kTimers .block
1095	=$8							dissBlocksValue = $8
1096	=$50							floatTimer = $50
1097	=10							DoorAnimeRate = 10
1098	=30							spawnBubble = 30
1099							.bend

1101							.as
1102							.xs
1103	.04dd	8084dd					updateTickdowns_88
1104	.04dd	8084dd					_ASSERT_jsr
1105	.04dd	8084dd					_ASSERT_axy8
1106	.04dd	8084dd	a2 0d		ldx #$0d		ldx #TICK_DOWN_END - TICK_DOWN_START-1
1107	.04df	8084df	bd be 00	lda $8000be,x	_l	lda TickDowns,x		; if !0
1108	.04e2	8084e2	f0 03		beq $8084e7		beq _next
1109	.04e4	8084e4	de be 00	dec $8000be,x			dec TickDowns,x	; timer--
1110	.04e7	8084e7					_next
1111	.04e7	8084e7	ca		dex			dex
1112	.04e8	8084e8	10 f5		bpl $8084df		bpl _l
1113	.04ea	8084ea	60		rts			rts

1115							.as
1116							.xs
1117	.04eb	8084eb					scanJoystick_88
1118							; so this is a SNES and its a Pad, but historic reasons joystick.
1119	.04eb	8084eb					_ASSERT_jsr
1120	.04eb	8084eb					_ASSERT_axy8
1121								; copy the current state to the old state
1122	.04eb	8084eb	a2 04		ldx #$04		ldx #4
1123	.04ed	8084ed	bd 7a 00	lda $80007a,x	-	lda joyLeft,x
1124	.04f0	8084f0	9d 7f 00	sta $80007f,x		sta oldJoyLeft,x
1125	.04f3	8084f3	9e 7a 00	stz $80007a,x		stz joyLeft,x
1126	.04f6	8084f6	ca		dex			dex
1127	.04f7	8084f7	10 f4		bpl $8084ed		bpl -
1128								; read in the new state
1129								; this uses an odd method of slide the bit out and branching
1130								; its somewhat fast but also compresses really well
1131								; most snes games keep the bit flags in one word
1132								; this works alright on a NES where RAM is precious
1133								; on the C64 RAM is RAM so any trade off in code size vs data size
1134								; is good either way
1135								; the SNES.. we ample ROM and ample RAM so up to the style
1136								; for single input checks this is tighter but for button combinations
1137								; its more expensive, so it depends on what your game does
1138								; also SNES pad is active low
1139								; SNES auto read inverts it to make it active high
1140	.04f9	8084f9	a2 01		ldx #$01		ldx #1
1141	.04fb	8084fb	ad 19 42	lda $804219		lda $804219			;JOY1H
1142	.04fe	8084fe	4a		lsr a			lsr a					;right
1143	.04ff	8084ff	b0 4e		bcs $80854f		bcs _joyRight
1144	.0501	808501	4a		lsr a				lsr a				; left
1145	.0502	808502	b0 46		bcs $80854a			bcs _joyLeft
1146	.0504	808504					_checkUD
1147	.0504	808504	4a		lsr a			lsr a					; down
1148	.0505	808505	b0 3d		bcs $808544		bcs _joyDown
1149	.0507	808507	4a		lsr a				lsr a				; up
1150	.0508	808508	b0 30		bcs $80853a			bcs _joyUp
1151	.050a	80850a					_checkFire
1152	.050a	80850a	4a		lsr a			lsr a 				; start
1153	.050b	80850b	4a		lsr a			lsr a 				; select
1154	.050c	80850c	4a		lsr a			lsr a 				; Y
1155	.050d	80850d	b0 30		bcs $80853f		bcs _joyY
1156	.050f	80850f					_checkB
1157	.050f	80850f	4a		lsr a			lsr a 				; B
1158	.0510	808510	90 03		bcc $808515		bcc _joyEnd
1159	.0512	808512	8e 7c 00	stx $80007c			stx joyUp
1160	.0515	808515					_joyEnd
1161	.0515	808515	ad 81 00	lda $800081		lda oldJoyUp		; old up			0011
1162	.0518	808518	4d 7c 00	eor $80007c		eor joyUp			; eor new up	0101
1163	.051b	80851b	2d 7c 00	and $80007c		and joyUp			; and up			0101
1164	.051e	80851e	8d 84 00	sta $800084		sta joyUpStart		; 					0100

1166	.0521	808521	ad 7c 00	lda $80007c		lda joyUp			; up				0011
1167	.0524	808524	4d 81 00	eor $800081		eor OldJoyUp		; eor old up	0101
1168	.0527	808527	2d 81 00	and $800081		and OldJoyUp		; and old up	0101
1169	.052a	80852a	8d 85 00	sta $800085		sta joyUpStop		;					0100

1171	.052d	80852d	ad 83 00	lda $800083		lda oldJoyFire
1172	.0530	808530	4d 7e 00	eor $80007e		eor joyFire
1173	.0533	808533	2d 7e 00	and $80007e		and joyFire
1174	.0536	808536	8d 86 00	sta $800086		sta joyFireEvent
1175	.0539	808539	60		rts			rts

1177	.053a	80853a					_joyUp
1178	.053a	80853a	8e 7c 00	stx $80007c		stx joyUp
1179	.053d	80853d	b0 cb		bcs $80850a		gcs _checkFire

1181	.053f	80853f					_joyY
1182	.053f	80853f	8e 7e 00	stx $80007e		stx joyFire
1183	.0542	808542	b0 cb		bcs $80850f		gcs _checkB

1185	.0544	808544					_joyDown
1186	.0544	808544	8e 7d 00	stx $80007d		stx joyDown
1187	.0547	808547	4a		lsr a			lsr a 			; skip up bit
1188	.0548	808548	80 c0		bra $80850a		bra _checkFire

1190	.054a	80854a					_joyLeft
1191	.054a	80854a	8e 7a 00	stx $80007a		stx joyLeft
1192	.054d	80854d	b0 b5		bcs $808504		gcs _checkUD

1194	.054f	80854f					_joyRight
1195	.054f	80854f	8e 7b 00	stx $80007b		stx joyRight
1196	.0552	808552	4a		lsr a			lsr a				; skip left bit
1197	.0553	808553	80 af		bra $808504		bra _checkUD

1199							.as
1200							.xs
1201	.0555	808555					addXWithMSBAndClip_88
1202	.0555	808555					_ASSERT_jsr
1203	.0555	808555					_ASSERT_axy8
1204							; so the wonderful world of clipping an 8 bit value in 8bits
1205							; you can't just check overflow because you add negative numbers
1206							; you could check if you are doing a negative value, negaite it and
1207							; subtract it and check over/underflow that way.
1208							; firstly sprites have a width and must remain on screen, although some sprites are
1209							; 24 pixels wide I treat all as if they are 16. Which on a C64 was an issue as the HUD
1210							; was on the side. On a SNES no problem ;)
1211							; if you are very low and suddenly get very high you overflow.
1212							; we don't actually clip to 256 we clip to 256-width of sprite which is 16 so as long as things
1213							; can't move more than 16px a frame we are fine, we just check if you are under 256-16 and clip if over
1214							; as long as we where on that side of the screen to begin with.
1215							; I do a mid range check for the "don't care just do it" case. It saves some clocks.
1216	.0555	808555	64 2f		stz $2f			stz DidClipX										; not clipped yet
1217	.0557	808557	bd 7f 03	lda $80037f,x		lda mplexBuffer.xpos,x							; read the X
1218	.055a	80855a	c9 e0		cmp #$e0		cmp #256-32
1219	.055c	80855c	b0 11		bcs $80856f		bcs _veryRight										; if in the right most 32 pixels we are very right
1220	.055e	80855e	c9 20		cmp #$20		cmp #32
1221	.0560	808560	b0 1b		bcs $80857d		bcs _justAddAndGo									; if over 32 we are in the middle
1222								;_veryLeft
1223									;clc												; just did a bcs so c must be clear
1224	.0562	808562	6d 89 02	adc $800289			adc checkSpriteToCharData.xDeltaCheck
1225	.0565	808565	c9 c8		cmp #$c8			cmp #200
1226	.0567	808567	90 18		bcc $808581			bcc _justStore									; if we are < 200 we are still on the correct side
1227	.0569	808569	e6 2f		inc $2f					inc DidCLipX								; we are over, clip
1228	.056b	80856b	a9 00		lda #$00				lda #0
1229	.056d	80856d	80 12		bra $808581				bra _justStore
1230										;
1231	.056f	80856f						_veryRight
1232	.056f	80856f	18		clc				clc												; so we are in the last 2 "blocks"
1233	.0570	808570	6d 89 02	adc $800289			adc checkSpriteToCharData.xDeltaCheck
1234	.0573	808573	c9 f0		cmp #$f0			cmp #256-16										; we don't want to go past the edge of the last block
1235	.0575	808575	90 0a		bcc $808581			bcc _justStore
1236	.0577	808577	e6 2f		inc $2f					inc DidClipX								; we are over clip
1237	.0579	808579	a9 f0		lda #$f0				lda #256-16
1238	.057b	80857b	80 04		bra $808581				bra _justStore
1239	.057d	80857d						_justAddAndGo
1240	.057d	80857d	18		clc				clc
1241	.057e	80857e	6d 89 02	adc $800289			adc checkSpriteToCharData.xDeltaCheck	; safe area just add and go
1242	.0581	808581						_justStore
1243	.0581	808581	9d 7f 03	sta $80037f,x			sta mplexBuffer.xpos,x
1244	.0584	808584	60		rts			rts

1246							.as
1247							.xs
1248	.0585	808585					ClipY
1249	.0585	808585					_ASSERT_jsr
1250	.0585	808585					_ASSERT_axy8
1251							; now Y the screen is only 224 high, while you could just use 256 and "let it happen" it will give a large delay
1252							; but we also have a hud, the game screen is only 192 high with 32 pixels of HUD. So when you go off the top you should
1253							; be moved closer to the bottom of the hud and when you fall off below the hud you should "warp" off the top
1254	.0585	808585	c9 d0		cmp #$d0		cmp #208			; 192 + sprite height
1255	.0587	808587	b0 01		bcs $80858a		bcs +
1256	.0589	808589	60		rts				rts 			; 0 - 192 = safe 192-208 = shared 16 off screen
1257	.058a	80858a	c9 f0		cmp #$f0	+	cmp #240			; if 208 < y < 240 then we have fallen off the bottom
1258	.058c	80858c	90 03		bcc $808591		bcc _bottomOfScreen
1259									; top of screen
1260	.058e	80858e	a9 c1		lda #$c1			lda #193		; move to just below the HUD
1261	.0590	808590	60		rts				rts
1262	.0591	808591					_bottomOfScreen
1263	.0591	808591	a9 f0		lda #$f0		lda #-16			; warp to being 16 pixels off the "top"
1264	.0593	808593	60		rts			rts

1266							.as
1267							.xs
1268	.0594	808594					giveScore
1269	.0594	808594					_ASSERT_jsr
1270	.0594	808594					_ASSERT_axy8
1271	.0594	808594	0a		asl a			asl a
1272	.0595	808595	0a		asl a			asl a
1273	.0596	808596	0a		asl a			asl a							; x8 while scores are 6 bytes long x6 is more trouble than wasting 2 bytes per score
1274	.0597	808597	09 05		ora #$05		ora #5						; move to the last digit
1275	.0599	808599	a8		tay			tay							; stash in Y for indexing - LUT would be quicker and smaller looking at it now
1276	.059a	80859a	a2 05		ldx #$05		ldx #5						; for 6 digits starting at LSD
1277	.059c	80859c	18		clc			clc							; clear initial C
1278	.059d	80859d					_scLoop
1279	.059d	80859d	bd 89 00	lda $800089,x		lda GameData.score,x
1280	.05a0	8085a0	79 b7 85	adc $8085b7,y		adc FruitScore,y
1281	.05a3	8085a3	9d 89 00	sta $800089,x		sta GameData.score,x		; score[x++] += points[y++]
1282	.05a6	8085a6	c9 0a		cmp #$0a		cmp #10						; digit overflow
1283	.05a8	8085a8	90 06		bcc $8085b0		bcc _ok
1284									;sec
1285	.05aa	8085aa	e9 0a		sbc #$0a			sbc #10					; restore to 0-9
1286	.05ac	8085ac	9d 89 00	sta $800089,x			sta GameData.score,x
1287	.05af	8085af	38		sec				sec 						; add 1 more next time
1288	.05b0	8085b0					_ok
1289	.05b0	8085b0	88		dey			dey
1290	.05b1	8085b1	ca		dex			dex
1291	.05b2	8085b2	10 e9		bpl $80859d		bpl _scLoop
1292	.05b4	8085b4	4c bd 87	jmp $8087bd		jmp pltScore

1294							;index for scores
1295	.05b7	8085b7					kScoreIndex .block
1296	=0							fruit = 0
1297	=1							flower = 1
1298	=2							key = 2
1299	=3							boss = 3
1300							.bend

1302	>05b7	8085b7	00 00 00 01 00 00 0f 0f		FruitScore	.byte 0,0,0,1,0,0,15,15
1303	>05bf	8085bf	00 00 00 05 00 00 0f 0f		FlowerScore .byte 0,0,0,5,0,0,15,15
1304	>05c7	8085c7	00 00 00 02 05 00 0f 0f		KeyScore		.byte 0,0,0,2,5,0,15,15
1305	>05cf	8085cf	00 01 00 00 00 00 0f 0f		BossScore	.byte 0,1,0,0,0,0,15,15

1307							.as
1308							.xs
1309	.05d7	8085d7					PlotTransitionScreenAndMakeNextChars
1310	.05d7	8085d7					_ASSERT_jsr
1311	.05d7	8085d7					_ASSERT_axy8
1312	.05d7	8085d7	20 56 86	jsr $808656			jsr clearMapInScreenMirror				; clear just the map, leaving the HUD "as is"
1313									; we need to copy in the current wall char elsewhere
1314	.05da	8085da	ae a0 00	ldx $8000a0			ldx LevelData.levelGraphicsSet		; this is the "current levels" set at this point
1315	.05dd	8085dd	bd 85 86	lda $808685,x			lda WallCharLUT.lo,x						; set the DMA source address based upon the set we want
1316	.05e0	8085e0	8d 02 43	sta $804302			sta $804302
1317	.05e3	8085e3	bd 89 86	lda $808689,x			lda WallCharLUT.hi,x
1318	.05e6	8085e6	8d 03 43	sta $804303			sta $804303
1319	.05e9	8085e9	a9 82		lda #$82			lda #`BackShadowChars
1320	.05eb	8085eb	8d 04 43	sta $804304			sta $804304
247:1	.05ee	8085ee	c2 10		rep #$10		REP #$10
1322:4	.05f0	8085f0	a2 80 00	ldx #$0080			ldx #4*8*4 									; we want to do 4 chars
1323	.05f3	8085f3	8e 05 43	stx $804305			stx $804305
1324	.05f6	8085f6	a2 01 18	ldx #$1801			ldx #%00000001 | $1800 					; A->B, Inc, Write WORD, $2118
1325	.05f9	8085f9	8e 00 43	stx $804300			stx $804300
1326	.05fc	8085fc	a2 c0 17	ldx #$17c0			ldx #kVRAM.gameChars+(124*4*8/2) 	; write them to char num 124-127
1327	.05ff	8085ff	8e 16 21	stx $802116			stx $802116									; 4 bytes per line, for 8 lines per char
1328	.0602	808602	a9 80		lda #$80			lda #$80										; but value is a word address so div 2
1329	.0604	808604	8d 15 21	sta $802115			sta $802115									; inc VRAM port address
1330	.0607	808607	a9 01		lda #$01			lda #1
1331	.0609	808609	8d 0b 42	sta $80420b			sta $80420B									; fire
243:1	.060c	80860c	e2 10		sep #$10		SEP #$10
1333:4									; now we need to draw the first floor half
1334	.060e	80860e	a9 50		lda #$50			lda #kIntermission.firstExit			; move to the start position
1335	.0610	808610	85 15		sta $15				sta ActiveTileIndex
1336	.0612	808612	8d 9a 00	sta $80009a			sta LevelData.playerIndex				; we start at the first door
1337	.0615	808615	a9 0e		lda #$0e			lda #kDoorOpen
1338	.0617	808617	20 d8 8c	jsr $808cd8			jsr pltSingleTileNoLookup			; first do is open
1339	.061a	80861a	a9 5f		lda #$5f			lda #kIntermission.secondExit
1340	.061c	80861c	85 15		sta $15				sta ActiveTileIndex
1341	.061e	80861e	8d 9b 00	sta $80009b			sta LevelData.exitIndex					; and leave on the second one
1342	.0621	808621	a9 0a		lda #$0a			lda #kDoorClosed
1343	.0623	808623	20 d8 8c	jsr $808cd8			jsr pltSingleTileNoLookup			; second door is closed
1344	.0626	808626	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw half a screens worth of the 'old' tile which was chached
1345	.0628	808628					_firstLoop
1346	.0628	808628	da		phx				phx											; preserve X
1347	.0629	808629	e6 15		inc $15					inc ActiveTileIndex					; move to the next tile
1348	.062b	80862b	a9 25		lda #$25				lda #kTiles.intermissionOldWall	; cached wall "block" num
1349	.062d	80862d	20 d8 8c	jsr $808cd8				jsr pltSingleTileNoLookup		; plot the value raw without doing a level -> screen tile lookup
1350	.0630	808630	fa		plx				plx											; restore X
1351	.0631	808631	ca		dex				dex
1352	.0632	808632	10 f4		bpl $808628			bpl _firstLoop								; until done

1354	.0634	808634	20 18 83	jsr $808318			jsr incLevelGraphicSet					; move to the next levels set
1355	.0637	808637	20 9a 8a	jsr $808a9a			jsr dmaLevelChars_xx						; install the chars to VRAM

1357	.063a	80863a	a2 07		ldx #$07			ldx #(kTileXCount/2)-1					; draw the second half of the screen
1358	.063c	80863c					_secondLoop
1359	.063c	80863c	da		phx				phx
1360	.063d	80863d	e6 15		inc $15					inc ActiveTileIndex
1361	.063f	80863f	a9 01		lda #$01				lda #kTiles.wall
1362	.0641	808641	20 d4 8c	jsr $808cd4				jsr pltSingleTile
1363	.0644	808644	fa		plx				plx
1364	.0645	808645	ca		dex				dex
1365	.0646	808646	10 f4		bpl $80863c			bpl _secondLoop
1366	.0648	808648	60		rts				rts

1368	=47						kEmptyTileNum = 47
1369	>0649	808649	2f				ClearEmptyTile .byte kEmptyTileNum	; for a fixed DMA

1371							.as
1372							.xs
1373	.064a	80864a					clearScreenMirrorToEmptyChar
1374	.064a	80864a					_ASSERT_jsr
1375	.064a	80864a					_ASSERT_axy8
1376	.064a	80864a	08		php			php
239:1	.064b	80864b	c2 20		rep #$20		REP #$20
1378:4	.064d	80864d	a9 00 08	lda #$0800			lda #32*32*2 	; whole screen
1379	.0650	808650	8d 05 43	sta $804305			sta $804305
1380	.0653	808653	4c 5f 86	jmp $80865f			jmp clearScreenMirrorCommon_16x

1382							.as
1383							.xs
1384	.0656	808656					clearMapInScreenMirror
1385	.0656	808656					_ASSERT_jsr
1386	.0656	808656					_ASSERT_axy8
1387	.0656	808656	08		php			php
239:1	.0657	808657	c2 20		rep #$20		REP #$20
1389:4	.0659	808659	a9 00 06	lda #$0600			lda #kTileXCount*kTileYCount*4*2 ; just the map
1390	.065c	80865c	8d 05 43	sta $804305			sta $804305
1391									; fall through
1392	.065f	80865f					clearScreenMirrorCommon_16x
1393	.065f	80865f					_ASSERT_a16
1394	.065f	80865f	a9 08 80	lda #$8008			lda #$8008	  ; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1395	.0662	808662	8d 00 43	sta $804300			sta $804300
1396	.0665	808665	a9 49 86	lda #$8649			lda #<>ClearEmptyTile
1397	.0668	808668	8d 02 43	sta $804302			sta $804302
1398	.066b	80866b	a9 80 00	lda #$0080			lda #`ClearEmptyTile
1399	.066e	80866e	8d 04 43	sta $804304			sta $804304
1400	.0671	808671	a9 00 20	lda #$2000			lda #<>ScreenMirror
1401	.0674	808674	8d 81 21	sta $802181			sta $802181
1402	.0677	808677	a9 20 7e	lda #$7e20			lda #>`ScreenMirror
1403	.067a	80867a	8d 82 21	sta $802182			sta $802182
1404	.067d	80867d	a9 01 00	lda #$0001			lda #$0001
1405	.0680	808680	8d 0b 42	sta $80420b			sta $80420B	 ; FIRE DMA
1406	.0683	808683	28		plp			plp
1407	.0684	808684	60		rts			rts

1409							; this points to the point of the complete floor tile in the BackShadowChar data
1410	.0685	808685					WallCharLUT .block
1411	=512							_offset = 16*4*8				; we are interested in 16th,17th,18th and 19th chars
1412	=[$828200,$828880,$828f00,$829580]			_values = BackShadowChars + range(4)*(size(BackShadowChars)/4) + _offset
1413	>0685	808685	00 80 00 80				lo .byte <(_values)
1414	>0689	808689	82 88 8f 95				hi .byte >(_values)
1415							.bend


1418							; these string functions have two entry points as they needed different CRAM values for when you draw them.
1419							; on the SNES I can't be bothered and the GAME OVER text has a black background and not a brown one :P
1420							; left for historic puposes or if you wish to correct this oversite.
1421							.as
1422							.xs
1423	.068d	80868d					plotStringAAtIndexXGameScreen
1424	.068d	80868d					_ASSERT_jsr
1425	.068d	80868d					_ASSERT_axy8
1426	.068d	80868d	64 10		stz $10			stz ZPTemp2
1427	.068f	80868f	80 02		bra $808693		bra psaaixCommon
1428							.as
1429							.xs
1430	.0691	808691					plotStringAAtIndexX
1431	.0691	808691					_ASSERT_jsr
1432	.0691	808691					_ASSERT_axy8
1433	.0691	808691	64 10		stz $10			stz ZPTemp2
1434	.0693	808693					psaaixCommon
1435								; to do this I use the WRAM port to the screen mirror, this is to contrast
1436								; to other functions where I use indrect long.
1437	.0693	808693	a0 7e		ldy #$7e		ldy #`ScreenMirror
1438	.0695	808695	8c 83 21	sty $802183		sty $802183 ; this is most probably a zero but to be "safe" do it this way
1439	.0698	808698	bd f5 ba	lda $80baf5,x		lda TitleScreenData.stringPos.lo,x
1440	.069b	80869b	8d 81 21	sta $802181		sta $802181
1441	.069e	80869e	bd 02 bb	lda $80bb02,x		lda TitleScreenData.stringPos.hi,x	; load up string X's Screeen Mirror pos
1442	.06a1	8086a1	8d 82 21	sta $802182		sta $802182
1443	.06a4	8086a4	bc e8 ba	ldy $80bae8,x		ldy TitleScreenData.string,x
1444	.06a7	8086a7	b9 0f bb	lda $80bb0f,y		lda StringTableLUTLo,y					; load up the strings data src pointer
1445	.06aa	8086aa	85 06		sta $06			sta Pointer1.lo
1446	.06ac	8086ac	b9 20 bb	lda $80bb20,y		lda StringTableLUTHi,y
1447	.06af	8086af	85 07		sta $07			sta Pointer1.hi
1448	.06b1	8086b1	a0 00		ldy #$00		ldy #0
1449	.06b3	8086b3	b1 06		lda ($06),y	-	lda (Pointer1),y							; read char
1450	.06b5	8086b5	c9 ff		cmp #$ff		cmp #$ff										; is it the terminator
1451	.06b7	8086b7	f0 0d		beq $8086c6		beq _done
1452	.06b9	8086b9	8f 80 21 00	sta $002180			sta $2180								; write to the WRAM port, which auto incs
1453	.06bd	8086bd	a5 10		lda $10				lda ZPTemp2 							; this holds the artributes we want
1454	.06bf	8086bf	8f 80 21 00	sta $002180			sta $2180								; write it too
1455	.06c3	8086c3	c8		iny				iny										; next char
1456	.06c4	8086c4	80 ed		bra $8086b3			bra -
1457	.06c6	8086c6					_done
1458	.06c6	8086c6	60		rts			rts

1460							; ----- @Hud@ -----

1462	.06c7	8086c7					kSBC .block ; kStatusBorderChars
1463	=205							M	= 205
1464	=206							TL	= 203+3
1465	=207							T	= 204+3
1466	=209							TR	= 206+3
1467	=208							L	= 205+3
1468	=210							R	= 207+3
1469	=250							BL	= 250
1470	=251							B	= 251
1471	=252							BR	= 252
1472	=211							QWAKT = 208+3
1473	=217							QWAKB = 214+3
1474	=223							Score = 220+3
1475	=229							High = 226+3
1476	=232							QwakP = 232
1477	=204							X = 204
1478	=236							Flower = 236
1479	=240							Digits = 240
1480							.bend

1482	=$20						kStatusAttributes = %00100000 ; PAL 0 no flips but higher priority
1483							fGetMemoryForScreenChar .function base,x,y
1484							.endf base + ( y*32*2 ) + ( x*2 )

1486							.as
1487							.xs
1488	.06c7	8086c7					plotStatusArea
1489	.06c7	8086c7					_ASSERT_jsr
1490	.06c7	8086c7					_ASSERT_axy8
1491							; we need to draw the bottom 4 rows, its 245 bytes vs 32*2*4 = 256 so 11 bytes smaller
1492							; but also it doesn't need a tool ;)
1493							; for this is use indrect long rather than WRAM port as an example of the mode and its uses
1494							; port would be smaller and fast though.
1495	=$7e2600						_statusStart = fGetMemoryForScreenChar(ScreenMirror,0,24)
1496	.06c7	8086c7	a9 00		lda #$00		lda #<_statusStart
1497	.06c9	8086c9	85 31		sta $31			sta ZPLong.lo
1498	.06cb	8086cb	a9 26		lda #$26		lda #>_statusStart
1499	.06cd	8086cd	85 32		sta $32			sta ZPLong.hi
1500	.06cf	8086cf	a9 7e		lda #$7e		lda #`_statusStart				; set the ZPLong to the start
1501	.06d1	8086d1	85 33		sta $33			sta ZPLong.bank		 			; of the hud in screen mirror
1502								; draw top row
1503	.06d3	8086d3	a0 00		ldy #$00		ldy #0
1504	.06d5	8086d5	a9 ce		lda #$ce		lda #kSBC.TL						; this is a top corner piece, 30 tops peieces, then another corner
1505	.06d7	8086d7	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1506	.06da	8086da	a2 1d		ldx #$1d		ldx #29 ; draw 30
1507	.06dc	8086dc	a9 cf		lda #$cf	-	lda #kSBC.T
1508	.06de	8086de	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1509	.06e1	8086e1	ca		dex			dex
1510	.06e2	8086e2	10 f8		bpl $8086dc		bpl -
1511	.06e4	8086e4	a9 d1		lda #$d1		lda #kSBC.TR
1512	.06e6	8086e6	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1513								; draw second row
1514	.06e9	8086e9	a9 d0		lda #$d0		lda #kSBC.L
1515	.06eb	8086eb	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1516									; draw the SCORE text
1517	.06ee	8086ee	a2 00		ldx #$00		ldx #kStatusRanges.Score
1518	.06f0	8086f0	20 99 87	jsr $808799		jsr plotStatusRangeY
1519									; skip score digits
1520	.06f3	8086f3	98		tya			tya
1521	.06f4	8086f4	18		clc			clc
1522	.06f5	8086f5	69 0c		adc #$0c		adc #12 ; 6 chars
1523	.06f7	8086f7	a8		tay			tay
1524									; draw empty char
1525	.06f8	8086f8	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1526									; draw top of QWAK
1527	.06fb	8086fb	a2 01		ldx #$01		ldx #kStatusRanges.QWAKT
1528	.06fd	8086fd	20 99 87	jsr $808799		jsr plotStatusRangeY
1529									; draw empty char
1530	.0700	808700	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1531									; draw top of QWAK
1532	.0703	808703	a9 e8		lda #$e8		lda #kSBC.QwakP
1533	.0705	808705	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1534	.0708	808708	a9 e9		lda #$e9		lda #kSBC.QwakP+1
1535	.070a	80870a	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1536									; draw 3 banks
1537	.070d	80870d	20 ac 87	jsr $8087ac		jsr plot3EmptyStatusCharToZPLong
1538									; draw top of Flower
1539	.0710	808710	a9 ec		lda #$ec		lda #kSBC.Flower
1540	.0712	808712	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1541	.0715	808715	a9 ed		lda #$ed		lda #kSBC.Flower+1
1542	.0717	808717	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1543									; draw 3 blanks
1544	.071a	80871a	20 ac 87	jsr $8087ac		jsr plot3EmptyStatusCharToZPLong
1545									; draw right edge
1546	.071d	80871d	a9 d2		lda #$d2		lda #kSBC.R
1547	.071f	80871f	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1548								; draw third row
1549	.0722	808722	a9 d0		lda #$d0		lda #kSBC.L
1550	.0724	808724	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1551	.0727	808727	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1552									; draw HIGH text
1553	.072a	80872a	a2 02		ldx #$02		ldx #kStatusRanges.High
1554	.072c	80872c	20 99 87	jsr $808799		jsr plotStatusRangeY
1555	.072f	80872f	a9 e5		lda #$e5		lda #kSBC.High
1556	.0731	808731	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1557	.0734	808734	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1558									; skip high score digits
1559	.0737	808737	98		tya			tya
1560	.0738	808738	18		clc			clc
1561	.0739	808739	69 0c		adc #$0c		adc #12
1562	.073b	80873b	a8		tay			tay
1563	.073c	80873c	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1564									; draw bottom half of qwak logo
1565	.073f	80873f	a2 03		ldx #$03		ldx #kStatusRanges.QWAKB
1566	.0741	808741	20 99 87	jsr $808799		jsr plotStatusRangeY
1567	.0744	808744	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1568									; draw bottom half of qwak
1569	.0747	808747	a9 ea		lda #$ea		lda #kSBC.QwakP+2
1570	.0749	808749	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1571	.074c	80874c	a9 eb		lda #$eb		lda #kSBC.QwakP+3
1572	.074e	80874e	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1573	.0751	808751	a9 cc		lda #$cc		lda #kSBC.X
1574	.0753	808753	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1575	.0756	808756	20 af 87	jsr $8087af		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1576									; plot lower half of flower
1577	.0759	808759	a9 ee		lda #$ee		lda #kSBC.Flower+2
1578	.075b	80875b	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1579	.075e	80875e	a9 ef		lda #$ef		lda #kSBC.Flower+3
1580	.0760	808760	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1581	.0763	808763	a9 cc		lda #$cc		lda #kSBC.X
1582	.0765	808765	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1583	.0768	808768	20 af 87	jsr $8087af		jsr plot2EmptyStatusCharToZPLong ; this is the digit but not worth skipping
1584	.076b	80876b	a9 d2		lda #$d2		lda #kSBC.R
1585	.076d	80876d	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1586								; draw forth row
1587	.0770	808770	a9 fa		lda #$fa		lda #kSBC.BL
1588	.0772	808772	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1589	.0775	808775	a2 1d		ldx #$1d		ldx #29 ; draw 30
1590	.0777	808777	a9 fb		lda #$fb	-	lda #kSBC.B
1591	.0779	808779	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1592	.077c	80877c	ca		dex			dex
1593	.077d	80877d	10 f8		bpl $808777		bpl -
1594	.077f	80877f	a9 fc		lda #$fc		lda #kSBC.BR
1595	.0781	808781	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1596	.0784	808784	20 bd 87	jsr $8087bd		jsr pltScore
1597	.0787	808787	20 db 87	jsr $8087db		jsr pltHighScore
1598	.078a	80878a	20 f9 87	jsr $8087f9		jsr pltLives
1599	.078d	80878d	4c 15 88	jmp $808815		jmp pltFlowers
1600	.0790	808790	60		rts			rts

1602	.0791	808791					kStatusRanges .block
1603	=0							Score = 0
1604	=1							QWAKT = 1
1605	=2							High = 2
1606	=3							QWAKB = 3
1607							.bend

1609	=((223,229),)					StatusRangePairs  := ((kSBC.Score, kSBC.Score+6),)
1610	=((223,229),(211,217))				StatusRangePairs ..= ((kSBC.QWAKT, kSBC.QWAKT+6),)
1611	=((223,229),(211,217),(229,232))		StatusRangePairs ..= ((kSBC.High,  kSBC.High+3),)	; the H needs manual repeating
1612	=((223,229),(211,217),(229,232),(217,223))	StatusRangePairs ..= ((kSBC.QWAKB, kSBC.QWAKB+6),)

1614	.0791	808791					StatusRangePairsLUT .block
1615	>0791	808791	df d3 e5 d9				start .byte StatusRangePairs[:,0]
1616	>0795	808795	e5 d9 e8 df				end .byte StatusRangePairs[:,1]
1617							.bend

1619	.0799	808799					plotStatusRangeY
1620	.0799	808799					_ASSERT_jsr
1621	.0799	808799					_ASSERT_axy8
1622							; this take a index into the table and draw the char until the last char spec'd in the table
1623	.0799	808799	bd 95 87	lda $808795,x		lda StatusRangePairsLUT.end,x
1624	.079c	80879c	85 0f		sta $0f			sta ZPTemp
1625	.079e	80879e	bd 91 87	lda $808791,x		lda StatusRangePairsLUT.start,x
1626	.07a1	8087a1	aa		tax			tax
1627	.07a2	8087a2	8a		txa		-	txa
1628	.07a3	8087a3	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1629	.07a6	8087a6	e8		inx			inx
1630	.07a7	8087a7	e4 0f		cpx $0f			cpx ZPTemp
1631	.07a9	8087a9	d0 f7		bne $8087a2		bne -
1632	.07ab	8087ab	60		rts			rts

1634	.07ac	8087ac					plot3EmptyStatusCharToZPLong
1635	.07ac	8087ac					_ASSERT_jsr
1636	.07ac	8087ac					_ASSERT_axy8
1637	.07ac	8087ac	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1638	.07af	8087af					plot2EmptyStatusCharToZPLong
1639	.07af	8087af	20 b2 87	jsr $8087b2		jsr plotEmptyStatusCharToZPLong
1640	.07b2	8087b2					plotEmptyStatusCharToZPLong
1641	.07b2	8087b2	a9 cd		lda #$cd		lda #kSBC.M
1642	.07b4	8087b4					plotStatusCharToZPLong
1643	.07b4	8087b4	97 31		sta [$31],y		sta [ZPLong],y
1644	.07b6	8087b6	c8		iny			iny
1645	.07b7	8087b7	a9 20		lda #$20		lda #kStatusAttributes
1646	.07b9	8087b9	97 31		sta [$31],y		sta [ZPLong],y
1647	.07bb	8087bb	c8		iny			iny
1648	.07bc	8087bc	60		rts			rts

1650	.07bd	8087bd					pltScore
1651	.07bd	8087bd					_ASSERT_jsr
1652	.07bd	8087bd					_ASSERT_axy8
1653	=$7e264e					_statusScore = fGetMemoryForScreenChar(ScreenMirror,7,25)	; location in screen mirror for the score
1654	.07bd	8087bd	a9 4e		lda #$4e		lda #<_statusScore
1655	.07bf	8087bf	85 31		sta $31			sta ZPLong.lo
1656	.07c1	8087c1	a9 26		lda #$26		lda #>_statusScore
1657	.07c3	8087c3	85 32		sta $32			sta ZPLong.hi
1658	.07c5	8087c5	a9 7e		lda #$7e		lda #`_statusScore
1659	.07c7	8087c7	85 33		sta $33			sta ZPLong.bank				; set ZP long
1660	.07c9	8087c9	a0 00		ldy #$00		ldy #0
1661	.07cb	8087cb	a2 00		ldx #$00		ldx #0
1662	.07cd	8087cd	bd 89 00	lda $800089,x	-	lda GameData.score,x			; get the score digits
1663	.07d0	8087d0	09 f0		ora #$f0		ora #kSBC.Digits				; convert from 0-9 to the 0-9chars (the needs them to be aligned on a 16 boundary)
1664	.07d2	8087d2	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong	; draw digit
1665	.07d5	8087d5	e8		inx			inx
1666	.07d6	8087d6	e0 06		cpx #$06		cpx #6							; do all 6
1667	.07d8	8087d8	d0 f3		bne $8087cd		bne -
1668	.07da	8087da	60		rts			rts

1670	.07db	8087db					pltHighScore
1671	.07db	8087db					_ASSERT_jsr
1672	.07db	8087db					_ASSERT_axy8
1673	=$7e268e					_statusHScore = fGetMemoryForScreenChar(ScreenMirror,7,26)	; location in screen mirror for the score
1674	.07db	8087db	a9 8e		lda #$8e		lda #<_statusHScore
1675	.07dd	8087dd	85 31		sta $31			sta ZPLong.lo
1676	.07df	8087df	a9 26		lda #$26		lda #>_statusHScore
1677	.07e1	8087e1	85 32		sta $32			sta ZPLong.hi
1678	.07e3	8087e3	a9 7e		lda #$7e		lda #`_statusHScore
1679	.07e5	8087e5	85 33		sta $33			sta ZPLong.bank
1680	.07e7	8087e7	a2 00		ldx #$00		ldx #0
1681	.07e9	8087e9	a0 00		ldy #$00		ldy #0
1682	.07eb	8087eb	bd 8f 00	lda $80008f,x	_l	lda GameData.high,x			; see above
1683	.07ee	8087ee	09 f0		ora #$f0		ora #kSBC.Digits
1684	.07f0	8087f0	20 b4 87	jsr $8087b4		jsr plotStatusCharToZPLong
1685	.07f3	8087f3	e8		inx			inx
1686	.07f4	8087f4	e0 06		cpx #$06		cpx #6
1687	.07f6	8087f6	d0 f3		bne $8087eb		bne _l
1688	.07f8	8087f8	60		rts			rts

1690	.07f9	8087f9					pltLives
1691	.07f9	8087f9					_ASSERT_jsr
1692	.07f9	8087f9					_ASSERT_axy8
1693	=$7e26b0					_statusLives = fGetMemoryForScreenChar(ScreenMirror,24,26)
1694	.07f9	8087f9	a9 b0		lda #$b0		lda #<_statusLives
1695	.07fb	8087fb	85 31		sta $31			sta ZPLong.lo
1696	.07fd	8087fd	a9 26		lda #$26		lda #>_statusLives
1697	.07ff	8087ff	85 32		sta $32			sta ZPLong.hi
1698	.0801	808801	a9 7e		lda #$7e		lda #`_statusLives
1699	.0803	808803	85 33		sta $33			sta ZPLong.bank
1700	.0805	808805	ad 87 00	lda $800087		lda GameData.lives		; get the lives
1701	.0808	808808	09 f0		ora #$f0		ora #kSBC.Digits
1702	.080a	80880a	c9 fa		cmp #$fa		cmp #kSBC.Digits+10		; clip it to max show 9
1703	.080c	80880c	90 02		bcc $808810		bcc _safe
1704	.080e	80880e	a9 f9		lda #$f9			lda #kSBC.Digits+9
1705	.0810	808810					_safe
1706	.0810	808810	a0 00		ldy #$00		ldy #0
1707	.0812	808812	4c b4 87	jmp $8087b4		jmp plotStatusCharToZPLong
1708								;rts

1710	.0815	808815					pltFlowers
1711	.0815	808815					_ASSERT_jsr
1712	.0815	808815					_ASSERT_axy8
1713	=$7e26ba					_statusFlowers = fGetMemoryForScreenChar(ScreenMirror,29,26)
1714	.0815	808815	a9 ba		lda #$ba		lda #<_statusFlowers
1715	.0817	808817	85 31		sta $31			sta ZPLong.lo
1716	.0819	808819	a9 26		lda #$26		lda #>_statusFlowers
1717	.081b	80881b	85 32		sta $32			sta ZPLong.hi
1718	.081d	80881d	a9 7e		lda #$7e		lda #`_statusFlowers
1719	.081f	80881f	85 33		sta $33			sta ZPLong.bank
1720	.0821	808821	ad 88 00	lda $800088		lda GameData.flowers
1721	.0824	808824	09 f0		ora #$f0		ora #kSBC.Digits				; flowers can only be 1-8 anyway
1722	.0826	808826	a0 00		ldy #$00		ldy #0
1723	.0828	808828	4c b4 87	jmp $8087b4		jmp plotStatusCharToZPLong
1724								;rts

1726							; ----- @Sprite Engine@ -----

1728	.082b	80882b					dmaOAM_xx					; copy all of OAM mirror -> OAM Ram in PPU
1729	.082b	80882b					_ASSERT_JSR
1730	.082b	80882b	08		php			php						; save the current register sizes
247:1	.082c	80882c	c2 10		rep #$10		REP #$10
235	.082e	80882e	e2 20		sep #$20		SEP #$20
1733:4	.0830	808830	9c 02 21	stz $802102			stz $802102			; OAM is zero
1734	.0833	808833	9c 03 21	stz $802103			stz $802103			; A is 8bits ldx #0000 stx ABS is slower
1735	.0836	808836	a2 00 04	ldx #$0400			ldx #$0400			; A -> B, INC, Write BYTE | OAM
1736	.0839	808839	8e 10 43	stx $804310			stx $804310
1737	.083c	80883c	a2 eb 03	ldx #$03eb			ldx #<>OAMMirror	; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1738	.083f	80883f	8e 12 43	stx $804312			stx $804312
1739	.0842	808842	a2 7e 20	ldx #$207e			ldx #$207E 			; We want bank 7e and we are trasfereing 512+32 bytes
1740	.0845	808845	8e 14 43	stx $804314			stx $804314
1741	.0848	808848	a9 02		lda #$02			lda #$02
1742	.084a	80884a	8d 16 43	sta $804316			sta $804316
1743	.084d	80884d	8d 0b 42	sta $80420b			sta $80420B			; DMA channel 1 saves a load
1744	.0850	808850	28		plp			plp
1745	.0851	808851	60		rts			rts

1747	=224						kSpriteEmptyVal = 224
1748	>0852	808852	e0				SpriteEmptyVal .byte kSpriteEmptyVal
1749	>0853	808853	55				SpriteUpperEmpty .byte $55

1751							.as
1752							.xs
1753	.0854	808854					disableAllEntSprites_88
1754	.0854	808854					_ASSERT_jsr
1755	.0854	808854					_ASSERT_axy8
1756							; this sets all sprites to off screen
1757	.0854	808854	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1758	.0856	808856	a2 1f		ldx #$1f		ldx #mplex.kMaxSpr
1759	.0858	808858	9d bf 03	sta $8003bf,x	-	sta mplexBuffer.ypos,x
1760	.085b	80885b	9d 7f 03	sta $80037f,x		sta mplexBuffer.xpos,x
1761	.085e	80885e	ca		dex			dex
1762	.085f	80885f	d0 f7		bne $808858		bne -
1763								; fall through
1764	.0861	808861					clearSpritesMirror_xx
1765	.0861	808861					_ASSERT_JSR
1766	.0861	808861	08		php			php											; save register size
247:1	.0862	808862	c2 10		rep #$10		REP #$10
235	.0864	808864	e2 20		sep #$20		SEP #$20
1769:4									; Do Main 256 words
1770	.0866	808866	a2 18 80	ldx #$8018			ldx #$8018								; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1771	.0869	808869	8e 10 43	stx $804310			stx $804310
1772	.086c	80886c	a2 52 88	ldx #$8852			ldx #<>SpriteEmptyVal				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1773	.086f	80886f	8e 12 43	stx $804312			stx $804312
1774	.0872	808872	a2 80 00	ldx #$0080			ldx #`SpriteEmptyVal					; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1775	.0875	808875	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 0
1776	.0878	808878	a2 eb 03	ldx #$03eb			ldx #<>OAMMirror
1777	.087b	80887b	8e 81 21	stx $802181			stx $802181
1778	.087e	80887e	9c 83 21	stz $802183			stz $802183								; START AT OAM MIRROR
1779	.0881	808881	a9 02		lda #$02			lda #2
1780	.0883	808883	8d 16 43	sta $804316			sta $804316								; DO 512 BYTES
1781	.0886	808886	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1782									; Do upper 16 words
1783									;	ldx #$8018							; A -> B, FIXED SOURCE, WRITE BYTE | WRAM
1784									;	stx $804310
1785	.0889	808889	a2 53 88	ldx #$8853			ldx #<>SpriteUpperEmpty				; THIS GET THE LOW WORD, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1786	.088c	80888c	8e 12 43	stx $804312			stx $804312
1787	.088f	80888f	a2 80 20	ldx #$2080			ldx #(32<<8)|`SpriteUpperEmpty	; THIS GETS THE BANK, YOU WILL NEED TO CHANGE IF NOT USING 64TASS
1788	.0892	808892	8e 14 43	stx $804314			stx $804314								; AND THE UPPER BYTE WILL BE 32
1789	.0895	808895	9c 16 43	stz $804316			stz $804316								; DO 32 BYTES
1790									;	ldx #<>OAMMirrorHigh
1791									;	stx $802181							; IF THIS IS DIRECTLY AFTER LO, WRAM ALREADY POINTS TO IT
1792									;	stz $802183							; START AT HIGH
1793									;	lda #$02
1794	.0898	808898	8d 0b 42	sta $80420b			sta $80420B								; FIRE DMA
1795	.089b	80889b	28		plp			plp											; restore register size
1796	.089c	80889c	60		rts			rts

1798							.as
1799							.xs
1800	.089d	80889d					updateAllSpriteXYsToOAMMirror_88
1801	.089d	80889d					_ASSERT_jsr
1802	.089d	80889d					_ASSERT_axy8
1803	.089d	80889d	20 61 88	jsr $808861		jsr clearSpritesMirror_xx
1804								; handle the player which has special cases
1805	.08a0	8088a0	20 f0 90	jsr $8090f0		jsr setPlayerSpritePtrFromFrameNumber_88
1806	.08a3	8088a3	64 0f		stz $0f			stz ZPTemp
1807	.08a5	8088a5	ae b4 00	ldx $8000b4		ldx PlayerData.currAnim
1808	.08a8	8088a8	a0 00		ldy #$00		ldy #0
1809	.08aa	8088aa	bd 8c 91	lda $80918c,x		lda PlayerFrameData.animXOffset,x
1810	.08ad	8088ad	85 06		sta $06			sta Pointer1.lo
1811	.08af	8088af	10 01		bpl $8088b2		bpl +											; do we need to sign extend ?
1812	.08b1	8088b1	88		dey				dey 										; yes - 255
1813	.08b2	8088b2	84 07		sty $07		+	sty Pointer1.hi
1814	.08b4	8088b4	ad 7f 03	lda $80037f		lda mplexBuffer.xpos						; get any X offset for this anim
239:1	.08b7	8088b7	c2 20		rep #$20		REP #$20
1816:4	.08b9	8088b9	29 ff 00	and #$00ff		and #$ff										; make sure its the 8bit value we expect
1817	.08bc	8088bc	18		clc			clc
1818	.08bd	8088bd	65 06		adc $06			adc Pointer1								; offset the Xpos
235:1	.08bf	8088bf	e2 20		sep #$20		SEP #$20
1820:4	.08c1	8088c1	8d eb 03	sta $8003eb		sta OAMMirror								; store the offset X
1821	.08c4	8088c4	8d ef 03	sta $8003ef		sta OAMMirror+4							; set the lower sprite in case
1822	.08c7	8088c7	eb		xba			xba
1823	.08c8	8088c8	f0 04		beq $8088ce		beq +											; have we overflown ?
1824	.08ca	8088ca	a9 05		lda #$05			lda #%00000101							; set the XMSB bit then
1825	.08cc	8088cc	85 0f		sta $0f				sta ZPTemp
1826	.08ce	8088ce	ad bf 03	lda $8003bf	+	lda mplexBuffer.ypos
1827	.08d1	8088d1	3a		dec a			dec a											; adjust for sprites being 1 below given y on SNES
1828	.08d2	8088d2	8d ec 03	sta $8003ec		sta OAMMirror+1
1829	.08d5	8088d5	18		clc			clc
1830	.08d6	8088d6	69 10		adc #$10		adc #16										; prep y + 16 in case
1831	.08d8	8088d8	ae b4 00	ldx $8000b4		ldx PlayerData.currAnim
1832	.08db	8088db	bc 78 91	ldy $809178,x		ldy PlayerFrameData.sizes,x			; do we have a dual sprite?
1833	.08de	8088de	a2 50		ldx #$50		ldx #%01010000								; 2 sprites small
1834	.08e0	8088e0	c0 01		cpy #$01		cpy #kSpriteType.s16x32
1835	.08e2	8088e2	f0 0d		beq $8088f1		beq +											; yes store the +16 y
1836	.08e4	8088e4	a2 e0		ldx #$e0			ldx #kSpriteEmptyVal					; no set 2nd sprite offscreen
1837	.08e6	8088e6	8e ef 03	stx $8003ef			stx OAMMirror+4
1838	.08e9	8088e9	a2 54		ldx #$54			ldx #%01010100							; 1 sprite small
1839	.08eb	8088eb	c0 02		cpy #$02			cpy #kSpriteType.s32x32
1840	.08ed	8088ed	d0 02		bne $8088f1			bne +
1841	.08ef	8088ef	a2 56		ldx #$56				ldx #%1010110						; 1 sprite large
1842	.08f1	8088f1	8d f0 03	sta $8003f0	+	sta OAMMirror+5
1843	.08f4	8088f4	8a		txa			txa
1844	.08f5	8088f5	05 0f		ora $0f			ora ZPTemp									; set the X-MSB if needed
1845	.08f7	8088f7	8d eb 05	sta $8005eb		sta OAMMirrorHigh
1846								; next add the bullet, if needed
1847	.08fa	8088fa	ad b6 00	lda $8000b6		lda PlayerData.bulletActive
1848	.08fd	8088fd	f0 16		beq $808915		beq _noBullet
1849									; either way the bullet is a 16x16 sprite
1850	.08ff	8088ff	ad 80 03	lda $800380			lda mplexBuffer.xpos+kBulletSpriteOffset
1851	.0902	808902	8d f3 03	sta $8003f3			sta OAMMirror+8
1852	.0905	808905	ad c0 03	lda $8003c0			lda mplexBuffer.ypos+kBulletSpriteOffset
1853	.0908	808908	8d f4 03	sta $8003f4			sta OAMMirror+9
1854	.090b	80890b	ad eb 05	lda $8005eb			lda OAMMirrorHigh
1855	.090e	80890e	29 cf		and #$cf			and #%11001111
1856	.0910	808910	8d eb 05	sta $8005eb			sta OAMMirrorHigh	; clear the X MSB for bullet, so you can see it
1857	.0913	808913	80 08		bra $80891d			bra _bulletTile
1858									;
1859	.0915	808915					_noBullet
1860	.0915	808915	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1861	.0917	808917	8d f3 03	sta $8003f3		sta OAMMirror+8		; make sure the bullet is offscreen
1862	.091a	80891a	8d f4 03	sta $8003f4		sta OAMMirror+9
1863	.091d	80891d					_bulletTile
1864	.091d	80891d	ae 8d 02	ldx $80028d		ldx bulletFrame		; we set the frame, either way doesn't matter
1865	.0920	808920	bd 1e 93	lda $80931e,x		lda PlayerBulletAnimData.lo,x
1866	.0923	808923	8d f5 03	sta $8003f5		sta OAMMirror+10
1867	.0926	808926	bd 23 93	lda $809323,x		lda PlayerBulletAnimData.hi,x
1868	.0929	808929	8d f6 03	sta $8003f6		sta OAMMirror+11
1869								; now add the entities
1870	.092c	80892c	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
1871	.092e	80892e	86 0f		stx $0f			stx ZPTemp
1872	.0930	808930					_EntLoop
1873	.0930	808930	a6 0f		ldx $0f			ldx ZPTemp
1874	.0932	808932	bd ff 00	lda $8000ff,x		lda EntityData.active,x						; if allive
1875	.0935	808935	f0 0b		beq $808942		beq _notActive
1876	.0937	808937	bc cd 00	ldy $8000cd,x			ldy EntityData.type,x					; get the type
1877	.093a	80893a	b9 55 9c	lda $809c55,y			lda EntityAnimData.frameSize,y		; dispatch for the ent type size
1878	.093d	80893d	0a		asl a				asl a
1879	.093e	80893e	aa		tax				tax
1880	.093f	80893f	fc 47 89	jsr ($808947,x)			jsr (ENTSpriteDispatchLUT,x)
1881	.0942	808942					_notActive
1882	.0942	808942	c6 0f		dec $0f			dec ZPTemp
1883	.0944	808944	10 ea		bpl $808930		bpl _EntLoop
1884	.0946	808946	60		rts			rts

1886	>0947	808947	58 89 9c 89 ee 89		ENTSpriteDispatchLUT	.word <>(Ent16_16,Ent16_32,Ent32_32)

1888	.094d	80894d					EntSpriteConvertToOAMIndex
1889	.094d	80894d					_ASSERT_axy8
1890	.094d	80894d	a5 0f		lda $0f			lda ZPTemp					; get the current ent number
1891	.094f	80894f	aa		tax			tax							; cache it
1892	.0950	808950	18		clc			clc
1893	.0951	808951	69 02		adc #$02		adc #kEntsSpriteOffset	; offset by the start of ent sprites
1894	.0953	808953	0a		asl a			asl a
1895	.0954	808954	0a		asl a			asl a							; each ent is allocated upto 2 sprites, 4 bytes per sprite
1896	.0955	808955	0a		asl a			asl a							; x8 to convert ent number to OAM byte offset
1897	.0956	808956	a8		tay			tay							; y is now the OAM index
1898	.0957	808957	60		rts			rts

1900	.0958	808958					Ent16_16
1901	.0958	808958					_ASSERT_axy8
1902	.0958	808958	20 4d 89	jsr $80894d		jsr EntSpriteConvertToOAMIndex
1903	.095b	80895b	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1904	.095e	80895e	99 eb 03	sta $8003eb,y		sta OAMMirror,y			; set X
1905	.0961	808961	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1906	.0964	808964	3a		dec a			dec a							; adjust for SNES drawing sprites 1 lower than set value
1907	.0965	808965	99 ec 03	sta $8003ec,y		sta OAMMirror+1,y			; set Y
1908	.0968	808968	a9 e0		lda #$e0		lda #kSpriteEmptyVal		; set 2nd sprite off screen
1909	.096a	80896a	99 ef 03	sta $8003ef,y		sta OAMMirror+4,y
1910	.096d	80896d	99 f0 03	sta $8003f0,y		sta OAMMirror+5,y
1911	.0970	808970	bd 44 02	lda $800244,x		lda EntityData.palleteOffset,x
1912	.0973	808973	85 10		sta $10			sta ZPTemp2					; while X is still ent index, cache pallete offset
1913	.0975	808975	bd 4a 01	lda $80014a,x		lda EntityData.animBase,x
1914	.0978	808978	18		clc			clc
1915	.0979	808979	7d 63 01	adc $800163,x		adc EntityData.animFrame,x
1916	.097c	80897c	aa		tax			tax 							; x is now the EntityFrameData index
1917	.097d	80897d	bd 8b 9b	lda $809b8b,x		lda EntityFrameData.lo,x
1918	.0980	808980	99 ed 03	sta $8003ed,y		sta OAMMirror+2,y			; set Sprite number
1919	.0983	808983	bd e2 9b	lda $809be2,x		lda EntityFrameData.hi,x
1920	.0986	808986	18		clc			clc
1921	.0987	808987	65 10		adc $10			adc ZPTemp2 				; the cached palleteOffset
1922	.0989	808989	99 ee 03	sta $8003ee,y		sta OAMMirror+3,y			; set Attributes
1923								; update the high flags
1924	.098c	80898c	20 32 8a	jsr $808a32		jsr entSpriteUpdateUpperFlagsGetIndexes
1925	.098f	80898f	b9 eb 05	lda $8005eb,y		lda OAMMirrorHigh,y
1926	.0992	808992	3d 49 8a	and $808a49,x		and EntUpperANDMask,x
1927	.0995	808995	1d 4d 8a	ora $808a4d,x		ora Ent16_16_ORVal,x
1928	.0998	808998	99 eb 05	sta $8005eb,y		sta OAMMirrorHigh,y
1929	.099b	80899b	60		rts			rts

1931	.099c	80899c					Ent16_32
1932	.099c	80899c					_ASSERT_axy8
1933	.099c	80899c	20 4d 89	jsr $80894d		jsr EntSpriteConvertToOAMIndex
1934	.099f	80899f	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
1935	.09a2	8089a2	99 eb 03	sta $8003eb,y		sta OAMMirror,y
1936	.09a5	8089a5	99 ef 03	sta $8003ef,y		sta OAMMirror+4,y			; set both X's
1937	.09a8	8089a8	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1938	.09ab	8089ab	3a		dec a			dec a
1939	.09ac	8089ac	99 ec 03	sta $8003ec,y		sta OAMMirror+1,y			; set top Y
1940	.09af	8089af	18		clc			clc
1941	.09b0	8089b0	69 10		adc #$10		adc #16						; offset to bellow
1942	.09b2	8089b2	99 f0 03	sta $8003f0,y		sta OAMMirror+5,y			; set bottom Y
1943	.09b5	8089b5	bd 44 02	lda $800244,x		lda EntityData.palleteOffset,x
1944	.09b8	8089b8	85 10		sta $10			sta ZPTemp2
1945	.09ba	8089ba	bd 4a 01	lda $80014a,x		lda EntityData.animBase,x
1946	.09bd	8089bd	18		clc			clc
1947	.09be	8089be	7d 63 01	adc $800163,x		adc EntityData.animFrame,x
1948	.09c1	8089c1	aa		tax			tax 							; is now the EntityFrameData index
1949	.09c2	8089c2	bd 8b 9b	lda $809b8b,x		lda EntityFrameData.lo,x
1950	.09c5	8089c5	99 ed 03	sta $8003ed,y		sta OAMMirror+2,y			; set first sprite
1951	.09c8	8089c8	18		clc			clc
1952	.09c9	8089c9	69 20		adc #$20		adc #32						; offset to the tile bellow
1953	.09cb	8089cb	99 f1 03	sta $8003f1,y		sta OAMMirror+6,y			; set second sprite
1954	.09ce	8089ce	08		php			php							; save the C from the ADC
1955	.09cf	8089cf	bd e2 9b	lda $809be2,x			lda EntityFrameData.hi,x
1956	.09d2	8089d2	18		clc				clc
1957	.09d3	8089d3	65 10		adc $10				adc ZPTemp2				; offset, by the potential pallete offset
1958	.09d5	8089d5	99 ee 03	sta $8003ee,y			sta OAMMirror+3,y
1959	.09d8	8089d8	28		plp			plp							; restore the C from the next sprite tile adc
1960	.09d9	8089d9	69 00		adc #$00		adc #0						; add the C
1961	.09db	8089db	99 f2 03	sta $8003f2,y		sta OAMMirror+7,y			; store the bottom sprite attributes and tile MSB
1962								; update the high flags
1963	.09de	8089de	20 32 8a	jsr $808a32		jsr entSpriteUpdateUpperFlagsGetIndexes
1964	.09e1	8089e1	b9 eb 05	lda $8005eb,y		lda OAMMirrorHigh,y
1965	.09e4	8089e4	3d 49 8a	and $808a49,x		and EntUpperANDMask,x
1966	.09e7	8089e7	1d 51 8a	ora $808a51,x		ora Ent16_32_ORVal,x
1967	.09ea	8089ea	99 eb 05	sta $8005eb,y		sta OAMMirrorHigh,y
1968	.09ed	8089ed	60		rts			rts

1970	.09ee	8089ee					Ent32_32
1971	.09ee	8089ee					_ASSERT_axy8
1972	.09ee	8089ee	20 4d 89	jsr $80894d		jsr EntSpriteConvertToOAMIndex				; this is identical to 16_16 except different flags at the end
1973	.09f1	8089f1	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x	; I've not pulled this out into a function to make it easier to understand
1974	.09f4	8089f4	99 eb 03	sta $8003eb,y		sta OAMMirror,y									; the 16x16 function.
1975	.09f7	8089f7	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
1976	.09fa	8089fa	3a		dec a			dec a
1977	.09fb	8089fb	99 ec 03	sta $8003ec,y		sta OAMMirror+1,y
1978	.09fe	8089fe	a9 e0		lda #$e0		lda #kSpriteEmptyVal
1979	.0a00	808a00	99 ef 03	sta $8003ef,y		sta OAMMirror+4,y
1980	.0a03	808a03	99 f0 03	sta $8003f0,y		sta OAMMirror+5,y
1981	.0a06	808a06	bd 44 02	lda $800244,x		lda EntityData.palleteOffset,x
1982	.0a09	808a09	85 10		sta $10			sta ZPTemp2
1983	.0a0b	808a0b	bd 4a 01	lda $80014a,x		lda EntityData.animBase,x
1984	.0a0e	808a0e	18		clc			clc
1985	.0a0f	808a0f	7d 63 01	adc $800163,x		adc EntityData.animFrame,x
1986	.0a12	808a12	aa		tax			tax 													; is now the EntityFrameData index
1987	.0a13	808a13	bd 8b 9b	lda $809b8b,x		lda EntityFrameData.lo,x
1988	.0a16	808a16	99 ed 03	sta $8003ed,y		sta OAMMirror+2,y
1989	.0a19	808a19	bd e2 9b	lda $809be2,x		lda EntityFrameData.hi,x
1990	.0a1c	808a1c	18		clc			clc
1991	.0a1d	808a1d	65 10		adc $10			adc ZPTemp2
1992	.0a1f	808a1f	99 ee 03	sta $8003ee,y		sta OAMMirror+3,y
1993								; update the high flags
1994	.0a22	808a22	20 32 8a	jsr $808a32		jsr entSpriteUpdateUpperFlagsGetIndexes
1995	.0a25	808a25	b9 eb 05	lda $8005eb,y		lda OAMMirrorHigh,y
1996	.0a28	808a28	3d 49 8a	and $808a49,x		and EntUpperANDMask,x
1997	.0a2b	808a2b	1d 55 8a	ora $808a55,x		ora Ent32_32_ORVal,x
1998	.0a2e	808a2e	99 eb 05	sta $8005eb,y		sta OAMMirrorHigh,y
1999	.0a31	808a31	60		rts			rts

2001	.0a32	808a32					entSpriteUpdateUpperFlagsGetIndexes
2002	.0a32	808a32	a6 0f		ldx $0f			ldx ZPTemp											; this holds the entity number
2003	.0a34	808a34	bd a1 03	lda $8003a1,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x	; do we have MSB set?
2004	.0a37	808a37	08		php			php													; save Zero status
2005	.0a38	808a38	8a		txa				txa
2006	.0a39	808a39	4a		lsr a				lsr a												; ents have two sprites and the upper holds 4 sprites
2007	.0a3a	808a3a	1a		inc a				inc a												; so upper OAM mirrror byte is ent num / 2 + 1 to skip
2008	.0a3b	808a3b	a8		tay				tay												; to skip the plyaer + bullet sprite set
2009	.0a3c	808a3c	8a		txa				txa
2010	.0a3d	808a3d	29 01		and #$01			and #1											; x is now if sprite is even or odd number
2011	.0a3f	808a3f	aa		tax				tax												; i.e which half of the upper byte mirror it uses
2012	.0a40	808a40	28		plp			plp													; restore "if 0"
2013	.0a41	808a41	f0 05		beq $808a48		beq _noMSB
2014	.0a43	808a43	8a		txa				txa
2015	.0a44	808a44	18		clc				clc
2016	.0a45	808a45	69 02		adc #$02			adc #2 ; offset into MSB masks			; offset the index by 2 to access the MSB set versions
2017	.0a47	808a47	aa		tax				tax
2018	.0a48	808a48					_noMSB
2019	.0a48	808a48	60		rts			rts


2022													;		normal				 | XMSB
2023	>0a49	808a49	f0 0f f0 0f			EntUpperANDMask 	.byte %11110000,%00001111,%11110000,%00001111
2024	>0a4d	808a4d	04 40 06 60			Ent16_16_ORVal		.byte %00000100,%01000000,%00000110,%01100000
2025	>0a51	808a51	00 00 05 50			Ent16_32_ORVal		.byte %00000000,%00000000,%00000101,%01010000
2026	>0a55	808a55	06 60 07 70			Ent32_32_ORVal		.byte %00000110,%01100000,%00000111,%01110000


2029							; ----- @DMA functions@ -----

2031	.0a59	808a59					dmaPalletes_XX
2032	.0a59	808a59					_ASSERT_JSR
2033	.0a59	808a59	08		php			php
235:1	.0a5a	808a5a	e2 20		sep #$20		SEP #$20
247	.0a5c	808a5c	c2 10		rep #$10		REP #$10
2036:4	.0a5e	808a5e	a2 c0 ae	ldx #$aec0			ldx #<>CharPallete
2037	.0a61	808a61	8e 02 43	stx $804302			stx $804302
2038	.0a64	808a64	a9 82		lda #$82			lda #`CharPallete
2039	.0a66	808a66	8d 04 43	sta $804304			sta $804304
2040	.0a69	808a69	a2 20 00	ldx #$0020			ldx #32
2041	.0a6c	808a6c	8e 05 43	stx $804305			stx $804305
2042	.0a6f	808a6f	a2 02 22	ldx #$2202			ldx #%00000010 | $2200 			; A->B, Inc, Write 2 Bytes, $2122
2043	.0a72	808a72	8e 00 43	stx $804300			stx $804300
2044	.0a75	808a75	9c 21 21	stz $802121			stz $802121							; start of Pallete
2045	.0a78	808a78	a9 01		lda #$01			lda #1
2046	.0a7a	808a7a	8d 0b 42	sta $80420b			sta $80420B
2047	.0a7d	808a7d	a2 e0 ae	ldx #$aee0			ldx #<>SpritePallete				; Sprite palletes which is 48 colours to slot 8-10
2048	.0a80	808a80	8e 02 43	stx $804302			stx $804302
2049	.0a83	808a83	a9 82		lda #$82			lda #`SpritePallete
2050	.0a85	808a85	8d 04 43	sta $804304			sta $804304
2051	.0a88	808a88	a2 60 00	ldx #$0060			ldx #32*3 							; copy 3 palletes worth
2052	.0a8b	808a8b	8e 05 43	stx $804305			stx $804305
2053	.0a8e	808a8e	a9 80		lda #$80			lda #128								; start of Sprite Pallete
2054	.0a90	808a90	8d 21 21	sta $802121			sta $802121
2055	.0a93	808a93	a9 01		lda #$01			lda #1
2056	.0a95	808a95	8d 0b 42	sta $80420b			sta $80420b
2057	.0a98	808a98	28		plp			plp
2058	.0a99	808a99	60		rts			rts

2060	.0a9a	808a9a					dmaLevelChars_xx
2061	.0a9a	808a9a					_ASSERT_JSR
2062	.0a9a	808a9a	08		php			php
255:1	.0a9b	808a9b	c2 30		rep #$30		REP #$30
2064:4	.0a9d	808a9d	29 ff 00	and #$00ff			and #$ff								; to be sure
2065	.0aa0	808aa0	0a		asl a				asl a
2066	.0aa1	808aa1	aa		tax				tax
2067	.0aa2	808aa2	bd ac 8b	lda $808bac,x			lda LevelCharsLUT,x
2068	.0aa5	808aa5	8d 02 43	sta $804302			sta $804302
235:1	.0aa8	808aa8	e2 20		sep #$20		SEP #$20
2070:4	.0aaa	808aaa	a9 82		lda #$82			lda #`BackShadowChars
2071	.0aac	808aac	8d 04 43	sta $804304			sta $804304
2072	.0aaf	808aaf	a2 80 06	ldx #$0680			ldx #size(BackShadowChars)/4	; we have 4 sets
2073	.0ab2	808ab2	8e 05 43	stx $804305			stx $804305
2074	.0ab5	808ab5	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2075	.0ab8	808ab8	8e 00 43	stx $804300			stx $804300
2076	.0abb	808abb	a2 00 10	ldx #$1000			ldx #kVRAM.gameChars
2077	.0abe	808abe	8e 16 21	stx $802116			stx $802116
2078	.0ac1	808ac1	a9 80		lda #$80			lda #$80
2079	.0ac3	808ac3	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2080	.0ac6	808ac6	a9 01		lda #$01			lda #1
2081	.0ac8	808ac8	8d 0b 42	sta $80420b			sta $80420B
2082	.0acb	808acb	28		plp			plp
2083	.0acc	808acc	60		rts			rts

2085	.0acd	808acd					dmaFixedChars_xx
2086	.0acd	808acd					_ASSERT_JSR
2087	.0acd	808acd	08		php			php
235:1	.0ace	808ace	e2 20		sep #$20		SEP #$20
247	.0ad0	808ad0	c2 10		rep #$10		REP #$10
2090:4	.0ad2	808ad2	a2 00 9a	ldx #$9a00			ldx #<>FixedSectionChars
2091	.0ad5	808ad5	8e 02 43	stx $804302			stx $804302
2092	.0ad8	808ad8	a9 82		lda #$82			lda #`FixedSectionChars
2093	.0ada	808ada	8d 04 43	sta $804304			sta $804304
2094	.0add	808add	a2 c0 04	ldx #$04c0			ldx #size(FixedSectionChars)
2095	.0ae0	808ae0	8e 05 43	stx $804305			stx $804305
2096	.0ae3	808ae3	a2 01 18	ldx #$1801			ldx #%00000001 | $1800			; A->B, Inc, Write WORD, $2118
2097	.0ae6	808ae6	8e 00 43	stx $804300			stx $804300
2098	.0ae9	808ae9	a2 40 13	ldx #$1340			ldx #kVRAM.gameChars+(52*16)
2099	.0aec	808aec	8e 16 21	stx $802116			stx $802116
2100	.0aef	808aef	a9 80		lda #$80			lda #$80
2101	.0af1	808af1	8d 15 21	sta $802115			sta $802115							; inc VRAM port address
2102	.0af4	808af4	a9 01		lda #$01			lda #1
2103	.0af6	808af6	8d 0b 42	sta $80420b			sta $80420B
2104									; the font
2105	.0af9	808af9	a2 c0 9e	ldx #$9ec0			ldx #<>Font4BPP
2106	.0afc	808afc	8e 02 43	stx $804302			stx $804302
2107	.0aff	808aff	a9 82		lda #$82			lda #`Font4BPP
2108	.0b01	808b01	8d 04 43	sta $804304			sta $804304
2109	.0b04	808b04	a2 00 08	ldx #$0800			ldx #size(Font4BPP)
2110	.0b07	808b07	8e 05 43	stx $804305			stx $804305
2111	.0b0a	808b0a	a2 00 18	ldx #$1800			ldx #kVRAM.gameChars+(128*16)
2112	.0b0d	808b0d	8e 16 21	stx $802116			stx $802116
2113	.0b10	808b10	a9 01		lda #$01			lda #1
2114	.0b12	808b12	8d 0b 42	sta $80420b			sta $80420B
2115									; the fixed upper chars
2116	.0b15	808b15	a2 c0 a6	ldx #$a6c0			ldx #<>TopFixedChars
2117	.0b18	808b18	8e 02 43	stx $804302			stx $804302
2118	.0b1b	808b1b	a9 82		lda #$82			lda #`TopFixedChars
2119	.0b1d	808b1d	8d 04 43	sta $804304			sta $804304
2120	.0b20	808b20	a2 00 08	ldx #$0800			ldx #size(TopFixedChars)
2121	.0b23	808b23	8e 05 43	stx $804305			stx $804305
2122	.0b26	808b26	a2 00 1c	ldx #$1c00			ldx #kVRAM.gameChars+(192*16)
2123	.0b29	808b29	8e 16 21	stx $802116			stx $802116
2124	.0b2c	808b2c	a9 01		lda #$01			lda #1
2125	.0b2e	808b2e	8d 0b 42	sta $80420b			sta $80420B
2126									; lets just do the sprites while we are here
2127	.0b31	808b31	a2 00 80	ldx #$8000			ldx #<>SpritesChars
2128	.0b34	808b34	8e 02 43	stx $804302			stx $804302
2129	.0b37	808b37	a9 83		lda #$83			lda #`SpritesChars
2130	.0b39	808b39	8f 04 43 08	sta $084304			sta $84304
2131	.0b3d	808b3d	a2 00 80	ldx #$8000			ldx #size(SpritesChars)
2132	.0b40	808b40	8e 05 43	stx $804305			stx $804305
2133	.0b43	808b43	a2 00 40	ldx #$4000			ldx #kVRAM.Sprite
2134	.0b46	808b46	8e 16 21	stx $802116			stx $802116
2135	.0b49	808b49	a9 01		lda #$01			lda #1
2136	.0b4b	808b4b	8d 0b 42	sta $80420b			sta $80420B
2137	.0b4e	808b4e	28		plp			plp
2138	.0b4f	808b4f	60		rts			rts

2140	.0b50	808b50					dmaScreenMirror_xx
2141	.0b50	808b50					_ASSERT_JSR
2142	.0b50	808b50	08		php			php
247:1	.0b51	808b51	c2 10		rep #$10		REP #$10
2144:4	.0b53	808b53	a2 00 20	ldx #$2000			ldx #<>ScreenMirror		; this and the next function could be split to pull out the size
2145	.0b56	808b56	8e 02 43	stx $804302			stx $804302					; but I couldn't be bothered...
235:1	.0b59	808b59	e2 20		sep #$20		SEP #$20
2147:4	.0b5b	808b5b	a9 7e		lda #$7e			lda #`ScreenMirror
2148	.0b5d	808b5d	8d 04 43	sta $804304			sta $804304
2149	.0b60	808b60	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2150	.0b63	808b63	8e 05 43	stx $804305			stx $804305
2151	.0b66	808b66	a2 01 18	ldx #$1801			ldx #%00000001 | $1800	; A->B, Inc, Write WORD, $2118
2152	.0b69	808b69	8e 00 43	stx $804300			stx $804300
2153	.0b6c	808b6c	a2 00 04	ldx #$0400			ldx #kVRAM.gameScreen
2154	.0b6f	808b6f	8e 16 21	stx $802116			stx $802116
2155	.0b72	808b72	a9 80		lda #$80			lda #$80
2156	.0b74	808b74	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2157	.0b77	808b77	a9 01		lda #$01			lda #1
2158	.0b79	808b79	8d 0b 42	sta $80420b			sta $80420B
2159	.0b7c	808b7c	28		plp			plp
2160	.0b7d	808b7d	60		rts			rts

2162	.0b7e	808b7e					dmaScreenMirrorToTitleScreen_xx
2163	.0b7e	808b7e					_ASSERT_JSR
2164	.0b7e	808b7e	08		php			php
247:1	.0b7f	808b7f	c2 10		rep #$10		REP #$10
2166:4	.0b81	808b81	a2 00 20	ldx #$2000			ldx #<>ScreenMirror
2167	.0b84	808b84	8e 02 43	stx $804302			stx $804302
235:1	.0b87	808b87	e2 20		sep #$20		SEP #$20
2169:4	.0b89	808b89	a9 7e		lda #$7e			lda #`ScreenMirror
2170	.0b8b	808b8b	8d 04 43	sta $804304			sta $804304
2171	.0b8e	808b8e	a2 00 08	ldx #$0800			ldx #2048					; screen in 2K
2172	.0b91	808b91	8e 05 43	stx $804305			stx $804305
2173	.0b94	808b94	a2 01 18	ldx #$1801			ldx #%00000001 | $1800 	; A->B, Inc, Write WORD, $2118
2174	.0b97	808b97	8e 00 43	stx $804300			stx $804300
2175	.0b9a	808b9a	a2 00 00	ldx #$0000			ldx #kVRAM.titleScreen
2176	.0b9d	808b9d	8e 16 21	stx $802116			stx $802116
2177	.0ba0	808ba0	a9 80		lda #$80			lda #$80
2178	.0ba2	808ba2	8d 15 21	sta $802115			sta $802115					; inc VRAM port address
2179	.0ba5	808ba5	a9 01		lda #$01			lda #1
2180	.0ba7	808ba7	8d 0b 42	sta $80420b			sta $80420B
2181	.0baa	808baa	28		plp			plp
2182	.0bab	808bab	60		rts			rts

2184							; this builds a table of the start indexs in the BackShadowChars binary blob that
2185							; holds each "set", which there are 4 so each set size is total size/4
2186	.0bac	808bac					LevelCharsLUT
2187	=[$828000,$828680,$828d00,$829380]			- = BackShadowChars + range(4)*(size(BackShadowChars)/4)
2188	>0bac	808bac	00 80 80 86 00 8d 80 93			.word <>(-)

2190							; ----- @Map routines@ -----
2191							.section sLoWRAM
2192	>7e2000						ScreenMirror .fill 2048 	; this is used to hold the screen before DMA
2193							.send ; sLoWRAM
2194							.section sDP
2195	>0035						ScreenUpdateRequiredN0 .byte ?
2196							.send ; sDP

2198							.as
2199							.xs
2200	.0bb4	808bb4					plotTileMap_88
2201	.0bb4	808bb4					_ASSERT_jsr
2202	.0bb4	808bb4					_ASSERT_axy8
2203	.0bb4	808bb4	a9 8f		lda #$8f			lda #<tileMapTemp
2204	.0bb6	808bb6	85 06		sta $06				sta Pointer1.lo
2205	.0bb8	808bb8	a9 02		lda #$02			lda #>tileMapTemp
2206	.0bba	808bba	85 07		sta $07				sta Pointer1.hi				; pointer 1 holds pointer to the active level data
2207	.0bbc	808bbc	a9 00		lda #$00			lda #<ScreenMirror
2208	.0bbe	808bbe	85 31		sta $31				sta ZPLong.lo
2209	.0bc0	808bc0	a9 20		lda #$20			lda #>ScreenMirror
2210	.0bc2	808bc2	85 32		sta $32				sta ZPLong.hi
2211	.0bc4	808bc4	a9 7e		lda #$7e			lda #`ScreenMirror
2212	.0bc6	808bc6	85 33		sta $33				sta ZPLong.bank				; ZPLong holds the "screen" pointer

2214	.0bc8	808bc8	a9 0a		lda #$0a			lda #kDoorClosed				; we are plotting the map so take this
2215	.0bca	808bca	8d 9d 00	sta $80009d			sta LevelData.exitFrame		; time to ensure door is closed

2217									; to keep the index's free and so I can use all any 'ZPTemps' in sub functions
2218									; wihtout fear, I store the counters on the stack
2219	.0bcd	808bcd	a9 0c		lda #$0c			lda #kTileYCount 				; num rows
2220	.0bcf	808bcf	48		pha				pha								; save row counter
2221	.0bd0	808bd0	a0 00		ldy #$00		_pltY	ldy #00 						; num cols
2222	.0bd2	808bd2	5a		phy					phy							; save the column counter
2223	.0bd3	808bd3	b1 06		lda ($06),y		_pltX		lda (Pointer1),y 		; tile num
2224	.0bd5	808bd5	aa		tax						tax
2225	.0bd6	808bd6	bd 76 8e	lda $808e76,x					lda toolToTileLUT,x	; convert map to actual tile
2226	.0bd9	808bd9	20 e3 8c	jsr $808ce3					jsr renderTile_88		; plot it
2227	.0bdc	808bdc	18		clc						clc
2228	.0bdd	808bdd	a5 31		lda $31						lda ZPLong.lo
2229	.0bdf	808bdf	69 04		adc #$04					adc #4
2230	.0be1	808be1	85 31		sta $31						sta ZPLong.lo			; advance screen pointer 2 tiles to the right
2231	.0be3	808be3	90 02		bcc $808be7					bcc +
2232	.0be5	808be5	e6 32		inc $32							inc ZPLong.hi		; this is safe to do as 16bit maths
2233	.0be7	808be7	7a		ply				+	ply							; restore column counter
2234	.0be8	808be8	c8		iny					iny							; inc it
2235	.0be9	808be9	5a		phy					phy							; save it again ready for the next loop
2236	.0bea	808bea	c0 10		cpy #$10					cpy #kTileXCount		; have we done the row
2237	.0bec	808bec	d0 e5		bne $808bd3					bne _pltX				; no, next
2238	.0bee	808bee	68		pla					pla							; counter will be on stack so remove
2239	.0bef	808bef	18		clc					clc
2240	.0bf0	808bf0	a5 06		lda $06					lda Pointer1.lo			; advance the map data pointer to the next row
2241	.0bf2	808bf2	69 10		adc #$10				adc #kTileXCount
2242	.0bf4	808bf4	85 06		sta $06					sta Pointer1.lo
2243	.0bf6	808bf6	90 02		bcc $808bfa				bcc +
2244	.0bf8	808bf8	e6 07		inc $07						inc Pointer1.hi
2245	.0bfa	808bfa	68		pla			+	pla								; restore the rows counter
2246	.0bfb	808bfb	38		sec				sec
2247	.0bfc	808bfc	e9 01		sbc #$01			sbc #1							; count down
2248	.0bfe	808bfe	f0 0e		beq $808c0e			beq _exit						; done ?
2249	.0c00	808c00	48		pha				pha								; save it back on the stack
2250	.0c01	808c01	18		clc					clc
2251	.0c02	808c02	a5 31		lda $31					lda ZPLong.lo				; we have to offset the screen position to the next "row"
2252	.0c04	808c04	69 40		adc #$40				adc #128-64					; each row is 32 chars, which is words so 64 bytes
2253	.0c06	808c06	85 31		sta $31					sta ZPLong.lo				; and we have 2 rows which is 128 bytes, we are already 1 row over
2254	.0c08	808c08	90 02		bcc $808c0c				bcc +							; so 128-64 to get to the start of the next tile row
2255	.0c0a	808c0a	e6 32		inc $32						inc ZPLong.hi
2256	.0c0c	808c0c	80 c2		bra $808bd0		+		gra _pltY
2257	.0c0e	808c0e					_exit
2258	.0c0e	808c0e	60		rts			rts

2260							.as
2261							.xs
2262	.0c0f	808c0f					addShadowsToMap_88
2263	.0c0f	808c0f					_ASSERT_jsr
2264	.0c0f	808c0f					_ASSERT_axy8
2265	.0c0f	808c0f	64 14		stz $14			stz TempX						; tile counter that is not trashed
2266	.0c11	808c11	a4 14		ldy $14		-	ldy TempX						; get tile map index
2267	.0c13	808c13	20 35 8c	jsr $808c35		jsr tileIsSafeToChange_88	; is this a background tile?
2268	.0c16	808c16	90 03		bcc $808c1b		bcc +
2269	.0c18	808c18	20 41 8c	jsr $808c41			jsr calcBCDEforTileY_88	; calc shadow and update the tile
2270	.0c1b	808c1b	e6 14		inc $14		+	inc TempX						; next tile
2271	.0c1d	808c1d	a5 14		lda $14			lda TempX
2272	.0c1f	808c1f	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2273	.0c21	808c21	d0 ee		bne $808c11		bne -
2274	.0c23	808c23	60		rts			rts

2276							.as
2277							.xs
2278	.0c24	808c24					tileIsWall_88
2279							; if tileMapTemp[y] is a "wall" tile then c will clear, set otherwise
2280	.0c24	808c24					_ASSERT_jsr
2281	.0c24	808c24					_ASSERT_axy8
2282	.0c24	808c24	b9 8f 02	lda $80028f,y		lda tileMapTemp,y				; get current tile
2283	.0c27	808c27	f0 0a		beq $808c33		beq _no
2284	.0c29	808c29	c9 06		cmp #$06			cmp #kTiles.wall4+1		; <= Wall4
2285	.0c2b	808c2b	90 05		bcc $808c32			bcc _yes
2286	.0c2d	808c2d	c9 14		cmp #$14				cmp #kTiles.diss		; == dissolvable char
2287	.0c2f	808c2f	d0 02		bne $808c33				bne _no
2288	.0c31	808c31	18		clc					clc						; clear carry
2289	.0c32	808c32					_yes
2290	.0c32	808c32	60		rts			rts								; carry is clear
2291	.0c33	808c33					_no
2292	.0c33	808c33	38		sec			sec
2293	.0c34	808c34	60		rts			rts								; carry is set

2295							.as
2296							.xs
2297	.0c35	808c35					tileIsSafeToChange_88
2298							; if tileMapTemp[y] is not something like a fruit, wall, spike, door etc C is set
2299							; why inverse, that is how the cmp falls. As this is not 16K limited anymore you could set it right.
2300	.0c35	808c35					_ASSERT_jsr
2301	.0c35	808c35					_ASSERT_axy8
2302	.0c35	808c35	b9 8f 02	lda $80028f,y		lda tileMapTemp,y
2303	.0c38	808c38	f0 05		beq $808c3f		beq _yes 								; 0 is safe
2304	.0c3a	808c3a	c9 22		cmp #$22			cmp #kTiles.underHangStart
2305	.0c3c	808c3c	b0 01		bcs $808c3f			bcs _yes
2306	.0c3e	808c3e	60		rts					rts ; carry is clear
2307	.0c3f	808c3f					_yes
2308	.0c3f	808c3f	38		sec			sec
2309	.0c40	808c40	60		rts			rts

2311							; Don't try and understand this, not worth your life, it calcs the saul drop shadow, just move on.
2312							;  BCD
2313							;  EA
2314							;  H
2315							; A is tile we are testing
2316							;  BCDE H
2317							;  1110   = under hang
2318							;  1100   = under hang right end
2319							;  0110   = under hanr left  end
2320							;  0001 0 = left wall top end
2321							;  1001   = left wall
2322							;  1000   = 35
2323							;  11X1   = top left
2324							;  0XX1 1 = bottom left
2325							.as
2326							.xs
2327	.0c41	808c41					calcBCDEforTileY_88
2328	.0c41	808c41					_ASSERT_jsr
2329	.0c41	808c41					_ASSERT_axy8
2330	.0c41	808c41	84 0f		sty $0f			sty ZPTemp
2331	.0c43	808c43	84 10		sty $10			sty ZPTemp2
2332	.0c45	808c45	98		tya			tya
2333	.0c46	808c46	29 0f		and #$0f		and #15
2334	.0c48	808c48	d0 04		bne $808c4e		bne _canDoLeft
2335	.0c4a	808c4a	a9 80		lda #$80			lda #$80					; can't do left on Negative
2336	.0c4c	808c4c	80 02		bra $808c50			bra +
2337	.0c4e	808c4e					_canDoLeft
2338	.0c4e	808c4e	a9 00		lda #$00		lda #0
2339	.0c50	808c50	85 12		sta $12		+	sta ZPTemp4
2340	.0c52	808c52	a5 0f		lda $0f			lda ZPTemp
2341	.0c54	808c54	29 0f		and #$0f		and #15
2342	.0c56	808c56	c9 0f		cmp #$0f		cmp #15
2343	.0c58	808c58	d0 04		bne $808c5e		bne _canDoRight
2344	.0c5a	808c5a	a9 40		lda #$40			lda #$40					; can't do right on Overflow
2345	.0c5c	808c5c	85 12		sta $12				sta ZPTemp4
2346	.0c5e	808c5e					_canDoRight
2347	.0c5e	808c5e					END_LEFT_RIGHT_CHECK
2348	.0c5e	808c5e	a9 07		lda #$07		lda #1+2+4					; first 3 are empty ( it is inverted later)
2349	.0c60	808c60	85 11		sta $11			sta ZPTemp3
2350	.0c62	808c62	a4 0f		ldy $0f			ldy ZPTemp
2351	.0c64	808c64	c0 10		cpy #$10		cpy #kTileXCount
2352	.0c66	808c66	90 2b		bcc $808c93		bcc _doneFirstRow		; if it is the first row than ALL of above is not solid
2353	.0c68	808c68	64 11		stz $11				stz ZPTemp3
2354	.0c6a	808c6a	98		tya				tya
2355									;sec ;from bcc above
2356	.0c6b	808c6b	e9 11		sbc #$11			sbc #kTileXCount+1	; so get -1x,-1y
2357	.0c6d	808c6d	85 10		sta $10				sta ZPTemp2
2358	.0c6f	808c6f	a8		tay				tay
2359	.0c70	808c70	24 12		bit $12				bit ZPTemp4				; test to see if we can do right
2360	.0c72	808c72	30 07		bmi $808c7b			bmi _noB					; no then skip B
2361	.0c74	808c74	20 24 8c	jsr $808c24				jsr tileIsWall_88
2362	.0c77	808c77	26 11		rol $11					rol ZPTemp3
2363	.0c79	808c79	80 03		bra $808c7e				bra _testC
2364	.0c7b	808c7b						_noB
2365	.0c7b	808c7b	38		sec				sec						; if there is no B then make it clear
2366	.0c7c	808c7c	26 11		rol $11				rol ZPTemp3
2367	.0c7e	808c7e						_testC
2368	.0c7e	808c7e	c8		iny				iny
2369	.0c7f	808c7f	20 24 8c	jsr $808c24			jsr tileIsWall_88
2370	.0c82	808c82	26 11		rol $11				rol ZPTemp3
2371	.0c84	808c84	c8		iny				iny
2372	.0c85	808c85	24 12		bit $12				bit ZPTemp4
2373	.0c87	808c87	70 07		bvs $808c90			bvs _noRight
2374	.0c89	808c89	20 24 8c	jsr $808c24				jsr tileIsWall_88
2375	.0c8c	808c8c	26 11		rol $11					rol ZPTemp3
2376	.0c8e	808c8e	80 03		bra $808c93				bra _doneFirstRow
2377	.0c90	808c90						_noRight
2378	.0c90	808c90	38		sec				sec						; make it as 1 so it gets 0 later
2379	.0c91	808c91	26 11		rol $11				rol ZPTemp3
2380	.0c93	808c93					_doneFirstRow
2381	.0c93	808c93	24 12		bit $12			bit ZPTemp4
2382	.0c95	808c95	30 0a		bmi $808ca1		bmi _noE						; check negative flag
2383	.0c97	808c97	a4 0f		ldy $0f				ldy ZPTemp
2384	.0c99	808c99	88		dey				dey
2385	.0c9a	808c9a	20 24 8c	jsr $808c24			jsr tileIsWall_88
2386	.0c9d	808c9d	26 11		rol $11				rol ZPTemp3
2387	.0c9f	808c9f	80 03		bra $808ca4			bra DoIndexCheck
2388	.0ca1	808ca1					_noE
2389	.0ca1	808ca1	38		sec			sec							; make it 1 so it gets 0 later
2390	.0ca2	808ca2	26 11		rol $11			rol ZPTemp3
2391	.0ca4	808ca4					DoIndexCheck
2392	.0ca4	808ca4	a5 11		lda $11			lda ZPTemp3
2393	.0ca6	808ca6	49 0f		eor #$0f		eor #$0F
2394	.0ca8	808ca8	a8		tay			tay
2395	.0ca9	808ca9					BCDEYVALUECHECK
2396	.0ca9	808ca9	b9 66 8e	lda $808e66,y		lda BCDELUT,y				; now we have the 5bit value of the case
2397	.0cac	808cac	30 06		bmi $808cb4		bmi _checkH					; 5th bit is stored in bit7
2398	.0cae	808cae						_writeMap
2399	.0cae	808cae	a4 0f		ldy $0f				ldy ZPTemp
2400	.0cb0	808cb0	99 8f 02	sta $80028f,y			sta tileMapTemp,y		; lower 4bits are the tile number
2401	.0cb3	808cb3	60		rts				rts
2402									;
2403	.0cb4	808cb4					_checkH
2404	.0cb4	808cb4	a5 0f		lda $0f			lda ZPTemp
2405	.0cb6	808cb6	18		clc			clc
2406	.0cb7	808cb7	69 10		adc #$10		adc #kTileXCount
2407	.0cb9	808cb9	a8		tay			tay
2408	.0cba	808cba	20 24 8c	jsr $808c24		jsr tileIsWall_88
2409	.0cbd	808cbd	b0 02		bcs $808cc1		bcs _HNotWall
2410	.0cbf	808cbf	a9 00		lda #$00			lda #kTiles.back
2411	.0cc1	808cc1					_HNotWall
2412	.0cc1	808cc1	a9 25		lda #$25		lda #kTiles.sideShadow
2413	.0cc3	808cc3	80 e9		bra $808cae		bra _writeMap
2414								;

2416							.as
2417							.xs
2418	.0cc5	808cc5					clearTile
2419							; this will set a tile to empty and calc and required shadow
2420	.0cc5	808cc5					_ASSERT_jsr
2421	.0cc5	808cc5					_ASSERT_axy8
2422	.0cc5	808cc5	a4 15		ldy $15			ldy ActiveTileIndex
2423	.0cc7	808cc7	a9 00		lda #$00		lda #kTiles.back
2424	.0cc9	808cc9	99 8f 02	sta $80028f,y		sta tileMapTemp,y
2425	.0ccc	808ccc	20 41 8c	jsr $808c41		jsr calcBCDEforTileY_88 ; this sets it to be what it should be shadow wise
2426	.0ccf	808ccf	a4 15		ldy $15			ldy ActiveTileIndex
2427	.0cd1	808cd1	b9 8f 02	lda $80028f,y		lda tileMapTemp,y
2428	.0cd4	808cd4					pltSingleTile
2429							; plots map tile in A to ActiveTileIndex
2430	.0cd4	808cd4					_ASSERT_jsr
2431	.0cd4	808cd4					_ASSERT_axy8
2432	.0cd4	808cd4	aa		tax			tax
2433	.0cd5	808cd5	bd 76 8e	lda $808e76,x		lda toolToTileLUT,x
2434	.0cd8	808cd8					pltSingleTileNoLookup
2435							; plots the raw screen tile in A to ActiveTileIndex
2436	.0cd8	808cd8					_ASSERT_jsr
2437	.0cd8	808cd8					_ASSERT_axy8
2438	.0cd8	808cd8	48		pha			pha
2439	.0cd9	808cd9	a5 15		lda $15				lda ActiveTileIndex
2440	.0cdb	808cdb	20 2e 8d	jsr $808d2e			jsr convertIndexToScreenAndCRAM
2441	.0cde	808cde	68		pla			pla
2442	.0cdf	808cdf	20 e3 8c	jsr $808ce3		jsr renderTile_88
2443	.0ce2	808ce2	60		rts			rts

2445							.as
2446							.xs
2447							; a = tile num, Pointer2 = Screen, Pointer 3 = CRAM
2448	.0ce3	808ce3					renderTile_88
2449	.0ce3	808ce3					_ASSERT_jsr
2450	.0ce3	808ce3					_ASSERT_axy8
2451	.0ce3	808ce3	85 0c		sta $0c				sta Pointer4.lo
2452	.0ce5	808ce5	64 0d		stz $0d				stz Pointer4.hi
2453	.0ce7	808ce7	06 0c		asl $0c				asl Pointer4.lo
2454	.0ce9	808ce9	26 0d		rol $0d				rol Pointer4.hi	; 16bit multiply
2455	.0ceb	808ceb	06 0c		asl $0c				asl Pointer4.lo	; tile num x 4
2456	.0ced	808ced	26 0d		rol $0d				rol Pointer4.hi
2457									; covert to tiles offset
2458	.0cef	808cef	18		clc				clc
2459	.0cf0	808cf0	a5 0c		lda $0c				lda Pointer4.lo
2460	.0cf2	808cf2	69 9e		adc #$9e			adc #<fileTiles
2461	.0cf4	808cf4	85 0c		sta $0c				sta Pointer4.lo
2462	.0cf6	808cf6	a5 0d		lda $0d				lda Pointer4.hi
2463	.0cf8	808cf8	69 8e		adc #$8e			adc #>fileTiles
2464	.0cfa	808cfa	85 0d		sta $0d				sta Pointer4.hi	; add the start of the map -> chars LUT table
2465	.0cfc	808cfc	b2 0c		lda ($0c)			lda (Pointer4)		; read 1st char
2466	.0cfe	808cfe	87 31		sta [$31]			sta [ZPLong]		; lo byte of Dest Char 1
2467	.0d00	808d00	a9 00		lda #$00			lda #0
2468	.0d02	808d02	a0 01		ldy #$01			ldy #1
2469	.0d04	808d04	97 31		sta [$31],y			sta [ZPLong],y		; hi byte of Dest Char 1
2470	.0d06	808d06	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 2nd char
2471	.0d08	808d08	a0 02		ldy #$02			ldy #2
2472	.0d0a	808d0a	97 31		sta [$31],y			sta [ZPLong],y		; lo byte of Dest Char 2
2473	.0d0c	808d0c	c8		iny				iny
2474	.0d0d	808d0d	a9 00		lda #$00			lda #0
2475	.0d0f	808d0f	97 31		sta [$31],y			sta [ZPLong],y		; hi byte of Dest Char 2
2476	.0d11	808d11	a0 02		ldy #$02			ldy #2
2477	.0d13	808d13	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 3rd char
2478	.0d15	808d15	a0 40		ldy #$40			ldy #64
2479	.0d17	808d17	97 31		sta [$31],y			sta [ZPLong],y		; lo byte of Dest Char 3
2480	.0d19	808d19	c8		iny				iny
2481	.0d1a	808d1a	a9 00		lda #$00			lda #0
2482	.0d1c	808d1c	97 31		sta [$31],y			sta [ZPLong],y		; hi byte of Dest Char 3
2483	.0d1e	808d1e	a0 03		ldy #$03			ldy #3
2484	.0d20	808d20	b1 0c		lda ($0c),y			lda (Pointer4),y	; read 4th char
2485	.0d22	808d22	a0 42		ldy #$42			ldy #66
2486	.0d24	808d24	97 31		sta [$31],y			sta [ZPLong],y		; lo byte of Dest Char 4
2487	.0d26	808d26	c8		iny				iny
2488	.0d27	808d27	a9 00		lda #$00			lda #0
2489	.0d29	808d29	97 31		sta [$31],y			sta [ZPLong],y		; hi byte of Dest Char 4
2490									; y can't be 0 at this point so we can use it to enable the screen update flag
2491	.0d2b	808d2b	84 35		sty $35				sty ScreenUpdateRequiredN0
2492	.0d2d	808d2d	60		rts				rts

2494							.as
2495							.xs
2496	.0d2e	808d2e					convertIndexToScreenAndCRAM
2497							;CRAM is a hold over from the C64 that stores the Colour info in another area
2498	.0d2e	808d2e					_ASSERT_jsr
2499	.0d2e	808d2e					_ASSERT_axy8
2500								; screen is 32 wide and 2 per char so we want to time y * 64
2501								; 2 lines per tile so y*128
2502	.0d2e	808d2e	85 14		sta $14			sta TempX
239:1	.0d30	808d30	c2 20		rep #$20		REP #$20
2504:4												; to see how this would be done in 8bit look at function above
2505	.0d32	808d32	29 f0 00	and #$00f0		and #$00F0 	; get y Part which is already x16
2506	.0d35	808d35	0a		asl a			asl a 		; x32
2507	.0d36	808d36	0a		asl a			asl a			; x64
2508	.0d37	808d37	0a		asl a			asl a			; x128
2509								;clc			; upper bit had to be zero and still be 0
2510	.0d38	808d38	69 00 20	adc #$2000		adc #<>ScreenMirror
2511	.0d3b	808d3b	85 31		sta $31			sta ZPLong.loWord
2512	.0d3d	808d3d	a5 14		lda $14			lda TempX			; this over reads but doesn't matter
2513	.0d3f	808d3f	29 0f 00	and #$000f		and #$000F			; x = x * 2 and 2 bytes per char so *4
2514	.0d42	808d42	0a		asl a			asl a
2515	.0d43	808d43	0a		asl a			asl a
2516								;clc					; again asl will have set c to 0 100%
2517	.0d44	808d44	65 31		adc $31			adc ZPLong.loWord
2518	.0d46	808d46	85 31		sta $31			sta ZPLong.loWord
235:1	.0d48	808d48	e2 20		sep #$20		SEP #$20
2520:4	.0d4a	808d4a	a9 7e		lda #$7e		lda #`ScreenMirror
2521	.0d4c	808d4c	85 33		sta $33			sta ZPLong.bank
2522	.0d4e	808d4e	60		rts			rts

2524							.as
2525							.xs
2526							; returns Y into ZPTemp
2527	.0d4f	808d4f					convertIndexToEntSpriteXY
2528	.0d4f	808d4f					_ASSERT_jsr
2529	.0d4f	808d4f					_ASSERT_axy8
2530	.0d4f	808d4f	85 11		sta $11			sta ZPTemp3											; save full in temp3
2531	.0d51	808d51	29 f0		and #$f0		and #$f0												; mask of Y tile num
2532	.0d53	808d53	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x	; this is already x16 so save Y
2533	.0d56	808d56	85 0f		sta $0f			sta ZPTemp											; return it in ZPTemp
2534	.0d58	808d58	a5 11		lda $11			lda ZPTemp3											; load the original
2535	.0d5a	808d5a	29 0f		and #$0f		and #$0f												; mask of the X tile num
2536	.0d5c	808d5c	0a		asl a			asl a
2537	.0d5d	808d5d	0a		asl a			asl a
2538	.0d5e	808d5e	0a		asl a			asl a
2539	.0d5f	808d5f	0a		asl a			asl a													; x16
2540	.0d60	808d60	9d 81 03	sta $800381,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x	; store x
2541	.0d63	808d63	9e a1 03	stz $8003a1,x		stz mplexBuffer.xmsb+kEntsSpriteOffset,x	; to be sure sure
2542	.0d66	808d66	60		rts			rts

2544							.as
2545							.xs
2546	.0d67	808d67					convertLevelToTileMap_88
2547	.0d67	808d67					_ASSERT_JSR
2548	.0d67	808d67	9c 98 00	stz $800098			stz Bank80.LevelData.numKeysLeft			; we don't have any keys yet
2549	.0d6a	808d6a	9c 99 00	stz $800099			stz LevelData.totalKeys
2550	.0d6d	808d6d	9c 5d 02	stz $80025d			stz EntityData.numPipes						; or pipes
2551	.0d70	808d70	9c 66 02	stz $800266			stz EntityData.lastPipeUsed
2552	.0d73	808d73	a9 ff		lda #$ff			lda #$FF
2553	.0d75	808d75	8d 9b 00	sta $80009b			sta LevelData.exitIndex
2554	.0d78	808d78	8d 9c 00	sta $80009c			sta LevelData.exitIndex+1					; and I don't know where the exits are
2555	.0d7b	808d7b	a9 8f		lda #$8f			lda #<tileMapTemp
2556	.0d7d	808d7d	85 06		sta $06				sta Pointer1.lo
2557	.0d7f	808d7f	a9 02		lda #$02			lda #>tileMapTemp
2558	.0d81	808d81	85 07		sta $07				sta Pointer1.hi								; this the location of the converted map data
2559	.0d83	808d83	ae 95 00	ldx $800095			ldx GameData.currLevel
2560	.0d86	808d86	bd ad a1	lda $80a1ad,x			lda LevelTableLo,x
2561	.0d89	808d89	85 08		sta $08				sta Pointer2.lo
2562	.0d8b	808d8b	bd cc a1	lda $80a1cc,x			lda LevelTableHi,x
2563	.0d8e	808d8e	85 09		sta $09				sta Pointer2.hi								; this is the location of the raw level data
2564							; read level pointers
2565	.0d90	808d90	a0 00		ldy #$00			ldy #0
2566	.0d92	808d92	84 15		sty $15				sty ActiveTileIndex							; start at the top left
2567									;lda (Pointer2),y
2568									;clc
2569									;adc Pointer2
2570							 		;sta LevelKeyListPtrLo 						; skip these pointers as no longer used
2571	.0d94	808d94	c8		iny				iny
2572									;lda (Pointer2),y
2573									;adc Pointer2+1
2574									;sta LevelKeyListPtrHi
2575	.0d95	808d95	c8		iny				iny
2576	.0d96	808d96	b1 08		lda ($08),y			lda (Pointer2),y								; we now have the pointer to the entity data for this map
2577	.0d98	808d98	18		clc				clc
2578	.0d99	808d99	65 08		adc $08				adc Pointer2
2579	.0d9b	808d9b	85 00		sta $00				sta EntityDataPointer.lo					; which is relative to the start of this "level spec"
2580	.0d9d	808d9d	c8		iny				iny
2581	.0d9e	808d9e	b1 08		lda ($08),y			lda (Pointer2),y
2582	.0da0	808da0	65 09		adc $09				adc Pointer2.hi
2583	.0da2	808da2	85 01		sta $01				sta EntityDataPointer.hi					; the level data also has another unused pointer in it
2584	.0da4	808da4	18		clc				clc
2585	.0da5	808da5	a5 08		lda $08				lda Pointer2.lo
2586	.0da7	808da7	69 04		adc #$04			adc #4											; so we skip the Entity Data Ptr + unused pointer
2587	.0da9	808da9	85 08		sta $08				sta Pointer2.lo
2588	.0dab	808dab	90 02		bcc $808daf			bcc +
2589	.0dad	808dad	e6 09		inc $09					inc Pointer2.hi
2590	.0daf	808daf	a9 0c		lda #$0c	+		lda #12											; level data has 12 rows
2591	.0db1	808db1	48		pha				pha												; save the counter on the stack
2592	.0db2	808db2	a0 00		ldy #$00	_row	ldy #0											; for the _row
2593	.0db4	808db4					_loop	; read in 16 bytes							; for the byte in the row
2594	.0db4	808db4	b1 08		lda ($08),y			lda (Pointer2),y								; read source map tile
2595	.0db6	808db6	c9 12		cmp #$12			cmp # kTiles.player							; player pos?
2596	.0db8	808db8	f0 42		beq $808dfc			beq _playerPos
2597	.0dba	808dba	c9 11		cmp #$11				cmp # kTiles.exit							; exit position
2598	.0dbc	808dbc	f0 53		beq $808e11				beq _exitPos
2599	.0dbe	808dbe	c9 09		cmp #$09					cmp # kTiles.key1						; a key?
2600	.0dc0	808dc0	f0 43		beq $808e05					beq _key
2601	.0dc2	808dc2	c9 0a		cmp #$0a						cmp # kTiles.key2
2602	.0dc4	808dc4	f0 3f		beq $808e05						beq _key
2603	.0dc6	808dc6	c9 0b		cmp #$0b							cmp # kTiles.key3
2604	.0dc8	808dc8	f0 3b		beq $808e05							beq _key
2605	.0dca	808dca	c9 0c		cmp #$0c								cmp # kTiles.key4
2606	.0dcc	808dcc	f0 37		beq $808e05								beq _key
2607	.0dce	808dce	c9 13		cmp #$13									cmp # kTiles.pipe		; a pipe?
2608	.0dd0	808dd0	f0 54		beq $808e26									beq _pipe
2609	.0dd2	808dd2	c9 14		cmp #$14										cmp # kTiles.diss	; a diss?
2610	.0dd4	808dd4	f0 37		beq $808e0d										beq _dissBlock
2611																						; no covert and then push out
2612	.0dd6	808dd6					_cont
2613	.0dd6	808dd6	91 06		sta ($06),y			sta (Pointer1),y								; write the value
2614	.0dd8	808dd8	e6 15		inc $15				inc ActiveTileIndex							; next tile
2615	.0dda	808dda	c8		iny				iny
2616	.0ddb	808ddb	c0 10		cpy #$10			cpy #16											; done a whole row?
2617	.0ddd	808ddd	d0 d5		bne $808db4			bne _loop
2618	.0ddf	808ddf	18		clc				clc
2619	.0de0	808de0	a5 08		lda $08				lda Pointer2.lo								; pMapDataSrc += 16
2620	.0de2	808de2	69 10		adc #$10			adc #16
2621	.0de4	808de4	85 08		sta $08				sta Pointer2.lo
2622	.0de6	808de6	90 02		bcc $808dea			bcc +
2623	.0de8	808de8	e6 09		inc $09					inc Pointer2.hi
2624	.0dea	808dea	18		clc			+	clc
2625	.0deb	808deb	a5 06		lda $06				lda Pointer1.lo								; pTempMap += 16
2626	.0ded	808ded	69 10		adc #$10			adc #16
2627	.0def	808def	85 06		sta $06				sta Pointer1.lo
2628	.0df1	808df1	90 02		bcc $808df5			bcc +
2629	.0df3	808df3	e6 07		inc $07					inc Pointer1.hi
2630	.0df5	808df5	68		pla			+	pla												; pull the Rows counter
2631	.0df6	808df6	3a		dec a				dec a
2632	.0df7	808df7	48		pha				pha												; save it again
2633	.0df8	808df8	d0 b8		bne $808db2			bne _row											; no done, new row
2634	.0dfa	808dfa	68		pla				pla												; pull counter of stack
2635	.0dfb	808dfb	60		rts				rts
2636									;
2637	.0dfc	808dfc					_playerPos
2638	.0dfc	808dfc	a5 15		lda $15				lda ActiveTileIndex
2639	.0dfe	808dfe	8d 9a 00	sta $80009a			sta LevelData.playerIndex					; record this tile as the tile player starts on
2640	.0e01	808e01	a9 00		lda #$00			lda #kTiles.back 								; but draw an empty tile on the map
2641	.0e03	808e03	80 d1		bra $808dd6			bra _cont
2642									;
2643	.0e05	808e05	ee 98 00	inc $800098	_key	inc LevelData.numKeysLeft
2644	.0e08	808e08	ee 99 00	inc $800099			inc LevelData.totalKeys						; increase total amount of keys
2645	.0e0b	808e0b	80 c9		bra $808dd6			bra _cont
2646									;
2647	.0e0d	808e0d					_dissBlock
2648	.0e0d	808e0d	a9 14		lda #$14			lda #kTiles.diss								; convert this to a diss full block
2649	.0e0f	808e0f	80 c5		bra $808dd6			bra _cont
2650									;
2651	.0e11	808e11					_exitPos
2652	.0e11	808e11	a5 15		lda $15				lda ActiveTileIndex
2653	.0e13	808e13	ae 9b 00	ldx $80009b			ldx LevelData.exitIndex						; is this the first or second exit for this map
2654	.0e16	808e16	e0 ff		cpx #$ff			cpx #$FF
2655	.0e18	808e18	d0 05		bne $808e1f			bne _2nd
2656	.0e1a	808e1a	8d 9b 00	sta $80009b				sta LevelData.exitIndex					; first
2657	.0e1d	808e1d	80 03		bra $808e22				bra +
2658										;
2659	.0e1f	808e1f	8d 9c 00	sta $80009c	_2nd	sta LevelData.exitIndex+1					; second
2660	.0e22	808e22	a9 11		lda #$11	+		lda #kTiles.exit								; draw a door at this tile
2661	.0e24	808e24	80 b0		bra $808dd6			bra _cont
2662									;
2663	.0e26	808e26					_pipe
2664	.0e26	808e26	ae 5d 02	ldx $80025d			ldx EntityData.numPipes						; current next pipe
2665	.0e29	808e29	a5 15		lda $15				lda ActiveTileIndex
2666	.0e2b	808e2b	38		sec				sec
2667	.0e2c	808e2c	e9 10		sbc #$10			sbc #16											; bubbles spawn at the tile above the pipe
2668	.0e2e	808e2e	9d 5e 02	sta $80025e,x			sta EntityData.pipeIndex,x
2669	.0e31	808e31	e8		inx				inx
2670	.0e32	808e32	8e 5d 02	stx $80025d			stx EntityData.numPipes						; count this pipe
2671	.0e35	808e35	a9 13		lda #$13			lda #kTiles.pipe								; draw a pipe
2672	.0e37	808e37	80 9d		bra $808dd6			bra _cont
2673									;

2675							.as
2676							.xs
2677	.0e39	808e39					countTempMapTile_88
2678							; how many of A is in the live map?
2679							; returned in A
2680	.0e39	808e39					_ASSERT_jsr
2681	.0e39	808e39					_ASSERT_axy8
2682	.0e39	808e39	a2 bf		ldx #$bf		ldx # kLevelSizeMax-1	; for all tiles
2683	.0e3b	808e3b	a0 00		ldy #$00		ldy #0
2684	.0e3d	808e3d					_loop
2685	.0e3d	808e3d	dd 8f 02	cmp $80028f,x		cmp tileMapTemp,x			; is this it?
2686	.0e40	808e40	d0 01		bne $808e43		bne _skip
2687	.0e42	808e42	c8		iny				iny						; count it
2688	.0e43	808e43					_skip
2689	.0e43	808e43	ca		dex			dex
2690	.0e44	808e44	e0 ff		cpx #$ff		cpx #$ff						; until done
2691	.0e46	808e46	d0 f5		bne $808e3d		bne _loop
2692	.0e48	808e48	98		tya			tya
2693	.0e49	808e49	60		rts			rts

2695							.as
2696							.xs
2697	.0e4a	808e4a					removeAllTilesOf_88
2698	.0e4a	808e4a					_ASSERT_jsr
2699	.0e4a	808e4a					_ASSERT_axy8
2700	.0e4a	808e4a	85 13		sta $13			sta ZPTemp5							; cache tile I want to remove
2701	.0e4c	808e4c	a2 00		ldx #$00		ldx #0
2702	.0e4e	808e4e	86 15		stx $15			stx ActiveTileIndex				; start at top left
2703	.0e50	808e50					_loop
2704	.0e50	808e50	bd 8f 02	lda $80028f,x		lda tileMapTemp,x					; if tile[ActiveTileIndex] == tileToRemove
2705	.0e53	808e53	c5 13		cmp $13			cmp ZPTemp5
2706	.0e55	808e55	d0 06		bne $808e5d		bne _next
2707	.0e57	808e57	20 c5 8c	jsr $808cc5			jsr clearTile					; clear it to "back"
2708	.0e5a	808e5a	20 38 a0	jsr $80a038			jsr CheckForShadowPlots		; check to see if it needs to be shadowed
2709	.0e5d	808e5d					_next
2710	.0e5d	808e5d	e6 15		inc $15			inc ActiveTileIndex
2711	.0e5f	808e5f	a6 15		ldx $15			ldx ActiveTileIndex
2712	.0e61	808e61	e0 c0		cpx #$c0		cpx # kLevelSizeMax
2713	.0e63	808e63	d0 eb		bne $808e50		bne _loop
2714	.0e65	808e65	60		rts			rts

2716	>0e66	808e66	00				BCDELUT	.byte $00							; 0000
2717	>0e67	808e67	25						.byte kTiles.sideShadow				; 0001
2718	>0e68	808e68	00						.byte $00								; 0010
2719	>0e69	808e69	25						.byte kTiles.sideShadow				; 0011
2720	>0e6a	808e6a	22						.byte kTiles.underHangStart		; 0100
2721	>0e6b	808e6b	27						.byte kTiles.topLeftCorner			; 0101
2722	>0e6c	808e6c	22						.byte kTiles.underHangStart		; 0110
2723	>0e6d	808e6d	25						.byte kTiles.sideShadow				; 0111
2724	>0e6e	808e6e	24						.byte kTiles.shadowOpenCorner		; 1000
2725	>0e6f	808e6f	26						.byte kTiles.middlesideShadow		; 1001
2726	>0e70	808e70	24						.byte kTiles.shadowOpenCorner		; 1010
2727	>0e71	808e71	25						.byte kTiles.sideShadow				; 1011
2728	>0e72	808e72	23						.byte kTiles.underHang				; 1100
2729	>0e73	808e73	27						.byte kTiles.topLeftCorner			; 1101
2730	>0e74	808e74	23						.byte kTiles.underHang				; 1110
2731	>0e75	808e75	27						.byte kTiles.topLeftCorner			; 1111

2733									; back
2734									;wall,wall1,wall2,wall3,wall4
2735									;spike,flower,fruit
2736									;key1,key2,key3,key4
2737									;shield,spring,potion,egg
2738									;exit,something,something,
2739									;diss + 13
2740	.0e76	808e76					toolToTileLUT
2741	>0e76	808e76	00					.byte 0
2742	>0e77	808e77	01 01 01 01 01				.byte 1,1,1,1,1
2743	>0e7c	808e7c	02 03 04				.byte 2,3,4
2744	>0e7f	808e7f	05 05 05 05				.byte 5,5,5,5
2745	>0e83	808e83	06 07 08 09				.byte 6,7,8,9
2746	>0e87	808e87	0a 0f 10				.byte 10,15,16
2747	>0e8a	808e8a	11 12 13 14 15 16 17 18			.byte 17,18,19,20,21,22,23,24,25,26,27,28,29,30 ; diss cont
	>0e92	808e92	19 1a 1b 1c 1d 1e
2748	>0e98	808e98	1f 20 21 22 23 24			.byte 31,32,33,34,35,36

2750							; tile logic number, doesn't convert to the 4 tiles displayed on the screen 1:1
2751							; so I just made a LUT
2752	.0e9e	808e9e					fileTiles

2754							linerTile4 .macro				; this makes .byte a,a+1,a+2,a+3
2757							.endm
2755	>0e9e	808e9e	00 01 02 03				.byte 0*4+range(4)

2755	>0ea2	808ea2	10 11 12 13				.byte 4*4+range(4)

2755	>0ea6	808ea6	38 39 3a 3b				.byte 14*4+range(4)

2755	>0eaa	808eaa	44 45 46 47				.byte 17*4+range(4)

2755	>0eae	808eae	30 31 32 33				.byte 12*4+range(4)

2755	>0eb2	808eb2	3c 3d 3e 3f				.byte 15*4+range(4)

2755	>0eb6	808eb6	48 49 4a 4b				.byte 18*4+range(4)

2755	>0eba	808eba	4c 4d 4e 4f				.byte 19*4+range(4)

2755	>0ebe	808ebe	50 51 52 53				.byte 20*4+range(4)

2755	>0ec2	808ec2	54 55 56 57				.byte 21*4+range(4)

2755	>0ec6	808ec6	40 41 42 43				.byte 16*4+range(4)

2769	>0eca	808eca	c1 c2 c3 c4			.byte 193,194,195,196 ; exit open frame 1
2770	>0ece	808ece	c5 c6 c7 c8			.byte 197,198,199,200 ; exit open frame 2
2771	>0ed2	808ed2	c5 c9 c7 ca			.byte 197,201,199,202 ; exit open frame 3
2772	>0ed6	808ed6	c5 c9 c7 cb			.byte 197,201,199,203 ; exit open frame 4
2755	>0eda	808eda	40 41 42 43				.byte 16*4+range(4)

2755	>0ede	808ede	34 35 36 37				.byte 13*4+range(4)

2755	>0ee2	808ee2	14 15 16 17				.byte 5*4+range(4)

2776	>0ee6	808ee6	14 15 18 19			.byte 20,21,24,25
2777	>0eea	808eea	14 15 1a 1b			.byte 20,21,26,27
2778	>0eee	808eee	14 15 1c 1d			.byte 20,21,28,29
2779	>0ef2	808ef2	14 15 1e 1f			.byte 20,21,30,31
2780	>0ef6	808ef6	14 15 20 21			.byte 20,21,32,33
2781	>0efa	808efa	14 15 0e 0f			.byte 20,21,14,15
2782	>0efe	808efe	22 23 0e 0f			.byte 34,35,14,15
2783	>0f02	808f02	24 25 0e 0f			.byte 36,37,14,15
2784	>0f06	808f06	26 27 0e 0f			.byte 38,39,14,15
2785	>0f0a	808f0a	28 29 0e 0f			.byte 40,41,14,15
2786	>0f0e	808f0e	2a 2b 0e 0f			.byte 42,43,14,15
2787	>0f12	808f12	2c 2d 0e 0f			.byte 44,45,14,15
2788	>0f16	808f16	0c 0d 0e 0f			.byte 12,13,14,15 ; DISS End
2789	>0f1a	808f1a	04 05 02 03			.byte 4,5,2,3 ; underhang start
2790	>0f1e	808f1e	07 05 02 03			.byte 7,5,2,3 ; underhang
2791	>0f22	808f22	08 01 02 03			.byte 8,1,2,3 ; shadow open corner
2792	>0f26	808f26	09 01 0b 03			.byte 9,1,11,3 ; side shadow
2793	>0f2a	808f2a	0a 01 0b 03			.byte 10,1,11,3 ; middlesideShadow
2794	>0f2e	808f2e	06 05 0b 03			.byte 6,5,11,3 ; topLeftCorner
2795	>0f32	808f32	7c 7d 7e 7f			.byte 124,125,126,127 ; old wall for intermission

2797							; ----- @Player Routines@ -----

2799	.0f36	808f36					kPlayerState .block
2800	=0							appear = 0
2801	=1							normal = 1
2802	=2							flap = 2
2803	=3							jump = 3
2804	=4							exit = 4
2805	=5							dead = 5
2806							.bend

2808	.0f36	808f36					kPlayerAnimsIndex .block
2809	=0							standRight = 0
2810	=1							standLeft = 1
2811	=2							standWalkRight = 2
2812	=3							standWalkLeft = 3
2813	=4							jumpRight = 4
2814	=5							jumpLeft = 5
2815	=6							flapRight = 6
2816	=7							flapLeft = 7
2817	=8							dead = 8
2818	=9							exit = 9
2819							.bend

2821	.0f36	808f36					kJumpIndexs .block
2822	=0							normal = 0
2823	=1							floaty = 1
2824							.bend

2826	.0f36	808f36					kPlayerParams .block
2827	=254							jumpStartDelta = 255-1
2828	=19							jumpDeltaAccum = 19
2829	=4							jumpDeltaAccumFloat = 4
2830	=4							maxFallSpeed = 4
2831							.bend

2833	.0f36	808f36					kPlayerStateExit .block
2834	=0							waitForAnimation = 0
2835							.bend

2837	.0f36	808f36					kPlayerStateDeath .block
2838	=0							animate = 0
2839							.bend

2841	.0f36	808f36					kIntermission .block
2842	=80							firstExit = kTileXCount*5
2843	=95							secondExit = (kTileXCount*6)-1
2844							.bend

2846	.0f36	808f36					joyToPlayerDelta_88
2847	.0f36	808f36					_ASSERT_jsr
2848	.0f36	808f36					_ASSERT_axy8
2849	.0f36	808f36	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck
2850	.0f39	808f39	9c 8a 02	stz $80028a		stz checkSpriteToCharData.yDeltaCheck				; clear movement deltas
2851	.0f3c	808f3c	9c ae 00	stz $8000ae		stz PlayerData.movingLRNZ								; assmue we are not moving
2852	.0f3f	808f3f	ad 7a 00	lda $80007a		lda joyLeft
2853	.0f42	808f42	0d 7b 00	ora $80007b		ora joyRight
2854	.0f45	808f45	f0 5e		beq $808fa5		beq _noLR													; any X input
2855	.0f47	808f47	ad 7a 00	lda $80007a			lda joyLeft												; was it left?
2856	.0f4a	808f4a	d0 2d		bne $808f79			bne _left
2857	.0f4c	808f4c	ad af 00	lda $8000af				lda PlayerData.slowMoveNZ						; right, are we in slow move?
2858	.0f4f	808f4f	f0 03		beq $808f54				beq +
2859	.0f51	808f51	a9 01		lda #$01					lda #1
2860	>0f53	808f53	2c								.byte $2c 										; bit XXXX this is a trick to skip 2 bytes, so lda skip next lda
2861	.0f54	808f54	a9 02		lda #$02		+		lda #2
2862	.0f56	808f56	8d 89 02	sta $800289				sta checkSpriteToCharData.xDeltaCheck		; set delta to check
2863	.0f59	808f59	ad 7b 00	lda $80007b				lda joyRight
2864	.0f5c	808f5c	2d 7f 00	and $80007f				and oldJoyLeft
2865	.0f5f	808f5f	f0 0d		beq $808f6e				beq _fullSpeedRight 								; we were already going right
2866	.0f61	808f61	ad a9 00	lda $8000a9					lda PlayerData.OnGroundNZ					; slow for opposite only happens in the air
2867	.0f64	808f64	d0 03		bne $808f69					bne _clearSpeedRight
2868	.0f66	808f66	a9 01		lda #$01						lda #1
2869	>0f68	808f68	2c									.byte $2c									; bit XXXX skip 2 bytes
2870	.0f69	808f69							_clearSpeedRight
2871	.0f69	808f69	a9 00		lda #$00				lda #0
2872	.0f6b	808f6b	8d af 00	sta $8000af				sta PlayerData.slowMoveNZ						; store speed state
2873	.0f6e	808f6e					_fullSpeedRight
2874	.0f6e	808f6e	a9 01		lda #$01		lda #1
2875	.0f70	808f70	8d ae 00	sta $8000ae		sta PlayerData.movingLRNZ								; we are moving
2876	.0f73	808f73	3a		dec a			dec a ; a = 0
2877	.0f74	808f74	20 9a 90	jsr $80909a		jsr changePlayerDir										; set player to right
2878	.0f77	808f77	80 34		bra $808fad		gra _endLR
2879								;
2880	.0f79	808f79					_left
2881	.0f79	808f79	ad af 00	lda $8000af		lda PlayerData.slowMoveNZ
2882	.0f7c	808f7c	f0 03		beq $808f81		beq +
2883	.0f7e	808f7e	a9 ff		lda #$ff			lda #-1
2884	>0f80	808f80	2c						.byte $2c ; bit
2885	.0f81	808f81	a9 fe		lda #$fe	+	lda #-2
2886	.0f83	808f83	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck				; set x delta to -1/-2 depending on speed
2887	.0f86	808f86	ad 7a 00	lda $80007a		lda joyLeft
2888	.0f89	808f89	2d 80 00	and $800080		and oldJoyRight
2889	.0f8c	808f8c	f0 0d		beq $808f9b		beq _fullSpeedLeft 										; we were already going left
2890	.0f8e	808f8e	ad a9 00	lda $8000a9			lda PlayerData.OnGroundNZ
2891	.0f91	808f91	d0 03		bne $808f96			bne _clearSpeedLeft
2892	.0f93	808f93	a9 01		lda #$01				lda #1
2893	>0f95	808f95	2c							.byte $2c											; bit XXXX skip 2 bytes
2894	.0f96	808f96					_clearSpeedLeft
2895	.0f96	808f96	a9 00		lda #$00			lda #0
2896	.0f98	808f98	8d af 00	sta $8000af			sta PlayerData.slowMoveNZ							; set speed
2897	.0f9b	808f9b					_fullSpeedLeft
2898	.0f9b	808f9b	a9 01		lda #$01		lda #1
2899	.0f9d	808f9d	8d ae 00	sta $8000ae		sta PlayerData.movingLRNZ								; we are moving
2900	.0fa0	808fa0	20 9a 90	jsr $80909a		jsr changePlayerDir										; make sure we are facing left
2901	.0fa3	808fa3	80 08		bra $808fad		bra _endLR
2902								;
2903	.0fa5	808fa5					_noLR
2904	.0fa5	808fa5	a9 80		lda #$80		lda #$80
2905	.0fa7	808fa7	8d ad 00	sta $8000ad		sta PlayerData.startedJumpLR							; we are not jumping LR
2906	.0faa	808faa	9c af 00	stz $8000af		stz PlayerData.slowMoveNZ								; clear slow move
2907	.0fad	808fad					_endLR
2908	.0fad	808fad	ad ae 00	lda $8000ae		lda PlayerData.movingLRNZ								; are we moving LR?
2909	.0fb0	808fb0	d0 06		bne $808fb8		bne +
2910	.0fb2	808fb2	ad ac 00	lda $8000ac			lda PlayerData.facingRight
2911	.0fb5	808fb5	20 9a 90	jsr $80909a			jsr changePlayerDir									; make sure the facing is updated
2912	.0fb8	808fb8	ad a9 00	lda $8000a9	+	lda PlayerData.OnGroundNZ
2913	.0fbb	808fbb	2d 84 00	and $800084		and joyUpStart
2914	.0fbe	808fbe	0d b1 00	ora $8000b1		ora PlayerData.forceJumpNZ
2915	.0fc1	808fc1	d0 4d		bne $809010		bne StartJump												; if (onGround && JoyUpStart) || forceJump then jump
2916	.0fc3	808fc3	ad a9 00	lda $8000a9			lda PlayerData.OnGroundNZ
2917	.0fc6	808fc6	d0 28		bne $808ff0			bne OnGround
2918	.0fc8	808fc8	ad b3 00	lda $8000b3				lda PlayerData.yDeltaAccum.hi					;if inAir then update Y speed
2919	.0fcb	808fcb	10 17		bpl $808fe4				bpl falling
2920	.0fcd	808fcd	9c ab 00	stz $8000ab					stz PlayerData.isFallingNZ					; if ySpeedDelta -ve then we are going up
2921	.0fd0	808fd0	ad aa 00	lda $8000aa					lda PlayerData.hasJumpedNZ					; if this is 1
2922	.0fd3	808fd3	2d 85 00	and $800085					and joyUpStop									; and the player has let go
2923	.0fd6	808fd6	d0 2d		bne $809005					bne AbortJump									; abort jump and start falling
2924											; we are in air then
2925	.0fd8	808fd8					normalJumpUpdate
2926	.0fd8	808fd8	a2 00		ldx #$00		ldx #kJumpIndexs.normal									; nope just jumping not special
2927	.0fda	808fda					customJumpUpdate
2928	.0fda	808fda	20 c2 90	jsr $8090c2		jsr incPlayerYDeltaAndReturn							; update the jump parabola
2929	.0fdd	808fdd	ad b3 00	lda $8000b3		lda PlayerData.yDeltaAccum.hi
2930	.0fe0	808fe0	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck				; take the upper 8 bits as the Y delta
2931	.0fe3	808fe3	60		rts			rts

2933	.0fe4	808fe4					falling
2934	.0fe4	808fe4					_ASSERT_axy8
2935	.0fe4	808fe4	a9 01		lda #$01		lda #1
2936	.0fe6	808fe6	8d ab 00	sta $8000ab		sta PlayerData.isFallingNZ								; make sure we mark we are falling
2937	.0fe9	808fe9	ad a7 00	lda $8000a7		lda PlayerData.canFloatNZ								; if I can't float
2938							;	ora PasswordHaveSpring
2939	.0fec	808fec	f0 ea		beq $808fd8		beq normalJumpUpdate										; handle it as normal
2940	.0fee	808fee	80 47		bra $809037			bra handleFall											; else start fall

2942	.0ff0	808ff0					OnGround
2943	.0ff0	808ff0					_ASSERT_axy8
2944	.0ff0	808ff0	a9 01		lda #$01		lda #kPlayerState.normal
2945	.0ff2	808ff2	8d a1 00	sta $8000a1		sta PlayerData.state										; back to normal
2946	.0ff5	808ff5	ad b0 00	lda $8000b0		lda PlayerData.hitBubbleNum							; unless I landed on a bubble
2947	.0ff8	808ff8	f0 03		beq $808ffd		beq _skip
2948	.0ffa	808ffa	a9 ff		lda #$ff			lda #-1													; in which case move me up 1 with it, probably should be a constant
2949	>0ffc	808ffc	2c						.byte $2c												; skip XXXX
2950	.0ffd	808ffd					_skip
2951	.0ffd	808ffd	a9 01		lda #$01		lda #1														; check into the ground to make sure I'm still standing on some
2952	.0fff	808fff	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck
2953	.1002	809002	4c 9d 90	jmp $80909d		jmp changePlayerAnimForCurrentDir					; update any facing direction as needed
2954							;	rts

2956	.1005	809005					AbortJump
2957	.1005	809005					_ASSERT_axy8
2958	.1005	809005	a9 80		lda #$80		lda #$80
2959	.1007	809007	8d b2 00	sta $8000b2		sta PlayerData.yDeltaAccum.lo
2960	.100a	80900a	a9 ff		lda #$ff		lda #$FF
2961	.100c	80900c	8d b3 00	sta $8000b3		sta PlayerData.yDeltaAccum.hi							; set to hash fall speed -1.5
2962	.100f	80900f	60		rts			rts

2964	.1010	809010					StartJump
2965	.1010	809010					_ASSERT_axy8
2966	.1010	809010	a9 01		lda #$01		lda #1
2967	.1012	809012	8d aa 00	sta $8000aa		sta PlayerData.hasJumpedNZ								; we are jumping
2968	.1015	809015	a9 03		lda #$03		lda #kPlayerState.jump
2969	.1017	809017	8d a1 00	sta $8000a1		sta PlayerData.state										; enter the jump state
2970	.101a	80901a	9c ab 00	stz $8000ab		stz PlayerData.isFallingNZ								; not falling
2971	.101d	80901d	9c a9 00	stz $8000a9		stz PlayerData.OnGroundNZ								; not on the ground
2972	.1020	809020	9c b2 00	stz $8000b2		stz PlayerData.yDeltaAccum.lo							; set the Y jump accleration
2973	.1023	809023	9c b1 00	stz $8000b1		stz PlayerData.forceJumpNZ
2974	.1026	809026	a9 50		lda #$50		lda #kTimers.floatTimer									; reset the float timer
2975	.1028	809028	8d a8 00	sta $8000a8		sta PlayerData.floatTimer
2976	.102b	80902b	a9 fe		lda #$fe		lda #kPlayerParams.jumpStartDelta					; set the upper half of jump accleration
2977	.102d	80902d	8d b3 00	sta $8000b3		sta PlayerData.yDeltaAccum.hi
2978	.1030	809030	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck				; which is also how much we are moving this frame
2979	.1033	809033	20 9d 90	jsr $80909d		jsr changePlayerAnimForCurrentDir					; update the animation
2980							;	ldx #kSFX.jump
2981							;	jmp playSFX
2982	.1036	809036	60		rts			rts

2984	.1037	809037					handleFall
2985	.1037	809037					_ASSERT_axy8
2986	.1037	809037	ad a1 00	lda $8000a1		lda PlayerData.state
2987	.103a	80903a	c9 03		cmp #$03		cmp #kPlayerState.jump
2988	.103c	80903c	d0 0c		bne $80904a		bne _didntJustStartFalling								; are we still "jumping"
2989	.103e	80903e	ad 7c 00	lda $80007c			lda joyUp 												; if we just start falling, and joy is up and we have spring float
2990	.1041	809041	f0 07		beq $80904a			beq _didntJustStartFalling							; if we don't have the spring we don't to this function.
2991	.1043	809043	a9 02		lda #$02				lda #kPlayerState.flap
2992	.1045	809045	8d a1 00	sta $8000a1				sta PlayerData.state								; enter flap state
2993	.1048	809048	80 14		bra $80905e				bra _dontStopFloat
2994										;
2995	.104a	80904a					_didntJustStartFalling
2996	.104a	80904a	ad a1 00	lda $8000a1		lda PlayerData.state
2997	.104d	80904d	c9 02		cmp #$02		cmp #kPlayerState.flap
2998	.104f	80904f	d0 1d		bne $80906e		bne _checkUpStart											; if we are falling, and not already flapping check up
2999	.1051	809051	ad 85 00	lda $800085			lda joyUpStop
3000	.1054	809054	f0 08		beq $80905e			beq _dontStopFloat									; did we just release up?
3001	.1056	809056	a9 03		lda #$03				lda #kPlayerState.jump
3002	.1058	809058	8d a1 00	sta $8000a1				sta PlayerData.state								; we are now just "jumping" and handle as normal
3003	.105b	80905b	4c d8 8f	jmp $808fd8				jmp normalJumpUpdate
3004	.105e	80905e					_dontStopFloat
3005	.105e	80905e	ad a8 00	lda $8000a8		lda PlayerData.floatTimer								; can we still "float"
3006	.1061	809061	10 03		bpl $809066		bpl +
3007	.1063	809063	4c d8 8f	jmp $808fd8			jmp normalJumpUpdate									; nope, go back to normal to fall
3008	.1066	809066	ce a8 00	dec $8000a8	+	dec PlayerData.floatTimer
3009	.1069	809069	a2 01		ldx #$01		ldx #kJumpIndexs.floaty
3010	.106b	80906b	4c da 8f	jmp $808fda		jmp customJumpUpdate										; do a floaty jump then
3011								;
3012	.106e	80906e					_checkUpStart
3013	.106e	80906e	ad 84 00	lda $800084		lda joyUpStart
3014	.1071	809071	d0 03		bne $809076		bne +
3015	.1073	809073	4c d8 8f	jmp $808fd8			jmp normalJumpUpdate									; no up don't enter float so carry on as normal
3016	.1076	809076	a9 02		lda #$02	+	lda #kPlayerState.flap
3017	.1078	809078	8d a1 00	sta $8000a1		sta PlayerData.state
3018	.107b	80907b	a2 01		ldx #$01		ldx #kJumpIndexs.floaty
3019	.107d	80907d	4c da 8f	jmp $808fda		jmp customJumpUpdate										; enter float state and do floaty jump

3021	.1080	809080					enterOnGround
3022	.1080	809080					_ASSERT_jsr
3023	.1080	809080					_ASSERT_axy8
3024	.1080	809080	a9 01		lda #$01		lda #kPlayerState.normal ; == 1
3025	.1082	809082	8d a1 00	sta $8000a1		sta PlayerData.state
3026								.cerror kPlayerState.normal != 1, "need to add lda #1"
3027	.1085	809085	8d a9 00	sta $8000a9		sta PlayerData.OnGroundNZ								; we are now in normal mode and on the ground
3028	.1088	809088	8d b2 00	sta $8000b2		sta PlayerData.yDeltaAccum.lo							; tiny bit down
3029	.108b	80908b	9c aa 00	stz $8000aa		stz PlayerData.hasJumpedNZ								; not jumping, or falling, or moving slow
3030	.108e	80908e	9c ab 00	stz $8000ab		stz PlayerData.isFallingNZ
3031	.1091	809091	9c b3 00	stz $8000b3		stz PlayerData.yDeltaAccum.hi
3032	.1094	809094	9c af 00	stz $8000af		stz PlayerData.slowMoveNZ
3033	.1097	809097	ad ac 00	lda $8000ac		lda PlayerData.facingRight								; set the right direction and update animation to standing
3034								; fall through
3035	.109a	80909a					changePlayerDir
3036	.109a	80909a					_ASSERT_axy8
3037	.109a	80909a	8d ac 00	sta $8000ac		sta PlayerData.facingRight
3038	.109d	80909d					changePlayerAnimForCurrentDir
3039	.109d	80909d					_ASSERT_axy8
3040	.109d	80909d	ad a1 00	lda $8000a1		lda PlayerData.state
3041	.10a0	8090a0	c9 02		cmp #$02		cmp #kPlayerState.flap									; if flap then flap animation
3042	.10a2	8090a2	d0 04		bne $8090a8		bne _notFlap
3043	.10a4	8090a4	a9 06		lda #$06			lda #kPlayerAnimsIndex.flapRight
3044	.10a6	8090a6	80 14		bra $8090bc			bra _still
3045									;
3046	.10a8	8090a8					_notFlap
3047	.10a8	8090a8	ad a9 00	lda $8000a9		lda PlayerData.OnGroundNZ								; else if not on ground, jump animation
3048	.10ab	8090ab	d0 04		bne $8090b1		bne _onGround
3049	.10ad	8090ad	a9 04		lda #$04			lda #kPlayerAnimsIndex.jumpRight
3050	.10af	8090af	80 0b		bra $8090bc			bra _still
3051									;
3052	.10b1	8090b1					_onGround
3053	.10b1	8090b1	ad ae 00	lda $8000ae		lda PlayerData.movingLRNZ								; else if moving, walk animation
3054	.10b4	8090b4	f0 04		beq $8090ba		beq _notMoving
3055	.10b6	8090b6	a9 02		lda #$02			lda #kPlayerAnimsIndex.standWalkRight
3056	.10b8	8090b8	80 02		bra $8090bc			bra _still
3057	.10ba	8090ba					_notMoving
3058	.10ba	8090ba	a9 00		lda #$00		lda #kPlayerAnimsIndex.standRight					; else stand animation
3059	.10bc	8090bc					_still
3060	.10bc	8090bc	18		clc			clc
3061	.10bd	8090bd	6d ac 00	adc $8000ac		adc PlayerData.facingRight								; convert to left if needed
3062	.10c0	8090c0	80 1b		bra $8090dd		gra setPlayerAnimeTo_88
3063								;rts ;above is now a jmp


3066	.10c2	8090c2					incPlayerYDeltaAndReturn
3067	.10c2	8090c2					_ASSERT_jsr
3068	.10c2	8090c2					_ASSERT_axy8
3069	.10c2	8090c2	ad b2 00	lda $8000b2		lda PlayerData.yDeltaAccum.lo							; yDelta += JumpSpeed[normal/float]
3070	.10c5	8090c5	18		clc			clc
3071	.10c6	8090c6	7d e8 91	adc $8091e8,x		adc PlayerJumpLUT,x
3072	.10c9	8090c9	8d b2 00	sta $8000b2		sta PlayerData.yDeltaAccum.lo
3073	.10cc	8090cc	ad b3 00	lda $8000b3		lda PlayerData.yDeltaAccum.hi
3074	.10cf	8090cf	69 00		adc #$00		adc #0
3075	.10d1	8090d1	30 06		bmi $8090d9		bmi +															; if negative then we are fine
3076	.10d3	8090d3	c9 04		cmp #$04			cmp # kPlayerParams.maxFallSpeed					; has the hi reached max fall velocity
3077	.10d5	8090d5	90 02		bcc $8090d9			bcc +														; nope
3078	.10d7	8090d7	a9 04		lda #$04				lda # kPlayerParams.maxFallSpeed				; yes clip it, however lo remains untouched
3079	.10d9	8090d9	8d b3 00	sta $8000b3	+	sta PlayerData.yDeltaAccum.hi							; so fall can be a bit random
3080	.10dc	8090dc	60		rts			rts

3082							.as
3083							.xs
3084	.10dd	8090dd					setPlayerAnimeTo_88
3085	.10dd	8090dd					_ASSERT_jsr
3086	.10dd	8090dd					_ASSERT_axy8
3087	.10dd	8090dd	cd b4 00	cmp $8000b4		cmp PlayerData.currAnim									; if already in this state don't change
3088	.10e0	8090e0	f0 0d		beq $8090ef		beq _dontchange											; this way I can just always do a "change anim"
3089	.10e2	8090e2	8d b4 00	sta $8000b4			sta PlayerData.currAnim								; and it won't muck the animation up
3090	.10e5	8090e5	aa		tax				tax
3091	.10e6	8090e6	bd de 91	lda $8091de,x			lda PlayerFrameData.animFrameRate,x				; read the frames speed
3092	.10e9	8090e9	8d bf 00	sta $8000bf			sta TickDowns.playerAnim							; set the anim timer to new speed
3093	.10ec	8090ec	9c b5 00	stz $8000b5			stz PlayerData.frameOffset							; reset to frame zero as new anim may have less frames then current
3094	.10ef	8090ef					_dontchange
3095	.10ef	8090ef	60		rts			rts

3097							.as
3098							.xs
3099	.10f0	8090f0					setPlayerSpritePtrFromFrameNumber_88
3100	.10f0	8090f0					_ASSERT_jsr
3101	.10f0	8090f0					_ASSERT_axy8
3102	.10f0	8090f0	ae b4 00	ldx $8000b4		ldx PlayerData.currAnim
3103	.10f3	8090f3	bd 96 91	lda $809196,x		lda PlayerFrameData.animFrameIndexs,x					; get the curent base index for this animation
3104	.10f6	8090f6	18		clc			clc
3105	.10f7	8090f7	6d b5 00	adc $8000b5		adc PlayerData.frameOffset									; offset by current frame
3106	.10fa	8090fa	a8		tay			tay
3107	.10fb	8090fb	b9 a0 91	lda $8091a0,y		lda PlayerFrameData.animFrameChar,y						; store the char number
3108	.10fe	8090fe	8d ed 03	sta $8003ed		sta OAMMirror+2
3109	.1101	809101	18		clc			clc																; on the off chance this is 16x32 set the lower sprite as well
3110	.1102	809102	69 20		adc #$20		adc #32															; its faster than checking, the X/Y setting will move
3111	.1104	809104	8d f1 03	sta $8003f1		sta OAMMirror+6												; it offscreen if not needed
3112	.1107	809107	b9 ba 91	lda $8091ba,y		lda PlayerFrameData.animFrameAttri,y
3113	.110a	80910a	8d ee 03	sta $8003ee		sta OAMMirror+3
3114	.110d	80910d	69 00		adc #$00		adc #0															; add carry if we cross boundary
3115	.110f	80910f	8d f2 03	sta $8003f2		sta OAMMirror+7
3116	.1112	809112	60		rts			rts


3119							.as
3120							.xs
3121	.1113	809113					updatePlayerAnim_88
3122	.1113	809113					_ASSERT_jsr
3123	.1113	809113					_ASSERT_axy8
3124							; returns carry clear if anim did not loop
3125							; carry is set if it did
3126	.1113	809113	ae b4 00	ldx $8000b4		ldx PlayerData.currAnim
3127	.1116	809116	bd 82 91	lda $809182,x		lda PlayerFrameData.animTypes,x
3128	.1119	809119	c9 00		cmp #$00		cmp #kSpriteAnimationType.none							; is this a hold frame?
3129	.111b	80911b	f0 06		beq $809123		beq _skip
3130	.111d	80911d	ad bf 00	lda $8000bf			lda TickDowns.playerAnim								; time for next frame?
3131	.1120	809120	f0 02		beq $809124			beq _itTime
3132	.1122	809122	18		clc					clc
3133	.1123	809123					_skip
3134	.1123	809123	60		rts			rts

3136	.1124	809124					_itTime
3137	.1124	809124	ad b5 00	lda $8000b5		lda PlayerData.frameOffset
3138	.1127	809127	18		clc			clc
3139	.1128	809128	69 01		adc #$01		adc #1
3140	.112a	80912a	dd d4 91	cmp $8091d4,x		cmp PlayerFrameData.animFrameCount,x					; add and reset to 0 if over
3141	.112d	80912d	90 02		bcc $809131		bcc _store
3142	.112f	80912f	a9 00		lda #$00			lda #0
3143	.1131	809131					_store
3144	.1131	809131	8d b5 00	sta $8000b5		sta PlayerData.frameOffset
3145	.1134	809134	08		php			php 																; if we overflowed c will be set, else clear
3146	.1135	809135	bd de 91	lda $8091de,x			lda PlayerFrameData.animFrameRate,x
3147	.1138	809138	8d bf 00	sta $8000bf			sta TickDowns.playerAnim								; reset timer
3148	.113b	80913b	20 f0 90	jsr $8090f0			jsr setPlayerSpritePtrFromFrameNumber_88			; update the sprite
3149	.113e	80913e	28		plp			plp 																; restore carry state
3150	.113f	80913f	60		rts			rts

3152							.as
3153							.xs
3154	.1140	809140					setPlayerToSpawnPoint_88
3155	.1140	809140					_ASSERT_jsr
3156	.1140	809140					_ASSERT_axy8
3157	.1140	809140	ad 9a 00	lda $80009a		lda LevelData.playerIndex									; get the spwan map index
3158	.1143	809143					setPlayerToIndexA
3159	.1143	809143	48		pha			pha																; save A for Y extration
3160	.1144	809144	0a		asl a				asl a
3161	.1145	809145	0a		asl a				asl a
3162	.1146	809146	0a		asl a				asl a
3163	.1147	809147	0a		asl a				asl a															; mul X by 16 which also clears out the Y
3164	.1148	809148	8d 7f 03	sta $80037f			sta mplexBuffer.xpos										; save the X
3165	.114b	80914b	9c 9f 03	stz $80039f			stz mplexBuffer.xmsb										; no MSB from a fixed tile
3166	.114e	80914e	68		pla			pla																; restore index value
3167	.114f	80914f	29 f0		and #$f0		and #$F0															; mask off Y value which is already x16
3168	.1151	809151	8d bf 03	sta $8003bf		sta mplexBuffer.ypos											; save the Y
3169								; make sure the bullet is off the screen
3170	.1154	809154	a9 e0		lda #$e0		lda #kSpriteEmptyVal
3171	.1156	809156	8d c0 03	sta $8003c0		sta mplexBuffer.ypos+kBulletSpriteOffset
3172	.1159	809159	8d 80 03	sta $800380		sta mplexBuffer.xpos+kBulletSpriteOffset
3173	.115c	80915c	60		rts			rts

3175							.as
3176							.xs
3177	.115d	80915d					clearPlayerStuct_88
3178	.115d	80915d					_ASSERT_jsr
3179	.115d	80915d					_ASSERT_axy8
3180	.115d	80915d	a2 1c		ldx #$1c		ldx #size(sPlayerData)-1
3181	.115f	80915f	9e a1 00	stz $8000a1,x	-	stz PlayerData,x												; just set it all to 0
3182	.1162	809162	ca		dex			dex
3183	.1163	809163	10 fa		bpl $80915f		bpl -
3184	.1165	809165	60		rts			rts

3186							.as
3187							.xs
3188	.1166	809166					removePickups_88
3189	.1166	809166					_ASSERT_jsr
3190	.1166	809166					_ASSERT_axy8
3191	.1166	809166	9c a7 00	stz $8000a7		stz PlayerData.canFloatNZ
3192	.1169	809169	9c b6 00	stz $8000b6		stz PlayerData.bulletActive
3193	.116c	80916c	9c ba 00	stz $8000ba		stz PlayerData.numBulletEgg
3194	.116f	80916f	4c 2f a1	jmp $80a12f		jmp clearShieldState											; shield has timmers and other state with it
3195								;

3197							.as
3198							.xs
3199	.1172	809172					awardLife_88
3200	.1172	809172					_ASSERT_jsr
3201	.1172	809172					_ASSERT_axy8
3202							;	lda PasswordInfiLives
3203							;	beq +
3204							;		rts
3205	.1172	809172	ee 87 00	inc $800087	+	inc GameData.lives
3206	.1175	809175	4c f9 87	jmp $8087f9		jmp pltLives


3209							; ----- @Player Animation Data@ -----

3211	.1178	809178					kSpriteType .block
3212	=0							s16x16 = 0
3213	=1							s16x32 = 1
3214	=2							s32x32 = 2
3215							.bend

3217	.1178	809178					kSpriteAnimationType .block
3218	=0							none = 0
3219	=1							loop = 1
3220							.bend

3222	=36						kPlayerSprFlags = kSpri_2 | kSPal_2

3224							; this is all the raw word data for each sprite that makes up the animations
3225	=(9216,)					RightFrames = ( fSprDef(0,0,kPlayerSprFlags), )
3226	=(25600,)					LeftFrames = ( fSprDef(0,0,kPlayerSprFlags|kSFlipX), )
3227	=(9248,9250,9252,9254)				WalkRightFrames = ( fSprDef(0,1,kPlayerSprFlags), fSprDef(1,1,kPlayerSprFlags),fSprDef(2,1,kPlayerSprFlags),fSprDef(3,1,kPlayerSprFlags))
3228	=(25632,25634,25636,25638)			WalkLeftFrames = ( fSprDef(0,1,kPlayerSprFlags|kSFlipX), fSprDef(1,1,kPlayerSprFlags|kSFlipX),fSprDef(2,1,kPlayerSprFlags|kSFlipX),fSprDef(3,1,kPlayerSprFlags|kSFlipX))
3229	=(9280,9282)					JumpRightFrames = ( fSprDef(0,2,kPlayerSprFlags), fSprDef(1,2,kPlayerSprFlags) )
3230	=(25664,25666)					JumpLeftFrames = ( fSprDef(0,2,kPlayerSprFlags|kSFlipX), fSprDef(1,2,kPlayerSprFlags|kSFlipX) )
3231	=(9224,9228)					FlapRightFrames = ( fSprDef(4,0,kPlayerSprFlags), fSprDef(6,0,kPlayerSprFlags) )
3232	=(25608,25612)					FlapLeftFrames = ( fSprDef(4,0,kPlayerSprFlags|kSFlipX), fSprDef(6,0,kPlayerSprFlags|kSFlipX) )
3233	=(9284,9286,9288,9290)				DeadFramesUpper = ( fSprDef(2,2,kPlayerSprFlags), fSprDef(3,2,kPlayerSprFlags),fSprDef(4,2,kPlayerSprFlags),fSprDef(5,2,kPlayerSprFlags))
3234	=(9312,9314,25696,25698)			ExitFrames = ( fSprDef(0,3,kPlayerSprFlags), fSprDef(1,3,kPlayerSprFlags),fSprDef(0,3,kPlayerSprFlags|kSFlipX), fSprDef(1,3,kPlayerSprFlags|kSFlipX) )

3236							; each animation then has data such as the frame size, mode, rate etc
3237							; sizes, animation style, frames, anim X offset, animation frame rate
3238	=[(0,0,(9216,),0,255)]				PlayerFrameSpec :=  [(kSpriteType.s16x16, kSpriteAnimationType.none, RightFrames,		0,		255)]
3239	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255)]	PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.none, LeftFrames,			0,		255)]
3240	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkRightFrames,	0,		8)]
3241	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, WalkLeftFrames,	0,		8)]
3242	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpRightFrames,	0,		8)]
3243	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, JumpLeftFrames,	0,		8)]
3244	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapRightFrames,	0,		8)]
3245	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8)]
							PlayerFrameSpec ..= [(kSpriteType.s32x32, kSpriteAnimationType.loop, FlapLeftFrames,	-16,	8)]
3246	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x32, kSpriteAnimationType.loop, DeadFramesUpper,	0,		8)]
3247	=[(0,0,(9216,),0,255),(0,0,(25600,),0,255),(0,1,(9248,9250,9252,9254),0,8),(0,1,(25632,25634,25636,25638),0,8),(0,1,(9280,9282),0,8),(0,1,(25664,25666),0,8),(2,1,(9224,9228),0,8),(2,1,(25608,25612),-16,8),(1,1,(9284,9286,9288,9290),0,8),(0,1,(9312,9314,25696,25698),0,8)]
							PlayerFrameSpec ..= [(kSpriteType.s16x16, kSpriteAnimationType.loop, ExitFrames,			0,		8)]

3249							; now we extract all the info and do an Array of Structs to Struct of Arraies conversion
3250	.1178	809178					PlayerFrameData .block
3251	>1178	809178	00 00 00 00 00 00 02 02			sizes					.byte PlayerFrameSpec[:,0]		; the size for each animation
	>1180	809180	01 00
3252	>1182	809182	00 00 01 01 01 01 01 01			animTypes			.byte PlayerFrameSpec[:,1]		; if its static or looping
	>118a	80918a	01 01
3253	>118c	80918c	00 00 00 00 00 00 00 f0			animXOffset			.char PlayerFrameSpec[:,3]		; any player to sprite X offset needed
	>1194	809194	00 00
3254	=[]							_animDataIndex := []										; we need to get all the sprite def words but also
3255	=[]							_frameWords := []											; keep a track of the starting point into the list of all
3256	=[]							_frameCount := []											; off them for each animation, and how long each anim is
3257								.for frames in PlayerFrameSpec[:,2]
3258	=[0]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,)							_frameWords ..= frames								; append this animations frames to the list
3260	=[1]								_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1]								_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600)							_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1]								_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254)				_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4]							_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4]							_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10]							_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2]							_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10,12]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2,2]							_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10,12,14]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10,12,14,16]						_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2,2,2,2]						_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10,12,14,16,18]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2,2,2,2,4]						_frameCount ..= [len(frames)]						; append the number of frames
3258	=[0,1,2,6,10,12,14,16,18,22]					_animDataIndex ..= [len(_frameWords)]			; record the current lenght of all the frames we have
3259	=(9216,25600,9248,9250,9252,9254,25632,25634,25636,25638,9280,9282,25664,25666,9224,9228,25608,25612,9284,9286,9288,9290,9312,9314,25696,25698)
									_frameWords ..= frames								; append this animations frames to the list
3260	=[1,1,4,4,2,2,2,2,4,4]						_frameCount ..= [len(frames)]						; append the number of frames
3261								.next
3262	>1196	809196	00 01 02 06 0a 0c 0e 10			animFrameIndexs	.byte (_animDataIndex)			; write all the start indexs for the frames
	>119e	80919e	12 16
3263	>11a0	8091a0	00 00 20 22 24 26 20 22			animFrameChar		.byte <(_frameWords)				; the low of the char number
	>11a8	8091a8	24 26 40 42 40 42 08 0c 08 0c 44 46 48 4a 60 62
	>11b8	8091b8	60 62
3264	>11ba	8091ba	24 64 24 24 24 24 64 64			animFrameAttri		.byte >(_frameWords)				; the high + attributes
	>11c2	8091c2	64 64 24 24 64 64 24 24 64 64 24 24 24 24 24 24
	>11d2	8091d2	64 64
3265	>11d4	8091d4	01 01 04 04 02 02 02 02			animFrameCount		.byte (_frameCount)				; number of frames
	>11dc	8091dc	04 04
3266	>11de	8091de	ff ff 08 08 08 08 08 08			animFrameRate		.byte (PlayerFrameSpec[:,4])	; and the rate
	>11e6	8091e6	08 08
3267							.bend

3269							; simple lut to handle normal jumping and floating acceleration rates
3270	>11e8	8091e8	13 04				PlayerJumpLUT .byte kPlayerParams.jumpDeltaAccum, kPlayerParams.jumpDeltaAccumFloat

3272							; for the flash affect, we have a whole two colours, yellow and blue
3273	.11ea	8091ea					PlayerColourLUT .block
3274	=(16250,28144)						_colours = (fRGBToSNES(214,222,123),fRGBToSNES(132,123,222))
3275	>11ea	8091ea	7a f0					lo .byte <(_colours)
3276	>11ec	8091ec	3f 6d					hi .byte >(_colours)
3277							.bend

3279							; ----- @Bullet Routines@ -----

3281	.11ee	8091ee					startBullet
3282	.11ee	8091ee					_ASSERT_jsr
3283	.11ee	8091ee					_ASSERT_axy8
3284	.11ee	8091ee	a9 01		lda #$01		lda #1
3285	.11f0	8091f0	8d b6 00	sta $8000b6		sta PlayerData.bulletActive					; we have a bullet there is only 1
3286								;ldx #kSFX.bubble
3287								;jsr playSFX
3288	.11f3	8091f3	9c b7 00	stz $8000b7		stz PlayerData.bulletUD							; it goes up with to start
3289	.11f6	8091f6	9c b9 00	stz $8000b9		stz PlayerData.bulletBurstNZ					; its not dead either
3290	.11f9	8091f9	ad ac 00	lda $8000ac		lda PlayerData.facingRight
3291	.11fc	8091fc	8d b8 00	sta $8000b8		sta PlayerData.bulletLR							; make it move forward
3292	.11ff	8091ff	a9 c8		lda #$c8		lda #200
3293	.1201	809201	8d c1 00	sta $8000c1		sta TickDowns.bulletLifeTimer					; it lives for 4 seconds (PAL)
3294	.1204	809204	ad 7f 03	lda $80037f		lda mplexBuffer.xpos
3295	.1207	809207	8d 80 03	sta $800380		sta mplexBuffer.xpos+kBulletSpriteOffset	; same X as the player
3296	.120a	80920a	ad bf 03	lda $8003bf		lda mplexBuffer.ypos
3297	.120d	80920d	38		sec			sec
3298	.120e	80920e	e9 03		sbc #$03		sbc #3
3299	.1210	809210	8d c0 03	sta $8003c0		sta mplexBuffer.ypos+kBulletSpriteOffset	; 3 above the player
3300	.1213	809213	ad 9f 03	lda $80039f		lda mplexBuffer.xmsb
3301	.1216	809216	8d a0 03	sta $8003a0		sta mplexBuffer.xmsb+kBulletSpriteOffset	; copy players MSB (not really needed on SNES)
3302	.1219	809219	ad ba 00	lda $8000ba		lda PlayerData.numBulletEgg					; is this a bubble or an egg bullet
3303								;ora PasswordRedBullets
3304	.121c	80921c	f0 04		beq $809222		beq _normal
3305	.121e	80921e	a9 04		lda #$04			lda #kSprites.bulletRed
3306	.1220	809220	80 02		bra $809224			bra _store
3307	.1222	809222					_normal
3308	.1222	809222	a9 00		lda #$00		lda #kSprites.bulletSprite
3309	.1224	809224					_store
3310	.1224	809224	8d 8d 02	sta $80028d		sta bulletFrame
3311	.1227	809227	60		rts			rts

3313	.1228	809228					updateBullet
3314	.1228	809228					_ASSERT_jsr
3315	.1228	809228					_ASSERT_axy8
3316	.1228	809228	ad b6 00	lda $8000b6		lda PlayerData.bulletActive
3317	.122b	80922b	f0 15		beq $809242		beq bulletExit
3318	.122d	80922d	ad c1 00	lda $8000c1			lda TickDowns.bulletLifeTimer			; has it expired?
3319	.1230	809230	d0 21		bne $809253			bne bulletNotDead
3320									;
3321	.1232	809232					removeBullet
3322	.1232	809232					_ASSERT_jsr
3323	.1232	809232					_ASSERT_axy8
3324	.1232	809232	9c b6 00	stz $8000b6		stz PlayerData.bulletActive				; no longer alive
3325	.1235	809235	ad ba 00	lda $8000ba		lda PlayerData.numBulletEgg				; if I have an egg dec it
3326	.1238	809238	f0 03		beq $80923d		beq +												; this leads to an exploit, if you fire collect then you loose the egg
3327									;lda PasswordRedBullets
3328									;bne +
3329	.123a	80923a	ce ba 00	dec $8000ba				dec PlayerData.numBulletEgg
3330	.123d	80923d	a9 e0		lda #$e0	+	lda #kSpriteEmptyVal							; set bullet off screen
3331	.123f	80923f	8d c0 03	sta $8003c0		sta mplexBuffer.ypos+kBulletSpriteOffset
3332	.1242	809242					bulletExit
3333	.1242	809242	60		rts			rts

3335	.1243	809243					burstBullet
3336	.1243	809243					_ASSERT_jsr
3337	.1243	809243					_ASSERT_axy8
3338	.1243	809243	a9 03		lda #$03		lda #kSprites.bulletSplat
3339	.1245	809245	8d 8d 02	sta $80028d		sta bulletFrame								; we splat
3340	.1248	809248	a9 10		lda #$10		lda #16
3341	.124a	80924a	8d c1 00	sta $8000c1		sta TickDowns.bulletLifeTimer				; hold it for 16 frames
3342	.124d	80924d	a9 01		lda #$01		lda #1
3343	.124f	80924f	8d b9 00	sta $8000b9		sta PlayerData.bulletBurstNZ				; mark it as burst
3344							;	ldx #kSFX.ebubble
3345							;	jmp playSFX
3346	.1252	809252	60		rts			rts

3348	.1253	809253					bulletNotDead
3349	.1253	809253					_ASSERT_jsr
3350	.1253	809253					_ASSERT_axy8
3351	.1253	809253	ad b9 00	lda $8000b9		lda PlayerData.bulletBurstNZ
3352	.1256	809256	d0 ea		bne $809242		bne bulletExit										; if not burst
3353	.1258	809258	ad ba 00	lda $8000ba			lda PlayerData.numBulletEgg
3354									;ora PasswordRedBullets
3355	.125b	80925b	d0 11		bne $80926e			bne _bulletFull								; are we full?
3356	.125d	80925d	ad 8d 02	lda $80028d				lda bulletFrame
3357	.1260	809260	c9 02		cmp #$02				cmp #kSprites.bulletSprite+2			; have we reached the full size
3358	.1262	809262	f0 0a		beq $80926e				beq _bulletFull
3359	.1264	809264	ad c1 00	lda $8000c1					lda TickDowns.bulletLifeTimer		; is it time to update the frame?
3360	.1267	809267	29 07		and #$07					and #$07									; every 8 frames
3361	.1269	809269	d0 03		bne $80926e					bne _bulletFull
3362	.126b	80926b	ee 8d 02	inc $80028d						inc bulletFrame					; next frame
3363	.126e	80926e					_bulletFull
3364	.126e	80926e	a9 01		lda #$01		lda #kBulletCollisionbox
3365	.1270	809270	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set collision size to the bullets
3366								; lda #kBulletSpriteOffset ; same as kBulletCollisionbox
3367	.1272	809272	85 1d		sta $1d			sta CollideSpriteToCheck
3368	.1274	809274	a9 8c		lda #$8c		lda #<UpdateBulletEndYColl
3369	.1276	809276	85 06		sta $06			sta Pointer1.lo
3370	.1278	809278	a9 92		lda #$92		lda #>UpdateBulletEndYColl
3371	.127a	80927a	85 07		sta $07			sta Pointer1.hi									; set post collision callback
3372	.127c	80927c	a9 00		lda #$00		lda #0
3373	.127e	80927e	85 05		sta $05			sta CollisionResult
3374	.1280	809280	a8		tay			tay ; ldy #0
3375	.1281	809281	ad b7 00	lda $8000b7		lda PlayerData.bulletUD							; which Y direction are we moving?
3376	.1284	809284	f0 03		beq $809289		beq +
3377	.1286	809286	4c b8 95	jmp $8095b8			jmp entDown
3378	.1289	809289	4c 7c 95	jmp $80957c	+	jmp entUp

3380	.128c	80928c					UpdateBulletEndYColl
3381	.128c	80928c					_ASSERT_jsr
3382	.128c	80928c					_ASSERT_axy8
3383	.128c	80928c	a5 05		lda $05			lda CollisionResult
3384	.128e	80928e	f0 0a		beq $80929a		beq _updateY										; did the egg hit something
3385	.1290	809290	ad b7 00	lda $8000b7			lda PlayerData.bulletUD						; yes
3386	.1293	809293	49 01		eor #$01			eor #1
3387	.1295	809295	8d b7 00	sta $8000b7			sta PlayerData.bulletUD						; change direction
3388	.1298	809298	10 0a		bpl $8092a4		bpl _checkX
3389	.129a	80929a					_updateY
3390	.129a	80929a	ad c0 03	lda $8003c0		lda mplexBuffer.ypos+kBulletSpriteOffset
3391	.129d	80929d	18		clc			clc
3392	.129e	80929e	6d 8a 02	adc $80028a		adc checkSpriteToCharData.yDeltaCheck		; update the Y
3393	.12a1	8092a1	8d c0 03	sta $8003c0		sta mplexBuffer.ypos+kBulletSpriteOffset
3394	.12a4	8092a4					_checkX
3395	.12a4	8092a4	a9 bc		lda #$bc		lda #<UpdateBulletEndXColl						; set the x collision callback
3396	.12a6	8092a6	85 06		sta $06			sta Pointer1.lo
3397	.12a8	8092a8	a9 92		lda #$92		lda #>UpdateBulletEndXColl
3398	.12aa	8092aa	85 07		sta $07			sta Pointer1.hi
3399	.12ac	8092ac	a9 00		lda #$00		lda #$00
3400	.12ae	8092ae	85 05		sta $05			sta CollisionResult								; clear the result
3401	.12b0	8092b0	a8		tay			tay ;ldy #0
3402	.12b1	8092b1	ad b8 00	lda $8000b8		lda PlayerData.bulletLR							; which way are we moving?
3403	.12b4	8092b4	d0 03		bne $8092b9		bne +
3404	.12b6	8092b6	4c 5d 95	jmp $80955d			jmp entRight
3405	.12b9	8092b9	4c 99 95	jmp $809599	+	jmp entLeft

3407							; do some more collision checking here
3408	.12bc	8092bc					UpdateBulletEndXColl
3409	.12bc	8092bc					_ASSERT_jsr
3410	.12bc	8092bc					_ASSERT_axy8
3411	.12bc	8092bc	a5 05		lda $05			lda CollisionResult								; did we hit something?
3412	.12be	8092be	f0 0a		beq $8092ca		beq _updateX
3413	.12c0	8092c0	ad b8 00	lda $8000b8			lda PlayerData.bulletLR						; go the other way
3414	.12c3	8092c3	49 01		eor #$01			eor #1
3415	.12c5	8092c5	8d b8 00	sta $8000b8			sta PlayerData.bulletLR
3416	.12c8	8092c8	10 11		bpl $8092db			bpl _checkEnts
3417	.12ca	8092ca					_updateX
3418	.12ca	8092ca	a2 01		ldx #$01		ldx #kBulletSpriteOffset
3419	.12cc	8092cc	20 55 85	jsr $808555		jsr addXWithMSBAndClip_88						; move on the X
3420	.12cf	8092cf	a5 2f		lda $2f			lda DidClipX										; did we hit an edge?
3421	.12d1	8092d1	f0 08		beq $8092db		beq _checkEnts
3422	.12d3	8092d3	ad b8 00	lda $8000b8			lda PlayerData.bulletLR						; bounce the other way
3423	.12d6	8092d6	49 01		eor #$01			eor #1
3424	.12d8	8092d8	8d b8 00	sta $8000b8			sta PlayerData.bulletLR
3425	.12db	8092db					_checkEnts
3426	.12db	8092db	20 91 9e	jsr $809e91		jsr collideBulletAgainstRest					; did we hit an enmey
3427	.12de	8092de	90 27		bcc $809307		bcc _exit2 											; didn't hit one
3428	.12e0	8092e0	bd cd 00	lda $8000cd,x			lda EntityData.type,x						; yes, is it a boss?
3429	.12e3	8092e3	20 31 9b	jsr $809b31			jsr isTypeBoss
3430	.12e6	8092e6	b0 20		bcs $809308			bcs _boss
3431	.12e8	8092e8	a9 ff		lda #$ff				lda #kEntity.removedFromBullet		; we make an entity removed by bullet
3432	.12ea	8092ea	ac ba 00	ldy $8000ba				ldy PlayerData.numBulletEgg			; so we can put it back latter
3433	.12ed	8092ed	f0 02		beq $8092f1				beq +
3434	.12ef	8092ef	a9 fe		lda #$fe					lda #kEntity.deadFromRedBullet	; if it was red we don't restore them
3435	.12f1	8092f1	9d 95 01	sta $800195,x			+	sta EntityData.entState,x
3436	.12f4	8092f4	a9 ff		lda #$ff				lda #255										; disable Ent
3437	.12f6	8092f6	9d c1 03	sta $8003c1,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
3438	.12f9	8092f9	9d 18 01	sta $800118,x				sta EntityData.movTimer,x
3439	.12fc	8092fc	1a		inc a					inc a 										; 0
3440	.12fd	8092fd	9d ff 00	sta $8000ff,x				sta EntityData.active,x
3441	.1300	809300	1a		inc a					inc a 										; 1
3442	.1301	809301	9d 12 02	sta $800212,x				sta EntityData.speed,x
3443	.1304	809304	4c 43 92	jmp $809243				jmp burstBullet
3444	.1307	809307						_exit2
3445	.1307	809307	60		rts				rts
3446	.1308	809308					_boss
3447	.1308	809308	ad ba 00	lda $8000ba		lda PlayerData.numBulletEgg
3448							;	ora PasswordRedBullets
3449	.130b	80930b	f0 fa		beq $809307		beq _exit2 											; only accept eggs for the boss
3450	.130d	80930d	bd cd 00	lda $8000cd,x			lda EntityData.type,x
3451	.1310	809310	20 41 9b	jsr $809b41			jsr isTypeBossBounceDetect					; look for the actual bear not the dummies
3452	.1313	809313	b0 03		bcs $809318			bcs _found
3453	.1315	809315	ca		dex					dex											; doesn't affect C
3454	.1316	809316	80 f0		bra $809308				bra _boss
3455	.1318	809318					_found
3456	.1318	809318	20 4d 9b	jsr $809b4d		jsr hurtBoss
3457	.131b	80931b	4c 43 92	jmp $809243		jmp burstBullet

3459	=(9420,9422,9452,9454,9676)			PlayerBulletFrames = (fSprDef(6,6,kPlayerSprFlags), fSprDef(7,6,kPlayerSprFlags), fSprDef(6,7,kPlayerSprFlags), fSprDef(7,7,kPlayerSprFlags), fSprDef(6,14,kPlayerSprFlags))
3460	.131e	80931e					PlayerBulletAnimData .block
3461	>131e	80931e	cc ce ec ee cc				lo .byte <(PlayerBulletFrames)
3462	>1323	809323	24 24 24 24 25				hi .byte >(PlayerBulletFrames)
3463							.bend

3465							; ----- @Entity system@ -----

3467							mConvertXToEntSpriteX .macro ; skip past player + bullet
3470							.endm

3472							mRestoreEntSpriteX .macro ; go back past player + bullet
3475							.endm

3477	.1328	809328					kBoss .block
3478	=7							hitPoints = 7
3479	=9							hitPointsOctopuss = 9
3480	=25							deathAnimTime = 25
3481	=0							normal = 0
3482	=1							dead = 1
3483							.bend

3485	.1328	809328					kFishLimits .block
3486	=181							startTwo = 250-21-(8*6) ; 165
3487	=197							maxY = 255-8-50
3488							.bend

3490	.1328	809328					kSpiderValues .block
3491	=2							yFallDelta = 2
3492	=209							rightStartWiggle = 255-32-14 ; 32 pixels but compenstating for the sprite width
3493	=225							rightStartFall = 255-16-14 ; 16 pixels
3494	=46							leftStartWiggle = 32+14
3495	=30							leftStartFall = 16+14
3496	=32							pauseEndFallFrames = 32
3497	=3							riseDelayTime = 3
3498							.bend

3500							.as
3501							.xs
3502	.1328	809328					unpackEntityBytes
3503	.1328	809328					_ASSERT_jsr
3504	.1328	809328					_ASSERT_axy8
3505								; asume we don't have any bosses and reset the sprites back to normal
3506	.1328	809328	a9 62		lda #$62		lda #kDefault_OBSEL
3507	.132a	80932a	8d 01 21	sta $802101		sta $802101
3508	.132d	80932d	a0 00		ldy #$00		ldy #0
3509	.132f	80932f	a2 18		ldx #$18		ldx #kEntity.maxEntities-1				; clear all entities
3510	.1331	809331	9e 4a 01	stz $80014a,x	-	stz EntityData.animBase,x
3511	.1334	809334	9e 63 01	stz $800163,x		stz EntityData.animFrame,x
3512	.1337	809337	9e 95 01	stz $800195,x		stz EntityData.entState,x
3513	.133a	80933a	9e 44 02	stz $800244,x		stz EntityData.palleteOffset,x
3514	.133d	80933d	ca		dex			dex
3515	.133e	80933e	10 f1		bpl $809331		bpl -
3516	.1340	809340	b1 00		lda ($00),y		lda (EntityDataPointer),y				; read the number of entities
3517	.1342	809342	85 10		sta $10			sta ZPTemp2									; number of entities
3518	.1344	809344	8d cc 00	sta $8000cc		sta EntityData.number
3519	.1347	809347	f0 40		beq $809389		beq _e										; check for if we have none, handy while testing layouts etc
3520	.1349	809349	c8		iny				iny										; next byte
3521	.134a	80934a	a2 00		ldx #$00			ldx #0
3522	.134c	80934c	85 04		sta $04				sta EntNum
3523	.134e	80934e						_l
3524	.134e	80934e	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read entity tile index for starting pos
3525	.1350	809350	20 4f 8d	jsr $808d4f			jsr convertIndexToEntSpriteXY
3526	.1353	809353	c8		iny				iny			; next byte
3527	.1354	809354	b1 00		lda ($00),y			lda (EntityDataPointer),y			; read TTTTXDDDD T = type X = don't care D = starting direction
3528	.1356	809356	4a		lsr a				lsr a
3529	.1357	809357	4a		lsr a				lsr a
3530	.1358	809358	4a		lsr a				lsr a
3531	.1359	809359	4a		lsr a				lsr a										; extract the type
3532	.135a	80935a	9d cd 00	sta $8000cd,x			sta EntityData.type,x				; store it
3533	.135d	80935d	c9 08		cmp #$08			cmp #kEntity.Bear						; do we have a bear boss?
3534	.135f	80935f	d0 02		bne $809363			bne +
3535	.1361	809361	80 51		bra $8093b4				gra _BossBear						; handle the custom case
3536	.1363	809363	c9 09		cmp #$09		+	cmp #kEntity.Octopuss				; same with the octopuss
3537	.1365	809365	d0 03		bne $80936a			bne +
3538	.1367	809367	4c 3f 94	jmp $80943f				jmp _BossOctopuss
3539	.136a	80936a	a5 0f		lda $0f			+	lda ZPTemp								; convertIndexToEntSpriteXY returns the Y in ZPTemp
3540	.136c	80936c	9d 7c 01	sta $80017c,x			sta EntityData.originalY,x
3541	.136f	80936f	9e 95 01	stz $800195,x			stz EntityData.entState,x			; clear the state, and speed all ents are spawned slow
3542	.1372	809372	9e 12 02	stz $800212,x			stz EntityData.speed,x
3543	.1375	809375	b1 00		lda ($00),y			lda (EntityDataPointer),y			; extract the D from the byte
3544	.1377	809377	29 03		and #$03			and #3
3545	.1379	809379	9d e6 00	sta $8000e6,x			sta EntityData.direction,x
3546	.137c	80937c	a9 01		lda #$01			lda #1
3547	.137e	80937e	9d ff 00	sta $8000ff,x			sta EntityData.active,x				; it's alive
3548	.1381	809381						_nextEnt
3549	.1381	809381	c8		iny				iny										; next byte
3550	.1382	809382	e8		inx				inx
3551	.1383	809383	c6 10		dec $10				dec ZPTemp2								; have we done all ents?
3552	.1385	809385	a5 10		lda $10				lda ZPTemp2
3553	.1387	809387	d0 c5		bne $80934e			bne _l
3554	.1389	809389					_e
3555	.1389	809389	ae cc 00	ldx $8000cc		ldx EntityData.number 					; now we can start any bubbles if we need them
3556	.138c	80938c	8e 67 02	stx $800267		stx EntityData.pipeBubbleStart
3557	.138f	80938f	ad 5d 02	lda $80025d		lda EntityData.numPipes					; do we need them?
3558	.1392	809392	f0 1f		beq $8093b3		beq _noPipes
3559									.cerror kEntity.maxNumBubblesPerMaker != 2, "need to change code so it handles new mul"
3560	.1394	809394	0a		asl a				asl a 									; times two
3561	.1395	809395	18		clc				clc 										; probably not needed as num pipes must be below 128
3562	.1396	809396	6d cc 00	adc $8000cc			adc EntityData.number
3563	.1399	809399	8d cc 00	sta $8000cc			sta EntityData.number 				; add the bubble ents
3564	.139c	80939c						_setupBubbleLoop
3565	.139c	80939c	a9 0c		lda #$0c			lda #kEntity.bubble
3566	.139e	80939e	9d cd 00	sta $8000cd,x			sta EntityData.type,x				; we have a bubble
3567	.13a1	8093a1	9e 95 01	stz $800195,x			stz EntityData.entState,x			; zero state
3568	.13a4	8093a4	9e e6 00	stz $8000e6,x			stz EntityData.direction,x			; up
3569	.13a7	8093a7	9e ff 00	stz $8000ff,x			stz EntityData.active,x				; not active
3570	.13aa	8093aa	9e 44 02	stz $800244,x			stz EntityData.palleteOffset,x	; stock colour
3571	.13ad	8093ad	e8		inx				inx
3572	.13ae	8093ae	ec cc 00	cpx $8000cc			cpx EntityData.number				; done all of them?
3573	.13b1	8093b1	d0 e9		bne $80939c			bne _setupBubbleLoop
3574	.13b3	8093b3					_noPipes
3575	.13b3	8093b3	60		rts			rts
3576								;
3577	.13b4	8093b4					_BossBear
3578	.13b4	8093b4	a9 08		lda #$08		lda #kEntity.bear										; bosses are actually 4 entites
3579	.13b6	8093b6	9d cd 00	sta $8000cd,x		sta EntityData.type,x
3580	.13b9	8093b9	a9 0a		lda #$0a		lda #kEntity.bearBody								; the body
3581	.13bb	8093bb	9d ce 00	sta $8000ce,x		sta EntityData.type+1,x
3582	.13be	8093be	a9 07		lda #$07		lda #kBoss.hitPoints
3583	.13c0	8093c0	9d ff 00	sta $8000ff,x		sta EntityData.active,x								; abuse active as a hit points counter
3584	.13c3	8093c3	a9 6a		lda #$6a		lda #kDefault_OBSEL|kBossBearBankOR 			; enable the bear boss sprite bank
3585	.13c5	8093c5					_sharedBoss
3586	.13c5	8093c5	8d 01 21	sta $802101		sta $802101												; set the sprite bank
3587	.13c8	8093c8	a9 0d		lda #$0d		lda #kEntity.bossDummy
3588	.13ca	8093ca	9d cf 00	sta $8000cf,x		sta EntityData.type+2,x								; 3 and 4 are dumnmy ents
3589	.13cd	8093cd	9d d0 00	sta $8000d0,x		sta EntityData.type+3,x								; which just show a sprite
3590	.13d0	8093d0	ad cc 00	lda $8000cc		lda EntityData.number
3591	.13d3	8093d3	18		clc			clc
3592	.13d4	8093d4	69 03		adc #$03		adc #3 													; insert 3 more ents for the rest of the boss
3593	.13d6	8093d6	8d cc 00	sta $8000cc		sta EntityData.number
3594	.13d9	8093d9	a9 01		lda #$01		lda #1
3595	.13db	8093db	9d 00 01	sta $800100,x		sta EntityData.active+1,x
3596	.13de	8093de	9d 01 01	sta $800101,x		sta EntityData.active+2,x
3597	.13e1	8093e1	9d 02 01	sta $800102,x		sta EntityData.active+3,x							; set all 4 active
3598	.13e4	8093e4	8a		txa			txa
3599	.13e5	8093e5	9d 96 01	sta $800196,x		sta EntityData.entState+1,x						; set the state of the extras to point to the "first"
3600	.13e8	8093e8	9d 97 01	sta $800197,x		sta EntityData.entState+2,x
3601	.13eb	8093eb	9d 98 01	sta $800198,x		sta EntityData.entState+3,x
3602	.13ee	8093ee	bd a1 03	lda $8003a1,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x		; copy the MSB from the first to the others
3603	.13f1	8093f1	9d a2 03	sta $8003a2,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+1,x	; which technically doesn't work but mostly works
3604	.13f4	8093f4	9d a3 03	sta $8003a3,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+2,x	; but this is the SNES so it will be all 0 anyway
3605	.13f7	8093f7	9d a4 03	sta $8003a4,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+3,x
3606	.13fa	8093fa	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; the boss is moved up 9 pixels so the sits on the top of blocks
3607	.13fd	8093fd	38		sec			sec
3608	.13fe	8093fe	e9 09		sbc #$09		sbc #9
3609	.1400	809400	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3610	.1403	809403	9d c2 03	sta $8003c2,x		sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
3611	.1406	809406	18		clc			clc
3612	.1407	809407	69 15		adc #$15		adc #21													; and the bottom sprites are 21 lower (c64 sprits are 24x21)
3613	.1409	809409	9d c3 03	sta $8003c3,x		sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
3614	.140c	80940c	9d c4 03	sta $8003c4,x		sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
3615	.140f	80940f	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; we move the sprites -8 from spawn position
3616	.1412	809412	38		sec			sec
3617	.1413	809413	e9 08		sbc #$08		sbc #8
3618	.1415	809415	9d 81 03	sta $800381,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3619	.1418	809418	9d 83 03	sta $800383,x		sta mplexBuffer.xpos+kEntsSpriteOffset+2,x	; right sprites are 24 over from that
3620	.141b	80941b	18		clc			clc
3621	.141c	80941c	69 18		adc #$18		adc #24
3622	.141e	80941e	9d 82 03	sta $800382,x		sta mplexBuffer.xpos+kEntsSpriteOffset+1,x
3623	.1421	809421	9d 84 03	sta $800384,x		sta mplexBuffer.xpos+kEntsSpriteOffset+3,x
3624	.1424	809424	9e 95 01	stz $800195,x		stz EntityData.entState,x							; the main state is 0
3625	.1427	809427	9e 12 02	stz $800212,x		stz EntityData.speed,x								; slow speed
3626	.142a	80942a	b1 00		lda ($00),y		lda (EntityDataPointer),y							; get the type and starting direction
3627	.142c	80942c	29 03		and #$03		and #3
3628	.142e	80942e	9d e6 00	sta $8000e6,x		sta EntityData.direction,x
3629	.1431	809431	a9 19		lda #$19		lda #25
3630	.1433	809433	9d 18 01	sta $800118,x		sta EntityData.movTimer,x							; set the move rate, so the boss pauses for a bit before starting
3631	.1436	809436	9d 19 01	sta $800119,x		sta EntityData.movTimer+1,x
3632	.1439	809439	e8		inx			inx
3633	.143a	80943a	e8		inx			inx
3634	.143b	80943b	e8		inx			inx														; x is now + 3 so when nextEnt is called it will be +4
3635	.143c	80943c	4c 81 93	jmp $809381		jmp _nextEnt
3636								;

3638	.143f	80943f					_BossOctopuss
3639	.143f	80943f	a9 09		lda #$09		lda #kEntity.octopuss
3640	.1441	809441	9d cd 00	sta $8000cd,x		sta EntityData.type,x								; we are octopuss
3641	.1444	809444	a9 0b		lda #$0b		lda #kEntity.octopussBody
3642	.1446	809446	9d ce 00	sta $8000ce,x		sta EntityData.type+1,x								; and the body
3643	.1449	809449	a9 09		lda #$09		lda #kBoss.hitPointsOctopuss
3644	.144b	80944b	9d ff 00	sta $8000ff,x		sta EntityData.active,x								; and use active for the number of hit points
3645	.144e	80944e	a9 72		lda #$72		lda #kDefault_OBSEL|kBossOctoBankOR				; enable the bear boss sprite bank
3646	.1450	809450	4c c5 93	jmp $8093c5		jmp _sharedBoss

3648							.as
3649							.xs
3650	.1453	809453					setEntitySprites
3651	.1453	809453					_ASSERT_jsr
3652	.1453	809453					_ASSERT_axy8
3653	.1453	809453	ae cc 00	ldx $8000cc		ldx EntityData.number								; do we have any
3654	.1456	809456	f0 1c		beq $809474		beq _exit
3655	.1458	809458						_active
3656	.1458	809458	86 02		stx $02				stx CurrentEntity
3657	.145a	80945a	bd cd 00	lda $8000cd,x			lda EntityData.type,x							; what type is it
3658	.145d	80945d	c9 08		cmp #$08			cmp #kEntity.bear
3659	.145f	80945f	f0 26		beq $809487			beq _bossBear										; handle boss sprites
3660	.1461	809461	c9 0a		cmp #$0a				cmp #kEntity.bearBody
3661	.1463	809463	f0 0c		beq $809471				beq _nextEnt									; body is done by main
3662	.1465	809465	c9 09		cmp #$09					cmp #kEntity.octopuss					; handle octoposs
3663	.1467	809467	f0 34		beq $80949d					beq _bossOctopuss
3664	.1469	809469	c9 0b		cmp #$0b						cmp #kEntity.octopussBody			; again body is done my main
3665	.146b	80946b	f0 04		beq $809471						beq _nextEnt
3666	.146d	80946d	a8		tay				tay
3667	.146e	80946e	20 b2 99	jsr $8099b2			jsr setEntSpriteForDirection					; set the sprite
3668	.1471	809471						_nextEnt
3669	.1471	809471	ca		dex				dex
3670	.1472	809472	10 e4		bpl $809458			bpl _active
3671	.1474	809474					_exit
3672	.1474	809474	ad 5d 02	lda $80025d		lda EntityData.numPipes								; do we have any pipes
3673	.1477	809477	f0 0d		beq $809486		beq _exit2
3674	.1479	809479	ae 67 02	ldx $800267			ldx EntityData.pipeBubbleStart
3675	.147c	80947c	a9 ff		lda #$ff			lda #$ff
3676	.147e	80947e					_loop
3677	.147e	80947e	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x		; set all the bubbles off screen
3678	.1481	809481	e8		inx			inx
3679	.1482	809482	e0 19		cpx #$19		cpx #kEntity.maxEntities
3680	.1484	809484	d0 f8		bne $80947e		bne _loop
3681	.1486	809486					_exit2
3682	.1486	809486	60		rts			rts
3683								;
3684	.1487	809487					_bossBear
3685	.1487	809487	a9 40		lda #$40		lda #BearEntAnimData[0]								; set to frame for head left
3686	.1489	809489	9d 4a 01	sta $80014a,x		sta EntityData.animBase,x
3687	.148c	80948c	a9 43		lda #$43		lda #BearEntAnimData[1]								; set to frame for head right
3688	.148e	80948e	9d 4b 01	sta $80014b,x		sta EntityData.animBase+1,x
3689	.1491	809491	a9 4c		lda #$4c		lda #BearBodyAnimData[0]							; set to frame for body left
3690	.1493	809493	9d 4c 01	sta $80014c,x		sta EntityData.animBase+2,x
3691	.1496	809496	a9 4e		lda #$4e		lda #BearBodyAnimData[1]							; set to frame for body right
3692	.1498	809498	9d 4d 01	sta $80014d,x		sta EntityData.animBase+3,x
3693	.149b	80949b	80 d4		bra $809471		bra _nextEnt

3695	.149d	80949d					_bossOctopuss
3696	.149d	80949d	a9 46		lda #$46		lda #OctopussEntAnimData[0]						; set to frame for head left
3697	.149f	80949f	9d 4a 01	sta $80014a,x		sta EntityData.animBase,x
3698	.14a2	8094a2	a9 49		lda #$49		lda #OctopussEntAnimData[1]						; set to frame for head right
3699	.14a4	8094a4	9d 4b 01	sta $80014b,x		sta EntityData.animBase+1,x
3700	.14a7	8094a7	a9 50		lda #$50		lda #OctopussBodyAnimData[0]						; set to frame for body left
3701	.14a9	8094a9	9d 4c 01	sta $80014c,x		sta EntityData.animBase+2,x
3702	.14ac	8094ac	a9 52		lda #$52		lda #OctopussBodyAnimData[1]						; set to frame for body right
3703	.14ae	8094ae	9d 4d 01	sta $80014d,x		sta EntityData.animBase+3,x
3704	.14b1	8094b1	80 be		bra $809471		bra _nextEnt

3706							.as
3707							.xs
3708	.14b3	8094b3					deactivateAllEntities
3709	.14b3	8094b3					_ASSERT_jsr
3710	.14b3	8094b3					_ASSERT_axy8
3711	.14b3	8094b3	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3712	.14b5	8094b5	9e ff 00	stz $8000ff,x	-	stz EntityData.active,x
3713	.14b8	8094b8	ca		dex			dex
3714	.14b9	8094b9	10 fa		bpl $8094b5		bpl -
3715	.14bb	8094bb	60		rts			rts

3717							.as
3718							.xs
3719							; build hte collision data for each ent first
3720	.14bc	8094bc					BuildEntCollisionTable
3721	.14bc	8094bc					_ASSERT_jsr
3722	.14bc	8094bc					_ASSERT_axy8
3723	.14bc	8094bc	a2 18		ldx #$18		ldx # kEntity.maxEntities-1	; for all possible ents
3724	.14be	8094be					-
3725	.14be	8094be	bd ff 00	lda $8000ff,x		lda EntityData.active,x			; if it active
3726	.14c1	8094c1	f0 03		beq $8094c6		beq +
3727	.14c3	8094c3	20 b4 9f	jsr $809fb4			jsr MakeMinMaxXYForX			; calc the collision box
3728	.14c6	8094c6					+
3729	.14c6	8094c6	ca		dex			dex
3730	.14c7	8094c7	10 f5		bpl $8094be		bpl -
3731	.14c9	8094c9	60		rts			rts

3733							.as
3734							.xs
3735	.14ca	8094ca					addYDeltaEnt
3736	.14ca	8094ca					_ASSERT_jsr
3737	.14ca	8094ca					_ASSERT_axy8
3738	.14ca	8094ca	a6 02		ldx $02			ldx CurrentEntity
3739	.14cc	8094cc	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3740	.14cf	8094cf	18		clc			clc
3741	.14d0	8094d0	6d 8a 02	adc $80028a		adc checkSpriteToCharData.yDeltaCheck
3742	.14d3	8094d3	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3743	.14d6	8094d6	60		rts			rts

3745							.as
3746							.xs
3747	.14d7	8094d7					updateEntities
3748	.14d7	8094d7					_ASSERT_jsr
3749	.14d7	8094d7					_ASSERT_axy8
3750	.14d7	8094d7	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3751	.14d9	8094d9					innerEntitiesLoop
3752	.14d9	8094d9	bd ff 00	lda $8000ff,x		lda EntityData.active,x												; is it active
3753	.14dc	8094dc	d0 23		bne $809501		bne EntitiesActive
3754	.14de	8094de	bd 95 01	lda $800195,x			lda EntityData.entState,x										; if the state is positive then its dead dead
3755	.14e1	8094e1	10 1a		bpl $8094fd			bpl updateEntitiesLoop
3756	.14e3	8094e3	c9 fe		cmp #$fe				cmp #kEntity.deadFromRedBullet 							; is this dead dead?
3757	.14e5	8094e5	f0 16		beq $8094fd				beq updateEntitiesLoop
3758	.14e7	8094e7	de 18 01	dec $800118,x					dec EntityData.movTimer,x								; count down the respawn timer
3759	.14ea	8094ea	bd 18 01	lda $800118,x					lda EntityData.movTimer,x
3760	.14ed	8094ed	d0 0e		bne $8094fd					bne updateEntitiesLoop
3761	.14ef	8094ef	bd 7c 01	lda $80017c,x						lda EntityData.originalY,x							; put the enemy back in the visible screen
3762	.14f2	8094f2	9d c1 03	sta $8003c1,x						sta mplexBuffer.yPos+kEntsSpriteOffset,x
3763	.14f5	8094f5	9e 95 01	stz $800195,x						stz EntityData.entState,x							; clear the state
3764	.14f8	8094f8	a9 01		lda #$01						lda #1
3765	.14fa	8094fa	9d ff 00	sta $8000ff,x						sta EntityData.active,x								; make it active again
3766	.14fd	8094fd					updateEntitiesLoop
3767	.14fd	8094fd	ca		dex			dex
3768	.14fe	8094fe	10 d9		bpl $8094d9		bpl innerEntitiesLoop
3769	.1500	809500	60		rts			rts

3771								.as
3772							.xs
3773	.1501	809501					EntitiesActive
3774	.1501	809501	86 02		stx $02			stx CurrentEntity
3775	.1503	809503	bd cd 00	lda $8000cd,x		lda EntityData.type,x
3776	.1506	809506	0a		asl a			asl a
3777	.1507	809507	aa		tax			tax
3778	.1508	809508	7c 0b 95	jmp ($80950b,x)		jmp (EntUpdateFuncLUT,x)
3779								; this table needs to be in kEntity order
3780	>150b	80950b	27 95 63 97 27 95 1e 99		EntUpdateFuncLUT .word <>(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)
	>1513	809513	6d 98 31 96 d5 95 f6 96 3b 9a 3b 9a 86 99 86 99
	>1523	809523	8b 99 86 99

3782							.as
3783							.xs
3784	.1527	809527					entNormalMovement								; this if for things that just move and don't stop till dead
3785	.1527	809527					_ASSERT_jsr
3786	.1527	809527					_ASSERT_axy8
3787	.1527	809527	a6 02		ldx $02			ldx CurrentEntity
3788	.1529	809529	20 ca 99	jsr $8099ca		jsr updateEntAnimAndSetSprite			; updatge the animation
3789	.152c	80952c	b9 63 9c	lda $809c63,y		lda EntityAnimData.collisionBox,y	; y is the ent type
3790	.152f	80952f	85 1e		sta $1e			sta CollideSpriteBoxIndex
3468	.1531	809531	e8		inx			inx
3469	.1532	809532	e8		inx			inx
3792	.1533	809533	86 1d		stx $1d			stx CollideSpriteToCheck
3793	.1535	809535	a9 42		lda #$42		lda #<handleEntCollisionResult
3794	.1537	809537	85 06		sta $06			sta Pointer1.lo
3795	.1539	809539	a9 99		lda #$99		lda #>handleEntCollisionResult		; set the post collision callback
3796	.153b	80953b	85 07		sta $07			sta Pointer1.hi
3797	.153d	80953d	a6 02		ldx $02			ldx CurrentEntity
3798	.153f	80953f	bd 12 02	lda $800212,x		lda EntityData.speed,x					; cache the ent move speed in to y
3799	.1542	809542	a8		tay			tay
3800	.1543	809543	bd e6 00	lda $8000e6,x		lda EntityData.direction,x				; dispatch based upon direction
3801	.1546	809546	0a		asl a			asl a
3802	.1547	809547	aa		tax			tax
3803	.1548	809548	64 05		stz $05			stz CollisionResult
3804	.154a	80954a	7c 4d 95	jmp ($80954d,x)		jmp (ENTDirectionCheckFuncLUT,x)
3805	>154d	80954d	5d 95 7c 95 99 95 b8 95		ENTDirectionCheckFuncLUT .word <>(entRight,entUp,entLeft,entDown)

3807							; this is ent direction per row and then slow,fast delta values
3808	>1555	809555	02 04				entPositiveTBL		.byte  2, 4
3809	>1557	809557	01 02				entPositiveTBLUD	.byte  1, 2
3810	>1559	809559	fe fc				entNegativeTBL		.char -2,-4
3811	>155b	80955b	ff fe				entNegativeTBLUD	.char -1,-2

3813	.155d	80955d					entRight
3814	.155d	80955d					_ASSERT_axy8
3815	.155d	80955d	b9 55 95	lda $809555,y		lda entPositiveTBL,y
3816	.1560	809560	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck
3817	.1563	809563	a9 00		lda #$00		lda #0
3818	.1565	809565	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck	; set X +ve Y 0
3819	.1568	809568					entRightNoDelta
3820	.1568	809568					_ASSERT_axy8
3821	.1568	809568	20 34 9f	jsr $809f34		jsr newCollision								; check it against the world
3822	.156b	80956b	a5 22		lda $22			lda CollideCharTRC							; get the Top right character
3823	.156d	80956d	20 e8 9f	jsr $809fe8		jsr checkSolidTile							; is that solid?
3824	.1570	809570	26 05		rol $05			rol CollisionResult							; store the C flag into the result
3825	.1572	809572	a5 26		lda $26			lda CollideCharBRC							; get the Bottom right character
3826	.1574	809574	20 e8 9f	jsr $809fe8		jsr checkSolidTile							; is that solid?
3827	.1577	809577	26 05		rol $05			rol CollisionResult							; store the C flag into the result so we have both
3828	.1579	809579	6c 06 00	jmp ($0006)		jmp (Pointer1)									; call the callback

3830	.157c	80957c					entUp
3831	.157c	80957c					_ASSERT_axy8
3832	.157c	80957c	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck
3833	.157f	80957f	b9 5b 95	lda $80955b,y		lda entNegativeTBLUD,y
3834	.1582	809582	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck	; set X 0 Y -ve
3835	.1585	809585					entUpNoDelta
3836	.1585	809585					_ASSERT_axy8
3837	.1585	809585	20 34 9f	jsr $809f34		jsr newCollision
3838	.1588	809588	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3839	.158a	80958a	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3840	.158d	80958d	26 05		rol $05			rol CollisionResult
3841	.158f	80958f	a5 22		lda $22			lda CollideCharTRC							; check Top Right Char
3842	.1591	809591	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3843	.1594	809594	26 05		rol $05			rol CollisionResult
3844	.1596	809596	6c 06 00	jmp ($0006)		jmp (Pointer1)

3846	.1599	809599					entLeft
3847	.1599	809599					_ASSERT_axy8
3848	.1599	809599	b9 59 95	lda $809559,y		lda entNegativeTBL,y
3849	.159c	80959c	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck
3850	.159f	80959f	a9 00		lda #$00		lda #0
3851	.15a1	8095a1	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck	; set X -ve Y 0
3852	.15a4	8095a4					entLeftNoDelta
3853	.15a4	8095a4					_ASSERT_axy8
3854	.15a4	8095a4	20 34 9f	jsr $809f34		jsr newCollision
3855	.15a7	8095a7	a5 20		lda $20			lda CollideCharTLC							; check Top Left Char
3856	.15a9	8095a9	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3857	.15ac	8095ac	26 05		rol $05			rol CollisionResult
3858	.15ae	8095ae	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3859	.15b0	8095b0	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3860	.15b3	8095b3	26 05		rol $05			rol CollisionResult
3861	.15b5	8095b5	6c 06 00	jmp ($0006)		jmp (Pointer1)

3863	.15b8	8095b8					entDown
3864	.15b8	8095b8					_ASSERT_axy8
3865	.15b8	8095b8	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck
3866	.15bb	8095bb	b9 57 95	lda $809557,y		lda entPositiveTBLUD,y
3867	.15be	8095be	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck	; set X - Y +ve
3868	.15c1	8095c1					entDownNoDelta
3869	.15c1	8095c1					_ASSERT_axy8
3870	.15c1	8095c1	20 34 9f	jsr $809f34		jsr newCollision
3871	.15c4	8095c4	a5 24		lda $24			lda CollideCharBLC							; check Bottom Left Char
3872	.15c6	8095c6	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3873	.15c9	8095c9	26 05		rol $05			rol CollisionResult
3874	.15cb	8095cb	a5 26		lda $26			lda CollideCharBRC							; check Bottom Right Char
3875	.15cd	8095cd	20 e8 9f	jsr $809fe8		jsr checkSolidTile
3876	.15d0	8095d0	26 05		rol $05			rol CollisionResult
3877	.15d2	8095d2	6c 06 00	jmp ($0006)		jmp (Pointer1)

3879	.15d5	8095d5					entFishFunc
3880	.15d5	8095d5					_ASSERT_axy8
3881	.15d5	8095d5	a6 02		ldx $02			ldx CurrentEntity
3882	.15d7	8095d7	de 18 01	dec $800118,x		dec EntityData.movTimer,x
3883	.15da	8095da	bd 18 01	lda $800118,x		lda EntityData.movTimer,x					; time to update ?
3884	.15dd	8095dd	30 0e		bmi $8095ed		bmi _next
3885	.15df	8095df	29 01		and #$01			and #1										; if an even frame skip
3886	.15e1	8095e1	d0 07		bne $8095ea			bne _exit
3887	.15e3	8095e3	bd 95 01	lda $800195,x				lda EntityData.entState,x			; if we were moved to have to move faster
3888	.15e6	8095e6	f0 02		beq $8095ea				beq _exit
3889	.15e8	8095e8	80 17		bra $809601					bra _keepGoing						; move again, aka double the speed
3890	.15ea	8095ea					_exit
3891	.15ea	8095ea	4c 86 99	jmp $809986		jmp NextEnt
3892								;
3893	.15ed	8095ed					_next
3894	.15ed	8095ed	a9 04		lda #$04		lda #4
3895	.15ef	8095ef	9d 18 01	sta $800118,x		sta EntityData.movTimer,x
3896	.15f2	8095f2					_moveFish
3897	.15f2	8095f2	bd 95 01	lda $800195,x		lda EntityData.entState,x					; in ent state
3898	.15f5	8095f5	18		clc			clc
3899	.15f6	8095f6	69 01		adc #$01		adc #1
3900	.15f8	8095f8	c9 22		cmp #$22		cmp #kSinJumpMax								; move to next in table and clamp highest
3901	.15fa	8095fa	d0 02		bne $8095fe		bne _storeDirect
3902	.15fc	8095fc	a9 21		lda #$21			lda #kSinJumpMax-1
3903	.15fe	8095fe					_storeDirect
3904	.15fe	8095fe	9d 95 01	sta $800195,x		sta EntityData.entState,x
3905	.1601	809601					_keepGoing
3906	.1601	809601	a8		tay			tay
3907	.1602	809602	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3908	.1605	809605	18		clc			clc
3909	.1606	809606	79 79 9c	adc $809c79,y		adc SinJumpTable,y							; add Y up to to the limit
3910	.1609	809609	c9 c5		cmp #$c5		cmp #kFishLimits.maxY
3911	.160b	80960b	90 0a		bcc $809617		bcc _store
3912	.160d	80960d	9e 95 01	stz $800195,x			stz EntityData.entState,x				; reset the state
3913	.1610	809610	a9 20		lda #$20			lda #32
3914	.1612	809612	9d 18 01	sta $800118,x			sta EntityData.movTimer,x				; pause for a bit while you flip
3915	.1615	809615	a9 c5		lda #$c5			lda #kFishLimits.maxY
3916	.1617	809617					_store
3917	.1617	809617	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3918	.161a	80961a	bd 95 01	lda $800195,x		lda EntityData.entState,x					; set the anim frame from table index / 4
3919	.161d	80961d	4a		lsr a			lsr a
3920	.161e	80961e	4a		lsr a			lsr a 											; div 4
3921	.161f	80961f	c9 08		cmp #$08		cmp #8
3922	.1621	809621	90 02		bcc $809625		bcc _safe
3923	.1623	809623	a9 07		lda #$07			lda #7
3924	.1625	809625					_safe
3925	.1625	809625	18		clc			clc
3926	.1626	809626	69 30		adc #$30		adc #FishRawAnimData[0] 					; use the left frame
3927	.1628	809628	9d 4a 01	sta $80014a,x		sta EntityData.animBase,x
3928	.162b	80962b	9e 63 01	stz $800163,x		stz EntityData.animFrame,x
3929	.162e	80962e	4c 86 99	jmp $809986		jmp nextEnt

3931	.1631	809631					entSpiderFunc
3932	.1631	809631					_ASSERT_axy8
3933	.1631	809631	a6 02		ldx $02			ldx CurrentEntity
3934	.1633	809633	bd 95 01	lda $800195,x		lda EntityData.entState,x
3935	.1636	809636	0a		asl a			asl a
3936	.1637	809637	aa		tax			tax
3937	.1638	809638	7c 3b 96	jmp ($80963b,x)		jmp (SpiderEntFuncLUT,x)
3938	>163b	80963b	41 96 96 96 d6 96		SpiderEntFuncLUT .word <> (spiderLookPlayer,spiderFall,spiderRise)

3940	.1641	809641					spiderLookPlayer
3941	.1641	809641					_ASSERT_axy8
3942	.1641	809641	a2 00		ldx #$00		ldx #0
3943	.1643	809643	86 10		stx $10			stx ZPTemp2
3944	.1645	809645	ad 7f 03	lda $80037f		lda mplexBuffer.xpos
3945	.1648	809648	85 0f		sta $0f			sta ZPTemp											; store the player X
3946	.164a	80964a	a6 02		ldx $02			ldx CurrentEntity
3468	.164c	80964c	e8		inx			inx
3469	.164d	80964d	e8		inx			inx
3948	.164e	80964e	bd 7f 03	lda $80037f,x		lda mplexBuffer.xpos,x
3949	.1651	809651	e5 0f		sbc $0f			sbc ZPTemp
3950	.1653	809653	85 0f		sta $0f			sta ZPTemp											; my X - playerX
3951	.1655	809655	b0 26		bcs $80967d		bcs _left
3952	.1657	809657	c9 d1		cmp #$d1			cmp #kSpiderValues.rightStartWiggle		; player is to my right but are they in wiggle distance
3953	.1659	809659	90 11		bcc $80966c			bcc +
3954	.165b	80965b	a9 01		lda #$01				lda #1										; yes set animation to wiggle
3955	.165d	80965d	85 10		sta $10					sta ZPTemp2
3956	.165f	80965f	a5 0f		lda $0f					lda ZPTemp
3957	.1661	809661	c9 e1		cmp #$e1				cmp #kSpiderValues.rightStartFall	; is it it fall distance
3958	.1663	809663	90 07		bcc $80966c				bcc +
3959	.1665	809665	a9 01		lda #$01					lda #1
3960	.1667	809667	a6 02		ldx $02						ldx CurrentEntity
3961	.1669	809669	9d 95 01	sta $800195,x					sta EntityData.entState,x			; set to falling state
3962	.166c	80966c	a9 2a		lda #$2a		+	lda #kSprites.spiderRight					; no
3963	.166e	80966e						_storeSprite
3964	.166e	80966e	a6 02		ldx $02				ldx CurrentEntity
3965	.1670	809670	9d 4a 01	sta $80014a,x			sta EntityData.animBase,x					; store the animation
3966	.1673	809673	a5 10		lda $10				lda ZPTemp2
3967	.1675	809675	f0 03		beq $80967a			beq _noAnim										; are we going to wiggle?
3968	.1677	809677	20 ca 99	jsr $8099ca				jsr updateEntAnimAndSetSprite
3969	.167a	80967a						_noAnim
3970	.167a	80967a	4c 86 99	jmp $809986			jmp nextEnt
3971									;
3972	.167d	80967d					_left
3973	.167d	80967d	c9 2e		cmp #$2e		cmp #kSpiderValues.leftStartWiggle			; left side, are we on the left side
3974	.167f	80967f	b0 11		bcs $809692		bcs +
3975	.1681	809681	a9 01		lda #$01			lda #1
3976	.1683	809683	85 10		sta $10				sta ZPTemp2										; we want wriggle animation
3977	.1685	809685	a5 0f		lda $0f				lda ZPTemp
3978	.1687	809687	c9 1e		cmp #$1e			cmp #kSpiderValues.leftStartFall			; in fall distance
3979	.1689	809689	b0 07		bcs $809692			bcs +
3980	.168b	80968b	a9 01		lda #$01				lda #1
3981	.168d	80968d	a6 02		ldx $02					ldx CurrentEntity							; go the fall difference
3982	.168f	80968f	9d 95 01	sta $800195,x				sta EntityData.entState,x
3983	.1692	809692	a9 28		lda #$28	+	lda #kSprites.spiderLeft						; set to left animation
3984	.1694	809694	80 d8		bra $80966e		bra _storeSprite
3985								;

3987	.1696	809696					spiderFall
3988	.1696	809696					_ASSERT_axy8
3989	.1696	809696	a6 02		ldx $02			ldx CurrentEntity
3990	.1698	809698	20 ca 99	jsr $8099ca		jsr updateEntAnimAndSetSprite					; update the animation as we are wiggling
3991	.169b	80969b	ad 68 9c	lda $809c68		lda EntityAnimData.collisionBox+kEntity.spider
3992	.169e	80969e	85 1e		sta $1e			sta CollideSpriteBoxIndex						; set the collision as we fall till we hit something
3993	.16a0	8096a0	a6 02		ldx $02			ldx CurrentEntity
3468	.16a2	8096a2	e8		inx			inx
3469	.16a3	8096a3	e8		inx			inx
3995	.16a4	8096a4	86 1d		stx $1d			stx CollideSpriteToCheck
3996	.16a6	8096a6	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck
3997	.16a9	8096a9	a9 02		lda #$02		lda #kSpiderValues.yFallDelta
3998	.16ab	8096ab	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck		; check below me
3999	.16ae	8096ae	20 34 9f	jsr $809f34		jsr newCollision
4000	.16b1	8096b1	a5 24		lda $24			lda CollideCharBLC								; is the bottom left char solid
4001	.16b3	8096b3	20 e8 9f	jsr $809fe8		jsr checkSolidTile								; spiders are tile aligned so if you hit the left you hit the right
4002	.16b6	8096b6	90 0f		bcc $8096c7		bcc _noColide
4003	.16b8	8096b8						_collide
4004	.16b8	8096b8	a9 02		lda #$02			lda #2
4005	.16ba	8096ba	a6 02		ldx $02				ldx CurrentEntity
4006	.16bc	8096bc	9d 95 01	sta $800195,x			sta EntityData.entState,x					; set to the rise state
4007	.16bf	8096bf	a9 20		lda #$20			lda #kSpiderValues.pauseEndFallFrames
4008	.16c1	8096c1	9d 18 01	sta $800118,x			sta EntityData.movTimer,x					; make it stop for a bit first
4009	.16c4	8096c4	4c 86 99	jmp $809986			jmp nextEnt
4010									;
4011	.16c7	8096c7					_noColide
4012	.16c7	8096c7	a6 02		ldx $02			ldx CurrentEntity
4013	.16c9	8096c9	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4014	.16cc	8096cc	c9 b0		cmp #$b0		cmp #kBounds.screenMaxY-16						; make sure we don't go off the bottom of the screen
4015	.16ce	8096ce	b0 e8		bcs $8096b8		bcs _collide
4016	.16d0	8096d0	20 ca 94	jsr $8094ca			jsr addYDeltaEnt
4017	.16d3	8096d3	4c 86 99	jmp $809986			jmp nextEnt

4019	.16d6	8096d6					spiderRise
4020	.16d6	8096d6					_ASSERT_axy8
4021	.16d6	8096d6	a6 02		ldx $02			ldx CurrentEntity
4022	.16d8	8096d8	de 18 01	dec $800118,x		dec EntityData.movTimer,x
4023	.16db	8096db	10 16		bpl $8096f3		bpl +
4024	.16dd	8096dd	a9 03		lda #$03			lda #kSpiderValues.riseDelayTime				; set to the slower rise time
4025	.16df	8096df	9d 18 01	sta $800118,x			sta EntityData.movTimer,x
4026	.16e2	8096e2	bd c1 03	lda $8003c1,x			lda mplexBuffer.ypos+kEntsSpriteOffset,x
4027	.16e5	8096e5	38		sec				sec
4028	.16e6	8096e6	e9 01		sbc #$01			sbc #1
4029	.16e8	8096e8	9d c1 03	sta $8003c1,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x	; move up slowly
4030	.16eb	8096eb	dd 7c 01	cmp $80017c,x			cmp EntityData.originalY,x						; until we hit the spawn height
4031	.16ee	8096ee	d0 03		bne $8096f3			bne +
4032	.16f0	8096f0	9e 95 01	stz $800195,x				stz EntityData.entState,x					; return to wait state
4033	.16f3	8096f3	4c 86 99	jmp $809986	+	jmp nextEnt

4035	.16f6	8096f6					circlerFunc
4036	.16f6	8096f6					_ASSERT_axy8
4037	.16f6	8096f6	a6 02		ldx $02			ldx CurrentEntity
4038	.16f8	8096f8	de 18 01	dec $800118,x		dec EntityData.movTimer,x							; time to move?
4039	.16fb	8096fb	30 03		bmi $809700		bmi _cirActive
4040	.16fd	8096fd	4c 86 99	jmp $809986			jmp nextEnt
4041	.1700	809700					_cirActive
4042	.1700	809700	a9 04		lda #$04		lda #4
4043	.1702	809702	9d 18 01	sta $800118,x		sta EntityData.movTimer,x							; set timer
4044	.1705	809705	bd 95 01	lda $800195,x		lda EntityData.entState,x							; state in this case is circle table index
4045	.1708	809708	a4 02		ldy $02			ldy CurrentEntity
4046	.170a	80970a	aa		tax			tax
4047	.170b	80970b	bd be 9c	lda $809cbe,x		lda CircleJumpTableStart,x
4048	.170e	80970e	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck			; set the x Delta
4049								; add X with MSB offset
4050	.1711	809711	b9 81 03	lda $800381,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4051	.1714	809714	18		clc			clc
4052	.1715	809715	6d 89 02	adc $800289		adc checkSpriteToCharData.xDeltaCheck
4053	.1718	809718	85 0f		sta $0f			sta ZPTemp												; get the new X position
4054								; xdelta +ve if this is +ve but original was -ve we have gone over
4055	.171a	80971a	ad 89 02	lda $800289		lda checkSpriteToCharData.xDeltaCheck
4056	.171d	80971d	30 10		bmi $80972f		bmi _subbedX
4057	.171f	80971f	b9 81 03	lda $800381,y			lda mplexBuffer.xpos+kEntsSpriteOffset,y
4058	.1722	809722	10 19		bpl $80973d			bpl _loadX
4059										; so last pos in negative >80
4060	.1724	809724	a5 0f		lda $0f					lda ZPTemp
4061	.1726	809726	30 15		bmi $80973d				bmi _storeX
4062										; new pos is positive 0-80
4063	.1728	809728	a9 01		lda #$01					lda #1			; enable MSB
4064	.172a	80972a	99 a1 03	sta $8003a1,y					sta mplexBuffer.xmsb+kEntsSpriteOffset,y ; was >80 now <80 gone over 256
4065	.172d	80972d	80 0e		bra $80973d					bra _storeX
4066	.172f	80972f					_subbedX
4067								; xdelta -ve if this is -ve but original was +ve we have gone over
4068	.172f	80972f	b9 81 03	lda $800381,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
4069	.1732	809732	30 09		bmi $80973d		bmi _loadX
4070									; last post is positive >80
4071	.1734	809734	a5 0f		lda $0f				lda ZPTemp
4072	.1736	809736	10 05		bpl $80973d			bpl _storeX
4073	.1738	809738	a9 00		lda #$00				lda #0												; was <80 now > 80 gone under 0
4074	.173a	80973a	99 a1 03	sta $8003a1,y				sta mplexBuffer.xmsb+kEntsSpriteOffset,y	; clear msb
4075	.173d	80973d					_loadX
4076	.173d	80973d					_storeX
4077	.173d	80973d	a5 0f		lda $0f			lda ZPTemp
4078	.173f	80973f	99 81 03	sta $800381,y		sta mplexBuffer.xpos+kEntsSpriteOffset,y			; set final X position
4079								; now to do it for the Y
4080	.1742	809742	b9 c1 03	lda $8003c1,y		lda mplexBuffer.ypos+kEntsSpriteOffset,y
4081	.1745	809745	18		clc			clc
4082	.1746	809746	7d cb 9c	adc $809ccb,x		adc CircleJumpTableStart+(CircleJumpTableCount/4)+1,x	; this is basically COS Theta = SIN Theta+90
4083	.1749	809749	99 c1 03	sta $8003c1,y		sta mplexBuffer.ypos+kEntsSpriteOffset,y					; the table is longer with repeats to avoid needing to wrap
4084	.174c	80974c	a6 02		ldx $02			ldx CurrentEntity
4085	.174e	80974e	bd 95 01	lda $800195,x		lda EntityData.entState,x
4086	.1751	809751	18		clc			clc
4087	.1752	809752	69 01		adc #$01		adc #1
4088	.1754	809754	c9 30		cmp #$30		cmp # CircleJumpTableCount
4089	.1756	809756	d0 02		bne $80975a		bne _cirStore
4090	.1758	809758	a9 00		lda #$00			lda #0
4091	.175a	80975a					_cirStore
4092	.175a	80975a	9d 95 01	sta $800195,x		sta EntityData.entState,x										; cicle index += 1 and wrap at length
4093	.175d	80975d	20 ca 99	jsr $8099ca		jsr updateEntAnimAndSetSprite
4094	.1760	809760	4c 86 99	jmp $809986		jmp nextEnt

4096	.1763	809763					springEntFunc
4097	.1763	809763	a6 02		ldx $02			ldx CurrentEntity
4098	.1765	809765	de 18 01	dec $800118,x		dec EntityData.movTimer,x										; time to move?
4099	.1768	809768	30 03		bmi $80976d		bmi _move
4100	.176a	80976a	4c 86 99	jmp $809986			jmp nextEnt
4101									;
4102	.176d	80976d					_move
4103	.176d	80976d	a9 03		lda #$03		lda #3
4104	.176f	80976f	9d 18 01	sta $800118,x		sta EntityData.movTimer,x
4105								; update Y component
4106	.1772	809772	bd 95 01	lda $800195,x		lda EntityData.entState,x
4107	.1775	809775	85 0f		sta $0f			sta ZPTemp
4108	.1777	809777	a8		tay			tay
4109	.1778	809778	b9 79 9c	lda $809c79,y		lda SinJumpTable,y
4110	.177b	80977b	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck						; first we check down on the jump
4111	.177e	80977e	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck
4112	.1781	809781	64 05		stz $05			stz CollisionResult
4113	.1783	809783	a9 02		lda #$02		lda #2 																; this might change per frame
4114	.1785	809785	85 1e		sta $1e			sta CollideSpriteBoxIndex										; it hasn't but that is something you might want to improve
3468	.1787	809787	e8		inx			inx
3469	.1788	809788	e8		inx			inx
4116	.1789	809789	86 1d		stx $1d			stx CollideSpriteToCheck
4117	.178b	80978b	a9 a5		lda #$a5		lda #<springEntYCollideEnd
4118	.178d	80978d	85 06		sta $06			sta Pointer1.lo
4119	.178f	80978f	a9 97		lda #$97		lda #>springEntYCollideEnd										; set post collision callback
4120	.1791	809791	85 07		sta $07			sta Pointer1.hi
4121	.1793	809793	a5 0f		lda $0f			lda ZPTemp
4122	.1795	809795	c9 11		cmp #$11		cmp #kSinJumpFall													; this is the index where the table goes from -ve to +ve
4123	.1797	809797	b0 07		bcs $8097a0		bcs _falling
4124									; rising
4125	.1799	809799	a9 11		lda #$11			lda #kSinJumpFall 											; start falling index in case of contact
4126	.179b	80979b	85 10		sta $10				sta ZPTemp2
4127	.179d	80979d	4c 85 95	jmp $809585			jmp entUpNoDelta
4128									;
4129	.17a0	8097a0					_falling
4130	.17a0	8097a0	64 10		stz $10			stz ZPTemp2															; hit ground, start jumping
4131	.17a2	8097a2	4c c1 95	jmp $8095c1		jmp entDownNoDelta
4132								;
4133	.17a5	8097a5					springEntYCollideEnd
4134	.17a5	8097a5					_ASSERT_axy8
4135	.17a5	8097a5	a5 05		lda $05			lda CollisionResult
4136	.17a7	8097a7	d0 21		bne $8097ca		bne _hit
4137	.17a9	8097a9	20 c3 9e	jsr $809ec3			jsr collideEntAgainstRest
4138	.17ac	8097ac	b0 1c		bcs $8097ca			bcs _hit
4139	.17ae	8097ae	a6 02		ldx $02					ldx CurrentEntity											; didn't hit so carry on
4140	.17b0	8097b0	bd c1 03	lda $8003c1,x				lda mplexBuffer.ypos+kEntsSpriteOffset,x
4141										;clc
4142	.17b3	8097b3	6d 8a 02	adc $80028a				adc checkSpriteToCharData.yDeltaCheck
4143	.17b6	8097b6	9d c1 03	sta $8003c1,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
4144	.17b9	8097b9	bd 95 01	lda $800195,x				lda EntityData.entState,x								; move to next state in the arc
4145	.17bc	8097bc	18		clc					clc
4146	.17bd	8097bd	69 01		adc #$01				adc #1
4147	.17bf	8097bf	c9 22		cmp #$22				cmp #kSinJumpMax											; clamp to max fall speed
4148	.17c1	8097c1	90 02		bcc $8097c5				bcc _store
4149	.17c3	8097c3	a9 21		lda #$21					lda #kSinJumpMax-1
4150	.17c5	8097c5					_store
4151	.17c5	8097c5					_ASSERT_A_lt_34
4152	.17c5	8097c5	9d 95 01	sta $800195,x		sta EntityData.entState,x
4153	.17c8	8097c8	80 07		bra $8097d1		gra springEntHandleX
4154								;
4155	.17ca	8097ca					_hit
4156	.17ca	8097ca	a6 02		ldx $02			ldx CurrentEntity
4157	.17cc	8097cc	a5 10		lda $10			lda ZPTemp2															; this was set to the target jump index pre coll function
4158	.17ce	8097ce						_ASSERT2_A_lt_34
4159	.17ce	8097ce	9d 95 01	sta $800195,x		sta EntityData.entState,x
4160	.17d1	8097d1					springEntHandleX
4161	.17d1	8097d1	9c 8a 02	stz $80028a		stz checkSpriteToCharData.yDeltaCheck						; now Y has been delt with, do the X
4162	.17d4	8097d4	64 05		stz $05			stz CollisionResult
4163	.17d6	8097d6	a9 f5		lda #$f5		lda #<springEntXCollideEnd
4164	.17d8	8097d8	85 06		sta $06			sta Pointer1.lo
4165	.17da	8097da	a9 97		lda #$97		lda #>springEntXCollideEnd										; set the post collision callback
4166	.17dc	8097dc	85 07		sta $07			sta Pointer1.hi
4167	.17de	8097de	bd e6 00	lda $8000e6,x		lda EntityData.direction,x
4168	.17e1	8097e1	85 0f		sta $0f			sta ZPTemp															; preserve the direction
4169	.17e3	8097e3	18		clc			clc
4170	.17e4	8097e4	69 04		adc #$04		adc #4																; the table is -4 and + 4 values, but indexing is unsinged
4171	.17e6	8097e6	a8		tay			tay																	; so offset by 4 to make it 0 based
4172	.17e7	8097e7	b9 71 9c	lda $809c71,y		lda SpringDirectionToDeltaLUT,y
4173	.17ea	8097ea	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck
4174	.17ed	8097ed	30 03		bmi $8097f2		bmi _left
4175	.17ef	8097ef	4c 68 95	jmp $809568			jmp entRightNoDelta
4176									;
4177	.17f2	8097f2					_left
4178	.17f2	8097f2	4c a4 95	jmp $8095a4		jmp entLeftNoDelta
4179								;
4180	.17f5	8097f5					springEntXCollideEnd
4181	.17f5	8097f5	a6 02		ldx $02			ldx CurrentEntity
4182	.17f7	8097f7	a5 0f		lda $0f			lda ZPTemp
4183	.17f9	8097f9	30 30		bmi $80982b		bmi springEntXLeft												; is the preserved direction negative
4184	.17fb	8097fb	a5 05		lda $05				lda CollisionResult
4185	.17fd	8097fd	f0 09		beq $809808			beq _noCollideRight
4186	.17ff	8097ff							_hit
4187	.17ff	8097ff	a9 ff		lda #$ff				lda #256-1
4188	.1801	809801	a6 02		ldx $02					ldx CurrentEntity
4189	.1803	809803	9d e6 00	sta $8000e6,x				sta EntityData.direction,x								; go the other way slowly at first
4190	.1806	809806	80 54		bra $80985c				bra springEndAnimate
4191										;
4192	.1808	809808						_noCollideRight
4193	.1808	809808	20 c3 9e	jsr $809ec3			jsr collideEntAgainstRest									; did we hit any ents?
4194	.180b	80980b	b0 f2		bcs $8097ff			bcs _hit
4195	.180d	80980d	a6 02		ldx $02					ldx CurrentEntity
3468	.180f	80980f	e8		inx			inx
3469	.1810	809810	e8		inx			inx
4197	.1811	809811	20 55 85	jsr $808555				jsr addXWithMSBAndClip_88								; didn't hit so move x
3473	.1814	809814	ca		dex			dex
3474	.1815	809815	ca		dex			dex
4199	.1816	809816	a5 2f		lda $2f					lda DidClipX												; if we clip then we need to go the other way
4200	.1818	809818	f0 04		beq $80981e				beq _noclip
4201	.181a	80981a	a9 ff		lda #$ff					lda #256-1
4202	.181c	80981c	30 08		bmi $809826					bmi _store
4203	.181e	80981e							_noclip
4204	.181e	80981e	bd e6 00	lda $8000e6,x				lda EntityData.direction,x								; accelerate right, this gives the spring a sense of interia
4205	.1821	809821	18		clc					clc
4206	.1822	809822	69 01		adc #$01				adc #1
4207	.1824	809824	29 03		and #$03				and #3
4208	.1826	809826							_store
4209	.1826	809826	9d e6 00	sta $8000e6,x				sta EntityData.direction,x
4210	.1829	809829	80 31		bra $80985c				gra springEndAnimate
4211										;
4212	.182b	80982b					springEntXLeft
4213	.182b	80982b	a5 05		lda $05			lda CollisionResult
4214	.182d	80982d	f0 09		beq $809838		beq _noCollideLeft
4215	.182f	80982f						_hit
4216	.182f	80982f	a9 01		lda #$01			lda #1
4217	.1831	809831	a6 02		ldx $02				ldx CurrentEntity
4218	.1833	809833	9d e6 00	sta $8000e6,x			sta EntityData.direction,x									; hit wall, so start moving right slowly
4219	.1836	809836	80 24		bra $80985c			gra springEndAnimate
4220									;
4221	.1838	809838					_noCollideLeft
4222	.1838	809838	20 c3 9e	jsr $809ec3		jsr collideEntAgainstRest										; did we hit an ent?
4223	.183b	80983b	b0 f2		bcs $80982f		bcs _hit
4224	.183d	80983d	a6 02		ldx $02				ldx CurrentEntity												; no move on the X
3468	.183f	80983f	e8		inx			inx
3469	.1840	809840	e8		inx			inx
4226	.1841	809841	20 55 85	jsr $808555			jsr addXWithMSBAndClip_88
3473	.1844	809844	ca		dex			dex
3474	.1845	809845	ca		dex			dex
4228	.1846	809846	a5 2f		lda $2f				lda DidClipX													; did we hit a wall?
4229	.1848	809848	f0 04		beq $80984e			beq _noclip2
4230	.184a	80984a	a9 01		lda #$01				lda #1
4231	.184c	80984c	80 0b		bra $809859				bra _store2													; start going right slowly then
4232										;
4233	.184e	80984e					_noClip2
4234	.184e	80984e	bd e6 00	lda $8000e6,x		lda EntityData.direction,x
4235	.1851	809851	38		sec			sec
4236	.1852	809852	e9 01		sbc #$01		sbc #1
4237	.1854	809854	c9 fb		cmp #$fb		cmp #256-5															; accelerate left
4238	.1856	809856	d0 01		bne $809859		bne _store2
4239	.1858	809858	1a		inc a				inc a  ;256-4
4240	.1859	809859					_store2
4241	.1859	809859	9d e6 00	sta $8000e6,x		sta EntityData.direction,x
4242	.185c	80985c					springEndAnimate
4243	.185c	80985c	a6 02		ldx $02			ldx CurrentEntity
4244	.185e	80985e	bc 95 01	ldy $800195,x		ldy EntityData.entState,x
4245	.1861	809861	b9 9c 9c	lda $809c9c,y		lda SpringFrameFrameTable,y
4246	.1864	809864	9d 4a 01	sta $80014a,x		sta EntityData.animBase,x										; explicty set the frame
4247	.1867	809867	9e 63 01	stz $800163,x		stz EntityData.animFrame,x										; with no offset
4248	.186a	80986a	4c 86 99	jmp $809986		jmp nextEnt
4249								;

4251	.186d	80986d					entGhostFunc
4252	.186d	80986d					_ASSERT_axy8
4253	.186d	80986d	a6 02		ldx $02			ldx CurrentEntity
4254	.186f	80986f	a9 97		lda #$97		lda #<entGhostXResults											; set post collsion callback
4255	.1871	809871	85 06		sta $06			sta Pointer1.lo
4256	.1873	809873	a9 98		lda #$98		lda #>entGhostXResults
4257	.1875	809875	85 07		sta $07			sta Pointer1.hi
3468	.1877	809877	e8		inx			inx
3469	.1878	809878	e8		inx			inx
4259	.1879	809879	86 1d		stx $1d			stx CollideSpriteToCheck
4260	.187b	80987b	a6 02		ldx $02			ldx CurrentEntity
4261	.187d	80987d	bd 12 02	lda $800212,x		lda EntityData.speed,x
4262	.1880	809880	a8		tay			tay																	; read the speed and prep it for the call
4263	.1881	809881	bd e6 00	lda $8000e6,x		lda EntityData.direction,x										; read the direction and clamp it if needed
4264	.1884	809884	c9 04		cmp #$04		cmp #4
4265	.1886	809886	90 05		bcc $80988d		bcc +
4266	.1888	809888	a9 00		lda #$00			lda #0
4267	.188a	80988a	9d e6 00	sta $8000e6,x			sta EntityData.direction,x
4268								; 0 00= UpRight
4269								; 1 01= UpLeft
4270	.188d	80988d	29 01		and #$01	+	and #1
4271	.188f	80988f	f0 03		beq $809894		beq ghostLeft
4272							; ghostRight
4273	.1891	809891	4c 5d 95	jmp $80955d			jmp entRight
4274	.1894	809894					ghostLeft
4275	.1894	809894	4c 99 95	jmp $809599		jmp entLeft
4276								;

4278	.1897	809897					entGhostXResults
4279	.1897	809897					_ASSERT_axy8
4280	.1897	809897	a6 02		ldx $02			ldx CurrentEntity
4281	.1899	809899	a5 05		lda $05			lda CollisionResult
4282	.189b	80989b	f0 1b		beq $8098b8		beq _addXDelta
4283	.189d	80989d						_toggleX
4284	.189d	80989d	a6 02		ldx $02				ldx CurrentEntity
4285	.189f	80989f	bd 2b 02	lda $80022b,x			lda EntityData.ignoreColl,x						; this end moves diagionally, which presents issues forf
4286	.18a2	8098a2	d0 23		bne $8098c7			bne _ignoreCollision									; choosing the next move direction, as you can hit a corner
4287	.18a4	8098a4	09 01		ora #$01				ora #1												; and need to go both right and down at once
4288	.18a6	8098a6	9d 2b 02	sta $80022b,x				sta EntityData.ignoreColl,x					; I use ignoreColl to hold collision state to make a final decision
4289	.18a9	8098a9						_toggleXForce
4290	.18a9	8098a9	a6 02		ldx $02				ldx CurrentEntity
4291	.18ab	8098ab	bd e6 00	lda $8000e6,x			lda EntityData.direction,x
4292	.18ae	8098ae	49 01		eor #$01			eor #1
4293	.18b0	8098b0	9d e6 00	sta $8000e6,x			sta EntityData.direction,x							; toggle the x oomponent
4294	.18b3	8098b3	20 b2 99	jsr $8099b2			jsr setEntSpriteForDirection
4295	.18b6	8098b6	80 18		bra $8098d0			gra entGhostCheckY
4296									;
4297	.18b8	8098b8					_addXDelta
4298	.18b8	8098b8	20 c3 9e	jsr $809ec3		jsr collideEntAgainstRest								; do we hit an ent?
4299	.18bb	8098bb	b0 e0		bcs $80989d		bcs _togglex
4300	.18bd	8098bd	a6 02		ldx $02				ldx CurrentEntity
4301	.18bf	8098bf	bd 2b 02	lda $80022b,x			lda EntityData.ignoreColl,x
4302	.18c2	8098c2	29 fe		and #$fe			and #$fe ; clear bit 0
4303	.18c4	8098c4	9d 2b 02	sta $80022b,x			sta EntityData.ignoreColl,x						; we don't worry about flipping on the x anymore as its an ent
4304	.18c7	8098c7					_ignoreCollision
3468	.18c7	8098c7	e8		inx			inx
3469	.18c8	8098c8	e8		inx			inx
4306	.18c9	8098c9	20 55 85	jsr $808555		jsr addXWithMSBAndClip_88								; update the x
4307	.18cc	8098cc	a5 2f		lda $2f			lda DidClipX												; if we clip, got to flip it
4308	.18ce	8098ce	d0 d9		bne $8098a9			bne _toggleXForce
4309	.18d0	8098d0					entGhostCheckY
4310	.18d0	8098d0	a9 eb		lda #$eb		lda #<entGhostYResults
4311	.18d2	8098d2	85 06		sta $06			sta Pointer1.lo
4312	.18d4	8098d4	a9 98		lda #$98		lda #>entGhostYResults									; set the Y post collision pointer
4313	.18d6	8098d6	85 07		sta $07			sta Pointer1.hi
4314	.18d8	8098d8	a6 02		ldx $02			ldx CurrentEntity
4315	.18da	8098da	bd 12 02	lda $800212,x		lda EntityData.speed,x
4316	.18dd	8098dd	a8		tay			tay															; cache the speed
4317	.18de	8098de	bd e6 00	lda $8000e6,x		lda EntityData.direction,x								; and dispatch based upon speed
4318	.18e1	8098e1	29 02		and #$02		and #2
4319							; 2 10= DownRight
4320							; 3 11= DownLeft
4321	.18e3	8098e3	d0 03		bne $8098e8		bne _down
4322								; up
4323	.18e5	8098e5	82 94 fc	brl $80957c		gra entUp
4324	.18e8	8098e8					_down
4325	.18e8	8098e8	82 cd fc	brl $8095b8		gra entDown
4326								;
4327	.18eb	8098eb					entGhostYResults
4328	.18eb	8098eb					_ASSERT_axy8
4329	.18eb	8098eb	a6 02		ldx $02			ldx CurrentEntity
4330	.18ed	8098ed	a5 05		lda $05			lda CollisionResult
4331	.18ef	8098ef	f0 16		beq $809907		beq _entGhostCheckSprites
4332	.18f1	8098f1						_toggleY
4333	.18f1	8098f1	a6 02		ldx $02				ldx CurrentEntity
4334	.18f3	8098f3	bd 2b 02	lda $80022b,x			lda EntityData.ignoreColl,x
4335	.18f6	8098f6	d0 1e		bne $809916			bne _ignoreCollision								; if we already changed
4336	.18f8	8098f8	09 02		ora #$02				ora #2
4337	.18fa	8098fa	9d 2b 02	sta $80022b,x				sta EntityData.ignoreColl,x				; set to make sure we don't again
4338	.18fd	8098fd	bd e6 00	lda $8000e6,x				lda EntityData.direction,x					; toggle the y
4339	.1900	809900	49 02		eor #$02				eor #2
4340	.1902	809902	9d e6 00	sta $8000e6,x				sta EntityData.direction,x
4341	.1905	809905						_entHitAndGoNext
4342	.1905	809905	80 7f		bra $809986			gra nextEnt
4343	.1907	809907					_entGhostCheckSprites
4344	.1907	809907	20 c3 9e	jsr $809ec3		jsr collideEntAgainstRest							; did we hit another ent?
4345	.190a	80990a	b0 e5		bcs $8098f1		bcs _toggleY											; force toggle
4346	.190c	80990c	a6 02		ldx $02				ldx CurrentEntity
4347	.190e	80990e	bd 2b 02	lda $80022b,x			lda EntityData.ignoreColl,x					; no, clear the lock flag then
4348	.1911	809911	29 fd		and #$fd			and #%11111101
4349	.1913	809913	9d 2b 02	sta $80022b,x			sta EntityData.ignoreColl,x
4350	.1916	809916					_ignoreCollision
4351	.1916	809916	20 ca 94	jsr $8094ca		jsr addYDeltaEnt
4352	.1919	809919	20 ca 99	jsr $8099ca		jsr updateEntAnimAndSetSprite
4353	.191c	80991c	80 68		bra $809986		gra nextEnt

4355	.191e	80991e					entBat
4356	.191e	80991e					_ASSERT_axy8
4357	.191e	80991e	a6 02		ldx $02			ldx CurrentEntity											; we check to see if we can fall down
4358	.1920	809920	ad 66 9c	lda $809c66		lda EntityAnimData.collisionBox+kEntity.bat		; this might change per frame
4359	.1923	809923	85 1e		sta $1e			sta CollideSpriteBoxIndex
3468	.1925	809925	e8		inx			inx
3469	.1926	809926	e8		inx			inx
4361	.1927	809927	86 1d		stx $1d			stx CollideSpriteToCheck
4362	.1929	809929	a9 36		lda #$36		lda #<entBatYResults										; set post collision callback
4363	.192b	80992b	85 06		sta $06			sta Pointer1.lo
4364	.192d	80992d	a9 99		lda #$99		lda #>entBatYResults
4365	.192f	80992f	85 07		sta $07			sta Pointer1.hi
4366	.1931	809931	a0 01		ldy #$01		ldy #1														; fall fast
4367	.1933	809933	82 82 fc	brl $8095b8		gra entDown
4368								;
4369	.1936	809936					entBatYResults
4370	.1936	809936	a6 02		ldx $02			ldx CurrentEntity
4371	.1938	809938	a5 05		lda $05			lda CollisionResult
4372	.193a	80993a	d0 03		bne $80993f		bne _dontFall
4373	.193c	80993c	20 ca 94	jsr $8094ca			jsr addYDeltaEnt										; yes update Y
4374	.193f	80993f					_dontFall
4375	.193f	80993f	4c 27 95	jmp $809527		jmp entNormalMovement									; jump to normal left right update


4378	.1942	809942					handleEntCollisionResult
4379	.1942	809942					_ASSERT_axy8
4380	.1942	809942	a6 02		ldx $02			ldx CurrentEntity
4381	.1944	809944	a5 05		lda $05			lda CollisionResult										; did we hit something
4382	.1946	809946	f0 13		beq $80995b		beq _addDeltas												; no add deltas and away we go
4383	.1948	809948	80 0c		bra $809956			bra _skipIgnore										; yes well react to it
4384								;
4385	.194a	80994a					_entHitAndGoNext
4386	.194a	80994a	a6 02		ldx $02			ldx CurrentEntity
4387	.194c	80994c	bd 2b 02	lda $80022b,x		lda EntityData.ignoreColl,x							; does this have ignore flags
4388	.194f	80994f	d0 1c		bne $80996d	 	bne _ignoreCollision
4389	.1951	809951	a9 04		lda #$04			lda #4
4390	.1953	809953	9d 2b 02	sta $80022b,x			sta EntityData.ignoreColl,x						; set ignore collision, this is so they don't stick together
4391	.1956	809956					_skipIgnore
4392	.1956	809956	20 a4 99	jsr $8099a4		jsr setNextEntDir
4393	.1959	809959	80 2b		bra $809986		gra nextEnt
4394								;
4395	.195b	80995b					_addDeltas
4396	.195b	80995b	20 c3 9e	jsr $809ec3		jsr collideEntAgainstRest
4397	.195e	80995e	b0 ea		bcs $80994a		bcs _entHitAndGoNext
4398	.1960	809960	a6 02		ldx $02				ldx CurrentEntity
4399	.1962	809962	bd 2b 02	lda $80022b,x			lda EntityData.ignoreColl,x
4400	.1965	809965	f0 06		beq $80996d			beq _ignoreCollision
4401	.1967	809967	38		sec					sec													; hasn't collided so clear flag
4402	.1968	809968	e9 01		sbc #$01				sbc #1
4403	.196a	80996a	9d 2b 02	sta $80022b,x				sta EntityData.ignoreColl,x					; countdown ignore
4404	.196d	80996d					_ignoreCollision
4405	.196d	80996d	20 ca 94	jsr $8094ca		jsr addYDeltaEnt 											; will set X to current Ent
3468	.1970	809970	e8		inx			inx
3469	.1971	809971	e8		inx			inx
4407	.1972	809972	20 55 85	jsr $808555		jsr addXWithMSBAndClip_88
4408	.1975	809975	a5 2f		lda $2f			lda DidClipX
4409	.1977	809977	f0 0d		beq $809986		beq _skipFlipDueToX
4410	.1979	809979	bd 7f 03	lda $80037f,x			lda mplexBuffer.xpos,x								; x was increased above
4411	.197c	80997c	38		sec				sec
4412	.197d	80997d	ed 89 02	sbc $800289			sbc checkSpriteToCharData.xDeltaCheck			; undo the move
4413	.1980	809980	9d 7f 03	sta $80037f,x			sta mplexBuffer.xpos,x
4414	.1983	809983	20 a4 99	jsr $8099a4			jsr setNextEntDir
4415	.1986	809986					_skipFlipDueToX
4416	.1986	809986					nextEnt
4417	.1986	809986	a6 02		ldx $02			ldx CurrentEntity
4418	.1988	809988	4c fd 94	jmp $8094fd		jmp updateEntitiesLoop

4420	.198b	80998b					entBubble
4421	.198b	80998b					_ASSERT_axy8
4422	.198b	80998b	a6 02		ldx $02			ldx CurrentEntity
4423	.198d	80998d	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x			; bubbles move up
4424	.1990	809990	38		sec			sec
4425	.1991	809991	e9 01		sbc #$01		sbc #1
4426	.1993	809993	c9 f0		cmp #$f0		cmp #240														; have we reached off the top of the screen
4427	.1995	809995	d0 05		bne $80999c		bne _safe
4428	.1997	809997	9e ff 00	stz $8000ff,x			stz EntityData.active,x
4429	.199a	80999a	a9 e0		lda #$e0			lda #kSpriteEmptyVal									; disable sprite
4430	.199c	80999c					_safe
4431	.199c	80999c	9d c1 03	sta $8003c1,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
4432	.199f	80999f	20 ca 99	jsr $8099ca		jsr updateEntAnimAndSetSprite
4433	.19a2	8099a2	80 e2		bra $809986		gra nextEnt
4434								;

4436	.19a4	8099a4					setNextEntDir
4437	.19a4	8099a4					_ASSERT_axy8
4438	.19a4	8099a4	20 bc 99	jsr $8099bc		jsr getEntTableIndex
4439	.19a7	8099a7	b9 fb 9c	lda $809cfb,y		lda NextDirectionLUT,y									; look up the direction based upon current direction
4440	.19aa	8099aa	9d e6 00	sta $8000e6,x		sta EntityData.direction,x
4441	.19ad	8099ad	05 0f		ora $0f			ora ZPTemp 													; add the ent type offset to it
4442	.19af	8099af	a8		tay			tay
4443	.19b0	8099b0	80 03		bra $8099b5		gra setEntFrameForDir									; update the animation
4444								;

4446	.19b2	8099b2					setEntSpriteForDirection
4447	.19b2	8099b2					_ASSERT_jsr
4448	.19b2	8099b2					_ASSERT_axy8
4449	.19b2	8099b2	20 bc 99	jsr $8099bc		jsr getEntTableIndex
4450								; fall through
4451	.19b5	8099b5					setEntFrameForDir
4452	.19b5	8099b5					_ASSERT_axy8
4453	.19b5	8099b5	b9 1b 9d	lda $809d1b,y		lda BaseAnimeFrameForDir,y
4454	.19b8	8099b8	9d 4a 01	sta $80014a,x		sta EntityData.animBase,x
4455	.19bb	8099bb	60		rts			rts

4457	.19bc	8099bc					getEntTableIndex
4458	.19bc	8099bc					_ASSERT_jsr
4459	.19bc	8099bc					_ASSERT_axy8
4460	.19bc	8099bc	a6 02		ldx $02			ldx CurrentEntity
4461	.19be	8099be	bd cd 00	lda $8000cd,x		lda EntityData.type,x				; newDirection = table[ent*4+direction]
4462	.19c1	8099c1	0a		asl a			asl a
4463	.19c2	8099c2	0a		asl a			asl a
4464	.19c3	8099c3	85 0f		sta $0f			sta ZPTemp
4465	.19c5	8099c5	1d e6 00	ora $8000e6,x		ora EntityData.direction,x
4466	.19c8	8099c8	a8		tay			tay
4467	.19c9	8099c9	60		rts			rts

4469	.19ca	8099ca					updateEntAnimAndSetSprite
4470	.19ca	8099ca					_ASSERT_jsr
4471	.19ca	8099ca					_ASSERT_axy8
4472	.19ca	8099ca	bd cd 00	lda $8000cd,x		lda EntityData.type,x						; get the type for latter
4473	.19cd	8099cd	a8		tay			tay
4474	.19ce	8099ce	fe 31 01	inc $800131,x		inc EntityData.animTimer,x					; inc frame timer
4475	.19d1	8099d1	bd 31 01	lda $800131,x		lda EntityData.animTimer,x
4476	.19d4	8099d4	d9 47 9c	cmp $809c47,y		cmp EntityAnimData.frameRate,y
4477	.19d7	8099d7	d0 11		bne $8099ea		bne _notAnimUpdate							; nope rts
4478	.19d9	8099d9	9e 31 01	stz $800131,x			stz EntityData.animTimer,x				; clear timer
4479	.19dc	8099dc	fe 63 01	inc $800163,x			inc EntityData.animFrame,x				; inc and loop frame if needed
4480	.19df	8099df	bd 63 01	lda $800163,x			lda EntityData.animFrame,x
4481	.19e2	8099e2	d9 39 9c	cmp $809c39,y			cmp EntityAnimData.frameCount,y
4482	.19e5	8099e5	d0 03		bne $8099ea			bne _notAnimUpdate
4483	.19e7	8099e7	9e 63 01	stz $800163,x				stz EntityData.animFrame,x
4484	.19ea	8099ea					_notAnimUpdate
4485	.19ea	8099ea	60		rts			rts


4488	.19eb	8099eb					updateBubbles
4489	.19eb	8099eb					_ASSERT_jsr
4490	.19eb	8099eb					_ASSERT_axy8
4491	.19eb	8099eb	ae 5d 02	ldx $80025d		ldx EntityData.numPipes								; does this level have any bubble spawners?
4492	.19ee	8099ee	f0 4a		beq $809a3a		beq _exit
4493	.19f0	8099f0	ad c4 00	lda $8000c4			lda TickDowns.bubbleTimer
4494	.19f3	8099f3	d0 45		bne $809a3a			bne _exit
4495	.19f5	8099f5	ae 67 02	ldx $800267				ldx EntityData.pipeBubbleStart			; run through the ents looking for a free slot to use
4496	.19f8	8099f8					_findFreeEnt
4497	.19f8	8099f8	bd ff 00	lda $8000ff,x		lda EntityData.active,x
4498	.19fb	8099fb	f0 08		beq $809a05		beq _foundOne
4499	.19fd	8099fd	e8		inx				inx
4500	.19fe	8099fe	ec cc 00	cpx $8000cc			cpx EntityData.number
4501	.1a01	809a01	d0 f5		bne $8099f8			bne _findFreeEnt
4502	.1a03	809a03	80 35		bra $809a3a				bra _exit										; no free slots
4503	.1a05	809a05					_foundOne
4504	.1a05	809a05	86 10		stx $10			stx ZPTemp2												; bubble ent number
4505	.1a07	809a07	a9 01		lda #$01		lda #1
4506	.1a09	809a09	9d ff 00	sta $8000ff,x		sta EntityData.active,x								; mark it active
4507	.1a0c	809a0c	ac 66 02	ldy $800266		ldy EntityData.lastPipeUsed
4508	.1a0f	809a0f	b9 5e 02	lda $80025e,y		lda EntityData.pipeIndex,y
4509	.1a12	809a12	20 4f 8d	jsr $808d4f		jsr convertIndexToEntSpriteXY						; spawn at the next pipe
4510	.1a15	809a15	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; bubbles are 24 wide so -4 from spawn pos to centre it
4511	.1a18	809a18	38		sec			sec
4512	.1a19	809a19	e9 04		sbc #$04		sbc #4
4513	.1a1b	809a1b	9d 81 03	sta $800381,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
4514	.1a1e	809a1e	b0 05		bcs $809a25		bcs +
4515	.1a20	809a20	a9 03		lda #$03			lda #3
4516	.1a22	809a22	9d a1 03	sta $8003a1,x			sta mplexBuffer.xmsb+kEntsSpriteOffset,x	; handle MSB which is important for the fist slot only
4517	.1a25	809a25	a9 1e		lda #$1e	+	lda #kTimers.spawnBubble
4518	.1a27	809a27	8d c4 00	sta $8000c4		sta TickDowns.bubbleTimer							; reset the timer
4519	.1a2a	809a2a	ad 66 02	lda $800266		lda EntityData.lastPipeUsed
4520	.1a2d	809a2d	18		clc			clc
4521	.1a2e	809a2e	69 01		adc #$01		adc #1
4522	.1a30	809a30	cd 5d 02	cmp $80025d		cmp EntityData.numPipes								; move to the next pipe
4523	.1a33	809a33	d0 02		bne $809a37		bne _store
4524	.1a35	809a35	a9 00		lda #$00			lda #0												; wrap as needed
4525	.1a37	809a37					_store
4526	.1a37	809a37	8d 66 02	sta $800266		sta EntityData.lastPipeUsed
4527	.1a3a	809a3a					_exit
4528	.1a3a	809a3a	60		rts			rts

4530	.1a3b	809a3b					entBoss
4531	.1a3b	809a3b					_ASSERT_axy8
4532	.1a3b	809a3b	a6 02		ldx $02			ldx CurrentEntity
4533	.1a3d	809a3d	bd 95 01	lda $800195,x		lda EntityData.entState,x
4534	.1a40	809a40	0a		asl a			asl a
4535	.1a41	809a41	aa		tax			tax
4536	.1a42	809a42	7c 45 9a	jmp ($809a45,x)		jmp (BossLUT,x)
4537	>1a45	809a45	49 9a b6 9a			BossLut .word <>(BossNormal,BossDeath)

4539	.1a49	809a49					BossNormal
4540	.1a49	809a49					_ASSERT_axy8
4541	.1a49	809a49	a6 02		ldx $02			ldx CurrentEntity
4542	.1a4b	809a4b	bd 19 01	lda $800119,x		lda EntityData.movTimer+1,x											; Ent + 1 timer is used as a flash timer
4543	.1a4e	809a4e	f0 11		beq $809a61		beq _notFlash
4544	.1a50	809a50	de 19 01	dec $800119,x			dec EntityData.movTimer+1,x
4545	.1a53	809a53	d0 0c		bne $809a61			bne _notFlash
4546	.1a55	809a55	9e 44 02	stz $800244,x				stz EntityData.palleteOffset,x								; clear palette shift on all 4 sub ents
4547	.1a58	809a58	9e 45 02	stz $800245,x				stz EntityData.palleteOffset+1,x
4548	.1a5b	809a5b	9e 46 02	stz $800246,x				stz EntityData.palleteOffset+2,x
4549	.1a5e	809a5e	9e 47 02	stz $800247,x				stz EntityData.palleteOffset+3,x
4550	.1a61	809a61					_notFlash
4551	.1a61	809a61	20 08 9b	jsr $809b08		jsr AnimateUpperHalfBoss												; make it look left or right for player tracking
4552	.1a64	809a64	de 18 01	dec $800118,x		dec EntityData.movTimer,x												; time to move?
4553	.1a67	809a67	f0 3f		beq $809aa8		beq _doneMove
4554	.1a69	809a69	bd 18 01	lda $800118,x			lda EntityData.movTimer,x											; the boses move and pause and move the pause
4555	.1a6c	809a6c	c9 10		cmp #$10			cmp #16																	; bears are 50/50 while the octopus is 66/33
4556	.1a6e	809a6e	b0 41		bcs $809ab1			bcs _noMove
4557	.1a70	809a70	20 f2 9a	jsr $809af2				jsr AnimateLowerHalfBoss
4558	.1a73	809a73	bd e6 00	lda $8000e6,x				lda EntityData.direction,x
4559	.1a76	809a76	d0 1b		bne $809a93				bne _left
4560	.1a78	809a78	de 81 03	dec $800381,x					dec mplexBuffer.xpos+kEntsSpriteOffset,x
4561	.1a7b	809a7b	de 82 03	dec $800382,x					dec mplexBuffer.xpos+kEntsSpriteOffset+1,x
4562	.1a7e	809a7e	de 83 03	dec $800383,x					dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4563	.1a81	809a81	de 84 03	dec $800384,x					dec mplexBuffer.xpos+kEntsSpriteOffset+3,x		; move all 4 sub ents left
4564	.1a84	809a84	bd 81 03	lda $800381,x					lda mplexBuffer.xpos+kEntsSpriteOffset,x
4565											; cmp #kBounds.screenMinX this is now 0
4566											.cerror kBounds.screenMinX != 0, "put cmp back"
4567	.1a87	809a87	d0 28		bne $809ab1					bne _noMove
4568	.1a89	809a89									_toggleDir
4569	.1a89	809a89	bd e6 00	lda $8000e6,x						lda EntityData.direction,x
4570	.1a8c	809a8c	49 02		eor #$02						eor #2 														; switch from 0 & 2
4571	.1a8e	809a8e	9d e6 00	sta $8000e6,x						sta EntityData.direction,x
4572	.1a91	809a91	80 1e		bra $809ab1						bra _noMove
4573	.1a93	809a93						_left
4574	.1a93	809a93	fe 81 03	inc $800381,x			inc mplexBuffer.xpos+kEntsSpriteOffset,x
4575	.1a96	809a96	fe 82 03	inc $800382,x			inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; move all 4 sub ents right
4576	.1a99	809a99	fe 83 03	inc $800383,x			inc mplexBuffer.xpos+kEntsSpriteOffset+2,x
4577	.1a9c	809a9c	fe 84 03	inc $800384,x			inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4578	.1a9f	809a9f	bd 82 03	lda $800382,x			lda mplexBuffer.xpos+kEntsSpriteOffset+1,x					; get the Top Right sprite
4579	.1aa2	809aa2	c9 e7		cmp #$e7			cmp #$ff-24
4580	.1aa4	809aa4	f0 e3		beq $809a89			beq _toggleDir
4581	.1aa6	809aa6	80 09		bra $809ab1				bra _noMove
4582	.1aa8	809aa8					_doneMove
4583	.1aa8	809aa8	bc cd 00	ldy $8000cd,x		ldy EntityData.type,x
4584	.1aab	809aab	b9 ac 9a	lda $809aac,y		lda BossMoveTimerLut - kEntity.bear,y 							; octopuss is the next ent after the bear so '- bear'
4585	.1aae	809aae	9d 18 01	sta $800118,x		sta EntityData.movTimer,x											; make y effectily 0 or 1
4586	.1ab1	809ab1					_noMove
4587	.1ab1	809ab1	4c 86 99	jmp $809986		jmp nextEnt

4589	>1ab4	809ab4	20 18				BossMoveTimerLut .byte 32,24

4591	.1ab6	809ab6					BossDeath
4592	.1ab6	809ab6					_ASSERT_jsr
4593	.1ab6	809ab6					_ASSERT_axy8
4594	.1ab6	809ab6	a6 02		ldx $02			ldx CurrentEntity
4595	.1ab8	809ab8	de c1 03	dec $8003c1,x		dec mplexBuffer.ypos+kEntsSpriteOffset,x
4596	.1abb	809abb	de c2 03	dec $8003c2,x		dec mplexBuffer.ypos+kEntsSpriteOffset+1,x					; left sprites to the left
4597	.1abe	809abe	fe c3 03	inc $8003c3,x		inc mplexBuffer.ypos+kEntsSpriteOffset+2,x					; right sprites to the right
4598	.1ac1	809ac1	fe c4 03	inc $8003c4,x		inc mplexBuffer.ypos+kEntsSpriteOffset+3,x
4599	.1ac4	809ac4	de 81 03	dec $800381,x		dec mplexBuffer.xpos+kEntsSpriteOffset,x						; upper sprites up
4600	.1ac7	809ac7	de 83 03	dec $800383,x		dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4601	.1aca	809aca	fe 82 03	inc $800382,x		inc mplexBuffer.xpos+kEntsSpriteOffset+1,x					; bottom sprites down
4602	.1acd	809acd	fe 84 03	inc $800384,x		inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4603	.1ad0	809ad0	de 18 01	dec $800118,x		dec EntityData.movTimer,x											; time up?
4604	.1ad3	809ad3	d0 1a		bne $809aef		bne _exit
4605	.1ad5	809ad5	9e ff 00	stz $8000ff,x			stz EntityData.active,x											; disable all 4 sprites
4606	.1ad8	809ad8	9e 00 01	stz $800100,x			stz EntityData.active+1,x
4607	.1adb	809adb	9e 01 01	stz $800101,x			stz EntityData.active+2,x
4608	.1ade	809ade	9e 02 01	stz $800102,x			stz EntityData.active+3,x
4609	.1ae1	809ae1	a9 e0		lda #$e0			lda #kSpriteEmptyVal
4610	.1ae3	809ae3	9d c1 03	sta $8003c1,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x					; put them offscreen
4611	.1ae6	809ae6	9d c2 03	sta $8003c2,x			sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
4612	.1ae9	809ae9	9d c3 03	sta $8003c3,x			sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
4613	.1aec	809aec	9d c4 03	sta $8003c4,x			sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
4614	.1aef	809aef					_exit
4615	.1aef	809aef	4c 86 99	jmp $809986		jmp nextEnt

4617	.1af2	809af2					AnimateLowerHalfBoss
4618	.1af2	809af2					_ASSERT_jsr
4619	.1af2	809af2					_ASSERT_axy8
4620	.1af2	809af2	de 31 01	dec $800131,x		dec EntityData.animTimer,x											; first ent sprite is the anim timer
4621	.1af5	809af5	d0 10		bne $809b07		bne _exit
4622	.1af7	809af7	a9 04		lda #$04			lda #4
4623	.1af9	809af9	9d 31 01	sta $800131,x			sta EntityData.animTimer,x
4624	.1afc	809afc	bd 65 01	lda $800165,x			lda EntityData.animFrame+2,x									; toggle the anim frame number for the lower
4625	.1aff	809aff	49 01		eor #$01			eor #1																; two ents
4626	.1b01	809b01	9d 65 01	sta $800165,x			sta EntityData.animFrame+2,x
4627	.1b04	809b04	9d 66 01	sta $800166,x			sta EntityData.animFrame+3,x
4628	.1b07	809b07					_exit
4629	.1b07	809b07	60		rts			rts

4631							;<<<<<24--0--24>>>>>
4632	.1b08	809b08					AnimateUpperHalfBoss
4633	.1b08	809b08					_ASSERT_jsr
4634	.1b08	809b08					_ASSERT_axy8
4635	.1b08	809b08	86 0f		stx $0f			stx ZPTemp
3468	.1b0a	809b0a	e8		inx			inx
3469	.1b0b	809b0b	e8		inx			inx
4637	.1b0c	809b0c	bd 7f 03	lda $80037f,x		lda mplexBuffer.xpos,x
4638	.1b0f	809b0f	85 10		sta $10			sta ZPTemp2							; Ent's X pos
4639	.1b11	809b11	ad 7f 03	lda $80037f		lda mplexBuffer.xpos				; player
4640	.1b14	809b14	85 11		sta $11			sta ZPTemp3							; Player's X pos
4641	.1b16	809b16	c5 10		cmp $10			cmp ZPTemp2							; Ent's X pos
4642	.1b18	809b18	90 0c		bcc $809b26		bcc _playerLeft
4643	.1b1a	809b1a	e5 10		sbc $10				sbc ZPTemp2 					; carry is already set
4644	.1b1c	809b1c	c9 18		cmp #$18			cmp #24							; if PlayerX - EntX  < 24
4645	.1b1e	809b1e	90 03		bcc $809b23			bcc _under
4646	.1b20	809b20	a9 02		lda #$02				lda #2						; look right
4647	>1b22	809b22	2c							.byte $2c 					; bit XXXX
4648	.1b23	809b23						_under
4649	.1b23	809b23	a9 01		lda #$01			lda #1							; look straight ahead
4650	>1b25	809b25	2c						.byte $2c						; bit XXXX
4651	.1b26	809b26					_playerLeft
4652	.1b26	809b26	a9 00		lda #$00		lda #0								; look left
4653	.1b28	809b28	a6 0f		ldx $0f			ldx ZPTemp							; the ent number we called it with
4654	.1b2a	809b2a	9d 63 01	sta $800163,x		sta EntityData.animFrame,x		; set both upper sprites to the frame
4655	.1b2d	809b2d	9d 64 01	sta $800164,x		sta EntityData.animFrame+1,x
4656	.1b30	809b30	60		rts			rts

4658							.as
4659							.xs
4660	.1b31	809b31					isTypeBoss
4661							; return C = 0 for not and C = 1 for is
4662	.1b31	809b31					_ASSERT_jsr
4663	.1b31	809b31					_ASSERT_axy8
4664	.1b31	809b31	c9 08		cmp #$08		cmp #kEntity.bear					; is there a bear in there?
4665	.1b33	809b33	90 08		bcc $809b3d		bcc _notBoss
4666	.1b35	809b35	c9 0c		cmp #$0c		cmp #kEntity.octopussBody+1	; well is the number <bear or >OctopussBody
4667	.1b37	809b37	90 06		bcc $809b3f		bcc _boss
4668	.1b39	809b39	c9 0d		cmp #$0d		cmp #kEntity.bossDummy			; and not the dummy?
4669	.1b3b	809b3b	f0 02		beq $809b3f		beq _boss
4670	.1b3d	809b3d					_notBoss
4671	.1b3d	809b3d	18		clc				clc
4672	.1b3e	809b3e	60		rts				rts
4673	.1b3f	809b3f					_boss
4674	.1b3f	809b3f	38		sec			sec
4675	.1b40	809b40	60		rts			rts

4677							.as
4678							.xs
4679	.1b41	809b41					isTypeBossBounceDetect
4680							; bounce detection is handled by the collision rect of only 1 of the 4
4681							; so we need to get just bear or just ocotpuss and not the other 3
4682							; C = 0 yes, C = 1 no
4683	.1b41	809b41					_ASSERT_jsr
4684	.1b41	809b41					_ASSERT_axy8
4685	.1b41	809b41	c9 08		cmp #$08		cmp #kEntity.bear
4686	.1b43	809b43	f0 06		beq $809b4b		beq _yes
4687	.1b45	809b45	c9 09		cmp #$09			cmp #kEntity.octopuss
4688	.1b47	809b47	f0 02		beq $809b4b			beq _yes
4689	.1b49	809b49	18		clc					clc
4690	.1b4a	809b4a	60		rts					rts
4691	.1b4b	809b4b					_yes
4692	.1b4b	809b4b	38		sec			sec
4693	.1b4c	809b4c	60		rts			rts

4695							.as
4696							.xs
4697	.1b4d	809b4d					hurtBoss
4698	.1b4d	809b4d					_ASSERT_jsr
4699	.1b4d	809b4d					_ASSERT_axy8
4700	.1b4d	809b4d	bd 95 01	lda $800195,x		lda EntityData.entState,x				; can't hurt if it already dead
4701	.1b50	809b50	c9 01		cmp #$01		cmp #kBoss.dead
4702	.1b52	809b52	f0 22		beq $809b76		beq _exit
4703	.1b54	809b54	bd 19 01	lda $800119,x			lda EntityData.movTimer+1,x		; the flash acts a count down, other wise if you have the shield you can
4704	.1b57	809b57	d0 1d		bne $809b76			bne _exit								; jump into body, get pushed up and Quick Kill them in one jump
4705	.1b59	809b59	de ff 00	dec $8000ff,x				dec EntityData.active,x			; this is abused to hold "life points"
4706	.1b5c	809b5c	bd ff 00	lda $8000ff,x				lda EntityData.active,x
4707	.1b5f	809b5f	c9 01		cmp #$01				cmp #1								; 1 is "dead" as the must remain active for the death animation
4708	.1b61	809b61	f0 14		beq $809b77				beq _killedBoss
4709											; we need to flash them so the player knows they did something
4710	.1b63	809b63	a9 02		lda #$02					lda #kSPal_1 					; next pal
4711	.1b65	809b65	9d 44 02	sta $800244,x					sta EntityData.palleteOffset,x
4712	.1b68	809b68	9d 45 02	sta $800245,x					sta EntityData.palleteOffset+1,x
4713	.1b6b	809b6b	9d 46 02	sta $800246,x					sta EntityData.palleteOffset+2,x
4714	.1b6e	809b6e	9d 47 02	sta $800247,x					sta EntityData.palleteOffset+3,x
4715	.1b71	809b71	a9 10		lda #$10					lda #16							; store the flash timer in the 2nd sprite
4716	.1b73	809b73	9d 19 01	sta $800119,x					sta EntityData.movTimer+1,x
4717	.1b76	809b76					_exit
4718	.1b76	809b76	60		rts			rts
4719	.1b77	809b77					_killedBoss										; well just killed the boss
4720	.1b77	809b77	a9 01		lda #$01		lda #kBoss.dead
4721	.1b79	809b79	9d 95 01	sta $800195,x		sta EntityData.entState,x				; got to death state
4722	.1b7c	809b7c	a9 19		lda #$19		lda #kBoss.deathAnimTime
4723	.1b7e	809b7e	9d 18 01	sta $800118,x		sta EntityData.movTimer,x				; set death animation timer
4724	.1b81	809b81	86 0f		stx $0f			stx ZPTemp
4725	.1b83	809b83	a9 03		lda #$03		lda #kScoreIndex.boss					; award points
4726	.1b85	809b85	20 94 85	jsr $808594		jsr giveScore
4727	.1b88	809b88	a6 0f		ldx $0f			ldx ZPTemp									; restore X, which holds the current ent number
4728	.1b8a	809b8a	60		rts			rts

4730	=32						kESprFlags = kSPri_2|kSPal_0

4732							; ----- @Entity Data@ -----

4734							; fSprDef takes a sprite 16x16 grid x,y and the attributes data and makes a "word" for OAM bytes 3 and 4
4735							; note newer versions of 64tass don't support multiline so keep each def on one line
4736	=(8320,8322,8324,8326,8352,8354,8356,8358)	HeliRawFrames = (fSprDef(0,4,kESprFlags),fSprDef(1,4,kESprFlags),fSprDef(2,4,kESprFlags),fSprDef(3,4,kESprFlags),fSprDef(0,5,kESprFlags),fSprDef(1,5,kESprFlags),fSprDef(2,5,kESprFlags),fSprDef(3,5,kESprFlags))
4737	=(8320,8322,8324,8326,8352,8354,8356,8358)	allEntFrames := HeliRawFrames
4738														; ent frames index left
4739															; ent frames index right
4740																; number of frames
4741																	; anim frame rate
4742																		; anim frame size
4743																			; collision bounding box index
4744							; heli only has 1 8 frame animation for all directions
4745	=(0,0,8,8,0,0)					HeliRawAnimData =  (0,0,len(HeliRawFrames),8,kSpriteType.s16x16,0)

4747	=(8268,8270,8328,8330,8332,8334,8392,8394)	SpringRawFrames = (fSprDef(6,2,kESprFlags),fSprDef(7,2,kESprFlags),fSprDef(4,4,kESprFlags),fSprDef(5,4,kESprFlags),fSprDef(6,4,kESprFlags),fSprDef(7,4,kESprFlags),fSprDef(4,6,kESprFlags),fSprDef(5,6,kESprFlags))
4748							; again the spring is a rather complex entity that transends left and right concepts
4749	=(8,8,8,2,1,0)					SpringRawAnimData = (len(allEntFrames),len(allEntFrames),len(SpringRawFrames),2,kSpriteType.s16x32,0)
4750	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394)
							allEntFrames ..= SpringRawFrames

4752							;the worm has a Left and a Right set
4753	=(8384,8386,8388,8390)				WormRawFramesLeft = (fSprDef(0,6,kESprFlags),fSprDef(1,6,kESprFlags),fSprDef(2,6,kESprFlags),fSprDef(3,6,kESprFlags))
4754	=(8416,8418,8420,8422)				WormRawFramesRight = (fSprDef(0,7,kESprFlags),fSprDef(1,7,kESprFlags),fSprDef(2,7,kESprFlags),fSprDef(3,7,kESprFlags))

4756	=(16,20,4,8,0,0)				WormRawAnimData = (len(allEntFrames), len(allEntFrames)+len(WormRawFramesLeft),len(WormRawFramesLeft),8,kSpriteType.s16x16,0)
4757	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390)
							allEntFrames ..= WormRawFramesLeft
4758	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422)
							allEntFrames ..= WormRawFramesRight

4760	=(8448,8450,8452,8454)				BatRawAnimDataLeft = (fSprDef(0,8,kESprFlags),fSprDef(1,8,kESprFlags),fSprDef(2,8,kESprFlags),fSprDef(3,8,kESprFlags))
4761	=(24832,24834,24836,24838)			BatRawAnimDataRight = (fSprDef(0,8,kESprFlags|kSFlipX),fSprDef(1,8,kESprFlags|kSFlipX),fSprDef(2,8,kESprFlags|kSFlipX),fSprDef(3,8,kESprFlags|kSFlipX))
4762	=(24,28,4,8,0,0)				BatRawAnimData = (len(allEntFrames), len(allEntFrames)+len(BatRawAnimDataLeft),len(BatRawAnimDataLeft),8,kSpriteType.s16x16,0)
4763	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454)
							allEntFrames ..= BatRawAnimDataLeft
4764	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838)
							allEntFrames ..= BatRawAnimDataRight

4766	=(8480,8482,8484,8486)				GhostRawFramesLeft = (fSprDef(0,9,kESprFlags),fSprDef(1,9,kESprFlags),fSprDef(2,9,kESprFlags),fSprDef(3,9,kESprFlags))
4767	=(24864,24866,24868,24870)			GhostRawFramesRight = (fSprDef(0,9,kESprFlags|kSFlipX),fSprDef(1,9,kESprFlags|kSFlipX),fSprDef(2,9,kESprFlags|kSFlipX),fSprDef(3,9,kESprFlags|kSFlipX))
4768	=(32,36,4,8,0,0)				GhostRawAnimData = (len(allEntFrames), len(allEntFrames)+len(GhostRawFramesLeft),len(GhostRawFramesLeft),8,kSpriteType.s16x16,0)
4769	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486)
							allEntFrames ..= GhostRawFramesLeft
4770	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870)
							allEntFrames ..= GhostRawFramesRight

4772							; spider needs 4 animations, for waiting and for falling.
4773							; I could be tempted to make the falling the next entity type to keep the structure
4774							; however can't be bothered to change the code too much, just going to make a define
4775							; to handle the offset
4776	=(8512,8514)					SpiderRawFramesWaitLeft = (fSprDef(0,10,kESprFlags),fSprDef(1,10,kESprFlags))
4777	=(8516,8518)					SpiderRawFramesWaitRight = (fSprDef(2,10,kESprFlags),fSprDef(3,10,kESprFlags))
4778	=(8544,8546)					SpiderRawFramesFallLeft = (fSprDef(0,11,kESprFlags),fSprDef(1,11,kESprFlags))
4779	=(8548,8550)					SpiderRawFramesFallRight = (fSprDef(2,11,kESprFlags),fSprDef(3,11,kESprFlags))
4780	=(40,42,2,8,0,0)				SpiderRawAnimData = (len(allEntFrames), len(allEntFrames)+len(SpiderRawFramesWaitLeft),len(SpiderRawFramesWaitLeft),8,kSpriteType.s16x16,0)
4781	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514)
							allEntFrames ..= SpiderRawFramesWaitLeft
4782	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518)
							allEntFrames ..= SpiderRawFramesWaitRight
4783	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546)
							allEntFrames ..= SpiderRawFramesFallLeft
4784	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550)
							allEntFrames ..= SpiderRawFramesFallRight
4785	=4						kSpiderFallAnimOffset = len(SpiderRawFramesWaitLeft) + len(SpiderRawFramesWaitRight)

4787	=(8576,8578,8580,8582)				FishRawFramesUp = (fSprDef(0,12,kESprFlags),fSprDef(1,12,kESprFlags),fSprDef(2,12,kESprFlags),fSprDef(3,12,kESprFlags))
4788	=(8608,8610,8612,8614)				FishRawFramesDown = (fSprDef(0,13,kESprFlags),fSprDef(1,13,kESprFlags),fSprDef(2,13,kESprFlags),fSprDef(3,13,kESprFlags))
4789	=(48,52,4,1,0,0)				FishRawAnimData = (len(allEntFrames), len(allEntFrames)+len(FishRawFramesUp), len(FishRawFramesUp),1,kSpriteType.s16x16,0)
4790	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582)
							allEntFrames ..= FishRawFramesUp
4791	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614)
							allEntFrames ..= FishRawFramesDown

4793	=(8640,8642,8644,8646)				CirclerRawFramesLeft = (fSprDef(0,14,kESprFlags),fSprDef(1,14,kESprFlags),fSprDef(2,14,kESprFlags),fSprDef(3,14,kESprFlags))
4794	=(8672,8674,8676,8678)				CirclerRawFramesRight = (fSprDef(0,15,kESprFlags),fSprDef(1,15,kESprFlags),fSprDef(2,15,kESprFlags),fSprDef(3,15,kESprFlags))
4795	=(56,60,4,2,0,0)				CirclerRawAnimData = (len(allEntFrames), len(allEntFrames)+len(CirclerRawFramesLeft),len(CirclerRawFramesLeft),2,kSpriteType.s16x16,0)
4796	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646)
							allEntFrames ..= CirclerRawFramesLeft
4797	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678)
							allEntFrames ..= CirclerRawFramesRight

4799	=(8448,8452,8456)				BearRawFramesLeft = (fSprDef(0,16,kESprFlags),fSprDef(2,16,kESprFlags),fSprDef(4,16,kESprFlags))
4800	=(8460,8512,8516)				BearRawFramesRight = (fSprDef(6,16,kESprFlags),fSprDef(0,18,kESprFlags),fSprDef(2,18,kESprFlags))
4801	=(64,67,3,4,2,4)				BearEntAnimData = (len(allEntFrames), len(allEntFrames)+len(BearRawFramesLeft),len(BearRawFramesLeft),4,kSpriteType.s32x32,4)
4802	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456)
							allEntFrames ..= BearRawFramesLeft
4803	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= BearRawFramesRight

4805	=(8448,8452,8456)				OctopussRawFramesLeft = (fSprDef(0,24,kESprFlags),fSprDef(2,24,kESprFlags),fSprDef(4,24,kESprFlags))
4806	=(8460,8512,8516)				OctopussRawFramesRight = (fSprDef(6,24,kESprFlags),fSprDef(0,26,kESprFlags),fSprDef(2,26,kESprFlags))
4807	=(70,73,3,4,2,4)				OctopussEntAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussRawFramesLeft),len(OctopussRawFramesLeft),4,kSpriteType.s32x32,4)
4808	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456)
							allEntFrames ..= OctopussRawFramesLeft
4809	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516)
							allEntFrames ..= OctopussRawFramesRight

4811	=(8520,8524)					BearBodyRawFramesLeft = (fSprDef(4,18,kESprFlags), fSprDef(6,18,kESprFlags))
4812	=(8576,8580)					BearBodyRawFramesRight = (fSprDef(0,20,kESprFlags), fSprDef(2,20,kESprFlags))
4813	=(76,78,2,4,2,5)				BearBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(BearBodyRawFramesLeft),len(BearBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4814	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524)
							allEntFrames ..= BearBodyRawFramesLeft
4815	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580)
							allEntFrames ..= BearBodyRawFramesRight

4817	=(8520,8524)					OctopussBodyRawFramesLeft = (fSprDef(4,26,kESprFlags), fSprDef(6,26,kESprFlags))
4818	=(8576,8580)					OctopussBodyRawFramesRight = (fSprDef(0,28,kESprFlags), fSprDef(2,28,kESprFlags))
4819	=(80,82,2,4,2,5)				OctopussBodyAnimData = (len(allEntFrames), len(allEntFrames)+len(OctopussBodyRawFramesLeft),len(OctopussBodyRawFramesLeft),4,kSpriteType.s32x32,5)
4820	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524)
							allEntFrames ..= OctopussBodyRawFramesLeft
4821	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580)
							allEntFrames ..= OctopussBodyRawFramesRight

4823	=(8456,8460,8520)				BubbleRawFrames = (fSprDef(4,8,kESprFlags), fSprDef(6,8,kESprFlags), fSprDef(4,10,kESprFlags))
4824	=(84,84,3,12,2,7)				BubbleAnimData = (len(allEntFrames),len(allEntFrames),len(BubbleRawFrames),12,kSpriteType.s32x32,7)
4825	=(8320,8322,8324,8326,8352,8354,8356,8358,8268,8270,8328,8330,8332,8334,8392,8394,8384,8386,8388,8390,8416,8418,8420,8422,8448,8450,8452,8454,24832,24834,24836,24838,8480,8482,8484,8486,24864,24866,24868,24870,8512,8514,8516,8518,8544,8546,8548,8550,8576,8578,8580,8582,8608,8610,8612,8614,8640,8642,8644,8646,8672,8674,8676,8678,8448,8452,8456,8460,8512,8516,8448,8452,8456,8460,8512,8516,8520,8524,8576,8580,8520,8524,8576,8580,8456,8460,8520)
							allEntFrames ..= BubbleRawFrames
4826							; this one doesn't matter so much, its more for the collision frame number which is basically blowing a lot of bytes for one, but oh well
4827	=(87,87,2,12,2,6)				BossDummyAnimData = (len(allEntFrames),len(allEntFrames),len(BearBodyRawFramesLeft),12,kSpriteType.s32x32,6)

4829							;this has to be in kEntity order
4830							; older 64tass versions let you spread a single define across multiple lines
4831							; newer versions removed this feature so I'm using := and ..= to split over multiple lines
4832	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0))
							AllAnimData  := (HeliRawAnimData,SpringRawAnimData,WormRawAnimData,BatRawAnimData)
4833	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0))
							AllAnimData ..= (GhostRawAnimData,SpiderRawAnimData,FishRawAnimData,CirclerRawAnimData)
4834	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5))
							AllAnimData ..= (BearEntAnimData,OctopussEntAnimData,BearBodyAnimData,OctopussBodyAnimData)
4835	=((0,0,8,8,0,0),(8,8,8,2,1,0),(16,20,4,8,0,0),(24,28,4,8,0,0),(32,36,4,8,0,0),(40,42,2,8,0,0),(48,52,4,1,0,0),(56,60,4,2,0,0),(64,67,3,4,2,4),(70,73,3,4,2,4),(76,78,2,4,2,5),(80,82,2,4,2,5),(84,84,3,12,2,7),(87,87,2,12,2,6))
							AllAnimData ..= (BubbleAnimData,BossDummyAnimData)

4837	.1b8b	809b8b					EntityFrameData .block
4838	>1b8b	809b8b	80 82 84 86 a0 a2 a4 a6			lo .byte <(allEntFrames)						; this is 3rd byte of OAM for each frame
	>1b93	809b93	4c 4e 88 8a 8c 8e c8 ca c0 c2 c4 c6 e0 e2 e4 e6
	>1ba3	809ba3	00 02 04 06 00 02 04 06 20 22 24 26 20 22 24 26
	>1bb3	809bb3	40 42 44 46 60 62 64 66 80 82 84 86 a0 a2 a4 a6
	>1bc3	809bc3	c0 c2 c4 c6 e0 e2 e4 e6 00 04 08 0c 40 44 00 04
	>1bd3	809bd3	08 0c 40 44 48 4c 80 84 48 4c 80 84 08 0c 48
4839	>1be2	809be2	20 20 20 20 20 20 20 20			hi .byte >(allEntFrames)						; this is 4th byte of OAM for each frame
	>1bea	809bea	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
	>1bfa	809bfa	21 21 21 21 61 61 61 61 21 21 21 21 61 61 61 61
	>1c0a	809c0a	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1c1a	809c1a	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
	>1c2a	809c2a	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
4840							.bend

4842	.1c39	809c39					EntityAnimData .block
4843	>1c39	809c39	08 08 04 04 04 02 04 04			frameCount		.byte (AllAnimData[:,2])	; number of frames each animation has
	>1c41	809c41	03 03 02 02 03 02
4844	>1c47	809c47	08 02 08 08 08 08 01 02			frameRate		.byte (AllAnimData[:,3])	; the rate for the animation
	>1c4f	809c4f	04 04 04 04 0c 0c
4845	>1c55	809c55	00 01 00 00 00 00 00 00			frameSize		.byte (AllAnimData[:,4])	; the sprite size for the animation
	>1c5d	809c5d	02 02 02 02 02 02
4846	>1c63	809c63	00 00 00 00 00 00 00 00			collisionBox	.byte (AllAnimData[:,5])	; the index in collisionboxes this animation wants
	>1c6b	809c6b	04 04 05 05 07 06
4847							.bend

4849	.1c71	809c71					kSprites .block
4850	=48							fish				= AllAnimData[kEntity.fish,0]			; the anim frame data index for the start of the fish frames
4851	=40							spiderLeft		= AllAnimData[kEntity.spider,0]		; like wise for spider left
4852	=42							spiderRight		= AllAnimData[kEntity.spider,1]
4853	=8							springNormal	= AllAnimData[kEntity.spring,0]
4854	=9							springCompress = AllAnimData[kEntity.spring,0]+1
4855	=10							springExpand	= AllAnimData[kEntity.spring,0]+2
4856	=11							springFull		= AllAnimData[kEntity.spring,0]+3
4857	=12							springFall		= AllAnimData[kEntity.spring,0]+4
4858	=84							bubbles			= AllAnimData[kEntity.bubble,0]
4859	=0							bulletSprite	= 0											; these are frame deltas for parts of the bullet
4860	=3							bulletSplat		= 3
4861	=4							bulletRed		= 4
4862							.bend

4864	.1c71	809c71					SpringDirectionToDeltaLUT
4865	>1c71	809c71	fe ff ff ff 01 01 01 02		.char -2,-1,-1,-1, 1, 1, 1, 2									; this is the springs X deltas, used to give it a sense of intertia

4867	.1c79	809c79					SinJumpTable														; this is the sin table the springs use to jump
4868	>1c79	809c79	fb fb fc fc fb fd		.char -5, -5, -4, -4, -5, -3
4869	>1c7f	809c7f	fc fd fe fd ff fe ff 00		.char -4, -3, -2, -3, -1, -2, -1, 0, -1, -1, 0
	>1c87	809c87	ff ff 00
4870	=17						kSinJumpFall = * - SinJumpTable								; this is the index the table flips from up to down
4871	>1c8a	809c8a	01 02 01 03 02 03 04		.char  1,  2,  1,  3,  2,  3,  4
4872	>1c91	809c91	03 05 04 05 06 05 06 06		.char  3,  5,  4,  5,  6,  5, 6,  6, 7, 8, 8
	>1c99	809c99	07 08 08
4873	=34						kSinJumpMax = * - SinJumpTable - 1

4875	.1c9c	809c9c					SpringFrameFrameTable											; this is the frame it should use for said index into the sin table
4876	>1c9c	809c9c	09 09 09 09 09			.byte kSprites.(springCompress,springCompress,springCompress,springCompress,springCompress)
4877	>1ca1	809ca1	0a 0a 0a 0a 08 08 0b 0b		.byte kSprites.(springExpand,springExpand,springExpand,springExpand,springNormal,springNormal,springFull,springFull,springFull,springFull,springFull)
	>1ca9	809ca9	0b 0b 0b
4878	>1cac	809cac	0c 0d 0e 0f 0e 0d 0c		.byte kSprites.(springFall,springFall,springFall,springFall,springFall,springFall,springFall)+(0,1,2,3,2,1,0)
4879	>1cb3	809cb3	0b 0b 0b 0b 0b 0b 0b 0b		.byte kSprites.(springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull,springFull)
	>1cbb	809cbb	0b 0b 0b
4880							.cerror (*-SpringFrameFrameTable) != kSinJumpMax, "under by " , kSinJumpMax-(*-SpringFrameFrameTable)

4882							; this is the table used by the circler to go in a circle
4883	.1cbe	809cbe					CircleJumpTableStart
4884	>1cbe	809cbe	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0,-1,-1,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5
	>1cc6	809cc6	02 02 01 01 00 ff ff fe fe fd fc fc fc fb fb fb
	>1cd6	809cd6	fb
4885	>1cd7	809cd7	fb fb fb fc fc fc fd fd		.char -5,-5,-5,-4,-4,-4,-3,-3,-2,-1,-1, 0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5
	>1cdf	809cdf	fe ff ff 00 01 01 02 03 03 04 04 04 05 05 05
4886	=48						CircleJumpTableCount = * - CircleJumpTableStart	; table ends here
4887	>1cee	809cee	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0		; duplicate to save wrapping the index on the phase shift
	>1cf6	809cf6	02 02 01 01 00
4888																							; the code would be smaller but since this is idential it compresses better than

4890							; given my current direction, and I hit something which way do I go next
4891							; i.e heli going up with index of 1 is to go 3 which is down while heli 3 returns 1
4892	.1cfb	809cfb					NextDirectionLUT
4893	>1cfb	809cfb	03 03 01 01			.byte 3,3,1,1 ; heli
4894	>1cff	809cff	00 00 00 00			.byte 0,0,0,0 ; spring
4895	>1d03	809d03	02 02 00 00			.byte 2,2,0,0 ; worm
4896	>1d07	809d07	02 02 00 00			.byte 2,2,0,0 ; bat
4897	>1d0b	809d0b	03 00 01 02			.byte 3,0,1,2 ; ghost
4898	>1d0f	809d0f	03 03 01 01			.byte 3,3,1,1 ; spider
4899	>1d13	809d13	00 00 00 00			.byte 0,0,0,0 ; fish - not used
4900	>1d17	809d17	00 00 00 00			.byte 0,0,0,0 ; flying thing - not used
4901	.1d1b	809d1b					BaseAnimeFrameForDir
4902							; 0 = right, 1 = up, 2 = left, 3 = down
4903	>1d1b	809d1b	00 00 00 00			.byte HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0],		HeliRawAnimData[0]		; heli
4904	>1d1f	809d1f	08 08 08 08			.byte SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0],	SpringRawAnimData[0]		; spring
4905	>1d23	809d23	14 14 10 10			.byte WormRawAnimData[1],		WormRawAnimData[1],		WormRawAnimData[0],		WormRawAnimData[0]		; worm
4906	>1d27	809d27	1c 1c 18 18			.byte BatRawAnimData[1],		BatRawAnimData[1],		BatRawAnimData[0],		BatRawAnimData[0]			; bat
4907	>1d2b	809d2b	20 24 20 24			.byte GhostRawAnimData[0],		GhostRawAnimData[1],		GhostRawAnimData[0],		GhostRawAnimData[1]		; ghost
4908	>1d2f	809d2f	28 28 28 28			.byte SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0],	SpiderRawAnimData[0]		; spider
4909	>1d33	809d33	30 30 34 34			.byte FishRawAnimData[0],		FishRawAnimData[0],		FishRawAnimData[1],		FishRawAnimData[1]		; fish
4910	>1d37	809d37	3c 3c 38 38			.byte CirclerRawAnimData[1],	CirclerRawAnimData[1],	CirclerRawAnimData[0],	CirclerRawAnimData[0]	; flying thing
4911	>1d3b	809d3b	00 00 00 00			.byte 0,0,0,0 ; bear
4912	>1d3f	809d3f	00 00 00 00			.byte 0,0,0,0 ; other bear
4913	>1d43	809d43	00 00 00 00			.byte 0,0,0,0 ; octopus
4914	>1d47	809d47	00 00 00 00			.byte 0,0,0,0 ; other octopus
4915	>1d4b	809d4b	54 54 54 54			.byte BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0],		BubbleAnimData[0]			; bubble


4918							; ----- @Collision system@ -----


4921							.as
4922							.xs
4923	.1d4f	809d4f					checkSpriteToCharCollision_88
4924	.1d4f	809d4f					_ASSERT_JSR
4925	.1d4f	809d4f					_ASSERT_axy8
4926	.1d4f	809d4f	ad 8a 02	lda $80028a		lda checkSpriteToCharData.yDeltaCheck
4927	.1d52	809d52	8d 8c 02	sta $80028c		sta checkSpriteToCharData.yDeltaBackup
4928	.1d55	809d55	ad 89 02	lda $800289		lda checkSpriteToCharData.xDeltaCheck
4929	.1d58	809d58	8d 8b 02	sta $80028b		sta checkSpriteToCharData.xDeltaBackup			; cache the deltas
4930	.1d5b	809d5b	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck			; check just Y first
4931	.1d5e	809d5e	64 1d		stz $1d			stz CollideSpriteToCheck
4932	.1d60	809d60	64 1e		stz $1e			stz CollideSpriteBoxIndex							; clear results
4933	.1d62	809d62	20 c3 9d	jsr $809dc3		jsr CSTCCY												; Check Sprite To Char Collision Y
4934	.1d65	809d65	a5 23		lda $23			lda CollideCharBLI									; get bottom left index
4935	.1d67	809d67	85 15		sta $15			sta ActiveTileIndex
4936	.1d69	809d69	a5 24		lda $24			lda CollideCharBLC									; and the actual tile
4937	.1d6b	809d6b	85 16		sta $16			sta ActiveTile
4938	.1d6d	809d6d	20 0d a0	jsr $80a00d		jsr checkOnDissTile									; do I stand on a diss tile?
4939	.1d70	809d70	a5 23		lda $23			lda CollideCharBLI
4940	.1d72	809d72	c5 25		cmp $25			cmp CollideCharBRI									; are both sides of me on the same tile
4941	.1d74	809d74	f0 0b		beq $809d81		beq _otherIsSame										; so we don't diss twice as fast sometimes
4942	.1d76	809d76	a5 25		lda $25				lda CollideCharBRI								; no check the right index as well
4943	.1d78	809d78	85 15		sta $15				sta ActiveTileIndex
4944	.1d7a	809d7a	a5 26		lda $26				lda CollideCharBRC
4945	.1d7c	809d7c	85 16		sta $16				sta ActiveTile
4946	.1d7e	809d7e	20 0d a0	jsr $80a00d			jsr checkOnDissTile
4947	.1d81	809d81					_otherIsSame
4948	.1d81	809d81	ad 8b 02	lda $80028b		lda checkSpriteToCharData.xDeltaBackup			; Y done, lets check the X
4949	.1d84	809d84	8d 89 02	sta $800289		sta checkSpriteToCharData.xDeltaCheck			; restore X
4950	.1d87	809d87	9c 8a 02	stz $80028a		stz checkSpriteToCharData.yDeltaCheck			; clear Y
4951	.1d8a	809d8a	20 2e 9e	jsr $809e2e		jsr CSTCCX												; Check Sprite To Char Collision X
4952	.1d8d	809d8d	ad 8c 02	lda $80028c		lda checkSpriteToCharData.yDeltaBackup			; restore Y
4953	.1d90	809d90	8d 8a 02	sta $80028a		sta checkSpriteToCharData.yDeltaCheck
4954	.1d93	809d93	a6 1f		ldx $1f			ldx CollideCharTLI
4955	.1d95	809d95	a5 20		lda $20			lda CollideCharTLC
4956	.1d97	809d97	20 5f a0	jsr $80a05f		jsr checkActionTile									; is the Top Left an action tile?
4957	.1d9a	809d9a	a5 21		lda $21			lda CollideCharTRI
4958	.1d9c	809d9c	c5 1f		cmp $1f			cmp CollideCharTLI									; is top right and top left the same tile?
4959	.1d9e	809d9e	f0 06		beq $809da6		beq _skipTR
4960	.1da0	809da0	aa		tax				tax
4961	.1da1	809da1	a5 22		lda $22				lda CollideCharTRC
4962	.1da3	809da3	20 5f a0	jsr $80a05f			jsr checkActionTile								; no check the right one as well
4963	.1da6	809da6					_skipTR
4964	.1da6	809da6	a5 23		lda $23			lda CollideCharBLI									; check bottom left if different
4965	.1da8	809da8	c5 1f		cmp $1f			cmp CollideCharTLI
4966	.1daa	809daa	f0 06		beq $809db2		beq _skipBL
4967	.1dac	809dac	aa		tax				tax
4968	.1dad	809dad	a5 24		lda $24				lda CollideCharBLC
4969	.1daf	809daf	20 5f a0	jsr $80a05f			jsr checkActionTile
4970	.1db2	809db2					_skipBL
4971	.1db2	809db2	a5 25		lda $25			lda CollideCharBRI
4972	.1db4	809db4	c5 21		cmp $21			cmp CollideCharTRI									; check bottom right if different
4973	.1db6	809db6	f0 0a		beq $809dc2		beq _skipBR
4974	.1db8	809db8	c5 23		cmp $23				cmp CollideCharBLI
4975	.1dba	809dba	f0 06		beq $809dc2			beq _skipBR
4976	.1dbc	809dbc	aa		tax					tax
4977	.1dbd	809dbd	a5 26		lda $26					lda CollideCharBRC
4978	.1dbf	809dbf	20 5f a0	jsr $80a05f				jsr checkActionTile
4979	.1dc2	809dc2					_skipBR
4980	.1dc2	809dc2	60		rts			rts

4982							.as
4983							.xs
4984	.1dc3	809dc3					CSTCCY															; Check Sprite To Char Collision Y
4985	.1dc3	809dc3					_ASSERT_jsr
4986	.1dc3	809dc3					_ASSERT_axy8
4987	.1dc3	809dc3	a2 00		ldx #$00		ldx #0
4988	.1dc5	809dc5	86 0f		stx $0f			stx ZPTemp													; clear the 4 tile solid flags
4989	.1dc7	809dc7	86 10		stx $10			stx ZPTemp2
4990	.1dc9	809dc9	86 11		stx $11			stx ZPTemp3
4991	.1dcb	809dcb	86 12		stx $12			stx ZPTemp4
4992	.1dcd	809dcd	a0 00		ldy #$00		ldy #0
4993	.1dcf	809dcf	20 34 9f	jsr $809f34		jsr newCollision											; perform collsion
4994	.1dd2	809dd2	a5 20		lda $20			lda CollideCharTLC
4995	.1dd4	809dd4	20 e8 9f	jsr $809fe8		jsr checkSolidTile
4996	.1dd7	809dd7	26 0f		rol $0f			rol ZPTemp													; roll the C into variable
4997	.1dd9	809dd9	a5 22		lda $22			lda CollideCharTRC
4998	.1ddb	809ddb	20 e8 9f	jsr $809fe8		jsr checkSolidTile										; C = 0 clear, C = 1 solid
4999	.1dde	809dde	26 10		rol $10			rol ZPTemp2
5000	.1de0	809de0	a5 24		lda $24			lda CollideCharBLC
5001	.1de2	809de2	20 e8 9f	jsr $809fe8		jsr checkSolidTile
5002	.1de5	809de5	26 11		rol $11			rol ZPTemp3
5003	.1de7	809de7	a5 26		lda $26			lda CollideCharBRC
5004	.1de9	809de9	20 e8 9f	jsr $809fe8		jsr checkSolidTile
5005	.1dec	809dec	26 12		rol $12			rol ZPTemp4													; for all 4
5006	.1dee	809dee	ad 8a 02	lda $80028a		lda checkSpriteToCharData.yDeltaCheck
5007	.1df1	809df1	10 25		bpl $809e18		bpl _checkDown
5008									; check up
5009	.1df3	809df3	a5 0f		lda $0f				lda ZPTemp
5010	.1df5	809df5	05 10		ora $10				ora ZPTemp2												; if top left or top right
5011	.1df7	809df7	f0 34		beq $809e2d			beq _exit												; if nothing solid 0
5012										; abort jump
5013	.1df9	809df9	ad b0 00	lda $8000b0				lda PlayerData.hitBubbleNum					; unless I hit a bubble
5014	.1dfc	809dfc	f0 04		beq $809e02				beq _startFall										; at which point just start falling
5015	.1dfe	809dfe	9c 8c 02	stz $80028c					stz checkSpriteToCharData.yDeltaBackup	; clear the Y delta in this case
5016	.1e01	809e01	60		rts						rts
5017											;
5018	.1e02	809e02						_startFall
5019	.1e02	809e02	a9 01		lda #$01			lda #1
5020	.1e04	809e04	8d ab 00	sta $8000ab			sta PlayerData.isFallingNZ							; set falling
5021	.1e07	809e07	1a		inc a				inc a ;  #2
5022	.1e08	809e08	8d b2 00	sta $8000b2			sta PlayerData.yDeltaAccum.lo						; set delta to 2.0078125 aka 2
5023	.1e0b	809e0b	8d b3 00	sta $8000b3			sta PlayerData.yDeltaAccum.hi
5024	.1e0e	809e0e	60		rts				rts
5025									;
5026	.1e0f	809e0f						_onGround
5027	.1e0f	809e0f	9c 8c 02	stz $80028c			stz checkSpriteToCharData.yDeltaBackup			; can't fall anymore
5028	.1e12	809e12	9c 8a 02	stz $80028a			stz checkSpriteToCharData.yDeltaCheck
5029	.1e15	809e15	4c 80 90	jmp $809080			jmp enterOnGround
5030									;
5031	.1e18	809e18					_checkDown
5032	.1e18	809e18	ad b0 00	lda $8000b0		lda PlayerData.hitBubbleNum							; is it a bubble
5033	.1e1b	809e1b	d0 10		bne $809e2d		bne _exit
5034	.1e1d	809e1d	a5 11		lda $11				lda ZPTemp3												; no
5035	.1e1f	809e1f	05 12		ora $12				ora ZPTemp4												; check bottom two
5036	.1e21	809e21	d0 ec		bne $809e0f			bne _onGround											; if solid stand on ground
5037	.1e23	809e23	ae a9 00	ldx $8000a9				ldx PlayerData.OnGroundNZ
5038	.1e26	809e26	9c a9 00	stz $8000a9				stz PlayerData.OnGroundNZ						; if we were on the ground, i.e just walked off the ledge
5039	.1e29	809e29	e0 00		cpx #$00				cpx #0
5040	.1e2b	809e2b	d0 d5		bne $809e02				bne _startFall										; we need to start falling
5041	.1e2d	809e2d					_exit
5042	.1e2d	809e2d	60		rts			rts

5044							.as
5045							.xs
5046	.1e2e	809e2e					CSTCCX													; Check Sprite To Char Collision X
5047	.1e2e	809e2e					_ASSERT_jsr
5048	.1e2e	809e2e					_ASSERT_axy8
5049	.1e2e	809e2e	a2 00		ldx #$00		ldx #0
5050	.1e30	809e30	86 0f		stx $0f			stx ZPTemp
5051	.1e32	809e32	86 10		stx $10			stx ZPTemp2
5052	.1e34	809e34	86 11		stx $11			stx ZPTemp3
5053	.1e36	809e36	86 12		stx $12			stx ZPTemp4											; clear the solid char flags
5054	.1e38	809e38	a0 00		ldy #$00		ldy #0
5055	.1e3a	809e3a	20 34 9f	jsr $809f34		jsr newCollision									; do collision
5056	.1e3d	809e3d	a5 20		lda $20			lda CollideCharTLC								; check if each point is solid and store in ZP Temps
5057	.1e3f	809e3f	20 e8 9f	jsr $809fe8		jsr checkSolidTile								; C = 0 not solid, C = 1 solid
5058	.1e42	809e42	26 0f		rol $0f			rol ZPTemp
5059	.1e44	809e44	a5 22		lda $22			lda CollideCharTRC
5060	.1e46	809e46	20 e8 9f	jsr $809fe8		jsr checkSolidTile
5061	.1e49	809e49	26 10		rol $10			rol ZPTemp2
5062	.1e4b	809e4b	a5 24		lda $24			lda CollideCharBLC
5063	.1e4d	809e4d	20 e8 9f	jsr $809fe8		jsr checkSolidTile
5064	.1e50	809e50	26 11		rol $11			rol ZPTemp3
5065	.1e52	809e52	a5 26		lda $26			lda CollideCharBRC
5066	.1e54	809e54	20 e8 9f	jsr $809fe8		jsr checkSolidTile
5067	.1e57	809e57	26 12		rol $12			rol ZPTemp4
5068	.1e59	809e59	ad 89 02	lda $800289		lda checkSpriteToCharData.xDeltaCheck		; do I actually want to move sidways?
5069	.1e5c	809e5c	f0 12		beq $809e70		beq _exit
5070	.1e5e	809e5e	10 0a		bpl $809e6a		bpl _checkRight
5071									; left
5072	.1e60	809e60	a5 0f		lda $0f				lda ZPtemp
5073	.1e62	809e62	05 11		ora $11				ora ZPtemp3										; the top left or bottom left solid?
5074	.1e64	809e64	f0 0a		beq $809e70			beq _exit										; no exit
5075	.1e66	809e66					_noX
5076	.1e66	809e66	9c 89 02	stz $800289		stz checkSpriteToCharData.xDeltaCheck		; clear X movement
5077	.1e69	809e69	60		rts			rts
5078								;
5079	.1e6a	809e6a					_checkRight
5080	.1e6a	809e6a	a5 10		lda $10			lda ZPtemp2
5081	.1e6c	809e6c	05 12		ora $12			ora ZPtemp4											; the top right and bottom right solid?
5082	.1e6e	809e6e	d0 f6		bne $809e66		bne _noX
5083	.1e70	809e70					_exit
5084	.1e70	809e70	60		rts			rts

5086							; these are the collision boxes for the sprites, each animation indexes into this table
5087	>1e71	809e71	02 02 02 04 00 e8 0c 04		CollisionBoxesX .char 02,02,02,04,00,-24,12,04
5088	>1e79	809e79	0d 0d 0d 10 30 30 01 10		CollisionBoxesW .char 13,13,13,16,48, 48,01,16
5089	>1e81	809e81	02 02 00 04 00 0c 0c 01		CollisionBoxesY .char 02,02,00,04,00, 12,12,01
5090	>1e89	809e89	0c 10 14 10 0c 1e 01 08		CollisionBoxesH .char 12,16,20,16,12, 30,01,08

5092							.as
5093							.xs
5094	.1e91	809e91					collideBulletAgainstRest
5095	.1e91	809e91					_ASSERT_jsr
5096	.1e91	809e91					_ASSERT_axy8
5097	.1e91	809e91	a0 03		ldy #$03		ldy #3								; bullet uses 4th collision box
5098	.1e93	809e93	a2 01		ldx #$01		ldx #1								; and is sprite 1
5099	.1e95	809e95	80 04		bra $809e9b		bra collideAgainstRestEntry
5100								;
5101	.1e97	809e97					collidePlayerAgainstRest
5102	.1e97	809e97					_ASSERT_jsr
5103	.1e97	809e97					_ASSERT_axy8
5104	.1e97	809e97	a2 00		ldx #$00		ldx #0								; player uses 1st collision box
5105	.1e99	809e99	a0 00		ldy #$00		ldy #0								; and is sprite 0
5106	.1e9b	809e9b					collideAgainstRestEntry
5107	.1e9b	809e9b	bd bf 03	lda $8003bf,x		lda mplexBuffer.ypos,x
5108	.1e9e	809e9e	18		clc			clc
5109	.1e9f	809e9f	79 81 9e	adc $809e81,y		adc CollisionBoxesY,y
5110	.1ea2	809ea2	85 0a		sta $0a			sta Pointer3.lo					; Pointer3.lo = testingSprite.y+CollisionBoxY
5111	.1ea4	809ea4	85 19		sta $19			sta TestingSprY1
5112	.1ea6	809ea6	18		clc			clc
5113	.1ea7	809ea7	79 89 9e	adc $809e89,y		adc CollisionBoxesH,y			; += CollisionBoxHeight
5114	.1eaa	809eaa	85 0b		sta $0b			sta Pointer3.hi
5115	.1eac	809eac	85 1a		sta $1a			sta TestingSprY2
5116	.1eae	809eae	bd 7f 03	lda $80037f,x		lda mplexBuffer.xpos,x
5117	.1eb1	809eb1	18		clc			clc
5118	.1eb2	809eb2	79 71 9e	adc $809e71,y		adc CollisionBoxesX,y
5119	.1eb5	809eb5	85 17		sta $17			sta TestingSprX1					; = testingSprite.x+CollisionBoxX
5120	.1eb7	809eb7	18		clc			clc
5121	.1eb8	809eb8	79 79 9e	adc $809e79,y		adc CollisionBoxesW,y			; += CollisionBoxWidth
5122	.1ebb	809ebb	85 18		sta $18			sta TestingSprX2
5123	.1ebd	809ebd	a9 ff		lda #$ff		lda #$FF
5124	.1ebf	809ebf	85 02		sta $02			sta CurrentEntity 				; so we don't skip any
5125	.1ec1	809ec1	80 28		bra $809eeb		bra collideAgainstEntPlayerEntry
5126								;
5127	.1ec3	809ec3					collideEntAgainstRest
5128	.1ec3	809ec3					_ASSERT_jsr
5129	.1ec3	809ec3					_ASSERT_axy8
5130								; start at the mplex y + 1 and check to see if the Y is in Range
5131								; to do this we need to know which collsiion box the ent we are is using
5132								; and the one that the other is using
5133								; a hit is if my x1 <= y2 && y1 <= x2
5134								; where x1 = my Ent Y, x2 = my Ent Y+Height
5135								; y1 = Other Ent Y, y2 = other Ent Y+Height
5136	.1ec3	809ec3	a6 02		ldx $02			ldx CurrentEntity
5137	.1ec5	809ec5	a0 00		ldy #$00		ldy #0
5138	.1ec7	809ec7	bd ae 01	lda $8001ae,x		lda EntityData.collisionX1,x
5139	.1eca	809eca	18		clc			clc
5140	.1ecb	809ecb	6d 89 02	adc $800289		adc checkSpriteToCharData.xDeltaCheck	; move the ent sprite off by the movement deltas
5141	.1ece	809ece	85 17		sta $17			sta TestingSprX1
5142	.1ed0	809ed0	bd c7 01	lda $8001c7,x		lda EntityData.collisionX2,x				; as their collision X1/2 Y1/2 are pre caculated
5143	.1ed3	809ed3	18		clc			clc
5144	.1ed4	809ed4	6d 89 02	adc $800289		adc checkSpriteToCharData.xDeltaCheck
5145	.1ed7	809ed7	85 18		sta $18			sta TestingSprX2
5146	.1ed9	809ed9	bd e0 01	lda $8001e0,x		lda EntityData.collisionY1,x
5147	.1edc	809edc	18		clc			clc
5148	.1edd	809edd	6d 8a 02	adc $80028a		adc checkSpriteToCharData.yDeltaCheck
5149	.1ee0	809ee0	85 19		sta $19			sta TestingSprY1
5150	.1ee2	809ee2	bd f9 01	lda $8001f9,x		lda EntityData.collisionY2,x
5151	.1ee5	809ee5	18		clc			clc
5152	.1ee6	809ee6	6d 8a 02	adc $80028a		adc checkSpriteToCharData.yDeltaCheck
5153	.1ee9	809ee9	85 1a		sta $1a			sta TestingSprY2
5154	.1eeb	809eeb					collideAgainstEntPlayerEntry
5155	.1eeb	809eeb					_ASSERT_axy8
5156	.1eeb	809eeb	a0 02		ldy #$02		ldy #2 ; other slot
5157	.1eed	809eed	a2 00		ldx #$00		ldx #0
5158	.1eef	809eef	e4 02		cpx $02		-	cpx CurrentEntity
5159	.1ef1	809ef1	f0 1f		beq $809f12		beq Ent_Ent_Coll_skipSelf				; don't collide against one self
5160	.1ef3	809ef3	bd ff 00	lda $8000ff,x			lda EntityData.active,x
5161	.1ef6	809ef6	f0 1a		beq $809f12			beq Ent_Ent_Coll_skipSelf			; don't collide against in-active or "dead" entities
5162	.1ef8	809ef8	30 18		bmi $809f12			bmi Ent_Ent_Coll_skipSelf			; if there active is 0 or - don't collide
5163	.1efa	809efa	64 0f		stz $0f					stz ZPTemp
5164	.1efc	809efc	a5 19		lda $19					lda TestingSprY1
5165	.1efe	809efe	dd f9 01	cmp $8001f9,x				cmp EntityData.collisionY2,x	; test my Y1 against their Y2
5166	.1f01	809f01	20 de 9f	jsr $809fde				jsr doMinMaxBitTest
5167	.1f04	809f04	bd e0 01	lda $8001e0,x				lda EntityData.collisionY1,x	; and thier Y1 against my Y2
5168	.1f07	809f07	c5 1a		cmp $1a					cmp TestingSprY2
5169	.1f09	809f09	20 de 9f	jsr $809fde				jsr doMinMaxBitTest
5170	.1f0c	809f0c	a5 0f		lda $0f					lda ZPTemp							; if my.Y1 < their.Y2 && their.Y1 < my.Y2 we collide
5171	.1f0e	809f0e	29 03		and #$03				and #3								; both tests pass
5172	.1f10	809f10	f0 08		beq $809f1a				beq hitY								; then are Y are in range
5173	.1f12	809f12					Ent_Ent_Coll_skipSelf
5174	.1f12	809f12	e8		inx			inx
5175	.1f13	809f13	ec cc 00	cpx $8000cc		cpx EntityData.number
5176	.1f16	809f16	d0 d7		bne $809eef		bne -
5177	.1f18	809f18	18		clc			clc
5178	.1f19	809f19	60		rts			rts

5180							.as
5181							.xs
5182	.1f1a	809f1a					hitY 												; now we need to do the same thing but for the X
5183	.1f1a	809f1a					_ASSERT_axy8
5184	.1f1a	809f1a	64 0f		stz $0f			stz ZPTemp									; clear the flags
5185	.1f1c	809f1c	a5 17		lda $17			lda TestingSprX1
5186	.1f1e	809f1e	dd c7 01	cmp $8001c7,x		cmp EntityData.collisionX2,x			; my X1 vs their X2
5187	.1f21	809f21	20 de 9f	jsr $809fde		jsr doMinMaxBitTest
5188	.1f24	809f24	bd ae 01	lda $8001ae,x		lda EntityData.collisionX1,x			; their X1 vs my X2
5189	.1f27	809f27	c5 18		cmp $18			cmp TestingSprX2
5190	.1f29	809f29	20 de 9f	jsr $809fde		jsr doMinMaxBitTest
5191	.1f2c	809f2c	a5 0f		lda $0f			lda ZPTemp									; if my.X1 < their.X2 && their.X1 < my.X2 we collide
5192	.1f2e	809f2e	29 03		and #$03		and #3
5193	.1f30	809f30	d0 e0		bne $809f12		bne Ent_Ent_Coll_skipSelf
5194	.1f32	809f32					hitX
5195	.1f32	809f32	38		sec			sec
5196	.1f33	809f33	60		rts			rts

5198							.as
5199							.xs
5200	.1f34	809f34					newCollision									; there was an original but its all gone now
5201	.1f34	809f34					_ASSERT_jsr
5202	.1f34	809f34					_ASSERT_axy8
5203	.1f34	809f34	a6 1d		ldx $1d			ldx CollideSpriteToCheck
5204	.1f36	809f36	a4 1e		ldy $1e			ldy CollideSpriteBoxIndex				; get the ent and the collision box
5205								; calc the final Xs
5206	.1f38	809f38	bd 7f 03	lda $80037f,x		lda mplexBuffer.xpos,x
5207	.1f3b	809f3b	18		clc			clc
5208	.1f3c	809f3c	79 71 9e	adc $809e71,y		adc CollisionBoxesX,y
5209	.1f3f	809f3f	6d 89 02	adc $800289		adc checkSpriteToCharData.xDeltaCheck
5210	.1f42	809f42	85 27		sta $27			sta CollideInternalSprTLX				; TLX = X + collisionBoxX + XDelta
5211	.1f44	809f44	18		clc			clc
5212	.1f45	809f45	79 79 9e	adc $809e79,y		adc CollisionBoxesW,y					; BRX = X + collisionBoxX + XDelta + collisionBoxWidth
5213	.1f48	809f48	85 28		sta $28			sta CollideInternalSprBRX
5214								; calc the final Ys
5215	.1f4a	809f4a	bd bf 03	lda $8003bf,x		lda mplexBuffer.ypos,x
5216	.1f4d	809f4d	18		clc			clc
5217	.1f4e	809f4e	79 81 9e	adc $809e81,y		adc CollisionBoxesY,y
5218	.1f51	809f51	6d 8a 02	adc $80028a		adc checkSpriteToCharData.yDeltaCheck
5219	.1f54	809f54	20 85 85	jsr $808585		jsr ClipY									; we need to clip it because odd things happen in the exlucsion zone
5220	.1f57	809f57	85 29		sta $29			sta CollideInternalSprTLY				; TLY = clip(Y + CollisionBoxY + YDelta)
5221	.1f59	809f59	18		clc			clc
5222	.1f5a	809f5a	79 89 9e	adc $809e89,y		adc CollisionBoxesH,y
5223	.1f5d	809f5d	20 85 85	jsr $808585		jsr ClipY
5224	.1f60	809f60	85 2a		sta $2a			sta CollideInternalSprBRY				; TLY = clip(Y + CollisionBoxY + YDelta + collisionBoxHeight)
5225								; calc the tile index
5226	.1f62	809f62	a2 01		ldx #$01		ldx #1
5227	.1f64	809f64	b5 27		lda $27,x	-	lda CollideInternalSprTLX,x			; sprite Test Left X and Right X
5228	.1f66	809f66	4a		lsr a			lsr a
5229	.1f67	809f67	4a		lsr a			lsr a
5230	.1f68	809f68	4a		lsr a			lsr a
5231	.1f69	809f69	4a		lsr a			lsr a											; /16
5232	.1f6a	809f6a	95 2b		sta $2b,x		sta CollideInternalTTLX,x				; Tile Test Left X and Right X
5233	.1f6c	809f6c	ca		dex			dex
5234	.1f6d	809f6d	10 f5		bpl $809f64		bpl -
5235	.1f6f	809f6f	a5 2b		lda $2b			lda CollideInternalTTLX
5236	.1f71	809f71	c5 2c		cmp $2c			cmp CollideInternalTBRX 				; make sure right has not wrapped and is not < left
5237	.1f73	809f73	90 02		bcc $809f77		bcc +
5238	.1f75	809f75	85 2c		sta $2c				sta CollideInternalTBRX				; clamp the Right to be the same as the left if it has wrapped.
5239	.1f77	809f77					+													; this stop being able to pick up things on the left of the map from the right
5240	.1f77	809f77	a5 29		lda $29			lda CollideInternalSprTLY
5241	.1f79	809f79	29 f0		and #$f0		and #$f0
5242	.1f7b	809f7b	85 2d		sta $2d			sta CollideInternalTTLY					; convert SpriteY to Tile Y which is /16*16 or mask upper 4 bits
5243	.1f7d	809f7d	a5 2a		lda $2a			lda CollideInternalSprBRY
5244	.1f7f	809f7f	29 f0		and #$f0		and #$f0
5245	.1f81	809f81	85 2e		sta $2e			sta CollideInternalTBRY					; same with the bottom
5246								; convert the tile X,Y into a the index and pull Char
5247	.1f83	809f83	a5 2d		lda $2d			lda CollideInternalTTLY
5248	.1f85	809f85	05 2b		ora $2b			ora CollideInternalTTLX
5249	.1f87	809f87	85 1f		sta $1f			sta CollideCharTLI						; calc index
5250	.1f89	809f89	aa		tax			tax
5251	.1f8a	809f8a	bd 8f 02	lda $80028f,x		lda tileMapTemp,x							; read tile from map
5252	.1f8d	809f8d	85 20		sta $20			sta CollideCharTLC

5254	.1f8f	809f8f	a5 2d		lda $2d			lda CollideInternalTTLY					; do for all 4 points
5255	.1f91	809f91	05 2c		ora $2c			ora CollideInternalTBRX
5256	.1f93	809f93	85 21		sta $21			sta CollideCharTRI
5257	.1f95	809f95	aa		tax			tax
5258	.1f96	809f96	bd 8f 02	lda $80028f,x		lda tileMapTemp,x
5259	.1f99	809f99	85 22		sta $22			sta CollideCharTRC

5261	.1f9b	809f9b	a5 2e		lda $2e			lda CollideInternalTBRY
5262	.1f9d	809f9d	05 2b		ora $2b			ora CollideInternalTTLX
5263	.1f9f	809f9f	85 23		sta $23			sta CollideCharBLI
5264	.1fa1	809fa1	aa		tax			tax
5265	.1fa2	809fa2	bd 8f 02	lda $80028f,x		lda tileMapTemp,x
5266	.1fa5	809fa5	85 24		sta $24			sta CollideCharBLC

5268	.1fa7	809fa7	a5 2e		lda $2e			lda CollideInternalTBRY
5269	.1fa9	809fa9	05 2c		ora $2c			ora CollideInternalTBRX
5270	.1fab	809fab	85 25		sta $25			sta CollideCharBRI
5271	.1fad	809fad	aa		tax			tax
5272	.1fae	809fae	bd 8f 02	lda $80028f,x		lda tileMapTemp,x
5273	.1fb1	809fb1	85 26		sta $26			sta CollideCharBRC
5274	.1fb3	809fb3	60		rts			rts

5276	.1fb4	809fb4					makeMinMaxXYForX
5277	.1fb4	809fb4					_ASSERT_jsr
5278	.1fb4	809fb4					_ASSERT_axy8
5279	.1fb4	809fb4	bc cd 00	ldy $8000cd,x		ldy EntityData.type,x								; get the type
5280	.1fb7	809fb7	b9 63 9c	lda $809c63,y		lda EntityAnimData.collisionBox,y				; get the collision box we want to use
5281	.1fba	809fba	a8		tay			tay
5282	.1fbb	809fbb	bd 81 03	lda $800381,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x		; get the ents X position
5283	.1fbe	809fbe	18		clc			clc
5284	.1fbf	809fbf	79 71 9e	adc $809e71,y		adc CollisionBoxesX,y								; offset by Box X
5285	.1fc2	809fc2	9d ae 01	sta $8001ae,x		sta EntityData.collisionX1,x						; store it
5286	.1fc5	809fc5	18		clc			clc
5287	.1fc6	809fc6	79 79 9e	adc $809e79,y		adc CollisionBoxesW,y								; add the width
5288	.1fc9	809fc9	9d c7 01	sta $8001c7,x		sta EntityData.collisionX2,x						; store it
5289	.1fcc	809fcc	bd c1 03	lda $8003c1,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x		; get the Y
5290	.1fcf	809fcf	18		clc			clc
5291	.1fd0	809fd0	79 81 9e	adc $809e81,y		adc CollisionBoxesY,y								; offset by the Box Y
5292	.1fd3	809fd3	9d e0 01	sta $8001e0,x		sta EntityData.collisionY1,x						; store it
5293	.1fd6	809fd6	18		clc			clc
5294	.1fd7	809fd7	79 89 9e	adc $809e89,y		adc CollisionBoxesH,y								; add the height
5295	.1fda	809fda	9d f9 01	sta $8001f9,x		sta EntityData.collisionY2,x						; store it
5296	.1fdd	809fdd	60		rts			rts

5298	.1fde	809fde					doMinMaxBitTest
5299	.1fde	809fde					_ASSERT_jsr
5300	.1fde	809fde					_ASSERT_axy8
5301	.1fde	809fde	f0 04		beq $809fe4		beq _secPass
5302	.1fe0	809fe0	90 02		bcc $809fe4		bcc _secPass					; <= Pass
5303	.1fe2	809fe2	b0 01		bcs $809fe5			bcs _secFail				; C = 1 and return fall
5304	.1fe4	809fe4					_secPass
5305	.1fe4	809fe4	18		clc			clc								; needed as BEQ will have C = 1
5306	.1fe5	809fe5					_secFail
5307	.1fe5	809fe5	26 0f		rol $0f			rol ZPTemp						; record bit
5308	.1fe7	809fe7	60		rts			rts

5310							.as
5311							.xs
5312							; carry set = not safe, clear = safe
5313	.1fe8	809fe8					checkSolidTile
5314	.1fe8	809fe8					_ASSERT_jsr
5315	.1fe8	809fe8					_ASSERT_axy8
5316	.1fe8	809fe8	ae 96 00	ldx $800096		ldx GameData.exitOpenNZ				; closed doors are solid, open ones are not
5317	.1feb	809feb	d0 04		bne $809ff1		bne _skipDoorCheck
5318	.1fed	809fed	c9 11		cmp #$11			cmp #kTiles.exit
5319	.1fef	809fef	f0 14		beq $80a005			beq _notSafe
5320	.1ff1	809ff1					_skipDoorCheck
5321	.1ff1	809ff1	c9 13		cmp #$13		cmp #kTiles.pipe						; is it a pipe?
5322	.1ff3	809ff3	f0 10		beq $80a005		beq _notSafe
5323	.1ff5	809ff5	c9 21		cmp #$21			cmp #kTiles.dissNoColide		; an empty dissolve char?
5324	.1ff7	809ff7	f0 12		beq $80a00b			beq _exitSafe
5325	.1ff9	809ff9	c9 14		cmp #$14			cmp #kTiles.diss
5326	.1ffb	809ffb	b0 0a		bcs $80a007				bcs _checkNotShadow			; > diss solid?
5327	.1ffd	809ffd	c9 01		cmp #$01					cmp #kTiles.wall
5328	.1fff	809fff	90 0a		bcc $80a00b					bcc _exitSafe				; < wall ?
5329	.2001	80a001	c9 06		cmp #$06						cmp #kTiles.spike		; >= spike?
5330	.2003	80a003	b0 06		bcs $80a00b						bcs _exitSafe
5331	.2005	80a005					_notsafe
5332	.2005	80a005	38		sec			sec
5333	.2006	80a006	60		rts			rts
5334								;
5335	.2007	80a007					_checkNotShadow
5336	.2007	80a007	c9 21		cmp #$21		cmp #kTiles.dissNoColide
5337	.2009	80a009	90 fa		bcc $80a005		bcc _notsafe
5338	.200b	80a00b					_exitSafe
5339	.200b	80a00b	18		clc				clc
5340	.200c	80a00c	60		rts				rts
5341									;


5344							.as
5345							.xs
5346	.200d	80a00d					checkOnDissTile
5347	.200d	80a00d					_ASSERT_jsr
5348	.200d	80a00d					_ASSERT_axy8
5349	.200d	80a00d	ad a9 00	lda $8000a9		lda PlayerData.OnGroundNZ						; can't be on it if I'm not on the ground
5350	.2010	80a010	d0 01		bne $80a013		bne _c
5351	.2012	80a012					_exit
5352	.2012	80a012	60		rts				rts
5353									;
5354	.2013	80a013					_c	; get the tile below the player
5355	.2013	80a013	ad be 00	lda $8000be		lda TickDowns.dissBlocks						; is it time to dissolve some more?
5356	.2016	80a016	d0 fa		bne $80a012		bne _exit
5357	.2018	80a018	a5 16		lda $16				lda ActiveTile
5358	.201a	80a01a	c9 14		cmp #$14			cmp #kTiles.diss								; is the active tile < diss?
5359	.201c	80a01c	90 f4		bcc $80a012			bcc _exit
5360	.201e	80a01e	c9 21		cmp #$21				cmp #kTiles.dissNoColide				; >- diss noColide
5361	.2020	80a020	b0 f0		bcs $80a012				bcs _exit
5362	.2022	80a022	a9 08		lda #$08					lda #kTimers.dissBlocksValue		; no, then we are on a diss tile
5363	.2024	80a024	8d be 00	sta $8000be					sta TickDowns.dissBlocks			; reset the count down
5364	.2027	80a027	a6 15		ldx $15						ldx ActiveTileIndex					; get the index
5365	.2029	80a029	fe 8f 02	inc $80028f,x					inc tileMapTemp,x						; disolve it 1 bit more
5366	.202c	80a02c	bd 8f 02	lda $80028f,x					lda tileMapTemp,x
5367	.202f	80a02f	c9 20		cmp #$20					cmp #kTiles.dissNoColide-1			; until done
5368	.2031	80a031	08		php						php										; save compare
5369	.2032	80a032	20 d4 8c	jsr $808cd4						jsr pltSingleTile					; update the tile in question on the screen mirror
5370	.2035	80a035	28		plp						plp										; restore compare
5371	.2036	80a036	d0 da		bne $80a012					bne _exit								; not final tile, exit
5372	.2038	80a038					CheckForShadowPlots
5373	.2038	80a038					_ASSERT_axy8
5374	.2038	80a038	a2 01		ldx #$01		ldx #1
5375	.203a	80a03a	20 44 a0	jsr $80a044		jsr _checkRemoveTile								; when one removes a tile, one must check to the right
5376	.203d	80a03d	a2 10		ldx #$10		ldx #16
5377	.203f	80a03f	20 44 a0	jsr $80a044		jsr _checkRemoveTile								; below it
5378	.2042	80a042	a2 11		ldx #$11		ldx #17
5379	.2044	80a044					_checkRemoveTile										; and bellow to the right for new shadow pieces
5380	.2044	80a044	86 0f		stx $0f			stx ZPTemp											; store the offset we want
5381	.2046	80a046	a5 15		lda $15			lda ActiveTileIndex								; get the main tile
5382	.2048	80a048	48		pha			pha													; save it
5383	.2049	80a049	18		clc				clc
5384	.204a	80a04a	65 0f		adc $0f				adc ZPTemp										; offset it
5385	.204c	80a04c	c9 c0		cmp #$c0			cmp #kLevelSizeMax							; still on the map?
5386	.204e	80a04e	b0 0b		bcs $80a05b			bcs _exit2
5387	.2050	80a050	85 15		sta $15					sta ActiveTileIndex						; make it the active for now
5388	.2052	80a052	a8		tay					tay
5389	.2053	80a053	20 35 8c	jsr $808c35				jsr tileIsSafeToChange_88				; is it something we need to add shadow to?
5390	.2056	80a056	90 03		bcc $80a05b				bcc _exit2
5391	.2058	80a058	20 c5 8c	jsr $808cc5					jsr clearTile							; "clear" it
5392	.205b	80a05b					_exit2
5393	.205b	80a05b	68		pla			pla													; restore the actual active tile
5394	.205c	80a05c	85 15		sta $15			sta ActiveTileIndex
5395	.205e	80a05e	60		rts			rts

5397							.as
5398							.xs
5399	.205f	80a05f					checkActionTile
5400	.205f	80a05f					_ASSERT_jsr
5401	.205f	80a05f					_ASSERT_axy8
5402	.205f	80a05f	85 16		sta $16			sta ActiveTile										; for later
5403	.2061	80a061	86 15		stx $15			stx ActiveTileIndex								; for later
5404	.2063	80a063	a0 00		ldy #$00		ldy #0
5405	.2065	80a065	d9 76 a0	cmp $80a076,y	-	cmp TileFuncLookup,y								; does this tile have a function to handle it?
5406	.2068	80a068	f0 06		beq $80a070		beq _found
5407	.206a	80a06a	c8		iny				iny
5408	.206b	80a06b	c0 0c		cpy #$0c			cpy # size(TileFuncLookup)
5409	.206d	80a06d	d0 f6		bne $80a065			bne -
5410	.206f	80a06f	60		rts				rts												; no, no action then
5411									;
5412	.2070	80a070					_found
5413	.2070	80a070					_ASSERT_Y_LT_12
5414	.2070	80a070	98		tya			tya
5415	.2071	80a071	0a		asl a			asl a													; dispatch the function then
5416	.2072	80a072	aa		tax			tax
5417	.2073	80a073	7c 82 a0	jmp ($80a082,x)		jmp (TileFuncLUT,x)


5420	>2076	80a076	08 07 09 0a 0b 0c 06 0e		TileFuncLookup .byte kTiles.fruit,kTiles.flower,kTiles.key1,kTiles.key2,kTiles.key3,kTiles.key4,kTiles.spike,kTiles.spring,kTiles.potion,kTiles.shield,kTiles.exit,kTiles.egg
	>207e	80a07e	0f 0d 11 10
5421	>2082	80a082	9a a0 a3 a0 be a0 be a0		TileFuncLUT .word <>(fruitFunc, flowerFunc, keyFunc, keyFunc, keyFunc, keyFunc, spikeFunc, springFunc, potionFunc, shildFunction, exitFunc, eggFunc)
	>208a	80a08a	be a0 be a0 e4 a0 ea a0 f3 a0 12 a1 3c a1 52 a1

5423							.as
5424							.xs
5425	.209a	80a09a					fruitFunc
5426	.209a	80a09a					_ASSERT_jsr
5427	.209a	80a09a					_ASSERT_axy8
5428	.209a	80a09a	20 c5 8c	jsr $808cc5		jsr clearTile					; fruit, remove it
5429	.209d	80a09d	a9 00		lda #$00		lda #kScoreIndex.Fruit		; give some points
5430	.209f	80a09f	20 94 85	jsr $808594		jsr giveScore
5431								;ldx #kSFX.collect
5432								;jmp playSFX
5433	.20a2	80a0a2	60		rts			rts

5435							.as
5436							.xs
5437	.20a3	80a0a3					flowerFunc
5438	.20a3	80a0a3					_ASSERT_jsr
5439	.20a3	80a0a3					_ASSERT_axy8
5440	.20a3	80a0a3	20 c5 8c	jsr $808cc5		jsr clearTile				; flower, remove it
5441	.20a6	80a0a6	a9 00		lda #$00		lda #kScoreIndex.fruit	; give same amount of points as fruit
5442	.20a8	80a0a8	20 94 85	jsr $808594		jsr giveScore
5443							;	ldx #kSFX.flower
5444							;	jsr playSFX
5445	.20ab	80a0ab	ee 88 00	inc $800088		inc GameData.flowers		; add 1 flower to collection
5446	.20ae	80a0ae	ad 88 00	lda $800088		lda GameData.flowers
5447	.20b1	80a0b1	c9 08		cmp #$08		cmp #8						; enough for a life?
5448	.20b3	80a0b3	d0 06		bne $80a0bb		bne _exit
5449	.20b5	80a0b5	9c 88 00	stz $800088			stz GameData.flowers	; trade them all in
5450	.20b8	80a0b8	20 72 91	jsr $809172			jsr awardLife_88		; get life
5451	.20bb	80a0bb					_exit
5452	.20bb	80a0bb	4c 15 88	jmp $808815		jmp pltFlowers				; update the HUD

5454							.as
5455							.xs
5456	.20be	80a0be					keyFunc
5457	.20be	80a0be					_ASSERT_axy8
5458	.20be	80a0be	20 c5 8c	jsr $808cc5		jsr clearTile					; key, remove it
5459	.20c1	80a0c1	a9 02		lda #$02		lda #kScoreIndex.key			; give points
5460	.20c3	80a0c3	20 94 85	jsr $808594		jsr giveScore
5461	.20c6	80a0c6	ce 98 00	dec $800098		dec LevelData.numKeysLeft	; count down total number of keys left
5462	.20c9	80a0c9	a5 16		lda $16			lda ActiveTile
5463	.20cb	80a0cb	20 39 8e	jsr $808e39		jsr countTempMapTile_88		; do we have any more of these keys still ( there are actually 4 keys )
5464	.20ce	80a0ce	d0 08		bne $80a0d8		bne _done						; yes
5465	.20d0	80a0d0	a5 16		lda $16				lda ActiveTile				; no remove all the walls that match the key number
5466	.20d2	80a0d2	38		sec				sec
5467	.20d3	80a0d3	e9 07		sbc #$07			sbc #kKeyToWallDelta
5468	.20d5	80a0d5	20 4a 8e	jsr $808e4a			jsr removeAllTilesOf_88
5469	.20d8	80a0d8					_done
5470	.20d8	80a0d8	ad 98 00	lda $800098		lda LevelData.numKeysLeft	; do we have any keys left
5471	.20db	80a0db	f0 01		beq $80a0de		beq _changeDoor				; no, open the door
5472									;ldx #kSFX.collect
5473									;jmp playSFX
5474	.20dd	80a0dd	60		rts				rts ; above is now jmp
5475	.20de	80a0de					_changeDoor
5476	.20de	80a0de	a9 01		lda #$01		lda #1
5477	.20e0	80a0e0	8d 96 00	sta $800096		sta GameData.exitOpenNZ		; set door to open
5478							;	tax ; ldx #kSFX.door ;=1
5479							;	jmp playSFX
5480	.20e3	80a0e3	60		rts			rts ; above is now jmp

5482							.as
5483							.xs
5484	.20e4	80a0e4					spikeFunc
5485	.20e4	80a0e4					_ASSERT_axy8
5486	.20e4	80a0e4	a9 01		lda #$01		lda #1
5487	.20e6	80a0e6	8d a3 00	sta $8000a3		sta PlayerData.deadNZ	; hit spike, you die
5488	.20e9	80a0e9	60		rts			rts

5490							.as
5491							.xs
5492	.20ea	80a0ea					springFunc
5493	.20ea	80a0ea					_ASSERT_axy8
5494	.20ea	80a0ea	20 c5 8c	jsr $808cc5		jsr clearTile					; remove the tile
5495							;	ldx #kSFX.powerup
5496							;	jsr playSFX
5497	.20ed	80a0ed	a9 01		lda #$01		lda #1
5498	.20ef	80a0ef	8d a7 00	sta $8000a7		sta PlayerData.canFloatNZ	; give float power
5499	.20f2	80a0f2	60		rts			rts

5501							.as
5502							.xs
5503	.20f3	80a0f3					potionFunc
5504	.20f3	80a0f3					_ASSERT_axy8
5505	.20f3	80a0f3	20 c5 8c	jsr $808cc5		jsr clearTile					; remove tile
5506	.20f6	80a0f6	a2 00		ldx #$00		ldx #0
5507	.20f8	80a0f8	86 15		stx $15			stx ActiveTileIndex			; start at top left
5508	.20fa	80a0fa					_loop
5509	.20fa	80a0fa	bd 8f 02	lda $80028f,x		lda tileMapTemp,x
5510	.20fd	80a0fd	c9 06		cmp #$06		cmp #kTiles.spike				; is this a spike ?
5511	.20ff	80a0ff	d0 08		bne $80a109		bne _next
5512	.2101	80a101	a9 08		lda #$08			lda #kTiles.fruit			; its is now fruit
5513	.2103	80a103	9d 8f 02	sta $80028f,x			sta tileMapTemp,x
5514	.2106	80a106	20 d4 8c	jsr $808cd4			jsr pltSingleTile			; update screen mirror
5515	.2109	80a109					_next
5516	.2109	80a109	e6 15		inc $15			inc ActiveTileIndex
5517	.210b	80a10b	a6 15		ldx $15			ldx ActiveTileIndex
5518	.210d	80a10d	e0 c0		cpx #$c0		cpx #kLevelSizeMax			; until all are scanned
5519	.210f	80a10f	d0 e9		bne $80a0fa		bne _loop
5520							;	ldx #kSFX.powerup
5521							;	jmp playSFX
5522	.2111	80a111	60		rts			rts ; above is now jmp

5524							.as
5525							.xs
5526	.2112	80a112					shildFunction
5527	.2112	80a112					_ASSERT_axy8
5528	.2112	80a112	20 c5 8c	jsr $808cc5		jsr clearTile									; remove the tile
5529	.2115	80a115	a9 01		lda #$01		lda #1
5530	.2117	80a117	8d a4 00	sta $8000a4		sta PlayerData.hasShieldNZ					; give the shield power
5531							;	ldx #kSFX.powerup
5532							;	jsr playSFX
5533	.211a	80a11a	a9 f4		lda #$f4		lda #<kShieldTimer
5534	.211c	80a11c	8d a5 00	sta $8000a5		sta PlayerData.shieldTimer.lo				; reset the timer
5535	.211f	80a11f	a9 01		lda #$01		lda #>kShieldTimer
5536	.2121	80a121	8d a6 00	sta $8000a6		sta PlayerData.shieldTimer.hi
5537	.2124	80a124	a9 32		lda #$32		lda #50
5538	.2126	80a126	8d c3 00	sta $8000c3		sta TickDowns.shieldFlashTimerSpeedUp	; and the speed up timer value
5539	.2129	80a129	a9 10		lda #$10		lda #16
5540	.212b	80a12b	8d bd 00	sta $8000bd		sta PlayerData.baseFlashTimeDelta		; and the base delta
5541	.212e	80a12e	60		rts			rts

5543							.as
5544							.xs
5545	.212f	80a12f					clearShieldState
5546	.212f	80a12f					_ASSERT_jsr
5547	.212f	80a12f					_ASSERT_axy8
5548	.212f	80a12f	9c a4 00	stz $8000a4		stz PlayerData.hasShieldNZ					; no power
5549	.2132	80a132	9c bc 00	stz $8000bc		stz PlayerData.flashColour					; no flash
5550	.2135	80a135	9c a5 00	stz $8000a5		stz PlayerData.shieldTimer.lo				; timer is 0
5551	.2138	80a138	9c a6 00	stz $8000a6		stz PlayerData.shieldTimer.hi
5552	.213b	80a13b	60		rts			rts

5554							.as
5555							.xs
5556	.213c	80a13c					exitFunc
5557	.213c	80a13c					_ASSERT_jsr
5558	.213c	80a13c					_ASSERT_axy8
5559	.213c	80a13c	ad 96 00	lda $800096		lda GameData.exitOpenNZ						; it is open right?
5560	.213f	80a13f	f0 10		beq $80a151		beq _notOpen
5561	.2141	80a141	9c 96 00	stz $800096			stz GameData.exitOpenNZ					; its closed now then
5562	.2144	80a144	a5 15		lda $15				lda ActiveTileIndex
5563	.2146	80a146	8d bb 00	sta $8000bb			sta PlayerData.exitAtIndex				; set the exit position ( there are up to 2 per level )
5564	.2149	80a149	a9 04		lda #$04			lda #kPlayerState.exit					; set player to exit state
5565	.214b	80a14b	8d a1 00	sta $8000a1			sta PlayerData.state
5566	.214e	80a14e	8d a2 00	sta $8000a2			sta PlayerData.minorState				; set minor to "entering death state"
5567	.2151	80a151					_notOpen
5568	.2151	80a151	60		rts			rts

5570							.as
5571							.xs
5572	.2152	80a152					eggFunc
5573	.2152	80a152					_ASSERT_jsr
5574	.2152	80a152					_ASSERT_axy8
5575	.2152	80a152	20 c5 8c	jsr $808cc5		jsr clearTile								; remove tile
5576	.2155	80a155	ee ba 00	inc $8000ba		inc PlayerData.numBulletEgg			; give 1 more bullet egg
5577							;	ldx #kSFX.powerup
5578							;	gra playSFX
5579	.2158	80a158	60		rts			rts ; above is now jmp

5581							.as
5582							.xs
5583	.2159	80a159					animateDoor_88
5584	.2159	80a159					_ASSERT_jsr
5585	.2159	80a159					_ASSERT_axy8
5586	.2159	80a159	ad 96 00	lda $800096		lda GameData.exitOpenNZ					; its open right?
5587	.215c	80a15c	f0 1c		beq $80a17a		beq aDexit
5588	.215e	80a15e	ad c0 00	lda $8000c0			lda TickDowns.doorAnim				; time for next frame?
5589	.2161	80a161	d0 17		bne $80a17a			bne aDexit
5590	.2163	80a163	a9 0a		lda #$0a				lda #kTimers.DoorAnimeRate
5591	.2165	80a165	8d c0 00	sta $8000c0				sta TickDowns.doorAnim			; reset timer
5592	.2168	80a168	ad 9b 00	lda $80009b				lda LevelData.exitIndex			; set the tile index
5593	.216b	80a16b	85 15		sta $15					sta ActiveTileIndex
5594	.216d	80a16d	20 7b a1	jsr $80a17b				jsr animateInternal_88			; animate it
5595	.2170	80a170	ad 9c 00	lda $80009c				lda LevelData.exitIndex+1		; do we have two doors?
5596	.2173	80a173	c9 ff		cmp #$ff				cmp #$ff
5597	.2175	80a175	f0 03		beq $80a17a				beq aDexit
5598	.2177	80a177	85 15		sta $15						sta ActiveTileIndex			; yes, animate it too
5599	.2179	80a179	f0		beq						gne animateInternal_88
5600	.217a	80a17a					aDexit
5601	.217a	80a17a	60		rts			rts

5603							.as
5604							.xs
5605	.217b	80a17b					animateInternal_88
5606	.217b	80a17b					_ASSERT_jsr
5607	.217b	80a17b					_ASSERT_axy8
5608	.217b	80a17b	ad 9d 00	lda $80009d		lda LevelData.exitFrame
5609	.217e	80a17e	cd 9e 00	cmp $80009e		cmp LevelData.exitTargetFrame			; have we reached the target frame
5610	.2181	80a181	f0 f7		beq $80a17a		beq aDexit									; which is either fully open or fully closed
5611	.2183	80a183	18		clc			clc
5612	.2184	80a184	6d 9f 00	adc $80009f		adc LevelData.exitFrameDelta			; move to next frames (1 or -1)
5613	.2187	80a187	8d 9d 00	sta $80009d		sta LevelData.exitFrame
5614	.218a	80a18a	82 4b eb	brl $808cd8		gra pltSingleTileNoLookup				; draw it

5616							.as
5617							.xs
5618	.218d	80a18d					setAnimateDoorToOpen_88
5619	.218d	80a18d					_ASSERT_jsr
5620	.218d	80a18d					_ASSERT_axy8
5621	.218d	80a18d	a9 0a		lda #$0a		lda #kDoorClosed
5622	.218f	80a18f	8d 9d 00	sta $80009d		sta LevelData.exitFrame					; we start at the closed frame
5623	.2192	80a192	a9 0e		lda #$0e		lda #kDoorOpen
5624	.2194	80a194	8d 9e 00	sta $80009e		sta LevelData.exitTargetFrame			; end on open
5625	.2197	80a197	a9 01		lda #$01		lda #1
5626	.2199	80a199	8d 9f 00	sta $80009f		sta LevelData.exitFrameDelta			; +1 to get to next frame
5627	.219c	80a19c	60		rts			rts

5629							.as
5630							.xs
5631	.219d	80a19d					setAnimateDoorToClose_88
5632	.219d	80a19d					_ASSERT_jsr
5633	.219d	80a19d					_ASSERT_axy8
5634	.219d	80a19d	a9 0e		lda #$0e		lda #kDoorOpen
5635	.219f	80a19f	8d 9d 00	sta $80009d		sta LevelData.exitFrame					; we state at open frame
5636	.21a2	80a1a2	a9 0a		lda #$0a		lda #kDoorClosed
5637	.21a4	80a1a4	8d 9e 00	sta $80009e		sta LevelData.exitTargetFrame			; end of closed
5638	.21a7	80a1a7	a9 ff		lda #$ff		lda #-1
5639	.21a9	80a1a9	8d 9f 00	sta $80009f		sta LevelData.exitFrameDelta			; -1 to get to next frame
5640	.21ac	80a1ac	60		rts			rts


5643							; ----- @Level Data@ -----

5645	.21ad	80a1ad					LevelTableLo
5646	>21ad	80a1ad	eb b8 85 50 1f e6 b7 8a		.byte <fileTileMap,<Level02,<Level03,<Level04,<Level05,<Level06,<Level07,<Level08,<Level09,<Level10,<Level11,<Level12,<Level13,<Level14,<Level15,<Level16,<Level17,<Level18,<Level19,<Level20,<Level21,<Level22,<Level23,<Level24,<Level25,<Level26,<Level27,<Level28,<Level29,<Level30,<Level31
	>21b5	80a1b5	53 24 eb ba 89 5a 2d f6 c5 96 67 36 ff d0 9b 66
	>21c5	80a1c5	39 04 d5 a8 75 46 11
5647	.21cc	80a1cc					LevelTableHi
5648	>21cc	80a1cc	a1 a2 a3 a4 a5 a5 a6 a7		.byte >fileTileMap,>Level02,>Level03,>Level04,>Level05,>Level06,>Level07,>Level08,>Level09,>Level10,>Level11,>Level12,>Level13,>Level14,>Level15,>Level16,>Level17,>Level18,>Level19,>Level20,>Level21,>Level22,>Level23,>Level24,>Level25,>Level26,>Level27,>Level28,>Level29,>Level30,>Level31
	>21d4	80a1d4	a8 a9 a9 aa ab ac ad ad ae af b0 b1 b1 b2 b3 b4
	>21e4	80a1e4	b5 b6 b6 b7 b8 b9 ba

5650	>21eb	80a1eb	c4 00 c4 00 00 00 00 00		fileTileMap	.binary "../levels/01.bin"
	>21f3	80a1f3	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>2203	80a203	00 01 01 01 01 01 00 00 00 00 00 00 08 08 08 08
	>2213	80a213	08 09 00 00 00 09 08 08 00 00 00 00 01 01 01 01
	>2223	80a223	01 01 00 00 00 01 01 01 00 00 00 00 07 07 07 01
	>2233	80a233	00 00 00 00 00 00 00 01 08 08 00 00 07 07 07 01
	>2243	80a243	00 00 00 00 00 00 00 01 01 01 00 00 08 08 08 03
	>2253	80a253	00 0a 00 00 00 00 00 02 07 02 09 12 14 14 14 01
	>2263	80a263	01 01 00 00 00 01 01 01 14 01 01 01 06 06 06 06
	>2273	80a273	06 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00
	>2283	80a283	00 01 01 00 01 01 00 00 00 00 00 01 00 00 00 00
	>2293	80a293	00 00 00 00 00 00 00 00 10 00 00 11 01 01 01 01
	>22a3	80a2a3	01 01 01 01 01 01 01 01 01 01 01 01 04 a7 30 47
	>22b3	80a2b3	20 8a 03 6a 01
5651	>22b8	80a2b8	c4 00 c4 00 00 00 00 00		Level02		.binary "../levels/02.bin"
	>22c0	80a2c0	00 00 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>22d0	80a2d0	00 08 08 08 08 08 08 00 00 00 00 00 12 00 09 00
	>22e0	80a2e0	00 08 08 08 08 08 08 00 00 09 00 00 01 01 01 00
	>22f0	80a2f0	00 08 08 08 08 08 08 00 00 01 01 11 00 00 00 00
	>2300	80a300	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 00
	>2310	80a310	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 09
	>2320	80a320	00 00 08 08 08 08 00 00 09 00 00 00 01 01 01 01
	>2330	80a330	00 00 00 01 01 00 00 00 01 01 01 01 00 00 00 00
	>2340	80a340	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>2350	80a350	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>2360	80a360	09 00 00 08 08 00 00 09 00 00 00 00 00 01 01 01
	>2370	80a370	01 00 00 08 08 00 00 01 01 01 01 00 04 2f 10 60
	>2380	80a380	10 a2 03 ad 03
5652	>2385	80a385	c4 00 c4 00 00 00 00 00		Level03		.binary "../levels/03.bin"
	>238d	80a38d	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00
	>239d	80a39d	00 00 00 00 00 00 00 00 00 00 00 07 08 00 00 00
	>23ad	80a3ad	00 00 00 00 00 00 00 00 00 00 00 07 01 00 01 01
	>23bd	80a3bd	01 00 09 00 00 09 00 01 01 01 14 14 00 00 01 00
	>23cd	80a3cd	00 00 00 00 00 00 00 00 00 01 08 08 00 01 01 00
	>23dd	80a3dd	00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 00
	>23ed	80a3ed	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>23fd	80a3fd	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>240d	80a40d	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>241d	80a41d	00 00 00 00 00 00 00 00 00 06 00 00 07 12 01 00
	>242d	80a42d	00 00 00 00 00 00 00 00 0f 06 06 06 13 01 01 01
	>243d	80a43d	01 01 13 01 01 13 01 01 01 01 01 11 03 94 10 9b
	>244d	80a44d	12 23 20
5653	>2450	80a450	c4 00 c4 00 09 00 00 00		Level04		.binary "../levels/04.bin"
	>2458	80a458	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>2468	80a468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08
	>2478	80a478	08 08 00 00 00 00 08 08 08 00 12 00 00 01 01 01
	>2488	80a488	01 01 00 00 00 00 01 01 01 01 01 00 09 00 00 00
	>2498	80a498	00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00
	>24a8	80a4a8	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 07
	>24b8	80a4b8	00 00 00 00 00 00 00 00 07 00 00 00 02 02 01 01
	>24c8	80a4c8	00 00 00 00 00 00 00 00 01 01 02 02 00 00 00 01
	>24d8	80a4d8	01 14 01 07 07 01 14 01 01 00 00 00 11 00 00 00
	>24e8	80a4e8	03 00 06 00 00 06 00 03 00 00 00 11 01 00 0a 00
	>24f8	80a4f8	03 00 0b 00 00 0b 00 03 00 0a 00 01 01 01 01 01
	>2508	80a508	01 01 01 01 01 01 01 01 01 01 01 01 05 67 22 1b
	>2518	80a518	22 14 20 81 03 8e 03
5654	>251f	80a51f	c4 00 c4 00 00 00 00 00		Level05		.binary "../levels/04boss01.bin"
	>2527	80a527	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>2537	80a537	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>2547	80a547	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2557	80a557	00 00 00 00 00 00 00 00 00 00 00 00 09 00 0d 00
	>2567	80a567	00 00 00 09 09 00 00 00 00 0e 00 09 01 01 01 00
	>2577	80a577	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>2587	80a587	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>2597	80a597	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>25a7	80a5a7	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>25b7	80a5b7	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>25c7	80a5c7	00 00 00 09 09 00 00 00 00 00 00 11 01 01 01 01
	>25d7	80a5d7	00 00 01 01 01 01 00 00 01 01 01 01 01 67 82
5655	>25e6	80a5e6	c4 00 c4 00 00 00 00 00		Level06		.binary "../levels/05.bin"
	>25ee	80a5ee	00 00 00 00 00 00 00 00 00 00 08 08 00 00 00 00
	>25fe	80a5fe	00 00 00 00 00 00 00 00 00 00 08 08 12 09 00 00
	>260e	80a60e	00 00 00 00 00 00 00 00 00 09 08 08 01 01 00 00
	>261e	80a61e	00 01 07 07 07 01 00 00 00 01 01 01 00 00 00 09
	>262e	80a62e	00 00 00 00 00 00 00 09 00 00 00 00 0f 00 00 01
	>263e	80a63e	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
	>264e	80a64e	00 09 00 00 00 09 00 00 00 00 00 00 00 00 00 00
	>265e	80a65e	00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00
	>266e	80a66e	00 00 00 09 00 00 00 00 00 00 00 00 14 14 14 01
	>267e	80a67e	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01
	>268e	80a68e	00 00 00 00 00 00 00 00 00 00 00 11 06 06 06 01
	>269e	80a69e	01 01 01 01 01 01 01 01 01 01 01 01 06 22 20 4c
	>26ae	80a6ae	20 6b 20 8a 23 71 02 ad 40
5656	>26b7	80a6b7	c4 00 c4 00 00 00 00 00		Level07		.binary "../levels/06.bin"
	>26bf	80a6bf	00 09 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>26cf	80a6cf	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>26df	80a6df	00 08 08 08 08 08 08 00 00 00 00 00 01 02 02 02
	>26ef	80a6ef	02 01 01 01 01 01 01 03 03 03 03 01 00 00 00 00
	>26ff	80a6ff	00 00 00 00 00 00 00 00 00 00 00 00 0b 01 00 00
	>270f	80a70f	00 00 0b 00 00 0b 00 00 00 00 01 0b 00 00 00 00
	>271f	80a71f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>272f	80a72f	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>273f	80a73f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>274f	80a74f	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
	>275f	80a75f	00 00 08 08 08 08 00 00 00 00 00 00 00 01 01 01
	>276f	80a76f	01 01 01 01 01 01 01 01 01 01 11 00 07 b0 61 bf
	>277f	80a77f	62 2d 22 87 20 4b 73 75 01 7a 03
5657	>278a	80a78a	c4 00 c4 00 09 00 00 09		Level08		.binary "../levels/07.bin"
	>2792	80a792	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>27a2	80a7a2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>27b2	80a7b2	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>27c2	80a7c2	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>27d2	80a7d2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>27e2	80a7e2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>27f2	80a7f2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2802	80a802	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>2812	80a812	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>2822	80a822	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2832	80a832	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>2842	80a842	01 01 13 01 01 13 01 01 13 01 01 01 02 a0 22 3e
	>2852	80a852	20
5658	>2853	80a853	c4 00 c4 00 06 00 00 00		Level09		.binary "../levels/08.bin"
	>285b	80a85b	00 06 00 00 00 00 06 00 00 00 00 09 00 00 00 00
	>286b	80a86b	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>287b	80a87b	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>288b	80a88b	01 01 01 01 01 01 01 01 01 00 00 00 09 00 00 00
	>289b	80a89b	08 00 00 00 00 00 00 01 00 00 00 00 01 00 00 00
	>28ab	80a8ab	01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 12
	>28bb	80a8bb	01 11 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>28cb	80a8cb	01 01 01 14 14 01 01 01 01 00 00 00 09 00 00 00
	>28db	80a8db	00 00 00 00 00 00 07 01 00 00 00 09 01 00 00 00
	>28eb	80a8eb	00 00 00 00 00 00 00 01 00 00 00 01 08 00 00 00
	>28fb	80a8fb	00 00 00 00 00 00 0f 01 00 00 00 00 01 01 01 01
	>290b	80a90b	01 01 01 14 14 01 01 01 06 06 06 06 06 a3 03 a6
	>291b	80a91b	03 a9 03 5f 02 2f 22 4a 22
5659	>2924	80a924	c4 00 c4 00 00 00 00 00		Level10		.binary "../levels/08boss02.bin"
	>292c	80a92c	09 00 06 06 06 06 00 09 00 00 00 00 09 0d 10 00
	>293c	80a93c	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>294c	80a94c	00 00 00 00 00 00 00 00 00 01 01 01 06 06 00 00
	>295c	80a95c	00 00 00 00 00 00 00 00 00 00 06 06 00 00 00 09
	>296c	80a96c	00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00
	>297c	80a97c	00 01 14 14 14 14 01 00 00 00 00 00 00 00 00 00
	>298c	80a98c	00 00 06 06 06 06 00 00 00 00 00 00 09 10 10 00
	>299c	80a99c	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>29ac	80a9ac	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>29bc	80a9bc	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>29cc	80a9cc	00 00 00 00 00 00 00 00 00 0f 00 11 01 01 01 00
	>29dc	80a9dc	01 01 01 00 00 01 01 01 00 01 01 01 01 87 90
5660	>29eb	80a9eb	c4 00 c4 00 12 00 00 00		Level11		.binary "../levels/09.bin"
	>29f3	80a9f3	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00
	>2a03	80aa03	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
	>2a13	80aa13	01 01 01 00 00 01 01 01 01 01 01 01 09 00 00 00
	>2a23	80aa23	00 00 06 00 00 06 00 00 00 00 00 0f 00 00 00 00
	>2a33	80aa33	00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00
	>2a43	80aa43	00 00 07 00 00 07 00 00 00 00 00 00 00 00 01 00
	>2a53	80aa53	00 00 07 00 00 07 00 00 00 01 00 00 00 00 00 00
	>2a63	80aa63	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
	>2a73	80aa73	01 01 01 08 08 01 01 01 01 01 00 00 00 00 00 00
	>2a83	80aa83	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2a93	80aa93	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2aa3	80aaa3	00 01 01 06 06 01 01 00 01 01 01 01 05 1f 30 a1
	>2ab3	80aab3	40 97 20 52 20 6e 03
5661	>2aba	80aaba	c4 00 c4 00 00 11 00 00		Level12		.binary "../levels/10.bin"
	>2ac2	80aac2	00 00 00 00 00 00 00 00 00 00 12 00 00 01 00 00
	>2ad2	80aad2	00 00 09 00 00 09 00 00 00 00 01 00 00 00 00 00
	>2ae2	80aae2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2af2	80aaf2	00 00 08 08 08 08 00 00 00 01 00 00 00 00 00 00
	>2b02	80ab02	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>2b12	80ab12	00 00 01 00 00 01 00 00 01 00 00 00 00 00 00 00
	>2b22	80ab22	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>2b32	80ab32	00 00 08 00 00 08 00 00 00 01 00 00 00 00 00 00
	>2b42	80ab42	00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
	>2b52	80ab52	00 00 07 07 07 07 00 00 00 00 01 00 09 00 00 00
	>2b62	80ab62	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>2b72	80ab72	01 01 01 06 06 01 01 01 01 01 01 01 05 2e 20 6e
	>2b82	80ab82	22 41 20 81 22 7c 40
5662	>2b89	80ab89	c4 00 c4 00 00 00 00 00		Level13		.binary "../levels/11.bin"
	>2b91	80ab91	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 08
	>2ba1	80aba1	00 00 01 00 00 09 00 00 01 00 00 07 00 00 00 00
	>2bb1	80abb1	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 01
	>2bc1	80abc1	00 00 09 00 00 01 00 00 06 00 00 01 12 00 00 00
	>2bd1	80abd1	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 09
	>2be1	80abe1	00 00 01 00 00 0a 00 00 01 00 00 0b 00 00 00 00
	>2bf1	80abf1	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 01
	>2c01	80ac01	00 00 0a 00 00 01 00 00 0b 00 00 01 00 00 00 00
	>2c11	80ac11	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 06
	>2c21	80ac21	00 00 01 00 00 0b 00 00 01 00 00 08 00 00 00 00
	>2c31	80ac31	00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 01
	>2c41	80ac41	00 00 0b 00 00 01 00 00 08 00 00 11 06 09 22 49
	>2c51	80ac51	22 89 22 a6 20 66 20 26 20
5663	>2c5a	80ac5a	c4 00 c4 00 00 00 00 00		Level14		.binary "../levels/12.bin"
	>2c62	80ac62	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2c72	80ac72	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 00
	>2c82	80ac82	00 00 01 01 01 01 00 00 00 01 01 01 00 00 00 00
	>2c92	80ac92	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2ca2	80aca2	0a 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 01
	>2cb2	80acb2	01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00
	>2cc2	80acc2	00 00 00 00 00 00 00 00 00 00 00 12 0b 00 00 00
	>2cd2	80acd2	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>2ce2	80ace2	00 00 06 06 06 06 00 00 00 01 01 01 00 00 00 00
	>2cf2	80acf2	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2d02	80ad02	0c 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 01
	>2d12	80ad12	01 01 00 00 00 00 01 01 01 00 00 00 07 b6 61 b9
	>2d22	80ad22	61 94 03 9b 02 1d 30 12 32 58 40
5664	>2d2d	80ad2d	c4 00 c4 00 00 00 00 00		Level15		.binary "../levels/12boss03.bin"
	>2d35	80ad35	06 00 06 00 00 06 00 06 00 00 00 00 09 0d 10 00
	>2d45	80ad45	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>2d55	80ad55	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>2d65	80ad65	09 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00
	>2d75	80ad75	01 00 00 09 09 00 00 01 00 00 00 00 00 00 00 00
	>2d85	80ad85	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
	>2d95	80ad95	09 00 00 00 00 00 00 09 00 00 00 00 09 10 10 00
	>2da5	80ada5	01 00 00 00 00 00 00 01 00 10 10 09 01 01 01 00
	>2db5	80adb5	00 00 06 00 00 06 00 00 00 01 01 01 00 00 00 00
	>2dc5	80adc5	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>2dd5	80add5	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>2de5	80ade5	01 00 01 01 01 01 00 01 01 01 01 01 02 87 80 27
	>2df5	80adf5	82
5665	>2df6	80adf6	c4 00 c4 00 09 00 00 00		Level16		.binary "../levels/13.bin"
	>2dfe	80adfe	00 00 00 00 01 01 01 06 06 06 00 06 01 00 00 00
	>2e0e	80ae0e	00 00 00 00 01 07 01 00 00 00 00 0a 00 00 00 00
	>2e1e	80ae1e	00 00 00 00 02 07 02 00 00 00 00 00 00 00 14 00
	>2e2e	80ae2e	00 00 00 00 02 07 02 00 00 00 0a 00 00 00 00 00
	>2e3e	80ae3e	00 00 00 00 01 07 01 00 00 00 00 00 01 00 00 00
	>2e4e	80ae4e	01 01 01 00 01 01 01 00 00 0a 00 06 09 08 08 08
	>2e5e	80ae5e	01 00 00 00 00 00 01 00 00 00 00 00 01 01 01 00
	>2e6e	80ae6e	01 00 00 00 00 00 01 00 0a 00 00 00 07 07 01 00
	>2e7e	80ae7e	01 00 00 14 00 00 01 00 00 00 00 00 00 00 01 00
	>2e8e	80ae8e	01 00 00 00 00 00 01 0a 00 00 00 00 12 00 00 00
	>2e9e	80ae9e	11 00 00 00 00 00 00 08 08 08 08 00 01 01 01 13
	>2eae	80aeae	01 01 01 06 01 01 01 13 13 13 13 00 05 24 22 42
	>2ebe	80aebe	20 86 01 88 03 1d 32
5666	>2ec5	80aec5	c4 00 c4 00 00 00 06 00		Level17		.binary "../levels/14.bin"
	>2ecd	80aecd	00 00 06 00 00 00 06 00 00 00 00 00 09 00 00 00
	>2edd	80aedd	07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00
	>2eed	80aeed	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
	>2efd	80aefd	01 00 00 00 01 00 00 00 01 01 00 00 00 00 00 00
	>2f0d	80af0d	00 00 00 00 00 00 00 00 00 06 12 00 01 01 06 01
	>2f1d	80af1d	01 01 06 01 01 01 06 01 00 01 01 01 00 00 00 00
	>2f2d	80af2d	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>2f3d	80af3d	09 00 00 00 09 00 00 00 09 11 00 00 00 00 00 00
	>2f4d	80af4d	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>2f5d	80af5d	00 00 00 00 00 00 00 00 00 00 00 00 14 14 14 14
	>2f6d	80af6d	14 14 14 14 14 14 14 14 14 01 00 0f 06 06 06 06
	>2f7d	80af7d	06 06 06 06 06 06 06 06 06 01 00 01 06 21 20 41
	>2f8d	80af8d	20 72 03 76 03 7a 03 6d 22
5667	>2f96	80af96	c4 00 c4 00 01 06 06 06		Level18		.binary "../levels/15.bin"
	>2f9e	80af9e	01 01 01 00 01 01 01 01 01 01 01 00 01 09 00 00
	>2fae	80afae	08 00 08 00 00 00 00 00 00 0a 01 00 01 00 00 00
	>2fbe	80afbe	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>2fce	80afce	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>2fde	80afde	08 12 08 00 00 00 00 00 00 00 01 00 01 08 01 01
	>2fee	80afee	01 01 01 01 01 08 01 01 01 01 01 00 01 08 01 00
	>2ffe	80affe	00 00 00 00 06 00 06 11 00 00 00 00 01 08 01 00
	>300e	80b00e	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 00
	>301e	80b01e	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 08
	>302e	80b02e	01 01 01 0a 01 00 06 01 01 01 01 01 01 08 08 08
	>303e	80b03e	01 0f 03 00 01 00 06 06 06 06 06 06 01 01 01 01
	>304e	80b04e	01 00 01 01 01 00 00 00 00 00 00 00 06 2a 10 22
	>305e	80b05e	20 76 03 74 01 7c 03 7e 01
5668	>3067	80b067	c4 00 c4 00 09 00 09 00		Level19		.binary "../levels/16.bin"
	>306f	80b06f	09 00 00 07 07 00 00 09 00 09 00 09 00 00 00 00
	>307f	80b07f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>308f	80b08f	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 06
	>309f	80b09f	00 06 00 00 00 00 06 00 06 00 06 00 00 00 00 00
	>30af	80b0af	00 00 00 00 00 00 00 00 00 00 00 00 13 00 13 00
	>30bf	80b0bf	13 00 00 00 00 00 00 13 00 13 00 13 01 00 01 00
	>30cf	80b0cf	01 00 00 00 00 00 00 01 00 01 00 01 08 00 00 00
	>30df	80b0df	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>30ef	80b0ef	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>30ff	80b0ff	00 00 00 00 00 00 12 00 00 00 00 08 09 00 00 00
	>310f	80b10f	00 00 13 00 00 13 11 00 00 00 00 09 01 01 01 00
	>311f	80b11f	01 01 01 08 08 01 01 01 01 01 01 01 05 9d 71 92
	>312f	80b12f	71 a4 01 ae 42 42 20
5669	>3136	80b136	c4 00 c4 00 00 00 00 00		Level20		.binary "../levels/16boss04.bin"
	>313e	80b13e	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>314e	80b14e	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>315e	80b15e	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>316e	80b16e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>317e	80b17e	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 00
	>318e	80b18e	06 00 00 01 01 00 00 06 00 01 01 01 00 00 00 00
	>319e	80b19e	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>31ae	80b1ae	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>31be	80b1be	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>31ce	80b1ce	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>31de	80b1de	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>31ee	80b1ee	14 14 00 01 01 00 14 14 00 01 01 01 02 67 90 07
	>31fe	80b1fe	92
5670	>31ff	80b1ff	c4 00 c4 00 00 00 00 00		Level21		.binary "../levels/17.bin"
	>3207	80b207	00 0a 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>3217	80b217	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3227	80b227	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3237	80b237	00 00 00 01 01 00 00 00 00 00 00 00 09 06 00 0f
	>3247	80b247	00 00 00 00 00 00 00 00 07 00 06 09 00 06 00 01
	>3257	80b257	01 00 00 00 00 00 00 01 01 00 06 00 00 06 00 00
	>3267	80b267	00 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00
	>3277	80b277	01 01 00 00 00 00 01 01 00 00 06 00 00 06 00 00
	>3287	80b287	00 0b 00 00 00 00 0b 00 00 00 06 00 00 06 00 00
	>3297	80b297	00 01 01 08 08 01 01 00 00 00 06 00 00 00 00 00
	>32a7	80b2a7	00 00 00 00 00 00 00 00 00 00 00 12 01 01 01 01
	>32b7	80b2b7	01 01 01 01 01 01 01 01 01 01 01 11 06 63 53 6c
	>32c7	80b2c7	53 a8 22 67 20 01 10 2c 42
5671	>32d0	80b2d0	c4 00 c4 00 09 00 00 09		Level22		.binary "../levels/18.bin"
	>32d8	80b2d8	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>32e8	80b2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32f8	80b2f8	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>3308	80b308	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>3318	80b318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3328	80b328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3338	80b338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3348	80b348	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>3358	80b358	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>3368	80b368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3378	80b378	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>3388	80b388	01 01 13 01 01 13 01 01 13 01 01 01 03 ad 22 4d
	>3398	80b398	22 52 20
5672	>339b	80b39b	c4 00 c4 00 09 00 00 00		Level23		.binary "../levels/19.bin"
	>33a3	80b3a3	00 09 00 00 00 00 09 00 00 00 00 09 12 00 00 00
	>33b3	80b3b3	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>33c3	80b3c3	00 01 00 07 07 00 01 00 08 08 00 01 0a 00 00 00
	>33d3	80b3d3	00 0a 00 00 00 00 0a 00 00 00 00 0a 00 00 00 00
	>33e3	80b3e3	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>33f3	80b3f3	00 01 00 07 07 00 01 00 08 08 00 01 0b 00 00 00
	>3403	80b403	00 0b 00 00 00 00 0b 00 00 00 00 0b 00 00 00 00
	>3413	80b413	00 00 00 00 00 00 00 00 00 00 00 00 11 00 08 08
	>3423	80b423	00 01 00 07 07 00 01 00 08 08 00 01 0c 00 00 00
	>3433	80b433	00 0c 00 00 00 00 0c 00 00 00 00 0c 00 00 00 00
	>3443	80b443	00 00 00 00 00 00 00 00 00 00 00 00 01 13 01 01
	>3453	80b453	13 01 13 01 01 13 01 13 01 01 13 01 03 4f 22 af
	>3463	80b463	22 70 20
5673	>3466	80b466	c4 00 c4 00 00 00 00 00		Level24		.binary "../levels/20.bin"
	>346e	80b46e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>347e	80b47e	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>348e	80b48e	00 01 01 01 01 01 01 01 01 01 00 00 01 01 01 14
	>349e	80b49e	14 01 00 00 00 00 00 00 00 01 00 0a 00 00 00 00
	>34ae	80b4ae	00 00 00 00 00 00 00 00 00 01 14 01 00 00 00 00
	>34be	80b4be	00 00 00 00 04 04 04 00 00 00 00 01 00 00 08 08
	>34ce	80b4ce	08 08 00 00 02 0f 03 00 00 12 00 01 00 00 01 06
	>34de	80b4de	06 01 00 00 01 01 01 00 00 01 14 01 00 00 01 00
	>34ee	80b4ee	00 01 00 00 00 00 00 00 00 00 00 0c 00 01 01 00
	>34fe	80b4fe	00 01 01 01 00 00 00 05 00 00 00 00 00 08 08 00
	>350e	80b50e	00 07 0b 11 00 00 00 05 00 00 00 00 01 01 01 01
	>351e	80b51e	01 01 01 01 01 00 01 01 01 01 06 06 07 37 53 3b
	>352e	80b52e	53 10 20 40 20 89 20 9d 70 94 03
5674	>3539	80b539	c4 00 c4 00 00 00 00 00		Level25		.binary "../levels/20boss05.bin"
	>3541	80b541	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>3551	80b551	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>3561	80b561	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>3571	80b571	00 00 00 00 00 00 00 00 00 00 00 00 10 00 09 00
	>3581	80b581	00 0d 00 00 00 00 0e 00 00 09 00 10 01 00 01 00
	>3591	80b591	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>35a1	80b5a1	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>35b1	80b5b1	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>35c1	80b5c1	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>35d1	80b5d1	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>35e1	80b5e1	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>35f1	80b5f1	00 01 00 00 00 00 01 00 00 01 01 01 03 97 80 67
	>3601	80b601	82 37 80
5675	>3604	80b604	c4 00 c4 00 0b 00 00 0a		Level26		.binary "../levels/21.bin"
	>360c	80b60c	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00
	>361c	80b61c	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>362c	80b62c	00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 04
	>363c	80b63c	06 06 06 02 00 00 00 03 03 03 03 00 00 00 00 00
	>364c	80b64c	00 00 00 00 00 00 00 0c 00 00 00 00 14 14 14 14
	>365c	80b65c	14 14 02 14 14 14 14 14 05 01 05 00 00 00 00 00
	>366c	80b66c	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>367c	80b67c	00 00 00 00 00 00 00 00 00 01 00 00 09 00 00 00
	>368c	80b68c	00 00 00 00 00 00 00 00 00 0a 00 00 14 00 00 14
	>369c	80b69c	00 00 14 00 00 14 00 00 05 05 11 00 00 00 00 00
	>36ac	80b6ac	00 00 00 00 00 00 00 00 00 00 12 00 06 06 06 06
	>36bc	80b6bc	06 06 00 06 06 06 06 06 05 00 01 05 06 26 22 65
	>36cc	80b6cc	22 86 20 a5 20 7f 03 46 30
5676	>36d5	80b6d5	c4 00 c4 00 00 00 00 00		Level27		.binary "../levels/22.bin"
	>36dd	80b6dd	00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 00
	>36ed	80b6ed	00 00 00 00 00 00 00 00 00 00 00 0f 01 01 00 09
	>36fd	80b6fd	00 00 00 00 00 09 00 00 00 00 01 01 00 00 00 14
	>370d	80b70d	00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00
	>371d	80b71d	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>372d	80b72d	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00
	>373d	80b73d	00 00 14 08 08 00 00 00 14 00 00 00 00 00 00 00
	>374d	80b74d	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>375d	80b75d	00 00 00 00 00 09 00 00 00 00 00 00 00 00 00 14
	>376d	80b76d	00 00 00 00 00 14 00 00 00 00 00 00 07 07 00 00
	>377d	80b77d	00 00 00 00 00 00 00 00 00 00 00 11 01 01 06 06
	>378d	80b78d	06 00 06 06 06 06 00 06 06 06 01 01 07 b5 61 ba
	>379d	80b79d	61 04 53 0b 53 4f 22 70 20 1e 10
5677	>37a8	80b7a8	c4 00 c4 00 00 00 00 00		Level28		.binary "../levels/23.bin"
	>37b0	80b7b0	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>37c0	80b7c0	00 00 00 00 00 00 00 00 00 00 00 11 01 00 00 00
	>37d0	80b7d0	00 00 00 00 00 00 00 00 00 00 00 01 00 09 00 00
	>37e0	80b7e0	00 0a 00 00 00 0b 00 00 00 0c 00 00 00 00 00 00
	>37f0	80b7f0	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3800	80b800	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3810	80b810	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00
	>3820	80b820	00 06 00 00 00 06 00 00 00 06 00 00 00 00 00 00
	>3830	80b830	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3840	80b840	00 00 00 00 00 00 00 00 00 00 00 00 07 06 07 00
	>3850	80b850	08 06 08 00 08 06 08 00 07 06 07 07 01 01 01 13
	>3860	80b860	01 01 01 13 01 01 01 13 01 01 01 01 04 50 10 55
	>3870	80b870	13 59 11 5e 12
5678	>3875	80b875	c4 00 c4 00 00 00 00 00		Level29		.binary "../levels/24.bin"
	>387d	80b87d	00 00 02 03 04 05 02 03 04 05 00 11 00 12 00 00
	>388d	80b88d	14 14 14 14 14 14 14 14 14 14 14 01 01 01 00 00
	>389d	80b89d	06 06 06 06 06 06 06 06 06 06 06 01 01 00 00 00
	>38ad	80b8ad	00 00 00 00 00 00 00 00 0b 00 00 01 01 00 00 14
	>38bd	80b8bd	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>38cd	80b8cd	00 00 00 09 00 00 00 00 00 00 00 01 01 00 00 00
	>38dd	80b8dd	00 00 00 14 14 00 00 00 0c 00 00 01 01 00 00 14
	>38ed	80b8ed	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>38fd	80b8fd	00 00 00 0a 00 00 00 00 00 00 00 01 01 00 00 00
	>390d	80b90d	00 00 00 14 14 00 00 00 00 00 00 01 01 00 00 00
	>391d	80b91d	00 00 00 00 00 00 00 00 00 00 00 01 01 01 13 01
	>392d	80b92d	01 01 01 01 01 01 01 01 01 01 01 01 06 04 20 45
	>393d	80b93d	10 7a 10 75 10 4a 10 aa 32
5679	>3946	80b946	c4 00 c4 00 00 00 00 00		Level30		.binary "../levels/24boss06.bin"
	>394e	80b94e	00 00 00 00 00 00 00 00 00 00 00 00 0c 0d 10 00
	>395e	80b95e	00 00 00 14 14 00 00 00 00 10 0e 0b 05 05 05 00
	>396e	80b96e	00 00 00 00 00 00 00 00 00 04 04 04 00 00 00 00
	>397e	80b97e	0a 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 00
	>398e	80b98e	14 00 00 0c 0c 00 00 14 00 00 00 00 00 00 00 00
	>399e	80b99e	00 00 00 14 14 00 00 00 00 00 00 00 00 00 00 00
	>39ae	80b9ae	0a 00 00 00 00 00 00 0b 00 00 00 00 09 10 10 00
	>39be	80b9be	14 00 00 00 00 00 00 14 00 10 10 0a 02 02 02 00
	>39ce	80b9ce	00 00 00 00 00 00 00 00 00 03 03 03 00 00 00 00
	>39de	80b9de	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>39ee	80b9ee	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>39fe	80b9fe	00 01 01 06 06 01 01 00 01 01 01 01 03 97 90 67
	>3a0e	80ba0e	92 27 90
5680	>3a11	80ba11	c4 00 c4 00 12 00 00 00		Level31		.binary "../levels/end.bin"
	>3a19	80ba19	00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00
	>3a29	80ba29	07 00 07 07 00 07 00 00 00 07 01 00 07 00 00 00
	>3a39	80ba39	07 00 07 00 00 07 00 00 00 07 00 01 07 00 00 00
	>3a49	80ba49	07 00 07 07 00 07 00 00 00 07 00 00 07 00 07 00
	>3a59	80ba59	07 00 07 00 00 07 00 00 00 07 00 00 00 07 00 07
	>3a69	80ba69	00 00 07 07 00 07 07 07 00 07 07 07 00 00 00 00
	>3a79	80ba79	00 00 00 00 00 00 00 00 00 00 00 00 08 08 00 00
	>3a89	80ba89	00 08 00 00 08 00 08 00 08 08 08 00 08 00 08 00
	>3a99	80ba99	08 00 08 00 08 08 08 00 08 00 00 00 08 00 08 00
	>3aa9	80baa9	08 00 08 00 08 08 08 00 08 08 00 09 08 00 08 00
	>3ab9	80bab9	08 00 08 00 08 08 08 00 08 00 00 11 08 08 00 00
	>3ac9	80bac9	00 08 00 00 08 00 08 00 08 08 08 01 01 1f 03

5682							; ----- @Titlescreen Data@ -----

5684	.3ad8	80bad8					TitleScreenData .block

5686	.3ad8	80bad8					SpriteStruct .block
5687	=12620							_QDef = fSprDef(6,10, kSPri_3|kSPal_0)
5688	=12680							_WDef = fSprDef(4,12, kSPri_3|kSPal_0)
5689	=12684							_ADef = fSprDef(6,12, kSPri_3|kSPal_0)
5690	=12744							_KDef = fSprDef(4,14, kSPri_3|kSPal_0)
5691								; this is set up so I can just loop copy to OAM
5692	>3ad8	80bad8	3f 0a 4c 31				sprites 	.byte 63 ,10, <_QDef, >_QDef
5693	>3adc	80badc	62 0a 88 31							.byte	98,10, <_WDef, >_WDef
5694	>3ae0	80bae0	85 0a 8c 31							.byte 133,10, <_ADef, >_ADef
5695	>3ae4	80bae4	a8 0a c8 31							.byte	168,10, <_KDef, >_KDef
5696	=$aa							kUpper = %10101010 ; all Large and no MSB
5697							.bend

5699							; each string has the ID, X char, Y char
5700	=(13,8,4)					Version = (kStrings.version,8,4)
5701	=(1,0,6)					Original = (kStrings.original,0,6)
5702	=(2,3,8)					Ported = (kStrings.cx16port,3,8)
5703	=(3,7,10)					Code = (kStrings.program,7,10)
5704	=(4,7,11)					Art = (kStrings.art,7,11)
5705	=(5,7,12)					Music = (kStrings.music,7,12)
5706	=(6,6,14)					Special = (kStrings.specialThanks,6,14)
5707	=(7,7,16)					Soci = (kStrings.soci,7,16)
5708	=(8,10,17)					Didi = (kStrings.didi,10,17)
5709	=(9,13,11)					Saul1 = (kStrings.saul,13,11)
5710	=(9,13,12)					Saul2 = (kStrings.saul,13,12)
5711	=(16,12,18)					Optiroc = (kStrings.optiroc,12,18)
5712	=(12,7,22)					Both = (kStrings.both,7,22)
5713	=(5,15,22)					Music2 = (kStrings.music,15,22)
5714	=(10,24,22)					SFX = (kStrings.sfx,24,22)
5715	=(11,30,22)					None = (kStrings.none,30,22)
5716	=(14,5,19)					Password = (kStrings.password,5,19)
5717	=(15,14,20)					PasswordBlank = (kStrings.passwordBlank,14,20)

5719							; merge all the strings into one, this time I don't use := but make multiple and merge down
5720	=((13,8,4),(1,0,6),(2,3,8),(3,7,10))		G1 = (Version,Original,Ported,Code)
5721	=((4,7,11),(5,7,12),(6,6,14),(7,7,16))		G2 = (Art,Music,Special,Soci)
5722	=((8,10,17),(9,13,11),(9,13,12),(16,12,18))	G3 = (Didi,Saul1,Saul2,Optiroc)
5723							; G4 = (Both, Music2,SFX,None,Password)	; SNES version doesn't need these string yet
5724							; G5 = (PasswordBlank,)
5725	=((13,8,4),(1,0,6),(2,3,8),(3,7,10),(4,7,11),(5,7,12),(6,6,14),(7,7,16),(8,10,17),(9,13,11),(9,13,12),(16,12,18))
							AllStrings = G1 .. G2 .. G3 ; .. G4 .. G5

5727							; this has the index into the String Ptr LUT to draw this string
5728	>3ae8	80bae8	0d 01 02 03 04 05 06 07		string .byte AllStrings[:,0]..(kStrings.gameOver,)	; tack the Game over on the end so len(AllStrings) gives the index
	>3af0	80baf0	08 09 09 10 00
5729							; convert the X,Y char to address to copy string to on Screen Mirror
5730	=(8464,8576,8710,8846,8910,8974,9100,9230,9300,8922,8986,9368,8982)
							allPos = (fGetMemoryForScreenChar(<>ScreenMirror,AllStrings[:,1],AllStrings[:,2]))..(fGetMemoryForScreenChar(<>ScreenMirror,11,12),)
5731							; get the dest pointers lo/hi
5732	.3af5	80baf5					stringPos .block
5733	>3af5	80baf5	10 80 06 8e ce 0e 8c 0e			lo .byte <(allPos)
	>3afd	80bafd	54 da 1a 98 16
5734	>3b02	80bb02	21 21 22 22 22 23 23 24			hi .byte >(allPos)
	>3b0a	80bb0a	24 22 23 24 23
5735							.bend

5737							;spriteCol	.byte 7,13,14,10 ; reference by commneted out code

5739							; used for the menu which currently is not in the SNES version
5740							;menuOffsetsStart	.byte (30,23,15,7)*2
5741							;menuOffsetsEnd		.byte (37,30,22,14)*2

5743							.bend ; titlescreendata

5745							; This converts ASICII to the font layout I use in QWAK which is actually mostly just PETSCII order offset
5746							; {{{
5747							.enc "qwak" ;define an ascii->petscii encoding
5748							.cdef "@@", 128
5749							.cdef "AZ", 129
5750							.edef "[",  155
5751							.edef "<U+FFFD>",  156 ; this is the britsh pound smybol if it is corrupt you need to reopen the file as Windows1252 encoding
5752							.edef "]",  157 ; or retype the pound in your current encoding, everything else is UTF-8 safe.
5753							.edef "^",  158
5754							.edef "|",  159;->
5755							.edef " ",  160
5756							.edef "!",  161
5757							.edef "`",  162;"
5758							.edef "#",  163
5759							.edef "~",  164 ;heart
5760							.edef "%",  165
5761							.edef "&",  166
5762							.edef "'",  167
5763							.edef "(",  168
5764							.edef ")",  169
5765							.edef "*",  170
5766							.edef "+",  171
5767							.edef ",",  172
5768							.edef "-",  173
5769							.edef ".",  174
5770							.edef "/",  175
5771							.cdef "09", 176
5772							.edef ":",  186
5773							.edef ";",  187
5774							.edef "<",  188
5775							.edef "=",  189
5776							.edef ">",  190
5777							.edef "?",  191
5778							; }}}

5780							; the index here must match bellow and is use to set the string data in the string,pos
5781	.3b0f	80bb0f					kStrings .block
5782	=0							gameOver = 0
5783	=1							original = 1
5784	=2							cx16port = 2
5785	=3							program = 3
5786	=4							art = 4
5787	=5							music = 5
5788	=6							specialThanks = 6
5789	=7							soci = 7
5790	=8							didi = 8
5791	=9							saul = 9
5792	=10							sfx = 10
5793	=11							none = 11
5794	=12							both = 12
5795	=13							version = 13
5796	=14							password = 14
5797	=15							passwordBlank = 15
5798	=16							optiroc = 16
5799							.bend

5801	>3b0f	80bb0f	31 3b 5c 77 8a 9b af c4		StringTableLUTLo .byte <GAMEOVER,<ORIGINAL,<CX16PORT,<PROGRAM,<ART,<MUSIC,<SPECIALTHANKS,<SOCI,<MARTINPIPER,<SAUL,<SFX,<NONE,<BOTH,<VERSION,<PASSWORD,<PASSWORDBLANK,<OPTIROC
	>3b17	80bb17	d7 8e a1 a5 aa ec fd 1c e4
5802	>3b20	80bb20	bb bb bb bb bb bb bb bb		StringTableLUTHi .byte >GAMEOVER,>ORIGINAL,>CX16PORT,>PROGRAM,>ART,>MUSIC,>SPECIALTHANKS,>SOCI,>MARTINPIPER,>SAUL,>SFX,>NONE,>BOTH,>VERSION,>PASSWORD,>PASSWORDBLANK,>OPTIROC
	>3b28	80bb28	bb bb bb bb bb bb bb bc bb

5804							.enc "qwak"
5805	>3b31	80bb31	87 81 8d 85 a0 8f 96 85		GAMEOVER 		.text "GAME OVER",$ff
	>3b39	80bb39	92 ff
5806	>3b3b	80bb3b	8f 92 89 87 89 8e 81 8c		ORIGINAL 		.text "ORIGINAL CONCEPT JAMIE WOODHOUSE",$ff
	>3b43	80bb43	a0 83 8f 8e 83 85 90 94 a0 8a 81 8d 89 85 a0 97
	>3b53	80bb53	8f 8f 84 88 8f 95 93 85 ff
5807	>3b5c	80bb5c	90 8f 92 94 85 84 a0 94		CX16PORT  		.text "PORTED TO THE SUPER NES BY",$ff
	>3b64	80bb64	8f a0 94 88 85 a0 93 95 90 85 92 a0 8e 85 93 a0
	>3b74	80bb74	82 99 ff
5808	>3b77	80bb77	83 8f 84 85 a0 a0 ba a0		PROGRAM	 		.text "CODE  : OZIPHANTOM",$ff
	>3b7f	80bb7f	8f 9a 89 90 88 81 8e 94 8f 8d ff
5809	>3b8a	80bb8a	81 92 94 ff			ART		 		.text "ART",$ff
5810	>3b8e	80bb8e	ba a0 93 81 95 8c a0 83		SAUL				.text ": SAUL CROSS",$ff
	>3b96	80bb96	92 8f 93 93 ff
5811	>3b9b	80bb9b	8d 95 93 89 83 ff		MUSIC 	 		.text "MUSIC",$ff
5812	>3ba1	80bba1	93 86 98 ff			SFX				.text "SFX",$ff
5813	>3ba5	80bba5	8e 8f 8e 85 ff			NONE				.text "NONE",$ff
5814	>3baa	80bbaa	82 8f 94 88 ff			BOTH				.text "BOTH",$ff
5815	>3baf	80bbaf	93 90 85 83 89 81 8c a0		SPECIALTHANKS 	.text "SPECIAL THANKS GO TO",$ff
	>3bb7	80bbb7	94 88 81 8e 8b 93 a0 87 8f a0 94 8f ff
5816	>3bc4	80bbc4	93 8f 83 89 ac a0 8d 81		SOCI		  		.text "SOCI, MARTIN PIPER",$ff
	>3bcc	80bbcc	92 94 89 8e a0 90 89 90 85 92 ff
5817	>3bd7	80bbd7	84 89 84 89 ac a0 94 88		MARTINPIPER	  	.text "DIDI, THERYK",$ff
	>3bdf	80bbdf	85 92 99 8b ff
5818	>3be4	80bbe4	8f 90 94 89 92 8f 83 ff		OPTIROC			.text "OPTIROC",$ff
5819	>3bec	80bbec	93 8e 85 93 a0 85 84 89		VERSION			.text "SNES EDITION 1.3",$ff
	>3bf4	80bbf4	94 89 8f 8e a0 b1 ae b3 ff
5820	>3bfd	80bbfd	94 99 90 85 a0 90 81 93		PASSWORD			.text "TYPE PASSWORD : SPACE TO CLEAR",$ff
	>3c05	80bc05	93 97 8f 92 84 a0 ba a0 93 90 81 83 85 a0 94 8f
	>3c15	80bc15	a0 83 8c 85 81 92 ff
5821	>3c1c	80bc1c	ad ad ad ad ad ad ad ad		PASSWORDBLANK	.text "------------",$ff
	>3c24	80bc24	ad ad ad ad ff

5823							; the Cheat password bytes not used in SNES yet, left for cribbing, execise to the user etc
5824	>3c29	80bc29	88 8f 94 8f 90 81 81 83		PASSWORD_LIVES 	.byte $88,$8f,$94,$8f,$90,$81,$81,$83,$92,$8f,$93,$93 ; hotopaacross
	>3c31	80bc31	92 8f 93 93
5825	>3c35	80bc35	89 93 88 8f 8f 94 92 85		PASSWORD_RED 		.byte $89,$93,$88,$8f,$8f,$94,$92,$85,$84,$81,$8c,$8c ; ishootredall
	>3c3d	80bc3d	84 81 8c 8c
5826	>3c41	80bc41	8d 81 99 84 81 99 8d 81		PASSWORD_SPRING	.byte $8d,$81,$99,$84,$81,$99,$8d,$81,$99,$84,$81,$99 ; maydaymayday
	>3c49	80bc49	99 84 81 99
5827	>3c4d	80bc4d	93 94 85 90 90 85 84 8f		PASSWORD_LEVEL  	.byte $93,$94,$85,$90,$90,$85,$84,$8f,$96,$85,$92,$81 ; steppedovera
	>3c55	80bc55	96 85 92 81


:1	;******  Return to file: QWAKSNES.asm

185							.send

187							.section sBank81
188	>8000	818000	00				.byte 0 ; place holder
189							.send

191							.section sBank82
192	>010000	828000	b0 00 53 00 17 00 e6 00			BackShadowChars	.binary "../back_shadow.bin"
	>010008	828008	0b 00 f0 00 d9 00 ab 00 00 b0 00 53 00 17 00 e6
	>010018	828018	00 0b 00 f0 00 d9 00 ab e6 00 f4 00 cb 00 a8 00
	>010028	828028	17 00 ef 00 0f 00 af 00 00 e6 00 f4 00 cb 00 a8
	>010038	828038	00 17 00 ef 00 0f 00 af 4b 00 88 00 17 00 ef 00
	>010048	828048	1d 00 d6 00 a8 00 e7 00 00 4b 00 88 00 17 00 ef
	>010058	828058	00 1d 00 d6 00 a8 00 e7 05 00 fa 00 f5 00 a4 00
	>010068	828068	48 00 17 00 ef 00 0f 00 00 05 00 fa 00 f5 00 a4
	>010078	828078	00 48 00 17 00 ef 00 0f 10 00 00 00 10 00 a0 00
	>010088	828088	01 00 a0 00 51 00 aa 00 00 10 00 00 00 10 00 a0
	>010098	828098	00 01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00
	>0100a8	8280a8	15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00 00
	>0100b8	8280b8	00 15 00 aa 00 05 00 aa 00 00 00 00 00 00 00 00
	>0100c8	8280c8	01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00 00
	>0100d8	8280d8	00 01 00 00 00 01 00 0a 00 00 00 00 00 00 00 00
	>0100e8	8280e8	01 00 a0 00 51 00 aa 00 00 00 00 00 00 00 00 00
	>0100f8	8280f8	00 01 00 a0 00 51 00 aa 00 00 02 00 05 00 02 00
	>010108	828108	01 00 a0 00 51 00 aa 00 00 00 00 02 00 05 00 02
	>010118	828118	00 01 00 a0 00 51 00 aa d1 00 83 00 17 00 a6 00
	>010128	828128	03 00 00 00 01 00 0a 00 00 d1 00 83 00 17 00 a6
	>010138	828138	00 03 00 00 00 01 00 0a 01 00 08 00 05 00 0a 00
	>010148	828148	05 00 02 00 00 00 02 00 00 01 00 08 00 05 00 0a
	>010158	828158	00 05 00 02 00 00 00 02 00 00 02 00 05 00 02 00
	>010168	828168	01 00 00 00 01 00 0a 00 00 00 00 02 00 05 00 02
	>010178	828178	00 01 00 00 00 01 00 0a 00 00 55 00 00 00 40 00
	>010188	828188	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010198	828198	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>0101a8	8281a8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>0101b8	8281b8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>0101c8	8281c8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>0101d8	8281d8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>0101e8	8281e8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>0101f8	8281f8	00 02 00 00 00 aa 00 00 ff 30 ff c3 ff 0c ff 3f
	>010208	828208	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010218	828218	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>010228	828228	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>010238	828238	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>010248	828248	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>010258	828258	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>010268	828268	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>010278	828278	00 03 00 cf 00 33 00 fc ff 30 ff c3 ff 0c ff 3f
	>010288	828288	ff cf ff 3f ff ff ff 3f 00 c0 00 00 00 00 00 00
	>010298	828298	00 00 00 00 00 00 00 00 ff 0c ff 33 ff ff ff ff
	>0102a8	8282a8	ff fc ff ff ff ff ff ff 00 03 00 00 00 00 00 00
	>0102b8	8282b8	00 03 00 00 00 00 00 00 ff ff ff ff ff ff ff 3f
	>0102c8	8282c8	ff ff ff ff ff cc 3f 33 00 00 00 00 00 00 00 00
	>0102d8	8282d8	00 00 00 00 00 33 00 0c ff fc ff ff ff fc ff f3
	>0102e8	8282e8	ff fc ff 30 ff cc fc 00 00 03 00 00 00 03 00 0c
	>0102f8	8282f8	00 03 00 cf 00 33 00 fc ff ff ff ff ff ff ff 3f
	>010308	828308	ff ff ff 33 ff cc ff 00 00 00 00 00 00 00 00 00
	>010318	828318	00 00 00 cc 00 33 00 ff ff fc ff ff ff fc ff f3
	>010328	828328	ff fc ff 30 ff cc ff 00 00 03 00 00 00 03 00 0c
	>010338	828338	00 03 00 cf 00 33 00 ff ff ff ff ff ff ff ff 33
	>010348	828348	ff cc ff 00 33 00 cc 00 00 00 00 00 00 00 00 cc
	>010358	828358	00 33 00 ff 00 33 00 cc ff fc ff ff ff fc ff 33
	>010368	828368	ff cc ff 00 33 00 cc 00 00 03 00 00 00 03 00 cc
	>010378	828378	00 33 00 ff 00 33 00 cc ff ff ff 33 ff cc ff 00
	>010388	828388	33 00 cc 00 00 00 00 00 00 00 00 cc 00 33 00 ff
	>010398	828398	00 33 00 cc 00 00 00 00 ff fc ff 33 ff cc ff 00
	>0103a8	8283a8	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>0103b8	8283b8	00 33 00 cc 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103c8	8283c8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103d8	8283d8	00 00 00 00 00 00 00 00 ff cc ff 00 33 00 cc 00
	>0103e8	8283e8	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>0103f8	8283f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010408	828408	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010418	828418	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010428	828428	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010438	828438	00 00 00 00 00 00 00 00 ff 30 ff c3 ff 0c ff 3f
	>010448	828448	ff cf ff 3f ff ff ff 33 00 c0 00 00 00 00 00 00
	>010458	828458	00 00 00 00 00 00 00 cc ff 0c ff 33 ff ff ff ff
	>010468	828468	ff fc ff ff ff ff ff 33 00 03 00 00 00 00 00 00
	>010478	828478	00 03 00 00 00 00 00 cc ff 30 ff c3 ff 0c ff 3f
	>010488	828488	ff cf ff 33 ff cc ff 00 00 c0 00 00 00 00 00 00
	>010498	828498	00 00 00 cc 00 33 00 ff ff 0c ff 33 ff ff ff ff
	>0104a8	8284a8	ff fc ff 33 ff cc ff 00 00 03 00 00 00 00 00 00
	>0104b8	8284b8	00 03 00 cc 00 33 00 ff ff 30 ff c3 ff 0c ff 33
	>0104c8	8284c8	ff cc ff 00 33 00 cc 00 00 c0 00 00 00 00 00 cc
	>0104d8	8284d8	00 33 00 ff 00 33 00 cc ff 0c ff 33 ff ff ff 33
	>0104e8	8284e8	ff cc ff 00 33 00 cc 00 00 03 00 00 00 00 00 cc
	>0104f8	8284f8	00 33 00 ff 00 33 00 cc ff 30 ff 03 ff 0c ff 00
	>010508	828508	33 00 cc 00 00 00 00 00 00 c0 00 cc 00 33 00 ff
	>010518	828518	00 33 00 cc 00 00 00 00 ff 0c ff 33 ff cc ff 00
	>010528	828528	33 00 cc 00 00 00 00 00 00 03 00 cc 00 33 00 ff
	>010538	828538	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>010548	828548	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010558	828558	00 00 00 00 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>010568	828568	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>010578	828578	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010588	828588	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010598	828598	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0105a8	8285a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0105b8	8285b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105c8	8285c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105d8	8285d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105e8	8285e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0105f8	8285f8	00 00 00 00 00 00 00 00 33 00 cc 00 33 00 c3 00
	>010608	828608	30 00 cf 00 3f 00 3f 00 00 33 00 cc 03 30 00 c3
	>010618	828618	00 30 0c c3 3f 00 33 00 03 00 fc 00 fc 00 f0 00
	>010628	828628	c3 00 30 00 fc 00 fc 00 00 03 fc 00 30 cc c0 30
	>010638	828638	00 c3 00 30 f0 0c fc 00 3f 00 3f 00 3f 00 3f 00
	>010648	828648	0f 00 cf 00 33 00 cc 00 33 00 3f 00 3f 00 0f 30
	>010658	828658	03 0c 0c c3 00 33 00 cc fc 00 fc 00 fc 00 fc 00
	>010668	828668	f3 00 f0 00 c3 00 0c 00 f0 0c c0 3c f0 0c c0 3c
	>010678	828678	00 f3 c0 30 00 c3 00 0c 00 00 bf 00 3f 00 20 00
	>010688	828688	00 00 f9 00 d3 00 02 00 00 00 00 bf 00 3f 00 20
	>010698	828698	00 00 00 f9 00 d3 00 02 00 00 bf 00 3d 00 20 00
	>0106a8	8286a8	00 00 fb 00 f3 00 02 00 00 00 00 bf 00 3d 00 20
	>0106b8	8286b8	00 00 00 fb 00 f3 00 02 00 00 9f 00 3f 00 20 00
	>0106c8	8286c8	00 00 db 00 f3 00 02 00 00 00 00 9f 00 3f 00 20
	>0106d8	8286d8	00 00 00 db 00 f3 00 02 00 00 bd 00 3f 00 20 00
	>0106e8	8286e8	00 00 f9 00 f3 00 02 00 00 00 00 bd 00 3f 00 20
	>0106f8	8286f8	00 00 00 f9 00 f3 00 02 00 00 10 00 20 00 00 00
	>010708	828708	00 00 51 00 e2 00 00 00 00 00 00 10 00 20 00 00
	>010718	828718	00 00 00 51 00 e2 00 00 00 00 00 00 00 00 00 00
	>010728	828728	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010738	828738	00 00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00
	>010748	828748	00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00
	>010758	828758	00 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00
	>010768	828768	00 00 51 00 a2 00 00 00 00 00 00 00 00 00 00 00
	>010778	828778	00 00 00 51 00 a2 00 00 00 00 05 00 0a 00 00 00
	>010788	828788	00 00 51 00 a2 00 00 00 00 00 00 05 00 0a 00 00
	>010798	828798	00 00 00 51 00 a2 00 00 00 00 97 00 2b 00 00 00
	>0107a8	8287a8	00 00 01 00 02 00 00 00 00 00 00 97 00 2b 00 00
	>0107b8	8287b8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107c8	8287c8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107d8	8287d8	00 00 00 01 00 02 00 00 00 00 05 00 0a 00 00 00
	>0107e8	8287e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0107f8	8287f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>010808	828808	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010818	828818	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010828	828828	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010838	828838	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010848	828848	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010858	828858	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010868	828868	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010878	828878	00 02 00 00 00 aa 00 00 0f 00 00 00 cc 00 3c 00
	>010888	828888	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010898	828898	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>0108a8	8288a8	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>0108b8	8288b8	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>0108c8	8288c8	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>0108d8	8288d8	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>0108e8	8288e8	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>0108f8	8288f8	c0 33 00 c3 00 0c 00 f0 0f 00 00 00 cc 00 3c 00
	>010908	828908	3c 00 30 00 00 00 00 00 00 0f 3f 00 33 c0 c3 00
	>010918	828918	c3 00 cf 00 ff 00 ff 00 f0 00 0c 00 03 00 00 00
	>010928	828928	03 00 00 00 03 00 0c 00 00 f0 f0 0c fc 03 ff 00
	>010938	828938	fc 03 ff 00 fc 03 f3 0c 00 00 00 00 00 00 c0 00
	>010948	828948	03 00 cc 00 33 00 0f 00 ff 00 ff 00 ff 00 3f c0
	>010958	828958	fc 03 33 cc 00 33 00 0f 03 00 0f 00 33 00 0f 00
	>010968	828968	33 00 c3 00 0c 00 f0 00 fc 03 f0 0f c0 33 f0 0f
	>010978	828978	c0 33 00 c3 00 0c 00 f0 00 00 00 00 00 00 c0 00
	>010988	828988	03 00 cc 00 33 00 ff 00 ff 00 ff 00 ff 00 3f c0
	>010998	828998	fc 03 33 cc 00 33 00 ff 03 00 0f 00 33 00 0f 00
	>0109a8	8289a8	33 00 cf 00 3f 00 ff 00 fc 03 f0 0f c0 33 f0 0f
	>0109b8	8289b8	c0 33 00 cf 00 3f 00 ff 00 00 00 00 00 00 cc 00
	>0109c8	8289c8	33 00 ff 00 33 00 cc 00 ff 00 ff 00 ff 00 33 cc
	>0109d8	8289d8	cc 33 00 ff 00 33 00 cc 03 00 0f 00 33 00 cf 00
	>0109e8	8289e8	33 00 ff 00 33 00 cc 00 fc 03 f0 0f c0 33 30 cf
	>0109f8	8289f8	c0 33 00 ff 00 33 00 cc 00 00 cc 00 33 00 ff 00
	>010a08	828a08	33 00 cc 00 00 00 00 00 ff 00 33 cc cc 33 00 ff
	>010a18	828a18	00 33 00 cc 00 00 00 00 03 00 cf 00 33 00 ff 00
	>010a28	828a28	33 00 cc 00 00 00 00 00 fc 03 30 cf c0 33 00 ff
	>010a38	828a38	00 33 00 cc 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a48	828a48	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a58	828a58	00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc 00
	>010a68	828a68	00 00 00 00 00 00 00 00 cc 33 00 ff 00 33 00 cc
	>010a78	828a78	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010a88	828a88	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010a98	828a98	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010aa8	828aa8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010ab8	828ab8	00 00 00 00 00 00 00 00 0f 00 00 00 cc 00 3c 00
	>010ac8	828ac8	3c 00 30 00 00 00 cc 00 00 0f 3f 00 33 c0 c3 00
	>010ad8	828ad8	c3 00 cf 00 ff 00 33 cc f0 00 0c 00 03 00 00 00
	>010ae8	828ae8	03 00 00 00 03 00 cc 00 00 f0 f0 0c fc 03 ff 00
	>010af8	828af8	fc 03 ff 00 fc 03 33 cc 0f 00 00 00 cc 00 3c 00
	>010b08	828b08	3c 00 fc 00 33 00 ff 00 00 0f 3f 00 33 c0 c3 00
	>010b18	828b18	c3 00 03 cc cc 33 00 ff f0 00 0c 00 03 00 00 00
	>010b28	828b28	03 00 cc 00 33 00 ff 00 00 f0 f0 0c fc 03 ff 00
	>010b38	828b38	fc 03 33 cc cc 33 00 ff 0f 00 00 00 cc 00 fc 00
	>010b48	828b48	3f 00 ff 00 33 00 cc 00 00 0f 3f 00 33 c0 03 cc
	>010b58	828b58	c0 33 00 ff 00 33 00 cc f0 00 0c 00 03 00 cc 00
	>010b68	828b68	33 00 ff 00 33 00 cc 00 00 f0 f0 0c fc 03 33 cc
	>010b78	828b78	cc 33 00 ff 00 33 00 cc 0f 00 cc 00 ff 00 ff 00
	>010b88	828b88	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 f3 00 ff
	>010b98	828b98	00 33 00 cc 00 00 00 00 f0 00 cc 00 33 00 ff 00
	>010ba8	828ba8	33 00 cc 00 00 00 00 00 00 f0 30 cc cc 33 00 ff
	>010bb8	828bb8	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>010bc8	828bc8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>010bd8	828bd8	00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc 00
	>010be8	828be8	00 00 00 00 00 00 00 00 00 f3 00 ff 00 33 00 cc
	>010bf8	828bf8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c08	828c08	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c18	828c18	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>010c28	828c28	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>010c38	828c38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c48	828c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c58	828c58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c68	828c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>010c78	828c78	00 00 00 00 00 00 00 00 30 00 c3 03 0f 03 cf 03
	>010c88	828c88	0f 0f cf 0f 0f 0f cf 03 00 30 03 c0 03 00 03 c0
	>010c98	828c98	0f 00 0f c0 0f 00 03 cc 03 00 c0 00 f3 c0 f0 c0
	>010ca8	828ca8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 c0 33 c0 30
	>010cb8	828cb8	c0 33 c0 30 c0 33 00 f0 0f 00 c3 00 30 00 c3 00
	>010cc8	828cc8	33 03 c3 00 33 03 cc 00 00 0f 00 c3 00 30 00 c3
	>010cd8	828cd8	03 30 00 c0 03 30 00 cc f3 00 cc 00 03 00 0c 00
	>010ce8	828ce8	c3 00 cc c0 c3 00 0c 00 00 f3 00 cc 00 03 00 0c
	>010cf8	828cf8	00 c3 c0 0c 00 c3 00 0c f2 00 f2 00 e2 00 c4 00
	>010d08	828d08	09 00 13 00 e7 00 0f 00 00 f2 00 f2 00 e2 00 c4
	>010d18	828d18	00 09 00 13 00 e7 00 0f 7f 00 7f 00 7f 00 2f 00
	>010d28	828d28	90 00 c8 00 a7 00 d0 00 00 7f 00 7f 00 7f 00 2f
	>010d38	828d38	00 90 00 c8 00 a7 00 d0 0f 00 e5 00 f2 00 e9 00
	>010d48	828d48	f4 00 f2 00 f2 00 f2 00 00 0f 00 e5 00 f2 00 e9
	>010d58	828d58	00 f4 00 f2 00 f2 00 f2 90 00 27 00 4f 00 9f 00
	>010d68	828d68	3f 00 7f 00 7f 00 7f 00 00 90 00 27 00 4f 00 9f
	>010d78	828d78	00 3f 00 7f 00 7f 00 7f a0 00 50 00 a0 00 40 00
	>010d88	828d88	08 00 11 00 e2 00 05 00 00 a0 00 50 00 a0 00 40
	>010d98	828d98	00 08 00 11 00 e2 00 05 00 00 00 00 00 00 00 00
	>010da8	828da8	80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00 00
	>010db8	828db8	00 80 00 40 00 a2 00 50 00 00 00 00 00 00 00 00
	>010dc8	828dc8	08 00 01 00 02 00 05 00 00 00 00 00 00 00 00 00
	>010dd8	828dd8	00 08 00 01 00 02 00 05 00 00 00 00 00 00 00 00
	>010de8	828de8	08 00 11 00 a2 00 05 00 00 00 00 00 00 00 00 00
	>010df8	828df8	00 08 00 11 00 a2 00 05 02 00 00 00 02 00 04 00
	>010e08	828e08	08 00 11 00 a2 00 05 00 00 02 00 00 00 02 00 04
	>010e18	828e18	00 08 00 11 00 a2 00 05 b2 00 52 00 a2 00 44 00
	>010e28	828e28	08 00 01 00 02 00 05 00 00 b2 00 52 00 a2 00 44
	>010e38	828e38	00 08 00 01 00 02 00 05 0a 00 05 00 02 00 01 00
	>010e48	828e48	00 00 00 00 02 00 00 00 00 0a 00 05 00 02 00 01
	>010e58	828e58	00 00 00 00 00 02 00 00 02 00 00 00 02 00 04 00
	>010e68	828e68	08 00 01 00 02 00 05 00 00 02 00 00 00 02 00 04
	>010e78	828e78	00 08 00 01 00 02 00 05 00 00 55 00 00 00 40 00
	>010e88	828e88	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>010e98	828e98	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>010ea8	828ea8	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>010eb8	828eb8	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>010ec8	828ec8	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>010ed8	828ed8	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>010ee8	828ee8	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>010ef8	828ef8	00 02 00 00 00 aa 00 00 ff 00 ff 00 ff 00 ff 00
	>010f08	828f08	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f18	828f18	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f28	828f28	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f38	828f38	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f48	828f48	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f58	828f58	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010f68	828f68	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010f78	828f78	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010f88	828f88	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010f98	828f98	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>010fa8	828fa8	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>010fb8	828fb8	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>010fc8	828fc8	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>010fd8	828fd8	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>010fe8	828fe8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>010ff8	828ff8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>011008	829008	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>011018	829018	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>011028	829028	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>011038	829038	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011048	829048	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011058	829058	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011068	829068	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011078	829078	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011088	829088	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011098	829098	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>0110a8	8290a8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0110b8	8290b8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110c8	8290c8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110d8	8290d8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0110e8	8290e8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0110f8	8290f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011108	829108	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011118	829118	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011128	829128	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011138	829138	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>011148	829148	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011158	829158	c3 00 c3 00 c3 00 3c c3 ff 00 f3 00 f3 00 f3 00
	>011168	829168	f3 00 f3 00 f3 00 c0 00 33 0c c0 33 c0 33 c0 33
	>011178	829178	c0 33 c0 33 c0 33 00 c0 ff 00 ff 00 ff 00 ff 00
	>011188	829188	ff 00 ff 00 ff 00 ff 00 00 00 c3 00 c3 00 c3 00
	>011198	829198	c3 00 03 cc c0 33 00 ff ff 00 f3 00 f3 00 f3 00
	>0111a8	8291a8	f3 00 ff 00 f3 00 ff 00 33 0c c0 33 c0 33 c0 33
	>0111b8	8291b8	c0 33 00 ff c0 33 00 ff ff 00 ff 00 ff 00 ff 00
	>0111c8	8291c8	ff 00 ff 00 33 00 cc 00 00 00 c3 00 c3 00 03 cc
	>0111d8	8291d8	c0 33 00 ff 00 33 00 cc ff 00 f3 00 f3 00 ff 00
	>0111e8	8291e8	f3 00 ff 00 33 00 cc 00 33 0c c0 33 c0 33 00 ff
	>0111f8	8291f8	c0 33 00 ff 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>011208	829208	33 00 cc 00 00 00 00 00 00 00 03 cc c0 33 00 ff
	>011218	829218	00 33 00 cc 00 00 00 00 ff 00 ff 00 f3 00 ff 00
	>011228	829228	33 00 cc 00 00 00 00 00 33 0c 00 ff c0 33 00 ff
	>011238	829238	00 33 00 cc 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011248	829248	00 00 00 00 00 00 00 00 00 33 00 ff 00 33 00 cc
	>011258	829258	00 00 00 00 00 00 00 00 ff 00 ff 00 33 00 cc 00
	>011268	829268	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011278	829278	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011288	829288	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011298	829298	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0112a8	8292a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0112b8	8292b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112c8	8292c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112d8	8292d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112e8	8292e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0112f8	8292f8	00 00 00 00 00 00 00 00 33 00 cc 00 30 00 c3 00
	>011308	829308	33 00 c3 00 33 00 cc 00 00 33 00 cc 00 30 03 c0
	>011318	829318	03 30 00 c3 00 33 00 cc 33 00 00 00 fc 00 f0 00
	>011328	829328	f3 00 cc 00 c3 00 0c 00 00 33 00 00 f0 0c 30 c0
	>011338	829338	c0 33 c0 0c 00 c3 00 0c 00 00 03 30 c0 3c 00 fc
	>011348	829348	0c f0 30 00 03 00 cc 00 00 00 00 03 00 00 00 00
	>011358	829358	00 0c 00 30 00 03 00 cc 33 00 0c 00 03 30 c0 3c
	>011368	829368	00 fc 0c f0 33 00 cc 00 00 33 00 0c 00 03 00 00
	>011378	829378	00 00 00 0c 00 33 00 cc e0 00 c3 00 8f 00 1c 00
	>011388	829388	30 00 33 00 67 00 6f 00 00 e0 00 c3 00 8f 00 1c
	>011398	829398	00 30 00 33 00 67 00 6f 1f 00 fd 00 f3 00 0f 00
	>0113a8	8293a8	ff 00 ff 00 f7 00 fe 00 00 1f 00 fd 00 f3 00 0f
	>0113b8	8293b8	00 ff 00 ff 00 f7 00 fe 7f 00 ef 00 ff 00 ff 00
	>0113c8	8293c8	f0 00 cf 00 bf 00 f8 00 00 7f 00 ef 00 ff 00 ff
	>0113d8	8293d8	00 f0 00 cf 00 bf 00 f8 f6 00 e6 00 cc 00 0c 00
	>0113e8	8293e8	38 00 f1 00 c3 00 07 00 00 f6 00 e6 00 cc 00 0c
	>0113f8	8293f8	00 38 00 f1 00 c3 00 07 a0 00 40 00 80 00 00 00
	>011408	829408	10 00 22 00 45 00 2a 00 00 a0 00 40 00 80 00 00
	>011418	829418	00 10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00
	>011428	829428	55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00 00
	>011438	829438	00 55 00 aa 00 55 00 aa 00 00 00 00 00 00 00 00
	>011448	829448	10 00 22 00 45 00 2a 00 00 00 00 00 00 00 00 00
	>011458	829458	00 10 00 22 00 45 00 2a 00 00 02 00 05 00 08 00
	>011468	829468	10 00 22 00 45 00 2a 00 00 00 00 02 00 05 00 08
	>011478	829478	00 10 00 22 00 45 00 2a 40 00 82 00 05 00 08 00
	>011488	829488	00 00 02 00 05 00 0a 00 00 40 00 82 00 05 00 08
	>011498	829498	00 00 00 02 00 05 00 0a 00 00 02 00 05 00 08 00
	>0114a8	8294a8	00 00 02 00 05 00 0a 00 00 00 00 02 00 05 00 08
	>0114b8	8294b8	00 00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00
	>0114c8	8294c8	00 00 02 00 05 00 0a 00 00 00 00 00 00 00 00 00
	>0114d8	8294d8	00 00 00 02 00 05 00 0a 00 00 05 00 0a 00 00 00
	>0114e8	8294e8	00 00 01 00 02 00 00 00 00 00 00 05 00 0a 00 00
	>0114f8	8294f8	00 00 00 01 00 02 00 00 00 00 55 00 00 00 40 00
	>011508	829508	01 00 42 00 00 00 42 00 00 00 00 55 00 00 00 40
	>011518	829518	00 01 00 42 00 00 00 42 00 00 54 00 02 00 00 00
	>011528	829528	82 00 40 00 02 00 40 00 00 00 00 54 00 02 00 00
	>011538	829538	00 82 00 40 00 02 00 40 08 00 44 00 02 00 41 00
	>011548	829548	00 00 40 00 2a 00 00 00 00 08 00 44 00 02 00 41
	>011558	829558	00 00 00 40 00 2a 00 00 12 00 20 00 42 00 80 00
	>011568	829568	02 00 00 00 aa 00 00 00 00 12 00 20 00 42 00 80
	>011578	829578	00 02 00 00 00 aa 00 00 ff 0f ff c0 ff 00 ff fc
	>011588	829588	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011598	829598	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>0115a8	8295a8	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>0115b8	8295b8	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>0115c8	8295c8	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>0115d8	8295d8	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>0115e8	8295e8	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>0115f8	8295f8	00 00 00 3f 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>011608	829608	ff 0f ff c0 ff 00 ff 03 0f f0 c0 00 00 00 fc 03
	>011618	829618	0f 00 c0 3f 00 ff 03 fc ff f0 ff 3f ff ff ff 03
	>011628	829628	ff f0 ff 3f ff ff ff fc f0 0f 3f 00 ff 00 03 fc
	>011638	829638	f0 00 3f c0 ff 00 fc 03 0f 00 ff 3f ff 00 fc 00
	>011648	829648	00 00 c0 00 00 00 00 00 00 0f 3f c0 00 ff 00 fc
	>011658	829658	00 00 00 c0 00 00 00 00 f0 00 ff c0 00 00 03 00
	>011668	829668	00 00 3f 00 00 00 00 00 00 f0 c0 3f 00 00 00 03
	>011678	829678	00 00 00 3f 00 00 00 00 0f 00 ff 3f ff 00 fc 00
	>011688	829688	00 00 cc 00 33 00 ff 00 00 0f 3f c0 00 ff 00 fc
	>011698	829698	00 00 00 cc 00 33 00 ff f0 00 ff c0 00 00 03 00
	>0116a8	8296a8	00 00 ff 00 33 00 ff 00 00 f0 c0 3f 00 00 00 03
	>0116b8	8296b8	00 00 00 ff 00 33 00 ff 0f 00 ff 3f ff 00 fc 00
	>0116c8	8296c8	33 00 ff 00 33 00 cc 00 00 0f 3f c0 00 ff 00 fc
	>0116d8	8296d8	00 33 00 ff 00 33 00 cc f0 00 ff c0 00 00 cf 00
	>0116e8	8296e8	33 00 ff 00 33 00 cc 00 00 f0 c0 3f 00 00 00 cf
	>0116f8	8296f8	00 33 00 ff 00 33 00 cc 0f 00 ff 33 ff 00 ff 00
	>011708	829708	33 00 cc 00 00 00 00 00 00 0f 33 cc 00 ff 00 ff
	>011718	829718	00 33 00 cc 00 00 00 00 f0 00 ff 00 33 00 ff 00
	>011728	829728	33 00 cc 00 00 00 00 00 00 f0 00 ff 00 33 00 ff
	>011738	829738	00 33 00 cc 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011748	829748	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011758	829758	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>011768	829768	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>011778	829778	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011788	829788	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011798	829798	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>0117a8	8297a8	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>0117b8	8297b8	00 00 00 00 00 00 00 00 ff 0f ff c0 ff 00 ff fc
	>0117c8	8297c8	ff 0f ff 00 ff 00 ff 00 0f f0 c0 00 00 00 fc 03
	>0117d8	8297d8	0f 00 00 ff 00 ff 00 ff ff f0 ff 3f ff ff ff 03
	>0117e8	8297e8	ff f0 ff 3f ff ff ff 30 f0 0f 3f 00 ff 00 03 fc
	>0117f8	8297f8	f0 00 3f c0 ff 00 30 cf ff 0f ff c0 ff 00 ff 30
	>011808	829808	ff 0c ff 00 33 00 cc 00 0f f0 c0 00 00 00 30 cf
	>011818	829818	0c 33 00 ff 00 33 00 cc ff f0 ff 3f ff ff ff 03
	>011828	829828	ff f0 ff 33 ff cc ff 00 f0 0f 3f 00 ff 00 03 fc
	>011838	829838	f0 00 33 cc cc 33 00 ff ff 0f ff 00 ff 00 ff 00
	>011848	829848	33 00 cc 00 00 00 00 00 0f f0 00 cc 00 33 00 ff
	>011858	829858	00 33 00 cc 00 00 00 00 ff f0 ff 33 ff cc ff 00
	>011868	829868	33 00 cc 00 00 00 00 00 f0 0f 33 cc cc 33 00 ff
	>011878	829878	00 33 00 cc 00 00 00 00 ff 0c ff 00 33 00 cc 00
	>011888	829888	00 00 00 00 00 00 00 00 0c f3 00 ff 00 33 00 cc
	>011898	829898	00 00 00 00 00 00 00 00 ff c0 ff 00 33 00 cc 00
	>0118a8	8298a8	00 00 00 00 00 00 00 00 c0 3f 00 ff 00 33 00 cc
	>0118b8	8298b8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118c8	8298c8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118d8	8298d8	00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc 00
	>0118e8	8298e8	00 00 00 00 00 00 00 00 00 3f 00 ff 00 33 00 cc
	>0118f8	8298f8	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011908	829908	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011918	829918	00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00 00
	>011928	829928	00 00 00 00 00 00 00 00 00 33 00 cc 00 00 00 00
	>011938	829938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011948	829948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011958	829958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011968	829968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011978	829978	00 00 00 00 00 00 00 00 33 00 cc 00 33 03 cf 0c
	>011988	829988	0f 0c 3f 3f 3f 3f 3f 0f 00 33 00 cc 00 30 00 c0
	>011998	829998	00 00 00 00 00 00 00 30 33 00 0c 00 c3 c0 f0 f0
	>0119a8	8299a8	f3 f0 fc fc fc f0 f0 c0 00 33 00 0c 00 03 00 00
	>0119b8	8299b8	00 03 00 00 00 0c 00 30 3f 00 3f 00 0c 00 c0 00
	>0119c8	8299c8	00 00 c0 00 30 00 cc 00 00 3f 00 3f 00 0c 00 c0
	>0119d8	8299d8	00 00 03 c0 00 30 00 cc fc 00 f0 00 c0 00 00 00
	>0119e8	8299e8	03 00 0c 00 33 00 cc 00 00 fc 00 f0 00 c0 00 00
	>0119f8	8299f8	30 03 c0 0c 00 33 00 cc
193	>011a00	829a00	ff 00 ff cf ff 03 ff cf			FixedSectionChars	.binary "../fixed_section_chars.bin"
	>011a08	829a08	ff 03 ff cf ff 03 ff 30 00 00 00 00 00 00 00 00
	>011a18	829a18	00 00 00 00 00 00 00 cf ff f3 c0 00 f3 00 c0 00
	>011a28	829a28	f3 00 c0 00 f3 00 00 00 00 0c 00 c0 00 f3 00 c0
	>011a38	829a38	00 f3 00 c0 00 f3 00 00 00 00 3f 0c 3f 33 3f 33
	>011a48	829a48	3f 33 3f 33 3f 33 3f 0c 00 00 00 33 00 00 00 00
	>011a58	829a58	00 00 00 00 00 00 00 33 00 00 00 00 cc 00 cc 00
	>011a68	829a68	cc 00 cc 00 cc 00 00 00 00 00 00 00 00 cc 00 cc
	>011a78	829a78	00 cc 00 cc 00 cc 00 00 0c 00 c0 00 30 00 c0 00
	>011a88	829a88	0c 00 0c 00 c0 00 00 00 00 0c 00 c0 03 00 0f c0
	>011a98	829a98	03 00 33 00 3f 00 3f 00 03 00 c0 00 03 00 30 00
	>011aa8	829aa8	03 00 30 00 cc 00 30 00 00 03 00 00 c0 03 c0 30
	>011ab8	829ab8	f0 00 c0 30 30 cc c0 30 0c 00 33 00 3f 00 c3 00
	>011ac8	829ac8	0c 00 30 00 03 00 c0 00 33 0c 0c 33 00 3f 00 03
	>011ad8	829ad8	00 0c 00 30 00 00 00 c0 c0 00 f3 00 c0 00 00 00
	>011ae8	829ae8	0c 00 3c 00 03 00 0c 00 00 c0 00 f0 00 c0 00 00
	>011af8	829af8	00 0c 00 30 00 03 00 0c 30 00 c3 00 33 00 c3 03
	>011b08	829b08	33 00 c3 03 33 00 cf 03 00 30 00 c0 00 30 03 c0
	>011b18	829b18	00 30 03 c0 00 30 03 c0 33 00 cc c0 f3 f0 f0 c0
	>011b28	829b28	f3 f0 f0 c0 c3 c0 f0 c0 00 33 c0 0c f0 03 c0 30
	>011b38	829b38	f0 03 c0 30 c0 03 c0 00 3f 0c 3c 30 30 30 30 30
	>011b48	829b48	3c 30 3f 0c 0f 03 c0 00 0c 03 30 0c 30 00 30 00
	>011b58	829b58	30 00 0c 30 03 0c 00 c0 fc 30 3c 0c 0c 0c cc 0c
	>011b68	829b68	3c 0c fc 30 f3 c0 0c 00 30 c0 0c 30 0c 00 0c c0
	>011b78	829b78	0c 00 30 0c c0 33 00 0c 00 03 c0 0f 00 0f 0c 33
	>011b88	829b88	00 3f 0c 33 00 3f 00 3f 00 00 00 c0 00 00 00 0c
	>011b98	829b98	00 00 00 0c 00 00 00 00 00 c0 c0 30 03 f0 c0 3c
	>011ba8	829ba8	00 fc 00 fc 0c f0 00 fc 00 00 00 c0 00 03 00 c0
	>011bb8	829bb8	00 00 00 00 00 0c 00 00 0c 33 00 33 00 3f 0c 33
	>011bc8	829bc8	00 3f 0c 33 00 33 0c 33 00 00 00 00 00 00 00 0c
	>011bd8	829bd8	00 00 00 0c 00 00 00 0c 00 fc cc 30 00 fc 0c f0
	>011be8	829be8	c0 30 0c f0 c0 30 00 30 00 00 00 cc 00 00 00 0c
	>011bf8	829bf8	00 c0 00 0c 00 c0 00 00 30 00 c3 00 30 00 c3 03
	>011c08	829c08	0f 0c cf 03 03 00 30 00 00 30 00 c0 00 00 03 c0
	>011c18	829c18	0c 00 03 0c 00 03 00 00 33 00 00 00 0c 00 c0 c0
	>011c28	829c28	f3 f0 f0 c0 c3 00 0c 00 00 33 00 00 00 00 c0 00
	>011c38	829c38	f0 00 c0 30 00 c3 00 00 00 00 c0 00 33 00 c3 00
	>011c48	829c48	0f 00 c3 00 33 00 cc 00 00 00 00 c0 00 33 03 c0
	>011c58	829c58	0f 00 03 c0 03 30 00 cc c3 00 0c 00 03 00 cc 00
	>011c68	829c68	c3 00 f0 00 c3 00 0c 00 00 03 00 0c 00 03 00 cc
	>011c78	829c78	00 c3 30 c0 00 c3 00 0c 30 00 03 00 3f 00 3f 00
	>011c88	829c88	3f 00 3f 00 3f 00 3f 00 00 30 03 00 33 00 33 00
	>011c98	829c98	33 00 3f 00 33 00 3f 00 30 00 c0 00 f0 00 fc 00
	>011ca8	829ca8	f0 00 fc 00 f0 00 fc 00 00 30 00 c0 00 f0 00 fc
	>011cb8	829cb8	00 f0 00 fc 00 f0 00 fc 3f 00 cf 00 0f 00 cf 00
	>011cc8	829cc8	0f 00 c3 00 33 00 cc 00 00 3f 00 cf 0c 03 00 cf
	>011cd8	829cd8	00 0f 00 c3 00 33 00 cc f0 00 c0 00 f3 00 c0 00
	>011ce8	829ce8	f3 00 cc 00 c3 00 0c 00 f0 00 c0 00 f0 03 c0 00
	>011cf8	829cf8	f0 03 c0 0c 00 c3 00 0c c0 00 3f 33 3f 0c c0 00
	>011d08	829d08	3f 33 3f 0c c0 00 3f 33 00 c0 00 00 00 33 00 c0
	>011d18	829d18	00 00 00 33 00 c0 00 00 03 00 00 00 00 00 f3 00
	>011d28	829d28	00 00 30 00 c3 00 00 00 00 03 cc 00 00 00 00 f3
	>011d38	829d38	cc 00 00 30 00 c3 cc 00 3f 0c c0 00 3f 33 3f 0c
	>011d48	829d48	c0 00 3f 33 3f 0c c0 00 00 33 00 c0 00 00 00 33
	>011d58	829d58	00 c0 00 00 00 33 00 c0 00 00 f3 00 00 00 00 00
	>011d68	829d68	f3 00 00 00 00 00 03 00 00 00 00 f3 cc 00 00 00
	>011d78	829d78	00 f3 cc 00 00 00 00 03 30 00 c3 00 30 00 c3 03
	>011d88	829d88	33 03 c3 03 33 03 cf 0f 00 30 00 c0 00 30 00 c0
	>011d98	829d98	00 30 00 c0 00 30 00 c0 33 00 cc c0 33 00 cc c0
	>011da8	829da8	c3 00 cc c0 c3 00 f0 c0 00 33 00 0c 00 33 00 0c
	>011db8	829db8	00 c3 00 0c 00 c3 00 30 0f 03 3f 33 3f 3f 3f 0f
	>011dc8	829dc8	3f 3f 3f 0c 0f 00 c0 00 00 00 00 00 00 00 00 30
	>011dd8	829dd8	00 00 00 33 00 0f 00 c0 f3 f0 fc c0 fc f0 fc c0
	>011de8	829de8	fc 30 fc c0 f3 00 0c 00 00 03 00 3c 00 0c 00 3c
	>011df8	829df8	00 cc 00 3c 00 f3 00 0c 30 00 c0 03 30 03 c3 0c
	>011e08	829e08	03 0c c0 0f 00 3f 30 0f 00 30 00 c0 00 30 00 c0
	>011e18	829e18	00 00 00 c0 00 00 00 30 33 00 0c c0 03 c0 30 c0
	>011e28	829e28	03 f0 30 c0 0c f0 30 c0 00 33 00 0c 00 03 00 30
	>011e38	829e38	00 03 00 30 00 0c 00 30 3f 00 3f 00 0c 00 33 00
	>011e48	829e48	00 00 c0 00 00 00 c0 00 00 3f 00 3f 00 0c 00 33
	>011e58	829e58	00 00 00 c0 00 00 00 c0 fc 00 f0 00 c0 00 0c 00
	>011e68	829e68	00 0c 0c 30 f3 00 0c 00 00 fc 00 f0 00 c0 00 0c
	>011e78	829e78	00 00 00 0c 00 f3 00 0c 30 00 c3 03 0f 03 cf 03
	>011e88	829e88	0f 0f cf 0f 0f 0f cf 03 00 30 00 c0 00 00 00 c0
	>011e98	829e98	00 00 00 c0 00 00 00 cc 03 00 c0 00 f3 c0 f0 c0
	>011ea8	829ea8	f3 c0 f0 c0 f3 c0 f0 00 00 03 00 c0 00 33 00 30
	>011eb8	829eb8	00 33 00 30 00 33 00 f0
194	>011ec0	829ec0	00 00 3c 00 66 00 6e 00			Font4BPP				.binary "../font4bpp.bin"
	>011ec8	829ec8	60 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ed8	829ed8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 7e 00
	>011ee8	829ee8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ef8	829ef8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>011f08	829f08	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f18	829f18	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011f28	829f28	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f38	829f38	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 66 00
	>011f48	829f48	66 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f58	829f58	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f68	829f68	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f78	829f78	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 70 00
	>011f88	829f88	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011f98	829f98	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 60 00
	>011fa8	829fa8	66 00 3e 00 06 00 00 00 00 00 00 00 00 00 00 00
	>011fb8	829fb8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7e 00
	>011fc8	829fc8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011fd8	829fd8	00 00 00 00 00 00 00 00 00 00 7e 00 18 00 18 00
	>011fe8	829fe8	18 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>011ff8	829ff8	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 06 00
	>012008	82a008	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012018	82a018	00 00 00 00 00 00 00 00 00 00 66 00 66 00 7c 00
	>012028	82a028	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012038	82a038	00 00 00 00 00 00 00 00 00 00 60 00 60 00 60 00
	>012048	82a048	66 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012058	82a058	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 66 00
	>012068	82a068	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012078	82a078	00 00 00 00 00 00 00 00 00 00 66 00 76 00 7e 00
	>012088	82a088	6e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012098	82a098	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120a8	82a0a8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120b8	82a0b8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>0120c8	82a0c8	60 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0120d8	82a0d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 66 00
	>0120e8	82a0e8	6e 00 3c 00 06 00 00 00 00 00 00 00 00 00 00 00
	>0120f8	82a0f8	00 00 00 00 00 00 00 00 00 00 7c 00 66 00 7c 00
	>012108	82a108	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012118	82a118	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 3c 00
	>012128	82a128	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012138	82a138	00 00 00 00 00 00 00 00 00 00 7e 00 5a 00 18 00
	>012148	82a148	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012158	82a158	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012168	82a168	66 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012178	82a178	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>012188	82a188	3c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012198	82a198	00 00 00 00 00 00 00 00 00 00 66 00 66 00 66 00
	>0121a8	82a1a8	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121b8	82a1b8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3c 00
	>0121c8	82a1c8	66 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121d8	82a1d8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 3e 00
	>0121e8	82a1e8	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0121f8	82a1f8	00 00 00 00 00 00 00 00 00 00 7e 00 0c 00 18 00
	>012208	82a208	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012218	82a218	00 00 00 00 00 00 00 00 00 00 3c 00 30 00 30 00
	>012228	82a228	30 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012238	82a238	00 00 00 00 00 00 00 00 00 00 1c 00 32 00 78 00
	>012248	82a248	30 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012258	82a258	00 00 00 00 00 00 00 00 00 00 3c 00 0c 00 0c 00
	>012268	82a268	0c 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012278	82a278	00 00 00 00 00 00 00 00 00 00 18 00 3c 00 7e 00
	>012288	82a288	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012298	82a298	00 00 00 00 00 00 00 00 00 00 08 00 0c 00 7e 00
	>0122a8	82a2a8	0c 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122b8	82a2b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122c8	82a2c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122d8	82a2d8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 18 00
	>0122e8	82a2e8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0122f8	82a2f8	00 00 00 00 00 00 00 00 00 00 66 00 66 00 00 00
	>012308	82a308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012318	82a318	00 00 00 00 00 00 00 00 00 00 24 00 7e 00 24 00
	>012328	82a328	7e 00 24 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012338	82a338	00 00 00 00 00 00 00 00 00 00 28 00 7c 00 7c 00
	>012348	82a348	38 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012358	82a358	00 00 00 00 00 00 00 00 00 00 66 00 6c 00 18 00
	>012368	82a368	36 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012378	82a378	00 00 00 00 00 00 00 00 00 00 38 00 28 00 7e 00
	>012388	82a388	6c 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012398	82a398	00 00 00 00 00 00 00 00 00 00 18 00 18 00 30 00
	>0123a8	82a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123b8	82a3b8	00 00 00 00 00 00 00 00 00 00 18 00 30 00 30 00
	>0123c8	82a3c8	30 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123d8	82a3d8	00 00 00 00 00 00 00 00 00 00 18 00 0c 00 0c 00
	>0123e8	82a3e8	0c 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0123f8	82a3f8	00 00 00 00 00 00 00 00 00 00 66 00 7e 00 18 00
	>012408	82a408	7e 00 66 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012418	82a418	00 00 00 00 00 00 00 00 00 00 18 00 18 00 7e 00
	>012428	82a428	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012438	82a438	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012448	82a448	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012458	82a458	00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e 00
	>012468	82a468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012478	82a478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012488	82a488	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012498	82a498	00 00 00 00 00 00 00 00 00 00 06 00 0c 00 18 00
	>0124a8	82a4a8	30 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124b8	82a4b8	00 00 00 00 00 00 00 00 00 00 3c 00 6e 00 66 00
	>0124c8	82a4c8	76 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124d8	82a4d8	00 00 00 00 00 00 00 00 00 00 18 00 38 00 18 00
	>0124e8	82a4e8	18 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0124f8	82a4f8	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 3c 00
	>012508	82a508	60 00 7e 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012518	82a518	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 0c 00
	>012528	82a528	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012538	82a538	00 00 00 00 00 00 00 00 00 00 6c 00 6c 00 7e 00
	>012548	82a548	0c 00 0c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012558	82a558	00 00 00 00 00 00 00 00 00 00 7e 00 60 00 7c 00
	>012568	82a568	06 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012578	82a578	00 00 00 00 00 00 00 00 00 00 3c 00 62 00 7c 00
	>012588	82a588	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012598	82a598	00 00 00 00 00 00 00 00 00 00 7e 00 66 00 0c 00
	>0125a8	82a5a8	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125b8	82a5b8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3c 00
	>0125c8	82a5c8	66 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125d8	82a5d8	00 00 00 00 00 00 00 00 00 00 3c 00 66 00 3e 00
	>0125e8	82a5e8	46 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0125f8	82a5f8	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012608	82a608	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012618	82a618	00 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00
	>012628	82a628	18 00 18 00 30 00 00 00 00 00 00 00 00 00 00 00
	>012638	82a638	00 00 00 00 00 00 00 00 00 00 1c 00 30 00 60 00
	>012648	82a648	30 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012658	82a658	00 00 00 00 00 00 00 00 00 00 00 00 7e 00 00 00
	>012668	82a668	7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012678	82a678	00 00 00 00 00 00 00 00 00 00 38 00 0c 00 06 00
	>012688	82a688	0c 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00
	>012698	82a698	00 00 00 00 00 00 00 00 00 00 3c 00 46 00 1c 00
	>0126a8	82a6a8	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0126b8	82a6b8	00 00 00 00 00 00 00 00
195	>0126c0	82a6c0	ff 00 ff 00 ff 00 ff 00			TopFixedChars		.binary "../top_fixed_chars.bin"
	>0126c8	82a6c8	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00
	>0126d8	82a6d8	ff 00 ff 00 ff 00 ff 00 03 00 cc 00 0c 03 30 0f
	>0126e8	82a6e8	30 03 30 0f 30 03 30 0f 00 03 00 cc 00 0c 00 30
	>0126f8	82a6f8	00 30 00 30 00 30 00 30 00 00 00 f0 03 f0 c0 3c
	>012708	82a708	00 fc c0 3c 0c 30 c0 3c 00 00 00 00 00 03 00 c0
	>012718	82a718	00 00 00 c0 00 0c 00 c0 33 00 30 0c 30 03 3c 03
	>012728	82a728	30 03 3c 03 30 03 00 03 00 30 00 30 00 30 00 3c
	>012738	82a738	00 30 00 3c 00 30 00 00 00 fc cc 30 00 3c cc 30
	>012748	82a748	00 30 0c 30 00 30 00 30 00 00 00 cc 00 00 00 cc
	>012758	82a758	00 00 00 0c 00 00 00 00 03 00 cf 00 0c 03 33 0c
	>012768	82a768	3c 03 33 0c 30 0f 33 0c 00 03 00 cf 00 0c 00 33
	>012778	82a778	00 3c 00 30 00 30 00 30 c0 00 f0 00 c3 00 cc 30
	>012788	82a788	30 0c cc 30 30 0c cc 30 00 c0 00 f0 00 c3 00 cc
	>012798	82a798	00 30 00 cc 00 30 00 cc 33 0c 33 0c 30 0f 33 0c
	>0127a8	82a7a8	3c 03 33 0c 3c 03 0f 00 00 30 00 30 00 30 00 30
	>0127b8	82a7b8	00 3c 00 33 00 3c 00 0f c0 3c c0 3c 00 3c cc 30
	>0127c8	82a7c8	30 0c cc 30 30 0c cc 30 00 00 00 c0 00 00 00 cc
	>0127d8	82a7d8	00 30 00 cc 00 30 00 cc c0 00 f0 00 33 c0 cc 30
	>0127e8	82a7e8	3c c0 cc 30 0c f0 cc 30 00 c0 00 f0 00 33 00 cc
	>0127f8	82a7f8	00 3c 00 0c 00 0c 00 0c cc 30 cc 30 0c f0 cc 30
	>012808	82a808	3c c0 cc 30 3c c0 f0 00 00 00 00 0c 00 0c 00 0c
	>012818	82a818	00 3c 00 cc 00 3c 00 f0 cc 30 cc 30 0c f0 cc 30
	>012828	82a828	3c c0 cc 30 3c c0 f0 00 00 0c 00 0c 00 0c 00 0c
	>012838	82a838	00 3c 00 cc 00 3c 00 f0 ff 00 dd 00 eb 00 f7 00
	>012848	82a848	eb 00 dd 00 ff 00 ff 00 00 ff 00 dd 00 eb 00 f7
	>012858	82a858	00 eb 00 dd 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012868	82a868	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012878	82a878	00 ff 00 ff 00 ff 00 ff ff cc ff 33 ff c0 ff 3f
	>012888	82a888	ff c0 ff 30 ff c0 ff 30 cc 33 33 cc c0 00 3f c0
	>012898	82a898	c0 0f 30 cf c0 0f 30 cf ff cc ff 33 ff 00 ff ff
	>0128a8	82a8a8	ff 00 ff 00 ff 00 ff 00 cc 33 33 cc 00 00 ff 00
	>0128b8	82a8b8	00 ff 00 ff 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>0128c8	82a8c8	ff c0 ff 30 ff c0 ff 30 c0 0f 30 cf c0 0f 30 cf
	>0128d8	82a8d8	c0 0f 30 cf c0 0f 30 cf ff cc fc 30 ff 00 fc f0
	>0128e8	82a8e8	f3 00 f0 00 f3 00 f0 00 cc 33 30 cc 00 03 f0 0c
	>0128f8	82a8f8	00 f3 00 f0 00 f3 00 f0 f3 00 f0 00 f3 00 f0 00
	>012908	82a908	f3 00 f0 00 f3 00 f0 00 00 f3 00 f0 00 f3 00 f0
	>012918	82a918	00 f3 00 f0 00 f3 00 f0 ff 00 ff 00 ff 00 ff 00
	>012928	82a928	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e0 00 80
	>012938	82a938	00 80 00 00 00 06 00 0f ff 00 ff 00 ff 00 ff 00
	>012948	82a948	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 10
	>012958	82a958	00 10 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>012968	82a968	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 e7 00 c3
	>012978	82a978	00 c3 00 c3 00 c3 00 c3 ff 00 ff 00 ff 00 ff 00
	>012988	82a988	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 9c 00 08
	>012998	82a998	00 08 00 08 00 08 00 08 ff 00 ff 00 ff 00 ff 00
	>0129a8	82a9a8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 0e 00 04
	>0129b8	82a9b8	00 02 00 c2 00 c2 00 02 ff 00 ff 00 ff 00 ff 00
	>0129c8	82a9c8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 79 00 30
	>0129d8	82a9d8	00 30 00 20 00 01 00 03 ff f0 ff f9 ff ff ff 7f
	>0129e8	82a9e8	ff 7f ff 1f ff 00 ff 00 00 0f 00 06 00 00 00 80
	>0129f8	82a9f8	00 80 00 e0 00 ff 00 ff ff f7 ff c7 ff b7 ff 7b
	>012a08	82aa08	ff 7b ff b3 ff 00 ff 00 00 08 00 38 00 48 00 84
	>012a18	82aa18	00 84 00 4c 00 ff 00 ff ff 7e ff 7e ff ff ff ff
	>012a28	82aa28	ff e7 ff c3 ff 00 ff 00 00 81 00 81 00 00 00 00
	>012a38	82aa38	00 18 00 3c 00 ff 00 ff ff f7 ff f7 ff f7 ff f7
	>012a48	82aa48	ff ef ff c6 ff 00 ff 00 00 08 00 08 00 08 00 08
	>012a58	82aa58	00 10 00 39 00 ff 00 ff ff fd ff fd ff 3d ff 3d
	>012a68	82aa68	ff 3d ff 19 ff 00 ff 00 00 02 00 02 00 c2 00 c2
	>012a78	82aa78	00 c2 00 e6 00 ff 00 ff ff fc ff fe ff df ff cf
	>012a88	82aa88	ff cf ff 86 ff 00 ff 00 00 03 00 01 00 20 00 30
	>012a98	82aa98	00 30 00 79 00 ff 00 ff ff 00 ff 03 ff 06 ff 03
	>012aa8	82aaa8	ff 04 ff 03 ff 00 ff 00 00 ff 00 fc 00 f9 00 fc
	>012ab8	82aab8	00 fb 00 fc 00 ff 00 ff ff 00 ff c3 ff 26 ff c6
	>012ac8	82aac8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 d9 00 39
	>012ad8	82aad8	00 99 00 3c 00 ff 00 ff ff 00 ff c3 ff 66 ff 06
	>012ae8	82aae8	ff 66 ff c3 ff 00 ff 00 00 ff 00 3c 00 99 00 f9
	>012af8	82aaf8	00 99 00 3c 00 ff 00 ff ff 00 ff c7 ff 66 ff 67
	>012b08	82ab08	ff 66 ff c6 ff 00 ff 00 00 ff 00 38 00 99 00 98
	>012b18	82ab18	00 99 00 39 00 ff 00 ff ff 00 ff c3 ff 66 ff c7
	>012b28	82ab28	ff 66 ff 63 ff 00 ff 00 00 ff 00 3c 00 99 00 38
	>012b38	82ab38	00 99 00 9c 00 ff 00 ff ff 00 ff c0 ff 60 ff 00
	>012b48	82ab48	ff 60 ff c0 ff 00 ff 00 00 ff 00 3f 00 9f 00 ff
	>012b58	82ab58	00 9f 00 3f 00 ff 00 ff ff 00 ff 66 ff 66 ff 7e
	>012b68	82ab68	ff 66 ff 66 ff 00 ff 00 00 ff 00 99 00 99 00 81
	>012b78	82ab78	00 99 00 99 00 ff 00 ff ff 00 ff 7e ff 18 ff 18
	>012b88	82ab88	ff 18 ff 7e ff 00 ff 00 00 ff 00 81 00 e7 00 e7
	>012b98	82ab98	00 e7 00 81 00 ff 00 ff ff 00 ff 3c ff 66 ff 60
	>012ba8	82aba8	ff 66 ff 3e ff 06 ff 00 00 ff 00 c3 00 99 00 9f
	>012bb8	82abb8	00 99 00 c1 00 f9 00 ff ff 00 fc 00 f3 03 f3 03
	>012bc8	82abc8	f3 03 f3 03 f3 00 cf 03 00 ff 00 fc 03 f0 03 f0
	>012bd8	82abd8	03 f0 03 f0 00 f3 03 cc 03 00 fc fc fc 30 fc 00
	>012be8	82abe8	30 00 fc c0 fc c0 f0 00 00 03 fc 00 30 cc 00 30
	>012bf8	82abf8	00 30 c0 00 c0 3c 00 f0 cf 0f 3f 0f 3f 3f 3f 3c
	>012c08	82ac08	3f 33 c0 00 f3 03 cf 00 0f c0 0f 30 3f 00 3c 03
	>012c18	82ac18	33 0c 00 c0 03 f0 00 c0 fc fc fc f0 fc fc fc f0
	>012c28	82ac28	f3 c3 0c 00 33 00 3c 3c fc 00 f0 0c fc 00 f0 0c
	>012c38	82ac38	c3 30 00 0c 00 33 3c 00 fc 00 c3 00 30 00 03 03
	>012c48	82ac48	0f 0c cf 03 03 00 30 00 00 fc 00 c0 00 00 03 00
	>012c58	82ac58	0c 00 03 0c 00 03 00 00 ff 00 03 00 0c 00 c0 c0
	>012c68	82ac68	f3 f0 f0 c0 c0 00 0c 00 00 ff 00 03 00 00 c0 00
	>012c78	82ac78	f0 00 c0 30 00 c0 00 00 c0 00 f0 00 f3 00 f3 00
	>012c88	82ac88	cf 00 f3 00 f3 00 fc 00 00 c0 00 f0 00 f3 03 f0
	>012c98	82ac98	0f c0 03 f0 03 f0 00 fc c3 00 0f 00 0f 00 cf 00
	>012ca8	82aca8	cf 00 f3 00 cf 00 3f 00 00 03 00 0f 00 0f 00 cf
	>012cb8	82acb8	00 cf 30 c3 00 cf 00 3f ff 00 ff 00 ff 00 ff 00
	>012cc8	82acc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 91 00 99
	>012cd8	82acd8	00 89 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ce8	82ace8	ff 00 ff 00 ff 00 ff 00 00 ff 00 e7 00 c7 00 e7
	>012cf8	82acf8	00 e7 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d08	82ad08	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 b9 00 c3
	>012d18	82ad18	00 9f 00 81 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d28	82ad28	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 f3
	>012d38	82ad38	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d48	82ad48	ff 00 ff 00 ff 00 ff 00 00 ff 00 93 00 93 00 81
	>012d58	82ad58	00 f3 00 f3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d68	82ad68	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 9f 00 83
	>012d78	82ad78	00 f9 00 83 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012d88	82ad88	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 9d 00 83
	>012d98	82ad98	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012da8	82ada8	ff 00 ff 00 ff 00 ff 00 00 ff 00 81 00 99 00 f3
	>012db8	82adb8	00 e7 00 e7 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012dc8	82adc8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c3
	>012dd8	82add8	00 99 00 c3 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012de8	82ade8	ff 00 ff 00 ff 00 ff 00 00 ff 00 c3 00 99 00 c1
	>012df8	82adf8	00 b9 00 c3 00 ff 00 ff ff c0 ff 30 ff c0 ff 30
	>012e08	82ae08	f0 c0 c0 00 33 00 cc 00 c0 0f 30 cf c0 0f 30 cf
	>012e18	82ae18	c0 30 00 c0 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e28	82ae28	00 00 00 00 33 00 cc 00 00 ff 00 ff 00 ff 00 ff
	>012e38	82ae38	00 00 00 00 00 33 00 cc f3 00 f0 00 f3 00 f0 00
	>012e48	82ae48	03 00 00 00 33 00 cc 00 00 f3 00 f0 00 f3 00 f0
	>012e58	82ae58	00 03 00 00 00 33 00 cc ff 00 ff 00 ff 00 ff 00
	>012e68	82ae68	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e78	82ae78	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012e88	82ae88	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012e98	82ae98	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00
	>012ea8	82aea8	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff
	>012eb8	82aeb8	00 ff 00 ff 00 ff 00 ff
196	>012ec0	82aec0	00 00 ff 7f d0 1c 2e 67			CharPallete			.binary "../chars.pal"
	>012ec8	82aec8	f1 48 aa 26 a5 4c dd 3b 51 15 ea 00 b8 39 29 25
	>012ed8	82aed8	ef 3d f5 4f ae 75 d6 5a
197	>012ee0	82aee0	00 00 ff 7f d6 5a 10 67			SpritePallete		.binary "../sprites_SNES.pal",0,96 ; we only want first 3 PAL entries
	>012ee8	82aee8	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012ef8	82aef8	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f ff 7f ff 7f
	>012f08	82af08	ff 7f ff 7f ff 7f 8c 31 ff 7f ff 7f ff 7f ff 7f
	>012f18	82af18	1f 7d 1f 7d 1f 7d 1f 7d 1f 7d ff 7f d6 5a 10 67
	>012f28	82af28	b6 4b 7a 3f ce 26 8c 31 52 59 f0 6d 18 3e 00 00
	>012f38	82af38	1f 7d 1f 7d 1f 7d 1f 7d
198							.send

200							.section sBank83
201	>018000	838000	03 03 03 00 03 00 03 00			SpritesChars .binary "../sprites_SNES.bin"
	>018008	838008	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018018	838018	03 00 03 00 03 00 0f 00 fc 00 fc cc fc 30 30 30
	>018028	838028	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018038	838038	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>018048	838048	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018058	838058	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018068	838068	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018078	838078	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 00 03 00
	>018088	838088	03 00 03 03 03 03 0f 0c 03 00 03 00 03 00 03 00
	>018098	838098	03 00 03 00 03 00 0f 00 fc 00 fc 00 fc fc 30 30
	>0180a8	8380a8	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 fc 00 30 00
	>0180b8	8380b8	c0 00 fc 00 c0 00 f0 00 00 00 03 03 03 00 03 00
	>0180c8	8380c8	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>0180d8	8380d8	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 00 fc 30
	>0180e8	8380e8	fc fc fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 fc 00
	>0180f8	8380f8	fc 00 c0 00 fc 00 f0 00 00 00 00 00 03 00 00 00
	>018108	838108	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018118	838118	00 00 03 00 30 00 03 00 00 00 00 00 03 00 00 00
	>018128	838128	00 00 ff c0 ff 0c ff 33 00 00 00 00 03 00 00 00
	>018138	838138	00 00 ff 00 ff 00 f3 00 00 00 00 00 00 00 00 00
	>018148	838148	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018158	838158	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018168	838168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018178	838178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00
	>018188	838188	00 00 00 00 00 00 30 00 00 00 00 00 00 00 0c 00
	>018198	838198	00 00 00 00 00 00 30 00 00 00 00 00 0c 00 00 00
	>0181a8	8381a8	00 00 ff c0 ff 33 ff 0c 00 00 00 00 0c 00 00 00
	>0181b8	8381b8	00 00 ff 00 ff 00 cc 00 00 00 00 00 00 00 30 00
	>0181c8	8381c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00
	>0181d8	8381d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181e8	8381e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0181f8	8381f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018208	838208	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018218	838218	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018228	838228	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>018238	838238	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>018248	838248	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018258	838258	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018268	838268	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>018278	838278	f3 00 00 00 3c 00 30 00 0f 00 3f 30 3f 00 3f 03
	>018288	838288	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>018298	838298	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182a8	8382a8	f3 30 00 00 30 30 3c 00 fc 00 fc 00 fc 00 fc 00
	>0182b8	8382b8	f3 00 00 00 30 00 3c 00 0f 00 3f 30 3f 00 3f 03
	>0182c8	8382c8	3f 0c 00 00 03 00 0f 00 0f 00 3f 00 3f 00 3f 00
	>0182d8	8382d8	3f 00 00 00 03 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>0182e8	8382e8	f3 30 00 00 3c 30 30 00 fc 00 fc 00 fc 00 fc 00
	>0182f8	8382f8	f3 00 00 00 3c 00 30 00 00 00 0c 00 00 00 00 00
	>018308	838308	03 03 0f 0c 3f 30 3f 03 00 00 0c 00 00 00 00 00
	>018318	838318	03 00 0f 00 3f 00 3f 00 f3 03 ff 00 ff c3 f0 f0
	>018328	838328	fc 00 ff 00 ff 03 ff c0 f3 00 fc 00 ff 00 f0 00
	>018338	838338	fc 00 ff 00 ff 00 ff 00 00 00 c0 00 c0 c0 00 00
	>018348	838348	00 00 00 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>018358	838358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018368	838368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018378	838378	00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00
	>018388	838388	03 03 03 00 0f 0c 0f 00 00 00 03 00 00 00 00 00
	>018398	838398	03 00 03 00 0f 00 0f 00 cc 0c ff 00 ff cf f0 f0
	>0183a8	8383a8	fc 00 ff 00 ff 03 ff 00 cc 00 f0 00 ff 00 f0 00
	>0183b8	8383b8	fc 00 ff 00 ff 00 ff 00 c0 00 00 00 00 00 00 00
	>0183c8	8383c8	00 00 00 00 c0 00 00 00 c0 00 00 00 00 00 00 00
	>0183d8	8383d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>0183e8	8383e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0183f8	8383f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018408	838408	03 00 03 00 03 03 0f 0c 00 00 03 00 03 00 03 00
	>018418	838418	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018428	838428	30 30 fc 00 fc 3c f0 f0 00 00 fc 00 fc 00 30 00
	>018438	838438	30 00 c0 00 fc 00 f0 00 0f 03 03 00 0f 00 03 00
	>018448	838448	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>018458	838458	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>018468	838468	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>018478	838478	f0 00 ff 00 c0 00 f0 00 00 00 0f 03 03 00 0f 00
	>018488	838488	03 00 03 00 03 03 0f 0f 00 00 0f 00 03 00 0f 00
	>018498	838498	03 00 03 00 03 00 0f 00 00 00 fc 00 fc 0c fc 30
	>0184a8	8384a8	f0 00 ff 00 ff 0f f0 f0 00 00 fc 00 fc 00 f0 00
	>0184b8	8384b8	f0 00 fc 00 ff 00 f0 00 0f 03 03 00 0f 00 03 00
	>0184c8	8384c8	03 00 03 03 03 03 03 00 0f 00 03 00 0f 00 03 00
	>0184d8	8384d8	03 00 03 00 03 00 03 00 fc 00 fc 30 fc cc cc 0c
	>0184e8	8384e8	ff 00 ff 0f c0 c0 f0 00 fc 00 fc 00 cc 00 cc 00
	>0184f8	8384f8	f0 00 ff 00 c0 00 f0 00 3c 3c 00 00 00 00 00 00
	>018508	838508	03 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00
	>018518	838518	00 00 00 00 00 00 00 00 ff 03 fc 0c 0f 0c cc 00
	>018528	838528	c0 00 00 00 00 00 00 00 ff 00 fc 00 0f 00 cc 00
	>018538	838538	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018548	838548	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>018558	838558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018568	838568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018578	838578	00 00 00 00 00 00 00 00 0f 00 0f 03 03 00 00 00
	>018588	838588	00 00 00 00 00 00 00 00 0f 00 0f 00 00 00 00 00
	>018598	838598	00 00 00 00 00 00 00 00 ff c3 fc 0c c0 00 cc 0c
	>0185a8	8385a8	0f 00 00 00 00 00 00 00 ff 00 fc 00 00 00 0c 00
	>0185b8	8385b8	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185c8	8385c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185d8	8385d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185e8	8385e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0185f8	8385f8	00 00 00 00 00 00 00 00 0f 00 3f 30 3f 00 3f 03
	>018608	838608	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018618	838618	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018628	838628	f3 30 00 00 0f 0c 0c 00 fc 00 fc 00 fc 00 fc 00
	>018638	838638	f3 00 00 00 0f 00 0c 00 0f 0c 0f 00 0f 00 0f 00
	>018648	838648	0f 03 00 00 03 03 03 03 0f 00 0f 00 0f 00 0f 00
	>018658	838658	0f 00 00 00 03 00 03 00 fc 00 fc 0c fc c0 fc cc
	>018668	838668	f0 30 f0 00 3c 00 c0 c0 fc 00 fc 00 fc 00 fc 00
	>018678	838678	f0 00 c0 00 00 00 c0 00 0f 0c 3f 3c 3f 0f 33 30
	>018688	838688	03 03 03 03 0c 0c 03 03 0f 00 3f 00 3f 00 33 00
	>018698	838698	03 00 03 00 0c 00 03 00 fc 30 fc 0c fc 00 ff c0
	>0186a8	8386a8	fc 3c 00 00 0f 00 0c 00 fc 00 fc 00 fc 00 ff 00
	>0186b8	8386b8	fc 00 00 00 00 00 00 00 0f 0c 0f 00 0f 00 0f 00
	>0186c8	8386c8	0f 03 00 00 03 00 03 00 0f 00 0f 00 0f 00 0f 00
	>0186d8	8386d8	0f 00 00 00 00 00 00 00 fc 00 fc 0c fc c0 fc cc
	>0186e8	8386e8	f0 30 f0 30 3c 30 c0 00 fc 00 fc 00 fc 00 fc 00
	>0186f8	8386f8	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018708	838708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018718	838718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018728	838728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018738	838738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018748	838748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018758	838758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018768	838768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018778	838778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018788	838788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018798	838798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187a8	8387a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187b8	8387b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187c8	8387c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187d8	8387d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187e8	8387e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0187f8	8387f8	00 00 00 00 00 00 00 00 00 00 03 03 03 00 03 03
	>018808	838808	03 00 03 00 03 03 0f 0f 00 00 03 00 03 00 03 00
	>018818	838818	03 00 03 00 03 00 0f 00 00 00 fc 00 fc cc fc 30
	>018828	838828	30 30 fc 00 fc 3c f0 c0 00 00 fc 00 fc 00 30 00
	>018838	838838	30 00 c0 00 fc 00 f0 00 03 03 03 00 03 03 03 00
	>018848	838848	03 00 03 03 03 03 3f 30 03 00 03 00 03 00 03 00
	>018858	838858	03 00 03 00 03 00 3f 00 fc 00 fc cc fc 30 30 30
	>018868	838868	fc 00 fc 3c c0 c0 f0 00 fc 00 fc 00 30 00 30 00
	>018878	838878	c0 00 fc 00 c0 00 f0 00 3f 30 3c 0c 3f 30 00 00
	>018888	838888	00 00 33 00 0f 0c 0f 03 3c 00 3c 00 3c 00 00 00
	>018898	838898	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>0188a8	8388a8	00 00 cc 00 f0 30 f0 c0 3c 00 3c 00 3c 00 00 00
	>0188b8	8388b8	00 00 cc 00 f0 00 c0 00 3f 00 3c 0c 3f 30 00 00
	>0188c8	8388c8	00 00 33 00 0f 0c 0f 03 30 00 3c 00 3f 00 00 00
	>0188d8	8388d8	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 00 00 00
	>0188e8	8388e8	00 00 cc 00 f0 30 f0 c0 fc 00 3c 00 0c 00 00 00
	>0188f8	8388f8	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 30 00 00
	>018908	838908	00 00 33 00 0f 0c 0f 03 33 00 0c 00 33 00 00 00
	>018918	838918	00 00 33 00 0f 00 03 00 fc 0c 3c 30 fc 0c 00 00
	>018928	838928	00 00 cc 00 f0 30 f0 c0 cc 00 30 00 cc 00 00 00
	>018938	838938	00 00 cc 00 f0 00 c0 00 3f 30 3c 0c 3f 00 00 00
	>018948	838948	00 00 33 00 0f 0c 0f 03 3f 00 3c 00 30 00 00 00
	>018958	838958	00 00 33 00 0f 00 0f 00 fc 00 3c 30 fc 0c 00 00
	>018968	838968	00 00 cc 00 f0 30 f0 c0 0c 00 3c 00 fc 00 00 00
	>018978	838978	00 00 cc 00 f0 00 f0 00 00 00 00 00 00 00 0c 0f
	>018988	838988	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>018998	838998	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0189a8	8389a8	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>0189b8	8389b8	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 00 00
	>0189c8	8389c8	0c 0f 3f 30 33 00 f3 c0 00 00 00 00 00 00 00 00
	>0189d8	8389d8	0c 00 30 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>0189e8	8389e8	30 f0 0c fc c0 0c c3 0f 00 00 00 00 00 00 00 00
	>0189f8	8389f8	30 00 0c 00 00 00 03 00 0f 00 3f 30 3f 00 3f 03
	>018a08	838a08	3f 0c 03 00 0c 00 03 00 0f 00 3f 00 3f 00 3f 00
	>018a18	838a18	3f 00 00 00 00 00 00 00 fc 00 fc 0c fc 00 fc 0c
	>018a28	838a28	ff 30 0c 00 00 00 00 00 fc 00 fc 00 fc 00 fc 00
	>018a38	838a38	ff 00 0c 00 00 00 00 00 3f 00 ff c3 ff 0c ff 30
	>018a48	838a48	03 03 03 03 0c 0c 0f 0f 3f 00 ff 00 ff 00 ff 00
	>018a58	838a58	03 00 03 00 0c 00 0f 00 fc 00 ff 0c fc 00 fc 0c
	>018a68	838a68	f0 30 f0 00 c0 00 00 00 fc 00 ff 00 fc 00 fc 00
	>018a78	838a78	f0 00 00 00 00 00 00 00 03 03 0f 00 cf 03 ff 0c
	>018a88	838a88	ff 00 3f 0c 3f 0c 0f 00 03 00 0c 00 cf 00 ff 00
	>018a98	838a98	ff 00 3f 00 3f 00 0f 00 c0 c0 f0 00 f3 c0 ff 30
	>018aa8	838aa8	ff 00 fc 30 fc 30 f0 00 c0 00 30 00 f3 00 ff 00
	>018ab8	838ab8	ff 00 fc 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018ac8	838ac8	ff 00 ff 0c 3f 0c 0f 00 03 00 0c 00 0f 00 3f 00
	>018ad8	838ad8	ff 00 ff 00 3f 00 0f 00 c0 c0 f0 00 f0 c0 fc 30
	>018ae8	838ae8	ff 00 ff 30 fc 30 f0 00 c0 00 30 00 f0 00 fc 00
	>018af8	838af8	ff 00 ff 00 fc 00 f0 00 03 03 0f 00 0f 03 3f 0c
	>018b08	838b08	3f 00 ff 0c ff 0c cf 00 03 00 0c 00 0f 00 3f 00
	>018b18	838b18	3f 00 ff 00 ff 00 cf 00 c0 c0 f0 00 f0 c0 fc 30
	>018b28	838b28	fc 00 ff 30 ff 30 f3 00 c0 00 30 00 f0 00 fc 00
	>018b38	838b38	fc 00 ff 00 ff 00 f3 00 0f 0f 0f 00 0f 03 3f 0c
	>018b48	838b48	ff 00 ff 0c 3f 0c 0f 00 0f 00 0c 00 0f 00 3f 00
	>018b58	838b58	ff 00 ff 00 3f 00 0f 00 f0 f0 f0 00 f0 c0 fc 30
	>018b68	838b68	ff 00 ff 30 fc 30 f0 00 f0 00 30 00 f0 00 fc 00
	>018b78	838b78	ff 00 ff 00 fc 00 f0 00 f3 c0 3f c0 cf f0 c0 fc
	>018b88	838b88	30 3c 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>018b98	838b98	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>018ba8	838ba8	3c 3c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>018bb8	838bb8	3c 00 fc 00 f0 00 00 00 33 c0 ff c0 3f c0 cc f0
	>018bc8	838bc8	c0 fc 30 3f 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00
	>018bd8	838bd8	c0 00 30 00 3f 00 0f 00 cf 0f c3 3f cf 3f 03 3f
	>018be8	838be8	0f 3f 3c fc fc fc f0 f0 0f 00 03 00 0f 00 03 00
	>018bf8	838bf8	0f 00 3c 00 fc 00 f0 00 19 00 07 00 1f 00 1f 00
	>018c08	838c08	1f 00 1f 18 1f 07 7f 00 19 00 07 00 1f 00 1f 00
	>018c18	838c18	1f 00 1f 00 1f 00 7f 00 e0 00 e0 60 e0 00 f8 00
	>018c28	838c28	e0 00 e6 60 fe 80 fe 00 e0 00 e0 00 e0 00 e0 00
	>018c38	838c38	e0 00 e6 00 fe 00 fe 00 33 00 0f 00 0f 00 0f 00
	>018c48	838c48	0f 00 0f 0c 0f 03 3f 00 33 00 0f 00 0f 00 0f 00
	>018c58	838c58	0f 00 0f 00 0f 00 3f 00 cc 00 f0 00 f0 00 f0 00
	>018c68	838c68	f0 00 f0 30 fc c0 ff 00 cc 00 f0 00 f0 00 f0 00
	>018c78	838c78	f0 00 f0 00 fc 00 ff 00 0f 00 03 00 0c 00 3c 00
	>018c88	838c88	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 30 00
	>018c98	838c98	00 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ca8	838ca8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cb8	838cb8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018cc8	838cc8	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018cd8	838cd8	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018ce8	838ce8	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018cf8	838cf8	0c 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d08	838d08	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d18	838d18	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 3c 00
	>018d28	838d28	00 00 00 00 00 00 00 00 f0 00 c0 00 30 00 3c 00
	>018d38	838d38	00 00 00 00 00 00 00 00 0f 00 03 00 0c 00 0c 00
	>018d48	838d48	30 00 00 00 00 00 00 00 0f 00 03 00 0c 00 00 00
	>018d58	838d58	30 00 00 00 00 00 00 00 f0 00 c0 00 30 30 30 00
	>018d68	838d68	0c 00 00 00 00 00 00 00 f0 00 c0 00 30 00 30 00
	>018d78	838d78	0c 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>018d88	838d88	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018d98	838d98	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>018da8	838da8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>018db8	838db8	30 00 00 00 00 00 00 00 c0 00 00 c0 03 0c 03 0c
	>018dc8	838dc8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018dd8	838dd8	00 00 00 00 00 00 00 00 00 03 03 03 30 f0 30 f0
	>018de8	838de8	30 f0 00 00 00 00 00 00 00 00 03 00 30 00 30 00
	>018df8	838df8	30 00 00 00 00 00 00 00 7f 00 ff 18 ff 18 9f 00
	>018e08	838e08	1f 00 7f 18 00 00 00 00 7f 00 ff 00 ff 00 9f 00
	>018e18	838e18	1f 00 7f 00 00 00 00 00 f8 00 f8 60 e0 60 e0 00
	>018e28	838e28	e0 00 80 00 60 60 78 00 f8 00 f8 00 e0 00 e0 00
	>018e38	838e38	e0 00 80 00 60 00 78 00 ff 00 ff 0c 3f 0c 0f 00
	>018e48	838e48	0f 00 0f 0c 3c 00 00 00 ff 00 ff 00 3f 00 0f 00
	>018e58	838e58	0f 00 0f 00 3c 00 00 00 ff 00 fc 30 f0 30 f0 00
	>018e68	838e68	f0 00 f0 30 3c 00 00 00 ff 00 fc 00 f0 00 f0 00
	>018e78	838e78	f0 00 f0 00 3c 00 00 00 00 00 00 00 00 00 00 00
	>018e88	838e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018e98	838e98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ea8	838ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018eb8	838eb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ec8	838ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ed8	838ed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ee8	838ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ef8	838ef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f08	838f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f18	838f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f28	838f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f38	838f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f48	838f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f58	838f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f68	838f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f78	838f78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f88	838f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018f98	838f98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fa8	838fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fb8	838fb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fc8	838fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fd8	838fd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018fe8	838fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>018ff8	838ff8	00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00
	>019008	839008	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019018	839018	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019028	839028	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019038	839038	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019048	839048	00 00 0f 00 3f 30 f0 f0 0f 00 00 00 00 00 00 00
	>019058	839058	00 0f 00 30 30 00 f0 0f fc fc 00 00 c0 c0 00 00
	>019068	839068	00 00 00 00 c0 c0 f0 f0 fc 00 00 00 c0 00 00 00
	>019078	839078	00 f0 00 fc c0 3c f0 0f 00 00 00 00 03 00 00 00
	>019088	839088	00 00 0f 00 cf c3 c3 c3 00 03 00 00 00 00 00 00
	>019098	839098	00 0f 00 30 c3 30 c3 3c 00 00 00 00 c0 c0 00 00
	>0190a8	8390a8	00 00 00 00 00 00 c0 c0 00 c0 00 00 c0 00 00 00
	>0190b8	8390b8	00 f0 00 fc 00 fc c0 3f 3f 00 00 00 03 00 00 00
	>0190c8	8390c8	00 00 0f 00 3f 30 f0 f0 00 00 00 00 00 00 00 00
	>0190d8	8390d8	00 0f 00 30 30 00 f0 0f fc 0c 00 00 c0 c0 00 00
	>0190e8	8390e8	00 00 00 00 c0 c0 f0 f0 0c 00 00 00 c0 00 00 00
	>0190f8	8390f8	00 f0 00 fc c0 3c f0 0f 00 00 00 00 0c 0f 3f 30
	>019108	839108	3f 00 f3 c0 33 c0 f3 c0 00 00 00 00 0c 00 30 00
	>019118	839118	00 00 c0 00 00 00 c0 00 00 00 00 00 30 f0 0c fc
	>019128	839128	c0 3c c3 0f cf 0f c3 0f 00 00 00 00 30 00 0c 00
	>019138	839138	00 00 03 00 0f 00 03 00 0c 0f 3f 30 3f 00 ff c0
	>019148	839148	33 c0 f3 c0 33 c0 cf f0 0c 00 30 00 00 00 c0 00
	>019158	839158	00 00 c0 00 00 00 c0 00 30 f0 0c fc c0 3c c3 3f
	>019168	839168	cf 0f c3 0f cf 0f 03 ff 30 00 0c 00 00 00 03 00
	>019178	839178	0f 00 03 00 0f 00 03 00 00 00 00 00 00 00 0c 0f
	>019188	839188	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019198	839198	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191a8	8391a8	0c fc c0 3c c3 0f c0 0f 00 00 00 00 00 00 30 00
	>0191b8	8391b8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 0c 0f
	>0191c8	8391c8	3f 30 3f 00 cf c0 0f c0 00 00 00 00 00 00 0c 00
	>0191d8	8391d8	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>0191e8	8391e8	0c fc c0 3c 03 3f 0f 3f 00 00 00 00 00 00 30 00
	>0191f8	8391f8	0c 00 00 00 03 00 0f 00 30 30 00 00 c0 00 c0 00
	>019208	839208	00 00 c0 c0 3f 3f 0c 0c 30 cf 00 f3 00 33 00 33
	>019218	839218	00 f3 c0 3f 3f 00 0c 00 0c 0c 00 00 00 00 03 03
	>019228	839228	03 03 0f 0f ff fc 33 30 0c f3 00 cf 00 cf 03 cc
	>019238	839238	03 cc 0f f0 fc 00 30 00 c0 c0 00 00 00 00 c0 00
	>019248	839248	c0 00 c0 c0 3f 3f 0c 0c c0 3f 00 cf 00 cf 00 0f
	>019258	839258	00 0f c0 3f 3f 00 0c 00 30 30 00 00 00 00 03 03
	>019268	839268	03 03 0f 0c ff fc 30 30 30 cf 00 3f 00 3f 03 3c
	>019278	839278	03 3c 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019288	839288	c0 00 c0 00 3f 3f 0c 0c 00 ff 00 3c 00 3c 00 3c
	>019298	839298	00 3c 00 3f 3f 00 0c 00 c0 c0 00 00 00 00 03 03
	>0192a8	8392a8	03 00 0f 0c fc fc 30 30 c0 3f 00 ff 00 ff 03 fc
	>0192b8	8392b8	00 fc 0c f0 fc 00 30 00 c0 c0 00 00 00 00 00 00
	>0192c8	8392c8	00 00 c0 00 ff 3f 0c 0c c0 3f 00 cf 00 cf 00 cf
	>0192d8	8392d8	00 cf 00 3f 3f 00 0c 00 30 30 00 00 00 00 03 00
	>0192e8	8392e8	03 00 0f 0f fc fc 30 30 30 cf 00 3f 00 3f 00 3c
	>0192f8	8392f8	00 3c 0f f0 fc 00 30 00 3f c0 cf f0 c0 fc 30 3c
	>019308	839308	3f 3f 0f 0f 00 00 00 00 00 00 c0 00 c0 00 30 00
	>019318	839318	3f 00 0f 00 00 00 00 00 cf 3f 03 ff 0f 3f 3c 3c
	>019328	839328	fc fc f0 f0 00 00 00 00 0f 00 03 00 0f 00 3c 00
	>019338	839338	fc 00 f0 00 00 00 00 00 c0 ff 30 3c 3c 3c 0f 0f
	>019348	839348	00 00 03 0c 00 00 c0 00 c0 00 30 00 3c 00 0f 00
	>019358	839358	00 00 00 00 00 00 00 00 0f ff 3c 3c 3c 3c f0 f0
	>019368	839368	00 00 30 f0 00 00 00 03 0f 00 3c 00 3c 00 f0 00
	>019378	839378	00 00 30 00 00 00 00 00 f3 c0 3f c0 cf f0 c0 fc
	>019388	839388	30 3c 3f 3f cf 0f 00 c0 c0 00 00 00 c0 00 c0 00
	>019398	839398	30 00 3f 00 0f 00 00 00 c3 0f c0 3f 03 ff 03 3f
	>0193a8	8393a8	0c 3c fc fc f0 f0 00 00 03 00 00 00 03 00 03 00
	>0193b8	8393b8	0c 00 fc 00 f0 00 00 00 cf c0 3f c0 cf f0 c0 f0
	>0193c8	8393c8	30 30 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>0193d8	8393d8	30 00 3f 00 0f 00 00 00 03 3f cf 3f 03 ff 0f ff
	>0193e8	8393e8	3c fc fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>0193f8	8393f8	3c 00 fc 00 f0 00 00 00 00 00 00 00 03 00 00 00
	>019408	839408	00 00 0f 00 0f 0c 3c 3c 00 ff 00 00 00 00 00 00
	>019418	839418	00 0f 00 30 0c 30 3c c3 00 00 00 00 c0 c0 00 00
	>019428	839428	00 00 00 00 30 30 3c 3c 00 ff 00 00 c0 00 00 00
	>019438	839438	00 f0 00 fc 30 cc 3c c3 3f 0f 00 00 03 00 00 00
	>019448	839448	00 00 0f 00 0f 03 0f 0f 0f 00 00 00 00 00 00 00
	>019458	839458	00 0f 00 30 03 30 0f f0 fc fc 00 00 c0 c0 00 00
	>019468	839468	00 00 00 00 0c 0c 0f 0f fc 00 00 00 c0 00 00 00
	>019478	839478	00 f0 00 fc 0c f0 0f f0 00 00 00 00 03 00 00 00
	>019488	839488	00 00 0f 00 0f 00 03 03 00 03 00 00 00 00 00 00
	>019498	839498	00 0f 00 30 00 30 03 fc 00 00 00 00 c0 c0 00 00
	>0194a8	8394a8	00 00 00 00 c3 c3 c3 c3 00 c0 00 00 c0 00 00 00
	>0194b8	8394b8	00 f0 00 fc c3 3c c3 3c 3f 00 00 00 03 00 00 00
	>0194c8	8394c8	00 00 0f 00 0f 03 0f 0f 00 00 00 00 00 00 00 00
	>0194d8	8394d8	00 0f 00 30 03 30 0f f0 fc 0c 00 00 c0 c0 00 00
	>0194e8	8394e8	00 00 00 00 0c 0c 0f 0f 0c 00 00 00 c0 00 00 00
	>0194f8	8394f8	00 f0 00 fc 0c f0 0f f0 03 0c c0 00 03 cc 00 00
	>019508	839508	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019518	839518	00 00 00 00 00 00 00 00 30 f0 00 03 33 f3 00 00
	>019528	839528	30 f0 00 00 00 00 00 00 30 00 00 00 33 00 00 00
	>019538	839538	30 00 00 00 00 00 00 00 03 cc 00 00 00 00 03 0c
	>019548	839548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019558	839558	00 00 00 00 00 00 00 00 33 f3 00 00 00 00 30 f0
	>019568	839568	00 00 00 00 00 00 00 00 33 00 00 00 00 00 30 00
	>019578	839578	00 00 00 00 00 00 00 00 03 0c 00 00 03 0c 00 00
	>019588	839588	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019598	839598	00 00 00 00 00 00 00 00 30 f3 03 03 30 f0 00 00
	>0195a8	8395a8	30 f0 00 00 00 00 00 00 30 00 03 00 30 00 00 00
	>0195b8	8395b8	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>0195c8	8395c8	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0195d8	8395d8	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>0195e8	8395e8	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>0195f8	8395f8	30 00 00 00 00 00 00 00 30 30 00 00 00 00 00 00
	>019608	839608	00 00 00 00 ff 3f cc 0c 30 cf 00 f3 00 f3 00 f3
	>019618	839618	00 f3 00 ff 3f 00 0c 00 0c 0c 00 00 03 00 03 00
	>019628	839628	03 03 0f 0f fc fc 30 30 0c f3 00 cf 00 cc 00 cc
	>019638	839638	03 cc 0f f0 fc 00 30 00 0c 0c 00 00 00 00 00 00
	>019648	839648	00 00 c0 00 ff 3f 0c 0c 0c f3 00 fc 00 fc 00 fc
	>019658	839658	00 fc 00 3f 3f 00 0c 00 03 03 00 00 00 00 03 00
	>019668	839668	03 00 0f 0f fc fc 30 30 03 fc 00 f3 00 f3 00 f0
	>019678	839678	00 f0 0f f0 fc 00 30 00 03 03 00 00 00 00 00 00
	>019688	839688	c0 00 c0 00 3f 3f 0c 0c 03 fc 00 ff 00 ff 00 ff
	>019698	839698	00 3f 00 3f 3f 00 0c 00 00 00 00 00 00 00 00 00
	>0196a8	8396a8	03 00 0f 0c fc fc 30 30 00 ff 00 3c 00 3c 00 3c
	>0196b8	8396b8	00 3c 0c f0 fc 00 30 00 0c 0c 00 00 00 00 c0 00
	>0196c8	8396c8	c0 00 c0 c0 3f 3f 0c 0c 0c f3 00 fc 00 fc 00 3c
	>0196d8	8396d8	00 3c c0 3f 3f 00 0c 00 03 03 00 00 00 00 03 03
	>0196e8	8396e8	03 03 0f 0c ff fc 30 30 03 fc 00 f3 00 f3 03 f0
	>0196f8	8396f8	03 f0 0c f0 fc 00 30 00 00 00 00 00 00 00 00 00
	>019708	839708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019718	839718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019728	839728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019738	839738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019748	839748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019758	839758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019768	839768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019778	839778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019788	839788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019798	839798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197a8	8397a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197b8	8397b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197c8	8397c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197d8	8397d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197e8	8397e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>0197f8	8397f8	00 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 0c 33
	>019808	839808	00 0c f3 00 30 00 30 00 0c 03 00 0f 30 03 00 33
	>019818	839818	00 0c 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019828	839828	00 3c c0 0c c0 0c c0 0c 30 c0 00 f0 0c f0 0c f0
	>019838	839838	00 3c 00 0c 00 0c 00 0c 0c 0f 00 0f 3c 33 0c 33
	>019848	839848	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>019858	839858	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>019868	839868	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>019878	839878	00 fc 00 3c 00 3c 00 3c 0c 0f 00 0f 3c 33 0c 33
	>019888	839888	00 03 3c 00 0c 00 0c 00 0c 03 00 0f 30 03 00 33
	>019898	839898	00 03 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198a8	8398a8	00 fc 00 fc 00 fc 00 fc 30 c0 00 f0 0c f0 0c f0
	>0198b8	8398b8	00 fc 00 fc 00 fc 00 fc 0c 0f 00 0f 3c 33 0c 33
	>0198c8	8398c8	00 30 cf 00 c3 00 c3 00 0c 03 00 0f 30 03 00 33
	>0198d8	8398d8	00 30 00 00 00 00 00 00 30 f0 00 f0 0c fc 0c fc
	>0198e8	8398e8	00 fc 00 3c 00 3c 00 3c 30 c0 00 f0 0c f0 0c f0
	>0198f8	8398f8	00 fc 00 3c 00 3c 00 3c 00 00 00 00 00 00 0c 0f
	>019908	839908	3f 30 3f 00 f3 c0 33 c0 00 00 00 00 00 00 0c 00
	>019918	839918	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019928	839928	0c fc c0 3c c3 0f cf 0f 00 00 00 00 00 00 30 00
	>019938	839938	0c 00 00 00 03 00 0f 00 00 00 00 00 00 00 0c 0f
	>019948	839948	3f 30 3f 00 fc c0 3c c0 00 00 00 00 00 00 0c 00
	>019958	839958	30 00 00 00 c0 00 00 00 00 00 00 00 00 00 30 f0
	>019968	839968	0c fc c0 3c c3 33 c3 33 00 00 00 00 00 00 30 00
	>019978	839978	0c 00 00 00 03 00 03 00 00 00 00 00 00 00 00 00
	>019988	839988	00 00 03 03 0f 0c 0c 0f 00 00 00 00 00 00 00 00
	>019998	839998	00 00 03 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>0199a8	8399a8	00 00 c0 c0 30 f0 f0 f0 00 00 00 00 00 00 00 00
	>0199b8	8399b8	00 00 c0 00 f0 00 f0 00 00 00 00 00 00 00 03 03
	>0199c8	8399c8	0c 0f 33 3c 33 3c 30 3f 00 00 00 00 00 00 03 00
	>0199d8	8399d8	0f 00 3c 00 3c 00 3f 00 00 00 00 00 00 00 c0 c0
	>0199e8	8399e8	30 f0 0c fc 0c fc 0c fc 00 00 00 00 00 00 c0 00
	>0199f8	8399f8	f0 00 fc 00 fc 00 fc 00 00 00 3c 0c 3c 3c 00 03
	>019a08	839a08	00 3f 30 3f 00 0f 0c 0f 00 00 0c 00 3c 00 00 03
	>019a18	839a18	00 3f 30 0f 00 0f 0c 03 00 3c 00 fc 0c fc 0c fc
	>019a28	839a28	30 f0 30 f3 c3 ff 0c fc 00 3c 00 fc 0c f0 0c f0
	>019a38	839a38	30 c0 30 c3 c3 3c 0c f0 00 00 f0 33 f0 f3 00 0f
	>019a48	839a48	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019a58	839a58	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019a68	839a68	30 f0 30 ff cf ff 30 f0 00 fc 00 fc 0c f0 0c f0
	>019a78	839a78	30 c0 30 cf cf 30 30 c0 00 03 c0 0f c0 cf 00 3f
	>019a88	839a88	00 3f 30 3f 00 0f 0c 0f 00 03 00 0f c0 0f 00 3f
	>019a98	839a98	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019aa8	839aa8	30 f0 f0 fc 0c ff 33 f3 00 fc 00 fc 0c f0 0c f0
	>019ab8	839ab8	30 c0 f0 0c 0c f3 33 c0 00 00 f0 33 f0 f3 00 0f
	>019ac8	839ac8	00 3f 30 3f 00 0f 0c 0f 00 00 30 03 f0 03 00 0f
	>019ad8	839ad8	00 3f 30 0f 00 0f 0c 03 00 fc 00 fc 0c fc 0c fc
	>019ae8	839ae8	30 f0 fc fc 03 ff 3c ff 00 fc 00 fc 0c f0 0c f0
	>019af8	839af8	30 c0 fc 00 03 fc 3c c3 f3 c0 3f c0 cf f0 c0 fc
	>019b08	839b08	30 3c 3f 3f 0f 0f 00 00 c0 00 00 00 c0 00 c0 00
	>019b18	839b18	30 00 3f 00 0f 00 00 00 c3 0f cf 3f 03 ff 0f 3f
	>019b28	839b28	3c 3c fc fc f0 f3 03 03 03 00 0f 00 03 00 0f 00
	>019b38	839b38	3c 00 fc 00 f0 00 03 00 fc c0 3f c0 cf f0 c0 ff
	>019b48	839b48	30 3f 3f 3f 0f 0f c0 00 c0 00 00 00 c0 00 c0 00
	>019b58	839b58	30 00 3f 00 0f 00 00 00 c3 33 cf 3f 03 ff 0f 0f
	>019b68	839b68	0c 0c fc fc f0 f0 00 03 03 00 0f 00 03 00 0f 00
	>019b78	839b78	0c 00 fc 00 f0 00 00 00 0f 0f 0c 0c 03 03 00 00
	>019b88	839b88	00 00 00 00 00 00 00 00 0f 00 0c 00 03 00 00 00
	>019b98	839b98	00 00 00 00 00 00 00 00 30 30 30 30 c0 c0 00 00
	>019ba8	839ba8	00 00 00 00 00 00 00 00 30 00 30 00 c0 00 00 00
	>019bb8	839bb8	00 00 00 00 00 00 00 00 30 3f 3c 3f 3f 3f 0c 0c
	>019bc8	839bc8	03 03 00 00 00 00 00 00 3f 00 3f 00 3f 00 0c 00
	>019bd8	839bd8	03 00 00 00 00 00 00 00 3c fc fc fc 0c 0c 30 30
	>019be8	839be8	c0 c0 00 00 00 00 00 00 fc 00 fc 00 0c 00 30 00
	>019bf8	839bf8	c0 00 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c08	839c08	00 3c 03 30 03 30 03 30 0c 03 00 0f 30 03 30 03
	>019c18	839c18	00 3c 00 30 00 30 00 30 30 f0 00 f0 0c fc 00 fc
	>019c28	839c28	00 30 cf 00 0c 00 0c 00 30 c0 00 f0 0c f0 00 fc
	>019c38	839c38	00 30 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c48	839c48	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019c58	839c58	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019c68	839c68	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019c78	839c78	00 0c 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019c88	839c88	00 3f 00 3f 00 3f 00 3f 0c 03 00 0f 30 03 30 03
	>019c98	839c98	00 3f 00 3f 00 3f 00 3f 30 f0 00 f0 0c fc 00 fc
	>019ca8	839ca8	00 c0 3c 00 30 00 30 00 30 c0 00 f0 0c f0 00 fc
	>019cb8	839cb8	00 c0 00 00 00 00 00 00 0c 0f 00 0f 3c 33 3c 33
	>019cc8	839cc8	00 3f 00 3c 00 3c 00 3c 0c 03 00 0f 30 03 30 03
	>019cd8	839cd8	00 3f 00 3c 00 3c 00 3c 30 f0 00 f0 0c fc 00 fc
	>019ce8	839ce8	00 0c f3 00 c3 00 c3 00 30 c0 00 f0 0c f0 00 fc
	>019cf8	839cf8	00 0c 00 00 00 00 00 00 c3 0c 00 c0 03 0c 00 00
	>019d08	839d08	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d18	839d18	00 00 00 00 00 00 00 00 30 f0 00 00 30 f0 00 00
	>019d28	839d28	30 f0 00 00 00 00 00 00 30 00 00 00 30 00 00 00
	>019d38	839d38	30 00 00 00 00 00 00 00 03 cc 00 00 03 0c 00 00
	>019d48	839d48	03 0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019d58	839d58	00 00 00 00 00 00 00 00 33 f3 00 00 30 f0 00 00
	>019d68	839d68	30 f0 00 00 00 00 00 00 33 00 00 00 30 00 00 00
	>019d78	839d78	30 00 00 00 00 00 00 00 00 00 0f 0f 30 3f 03 3c
	>019d88	839d88	cf f0 cf f0 cc f3 c0 ff 00 00 0f 00 3f 00 3c 00
	>019d98	839d98	f0 00 f0 00 f3 00 ff 00 00 00 f0 f0 0c fc 00 fc
	>019da8	839da8	03 ff 03 ff 03 ff 0f ff 00 00 f0 00 fc 00 fc 00
	>019db8	839db8	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 30 0c
	>019dc8	839dc8	0c 3c 03 03 00 00 00 00 00 00 00 00 00 00 0c 00
	>019dd8	839dd8	3c 00 03 00 00 00 00 00 00 00 c0 30 30 f0 c0 c0
	>019de8	839de8	00 00 0c 03 03 0f 30 30 00 00 30 00 f0 00 c0 00
	>019df8	839df8	00 00 03 00 0f 00 30 00 00 3c 00 3f 30 3f 30 3f
	>019e08	839e08	0c 0f 0c cf c3 ff 30 3f 00 3c 00 3f 30 0f 30 0f
	>019e18	839e18	0c 03 0c c3 c3 3c 30 0f 00 00 3c 0c 3c 3c 00 c0
	>019e28	839e28	00 fc 0c fc 00 f0 30 f0 00 00 0c 00 3c 00 00 c0
	>019e38	839e38	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e48	839e48	0c 0f 0c ff f3 ff 0c 0f 00 3f 00 3f 30 0f 30 0f
	>019e58	839e58	0c 03 0c f3 f3 0c 0c 03 00 00 0f c3 0f cf 00 f0
	>019e68	839e68	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019e78	839e78	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019e88	839e88	0c 0f 0f 3f 30 ff cc cf 00 3f 00 3f 30 0f 30 0f
	>019e98	839e98	0c 03 0f 30 30 cf cc 03 00 c0 03 f0 03 f3 00 fc
	>019ea8	839ea8	00 fc 0c fc 00 f0 30 f0 00 c0 00 f0 03 f0 00 fc
	>019eb8	839eb8	00 fc 0c f0 00 f0 30 c0 00 3f 00 3f 30 3f 30 3f
	>019ec8	839ec8	0c 0f 3f 3f c0 ff 3c ff 00 3f 00 3f 30 0f 30 0f
	>019ed8	839ed8	0c 03 3f 00 c0 3f 3c c3 00 00 0f c3 0f cf 00 f0
	>019ee8	839ee8	00 fc 0c fc 00 f0 30 f0 00 00 03 c0 0f c0 00 f0
	>019ef8	839ef8	00 fc 0c f0 00 f0 30 c0 00 00 00 00 00 00 00 00
	>019f08	839f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f18	839f18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f28	839f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f38	839f38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f48	839f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f58	839f58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f68	839f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>019f78	839f78	00 00 00 00 00 00 00 00 c0 ff c0 ff f0 ff ff ff
	>019f88	839f88	0f 0f 30 30 0f 0f 00 00 ff 00 ff 00 ff 00 ff 00
	>019f98	839f98	0f 00 30 00 0f 00 00 00 0f ff 3f ff f3 f3 c3 c3
	>019fa8	839fa8	00 00 0c 0c f0 f0 00 00 ff 00 ff 00 f3 00 c3 00
	>019fb8	839fb8	00 00 0c 00 f0 00 00 00 0c 0c c0 30 30 f0 00 00
	>019fc8	839fc8	03 03 0c 03 03 0f 00 00 0c 00 30 00 f0 00 00 00
	>019fd8	839fd8	03 00 03 00 0f 00 00 00 00 00 00 00 c0 c0 30 0c
	>019fe8	839fe8	0c 3c 00 00 00 00 00 00 00 00 00 00 c0 00 0c 00
	>019ff8	839ff8	3c 00 00 00 00 00 00 00 00 00 3f 0c 0c 00 33 00
	>01a008	83a008	33 00 00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00
	>01a018	83a018	00 33 00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00
	>01a028	83a028	3c 00 ff 0c 00 00 f0 00 00 00 30 c3 0c f3 00 3c
	>01a038	83a038	00 3c 0c f3 00 00 00 f0 3f 30 33 00 0c 00 0c 00
	>01a048	83a048	03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00 00 0c
	>01a058	83a058	00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00 f0 00
	>01a068	83a068	fc 30 00 00 fc 0c fc c0 c0 0c 30 cc 00 f0 00 f0
	>01a078	83a078	30 cc 00 00 0c f0 c0 3c 00 00 3f 30 33 00 0c 00
	>01a088	83a088	0c 00 03 00 f0 00 f3 30 00 00 30 0f 00 33 00 00
	>01a098	83a098	00 0c 00 03 00 30 30 c3 00 00 cc c0 fc 30 f0 00
	>01a0a8	83a0a8	f0 00 fc 30 00 00 fc 0c 00 00 c0 0c 30 cc 00 f0
	>01a0b8	83a0b8	00 f0 30 cc 00 00 0c f0 3f 0c 0c 00 33 00 33 00
	>01a0c8	83a0c8	00 00 3c 00 3c 0c 00 00 0c 33 00 0c 00 00 00 33
	>01a0d8	83a0d8	00 00 00 0c 0c 30 00 00 f3 30 ff 0c 3c 00 3c 00
	>01a0e8	83a0e8	ff 0c 00 00 f0 00 3c 0c 30 c3 0c f3 00 3c 00 3c
	>01a0f8	83a0f8	0c f3 00 00 00 f0 0c 30 00 00 00 00 03 03 03 03
	>01a108	83a108	03 03 0c 0c 0c 0c 0c 0c 00 00 00 00 03 00 03 00
	>01a118	83a118	03 00 0c 00 0c 00 0c 00 3c 3c c3 c3 00 00 3c 00
	>01a128	83a128	3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00 00 00
	>01a138	83a138	00 00 00 00 00 00 00 00 00 00 00 00 c0 c0 c0 c0
	>01a148	83a148	c0 c0 30 30 30 30 30 30 00 00 00 00 c0 00 c0 00
	>01a158	83a158	c0 00 30 00 30 00 30 00 00 00 00 00 00 00 00 00
	>01a168	83a168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a178	83a178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01a188	83a188	0c 0c 0c 0c 0c 0c 30 30 00 00 00 00 00 00 03 00
	>01a198	83a198	0c 00 0c 00 0c 00 30 00 00 00 3c 3c c3 c3 00 00
	>01a1a8	83a1a8	3c 00 3c 00 00 00 00 00 00 00 3c 00 c3 00 00 00
	>01a1b8	83a1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01a1c8	83a1c8	30 30 30 30 30 30 0c 0c 00 00 00 00 00 00 c0 00
	>01a1d8	83a1d8	30 00 30 00 30 00 0c 00 00 00 00 00 00 00 00 00
	>01a1e8	83a1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a1f8	83a1f8	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a208	83a208	03 03 00 00 3c 0c 30 30 00 00 0f 00 0f 00 0f 00
	>01a218	83a218	03 00 00 00 0c 30 30 00 3c 0c 3c 00 3f 33 cf c0
	>01a228	83a228	cf cc 03 00 f3 00 c3 00 0c 30 00 3c 33 0c c0 0f
	>01a238	83a238	cc 03 00 03 00 33 00 c3 0f 0f 0f 0f 0f 0f 0f 0f
	>01a248	83a248	00 00 03 00 0f 0c 0c 0c 0f 00 0f 00 0f 00 0f 00
	>01a258	83a258	00 00 00 00 0c 03 0c 00 3f 03 3f 30 cf c0 cf c0
	>01a268	83a268	0f 00 cf 03 0c 00 00 00 03 3c 30 0f c0 0f c0 0f
	>01a278	83a278	00 0f 03 cc 00 0c 00 00 00 00 0f 0f 0f 0f 0f 0f
	>01a288	83a288	0f 0f 00 00 0f 00 0c 00 00 00 0f 00 0f 00 0f 00
	>01a298	83a298	0f 00 00 00 00 03 00 0c fc c0 3f 03 3f 30 cf c0
	>01a2a8	83a2a8	cf c0 0f 00 0f 03 0c 00 c0 3c 03 3c 30 0f c0 0f
	>01a2b8	83a2b8	c0 0f 00 0f 03 0c 00 0c 0f 0f 0f 0f 0f 0f 03 03
	>01a2c8	83a2c8	00 00 0f 03 0f 0c 03 00 0f 00 0f 00 0f 00 03 00
	>01a2d8	83a2d8	00 00 03 0c 0c 00 00 03 3c 00 3f 33 cf c0 cf cc
	>01a2e8	83a2e8	33 30 03 00 c3 00 00 00 00 3c 33 0c c0 0f cc 03
	>01a2f8	83a2f8	30 03 00 03 00 c3 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a308	83a308	0c 0c 0f 0c 0c 0c 0f 0c 0c 00 0c 00 0c 00 0c 00
	>01a318	83a318	0c 00 0f 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a328	83a328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a338	83a338	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a348	83a348	30 30 f0 30 30 30 f0 30 30 00 30 00 30 00 30 00
	>01a358	83a358	30 00 f0 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a368	83a368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a378	83a378	00 00 00 00 00 00 00 00 30 30 30 30 30 30 30 30
	>01a388	83a388	30 30 3c 30 0c 0c 0f 0c 30 00 30 00 30 00 30 00
	>01a398	83a398	30 00 3c 00 0c 00 0f 00 00 00 00 00 00 00 00 00
	>01a3a8	83a3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3b8	83a3b8	00 00 00 00 00 00 00 00 0c 0c 0c 0c 0c 0c 0c 0c
	>01a3c8	83a3c8	0c 0c 3c 0c 30 30 f0 30 0c 00 0c 00 0c 00 0c 00
	>01a3d8	83a3d8	0c 00 3c 00 30 00 f0 00 00 00 00 00 00 00 00 00
	>01a3e8	83a3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a3f8	83a3f8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a408	83a408	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a418	83a418	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a428	83a428	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a438	83a438	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 0f c0
	>01a448	83a448	33 00 33 00 03 00 0f c0 00 00 00 00 00 00 00 00
	>01a458	83a458	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a468	83a468	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a478	83a478	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 03 30
	>01a488	83a488	cc 00 cc 00 00 00 03 30 00 00 00 00 00 00 00 00
	>01a498	83a498	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4a8	83a4a8	c0 30 c0 30 c0 30 c0 30 00 00 00 00 30 00 00 00
	>01a4b8	83a4b8	00 00 00 00 00 00 00 00 3f 00 3f c0 ff 00 c0 0c
	>01a4c8	83a4c8	33 00 33 00 00 00 c0 0c 00 00 00 00 00 00 00 00
	>01a4d8	83a4d8	00 00 00 00 00 00 00 00 00 c0 c0 00 f0 30 c0 30
	>01a4e8	83a4e8	00 30 00 30 00 30 c0 30 00 00 00 00 30 00 00 00
	>01a4f8	83a4f8	00 00 00 00 00 00 00 00 03 03 03 03 03 03 00 00
	>01a508	83a508	00 00 00 00 00 00 00 00 03 00 03 00 03 00 00 00
	>01a518	83a518	00 00 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff c3
	>01a528	83a528	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 ff 00
	>01a538	83a538	3c 00 00 00 00 00 00 00 c0 c0 c0 c0 c0 c0 00 00
	>01a548	83a548	00 00 00 00 00 00 00 00 c0 00 c0 00 c0 00 00 00
	>01a558	83a558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a568	83a568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a578	83a578	00 00 00 00 00 00 00 00 0f 0c 03 03 00 00 00 00
	>01a588	83a588	00 00 00 00 00 00 00 00 0f 00 03 00 00 00 00 00
	>01a598	83a598	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c3 3c 3c
	>01a5a8	83a5a8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 3c 00
	>01a5b8	83a5b8	00 00 00 00 00 00 00 00 f0 30 c0 c0 00 00 00 00
	>01a5c8	83a5c8	00 00 00 00 00 00 00 00 f0 00 c0 00 00 00 00 00
	>01a5d8	83a5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5e8	83a5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a5f8	83a5f8	00 00 00 00 00 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a608	83a608	3c 03 0f 00 00 00 00 00 00 00 00 00 c0 00 00 00
	>01a618	83a618	00 00 00 00 00 00 00 00 00 f0 30 c0 0c fc cc fc
	>01a628	83a628	00 fc 03 ff 30 0f 00 00 00 00 00 00 0c 00 cc 00
	>01a638	83a638	00 00 03 00 00 00 00 00 ff 00 fc 03 00 03 3f 03
	>01a648	83a648	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01a658	83a658	00 00 00 00 00 00 00 00 00 f0 c0 30 00 f0 0c fc
	>01a668	83a668	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 0c 00
	>01a678	83a678	0c 00 00 00 03 00 00 00 ff 00 fc 03 c0 c0 3c 03
	>01a688	83a688	3c 03 0c 03 0f 00 00 00 00 00 00 00 c0 00 00 00
	>01a698	83a698	00 00 00 00 00 00 00 00 00 f0 30 c0 00 f0 c0 f0
	>01a6a8	83a6a8	00 f0 0c fc 0c fc c0 3c 00 00 00 00 00 00 c0 00
	>01a6b8	83a6b8	00 00 0c 00 0c 00 00 00 ff 00 3f c0 00 c0 fc c3
	>01a6c8	83a6c8	3c 03 0f 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01a6d8	83a6d8	00 00 00 00 00 00 00 00 c0 30 0c f0 00 30 3c fc
	>01a6e8	83a6e8	0c fc 00 fc c3 3f 00 0f 00 00 00 00 00 00 3c 00
	>01a6f8	83a6f8	0c 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00
	>01a708	83a708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a718	83a718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a728	83a728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a738	83a738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a748	83a748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a758	83a758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a768	83a768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a778	83a778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a788	83a788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a798	83a798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7a8	83a7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7b8	83a7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7c8	83a7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7d8	83a7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7e8	83a7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a7f8	83a7f8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01a808	83a808	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01a818	83a818	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01a828	83a828	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01a838	83a838	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01a848	83a848	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a858	83a858	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a868	83a868	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a878	83a878	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01a888	83a888	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01a898	83a898	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01a8a8	83a8a8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01a8b8	83a8b8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01a8c8	83a8c8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01a8d8	83a8d8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01a8e8	83a8e8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01a8f8	83a8f8	fc 00 ff 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01a908	83a908	03 03 0c 0c 30 30 30 30 00 00 00 00 00 00 00 00
	>01a918	83a918	03 00 0c 00 30 00 30 00 00 00 00 00 00 00 ff ff
	>01a928	83a928	00 00 00 00 3c 00 3c 00 00 00 00 00 00 00 ff 00
	>01a938	83a938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a948	83a948	c0 c0 30 30 0c 0c 0c 0c 00 00 00 00 00 00 00 00
	>01a958	83a958	c0 00 30 00 0c 00 0c 00 00 00 00 00 00 00 00 00
	>01a968	83a968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a978	83a978	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 30
	>01a988	83a988	3f 30 3f 30 ff c0 fc c0 00 00 0f 00 0c 00 33 00
	>01a998	83a998	3f 00 3f 00 cf 00 fc 00 ff ff ff 00 ff 00 ff 00
	>01a9a8	83a9a8	c3 00 3c 3c c3 c3 c3 c3 ff 00 00 00 ff 00 ff 00
	>01a9b8	83a9b8	c3 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc 0c
	>01a9c8	83a9c8	fc 0c fc 0c ff 03 3f 03 00 00 f0 00 30 00 cc 00
	>01a9d8	83a9d8	fc 00 fc 00 f3 00 3f 00 00 00 00 00 00 00 00 00
	>01a9e8	83a9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01a9f8	83a9f8	00 00 00 00 00 00 00 00 c0 cf 00 0f 00 03 00 0f
	>01aa08	83aa08	00 0c c0 0c 0c cf c0 c0 cf 00 0f 00 03 00 0f 00
	>01aa18	83aa18	0c 00 0c 00 cf 00 c0 00 00 f0 00 f3 00 30 03 f0
	>01aa28	83aa28	30 f3 33 f3 c0 c0 00 00 f0 00 f3 00 30 00 f0 00
	>01aa38	83aa38	f3 00 f3 00 c0 00 00 00 00 cf c0 cf 00 0f 00 0f
	>01aa48	83aa48	c0 0c 00 cc cc cf 00 00 cf 00 cf 00 0f 00 0f 00
	>01aa58	83aa58	0c 00 cc 00 cf 00 00 00 00 f3 03 f3 00 f0 00 f0
	>01aa68	83aa68	33 f0 30 f3 c3 c3 00 00 f3 00 f3 00 f0 00 f0 00
	>01aa78	83aa78	f0 00 f3 00 c3 00 00 00 00 0f 00 cf 00 0c c0 0f
	>01aa88	83aa88	0c cf cc cf 03 03 00 00 0f 00 cf 00 0c 00 0f 00
	>01aa98	83aa98	cf 00 cf 00 03 00 00 00 03 f3 00 f0 00 c0 00 f0
	>01aaa8	83aaa8	00 30 03 30 30 f3 03 03 f3 00 f0 00 c0 00 f0 00
	>01aab8	83aab8	30 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aac8	83aac8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aad8	83aad8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aae8	83aae8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aaf8	83aaf8	30 00 33 00 f3 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0
	>01ab08	83ab08	f0 c0 3f 30 3f 30 0f 0c c0 00 c0 00 c0 00 c0 00
	>01ab18	83ab18	f0 00 3f 00 3f 00 0f 00 00 00 00 00 00 00 00 00
	>01ab28	83ab28	00 00 00 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01ab38	83ab38	00 00 00 00 ff 00 ff 00 03 03 03 03 03 03 03 03
	>01ab48	83ab48	0f 03 fc 0c fc 0c f0 30 03 00 03 00 03 00 03 00
	>01ab58	83ab58	0f 00 fc 00 fc 00 f0 00 00 00 00 00 00 00 00 00
	>01ab68	83ab68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ab78	83ab78	00 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 ff c3
	>01ab88	83ab88	ff c3 ff c0 cf c0 3f 30 ff 00 ff 00 ff 00 ff 00
	>01ab98	83ab98	ff 00 fc 00 cf 00 3f 00 00 00 00 00 00 00 00 00
	>01aba8	83aba8	00 00 c3 c3 c3 c3 ff 3c 00 00 00 00 00 00 00 00
	>01abb8	83abb8	00 00 c3 00 c3 00 3c 00 ff c3 ff c3 ff c3 ff c3
	>01abc8	83abc8	ff c3 ff 03 f3 03 fc 3c ff 00 ff 00 ff 00 ff 00
	>01abd8	83abd8	ff 00 3f 00 f3 00 fc 00 00 00 00 00 00 00 00 00
	>01abe8	83abe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01abf8	83abf8	00 00 00 00 00 00 00 00 c0 c3 00 0f 0c 03 0c 33
	>01ac08	83ac08	00 3f 33 3f 0c 0c 03 c0 c3 00 0f 00 03 00 33 00
	>01ac18	83ac18	3f 00 3f 00 0c 00 c0 00 00 c0 00 f0 03 f3 0c fc
	>01ac28	83ac28	3f ff fc fc 30 30 00 c0 c0 00 f0 00 f3 00 fc 00
	>01ac38	83ac38	ff 00 fc 00 30 00 c0 00 00 03 c0 cf 0c 03 0c 33
	>01ac48	83ac48	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01ac58	83ac58	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ac68	83ac68	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01ac78	83ac78	fc 00 ff 00 30 00 c0 00 00 03 00 0f cc c3 0c 33
	>01ac88	83ac88	c0 ff 33 3f 0c 0c 03 00 03 00 0f 00 c3 00 33 00
	>01ac98	83ac98	ff 00 3f 00 0c 00 00 00 03 c3 00 f0 00 f0 0c fc
	>01aca8	83aca8	3c fc fc fc 30 30 00 c3 c3 00 f0 00 f0 00 fc 00
	>01acb8	83acb8	fc 00 fc 00 30 00 c3 00 00 03 c0 cf 0c 03 0c 33
	>01acc8	83acc8	00 3f f3 ff 0c 0c 03 00 03 00 cf 00 03 00 33 00
	>01acd8	83acd8	3f 00 ff 00 0c 00 00 00 00 c0 03 f3 00 f0 0c fc
	>01ace8	83ace8	3c fc ff ff 30 30 00 c0 c0 00 f3 00 f0 00 fc 00
	>01acf8	83acf8	fc 00 ff 00 30 00 c0 00 03 03 00 00 00 00 00 00
	>01ad08	83ad08	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01ad18	83ad18	00 00 00 00 00 00 00 00 ff 00 ff ff 00 00 00 00
	>01ad28	83ad28	00 00 00 00 00 00 00 00 ff 00 ff 00 00 00 00 00
	>01ad38	83ad38	00 00 00 00 00 00 00 00 c0 c0 00 00 00 00 00 00
	>01ad48	83ad48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ad58	83ad58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad68	83ad68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ad78	83ad78	00 00 00 00 00 00 00 00 3f 30 33 30 0c 0c 0f 0f
	>01ad88	83ad88	00 00 00 00 00 00 00 00 3f 00 33 00 0c 00 0f 00
	>01ad98	83ad98	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 00 00
	>01ada8	83ada8	ff ff 00 00 00 00 00 00 c3 00 ff 00 ff 00 00 00
	>01adb8	83adb8	ff 00 00 00 00 00 00 00 ff c3 ff c3 ff c3 c3 c3
	>01adc8	83adc8	3c 3c 00 00 00 00 00 00 c3 00 ff 00 ff 00 c3 00
	>01add8	83add8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ade8	83ade8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01adf8	83adf8	00 00 00 00 00 00 00 00 c0 cf 0c 03 00 03 00 0f
	>01ae08	83ae08	00 0f c0 0c 0c cf c0 c0 cf 00 03 00 03 00 0f 00
	>01ae18	83ae18	0f 00 0c 00 cf 00 c0 00 00 f0 c0 33 00 30 03 f0
	>01ae28	83ae28	30 f3 33 f3 c0 c0 00 00 f0 00 33 00 30 00 f0 00
	>01ae38	83ae38	f3 00 f3 00 c0 00 00 00 00 cf cc c3 00 03 00 0f
	>01ae48	83ae48	c0 0f 00 cf cc cf 00 00 cf 00 c3 00 03 00 0f 00
	>01ae58	83ae58	0f 00 cf 00 cf 00 00 00 00 f3 c3 33 00 30 00 f0
	>01ae68	83ae68	33 f0 30 f3 c3 c3 00 00 f3 00 33 00 30 00 f0 00
	>01ae78	83ae78	f0 00 f3 00 c3 00 00 00 00 0f 03 cc 00 0c c0 0f
	>01ae88	83ae88	0c cf cc cf 03 03 00 00 0f 00 cc 00 0c 00 0f 00
	>01ae98	83ae98	cf 00 cf 00 03 00 00 00 03 f3 30 c0 00 c0 00 f0
	>01aea8	83aea8	00 f0 03 30 30 f3 03 03 f3 00 c0 00 c0 00 f0 00
	>01aeb8	83aeb8	f0 00 30 00 f3 00 03 00 00 cf c3 cc 00 0c 00 0f
	>01aec8	83aec8	cc 0f 0c cf c3 c3 00 00 cf 00 cc 00 0c 00 0f 00
	>01aed8	83aed8	0f 00 cf 00 c3 00 00 00 00 f3 33 c3 00 c0 00 f0
	>01aee8	83aee8	03 30 00 33 33 f3 00 00 f3 00 c3 00 c0 00 f0 00
	>01aef8	83aef8	30 00 33 00 f3 00 00 00 00 00 00 00 00 00 00 00
	>01af08	83af08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af18	83af18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af28	83af28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af38	83af38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af48	83af48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af58	83af58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af68	83af68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af78	83af78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af88	83af88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01af98	83af98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afa8	83afa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afb8	83afb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afc8	83afc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afd8	83afd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01afe8	83afe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01aff8	83aff8	00 00 00 00 00 00 00 00 00 00 03 03 0f 03 0f 0f
	>01b008	83b008	3f 3c 3c 3c 3c 3c ff ff 00 00 00 00 00 00 00 00
	>01b018	83b018	00 00 00 00 00 00 00 00 00 00 c0 c0 f0 f0 f0 f0
	>01b028	83b028	3c 3c 3c 3c 3c 3c ff ff 00 00 00 00 30 00 30 00
	>01b038	83b038	3c 00 3c 00 3c 00 3c 00 00 00 03 00 03 00 0f 00
	>01b048	83b048	0c 00 0c 00 0f 03 3f 00 00 00 00 00 00 00 00 00
	>01b058	83b058	00 00 00 00 03 00 00 00 00 00 c0 c0 c0 00 f0 30
	>01b068	83b068	f0 30 f0 30 f0 30 fc 30 00 00 00 00 00 00 00 00
	>01b078	83b078	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 00
	>01b088	83b088	0f 0f 0f 0c 0f 0f 0f 0f 00 00 00 00 00 00 00 00
	>01b098	83b098	0c 00 0c 00 0c 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b0a8	83b0a8	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 00 00 00 00
	>01b0b8	83b0b8	f0 00 30 00 f0 00 f0 00 00 00 03 03 03 03 0f 0f
	>01b0c8	83b0c8	0f 0f 0f 0f 0f 0f 3f 3f 00 00 00 00 00 00 00 00
	>01b0d8	83b0d8	03 00 03 00 03 00 33 00 00 00 c0 c0 c0 c0 f0 f0
	>01b0e8	83b0e8	f0 f0 30 30 30 30 fc fc 00 00 00 00 c0 00 f0 00
	>01b0f8	83b0f8	30 00 30 00 30 00 fc 00 3c 3c ff c3 c3 c3 c3 c3
	>01b108	83b108	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b118	83b118	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b128	83b128	00 00 3c 3c ff c3 c3 c3 00 00 00 00 00 00 00 00
	>01b138	83b138	00 00 3c 00 c3 00 ff 00 3c 3c ff c3 c3 c3 c3 c3
	>01b148	83b148	c3 c3 c3 c3 c3 c3 c3 c3 3c 00 c3 00 ff 00 ff 00
	>01b158	83b158	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00
	>01b168	83b168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b178	83b178	00 00 00 00 00 00 00 00 00 00 0f 0f 0f 0c 3f 33
	>01b188	83b188	3f 3f 3f 3f ff cf fc fc 00 00 0f 00 0c 00 30 00
	>01b198	83b198	30 00 30 00 c0 00 c0 00 ff ff ff 00 ff ff ff ff
	>01b1a8	83b1a8	c3 c3 3c 3c c3 c3 c3 c3 ff 00 00 00 00 00 00 00
	>01b1b8	83b1b8	00 00 3c 00 c3 00 c3 00 00 00 f0 f0 f0 30 fc cc
	>01b1c8	83b1c8	fc fc fc fc ff f3 3f 3f 00 00 f0 00 30 00 0c 00
	>01b1d8	83b1d8	0c 00 0c 00 03 00 03 00 00 00 00 00 00 00 00 00
	>01b1e8	83b1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b1f8	83b1f8	00 00 00 00 00 00 00 00 ff ff cf cf cf cf 03 03
	>01b208	83b208	0f 03 3f 3f 3c 3c 30 30 00 00 00 00 00 00 00 00
	>01b218	83b218	00 00 00 00 00 00 00 00 ff ff f3 f3 f3 f3 c0 c0
	>01b228	83b228	f0 f0 fc fc 3c 3c 0c 0c 3c 00 30 00 f0 00 c0 00
	>01b238	83b238	00 00 00 00 00 00 00 00 3f 00 3f 00 33 00 03 00
	>01b248	83b248	03 00 0f 00 0f 03 0c 0c 00 00 00 00 00 00 00 00
	>01b258	83b258	00 00 00 00 00 00 00 00 fc 30 fc 30 cc c0 c0 c0
	>01b268	83b268	c0 c0 f0 30 f0 30 30 30 00 00 00 00 00 00 00 00
	>01b278	83b278	00 00 00 00 00 00 00 00 0f 0f 0f 0f 03 03 03 03
	>01b288	83b288	03 00 03 00 03 03 03 03 0c 00 0c 00 03 00 03 00
	>01b298	83b298	00 00 00 00 00 00 00 00 f0 f0 c0 c0 00 00 00 00
	>01b2a8	83b2a8	c0 c0 c0 c0 c0 c0 c0 c0 f0 00 c0 00 00 00 00 00
	>01b2b8	83b2b8	00 00 00 00 c0 00 c0 00 3f 3f 3f 3f 33 33 03 03
	>01b2c8	83b2c8	03 03 0f 0f 0f 0f 0c 0c 33 00 33 00 30 00 00 00
	>01b2d8	83b2d8	00 00 00 00 0f 00 0c 00 fc fc fc fc cc cc c0 c0
	>01b2e8	83b2e8	c0 c0 f0 f0 f0 f0 30 30 fc 00 fc 00 cc 00 c0 00
	>01b2f8	83b2f8	c0 00 f0 00 f0 00 30 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b308	83b308	c3 c3 c3 c3 c3 c3 c3 c0 ff 00 ff 00 ff 00 ff 00
	>01b318	83b318	ff 00 ff 00 ff 00 fc 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b328	83b328	c3 c3 c3 c3 c3 c3 c3 00 ff 00 ff 00 ff 00 ff 00
	>01b338	83b338	ff 00 ff 00 ff 00 3c 00 c3 c3 c3 c3 c3 c3 c3 c3
	>01b348	83b348	c3 c3 c3 c3 c3 c3 c3 03 ff 00 ff 00 ff 00 ff 00
	>01b358	83b358	ff 00 ff 00 ff 00 3f 00 00 00 00 00 00 00 00 00
	>01b368	83b368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b378	83b378	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
	>01b388	83b388	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b398	83b398	c3 00 c3 00 c3 00 c3 00 00 00 3c 3c ff c3 ff ff
	>01b3a8	83b3a8	ff ff c3 c3 3c 3c 00 00 00 00 3c 00 c3 00 c3 00
	>01b3b8	83b3b8	c3 00 c3 00 3c 00 00 00 ff ff ff ff ff ff ff ff
	>01b3c8	83b3c8	ff ff ff ff ff ff ff ff c3 00 c3 00 c3 00 c3 00
	>01b3d8	83b3d8	c3 00 c3 00 c3 00 c3 00 00 00 00 00 00 00 00 00
	>01b3e8	83b3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b3f8	83b3f8	00 00 00 00 00 00 00 00 00 00 30 30 3c 3c 3f 3f
	>01b408	83b408	0f 0f 03 03 cf c3 cf cf 00 00 00 00 00 00 00 00
	>01b418	83b418	00 00 00 00 00 00 00 00 00 00 0c 0c 3c 0c fc fc
	>01b428	83b428	f0 f0 c0 c0 f3 f3 f3 f3 00 00 00 00 00 00 00 00
	>01b438	83b438	00 00 00 00 30 00 30 00 00 00 0c 00 0f 00 0f 00
	>01b448	83b448	03 00 03 00 33 00 3f 00 00 00 00 00 00 00 00 00
	>01b458	83b458	00 00 00 00 00 00 00 00 00 00 30 30 f0 30 f0 30
	>01b468	83b468	c0 c0 c0 c0 cc c0 fc 30 00 00 00 00 00 00 00 00
	>01b478	83b478	00 00 00 00 00 00 00 00 00 00 03 00 03 00 03 03
	>01b488	83b488	03 03 03 03 03 03 0f 0c 00 00 00 00 00 00 00 00
	>01b498	83b498	00 00 03 00 03 00 0c 00 00 00 c0 c0 c0 c0 c0 c0
	>01b4a8	83b4a8	c0 c0 00 00 00 00 f0 f0 00 00 00 00 00 00 c0 00
	>01b4b8	83b4b8	c0 00 00 00 00 00 30 00 00 00 0c 0c 0f 0f 0f 0f
	>01b4c8	83b4c8	03 03 03 03 33 33 3f 3f 00 00 00 00 0f 00 0f 00
	>01b4d8	83b4d8	00 00 00 00 30 00 33 00 00 00 30 30 f0 f0 f0 f0
	>01b4e8	83b4e8	c0 c0 c0 c0 cc cc fc fc 00 00 00 00 30 00 f0 00
	>01b4f8	83b4f8	c0 00 c0 00 cc 00 fc 00 c0 c0 c0 c0 c0 c0 30 30
	>01b508	83b508	0f 0f 00 00 00 00 00 00 ff 00 ff 00 cf 00 30 00
	>01b518	83b518	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c
	>01b528	83b528	c3 c3 00 00 00 00 00 00 ff 00 ff 00 c3 00 3c 00
	>01b538	83b538	c3 00 00 00 00 00 00 00 03 03 03 03 03 03 0c 0c
	>01b548	83b548	f0 f0 00 00 00 00 00 00 ff 00 ff 00 f3 00 0c 00
	>01b558	83b558	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b568	83b568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b578	83b578	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b588	83b588	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b598	83b598	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5a8	83b5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5b8	83b5b8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff c3 c3
	>01b5c8	83b5c8	3c 3c 00 00 00 00 00 00 c3 00 c3 00 c3 00 c3 00
	>01b5d8	83b5d8	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5e8	83b5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b5f8	83b5f8	00 00 00 00 00 00 00 00 ff ff ff ff 3f 3c 3c 3c
	>01b608	83b608	3c 3c 0f 0f 0f 0f 03 03 00 00 00 00 00 00 00 00
	>01b618	83b618	00 00 00 00 00 00 00 00 ff ff ff ff 3c 3c 3c 3c
	>01b628	83b628	3c 3c f0 f0 f0 f0 c0 c0 3c 00 3c 00 3c 00 3c 00
	>01b638	83b638	3c 00 30 00 f0 00 c0 00 3f 00 3f 00 0c 00 0c 00
	>01b648	83b648	0f 03 0f 00 03 00 03 03 00 00 00 00 00 00 00 00
	>01b658	83b658	03 00 00 00 00 00 00 00 fc 30 fc 30 f0 30 f0 30
	>01b668	83b668	f0 30 f0 f0 c0 c0 c0 c0 00 00 00 00 00 00 00 00
	>01b678	83b678	00 00 00 00 00 00 00 00 0f 0c 0f 0f 0f 0f 0f 0f
	>01b688	83b688	0f 0f 03 03 03 03 03 03 0c 00 0c 00 0c 00 0f 00
	>01b698	83b698	0c 00 03 00 03 00 03 00 f0 f0 f0 f0 f0 f0 30 30
	>01b6a8	83b6a8	c0 c0 00 00 00 00 00 00 30 00 f0 00 f0 00 30 00
	>01b6b8	83b6b8	c0 00 00 00 00 00 00 00 3f 3f 3f 3f 0f 0f 0f 0f
	>01b6c8	83b6c8	0f 0f 0f 0f 03 03 03 03 33 00 33 00 03 00 03 00
	>01b6d8	83b6d8	03 00 03 00 00 00 00 00 fc fc fc fc f0 f0 30 30
	>01b6e8	83b6e8	30 30 f0 f0 c0 c0 c0 c0 fc 00 fc 00 30 00 30 00
	>01b6f8	83b6f8	30 00 f0 00 c0 00 c0 00 00 00 00 00 00 00 00 00
	>01b708	83b708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b718	83b718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b728	83b728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b738	83b738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b748	83b748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b758	83b758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b768	83b768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b778	83b778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b788	83b788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b798	83b798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7a8	83b7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7b8	83b7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7c8	83b7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7d8	83b7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7e8	83b7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b7f8	83b7f8	00 00 00 00 00 00 00 00 30 00 fc 3c c0 c0 3f 30
	>01b808	83b808	3f 00 ff c0 3c 00 c3 00 00 30 3c c0 c0 00 30 0f
	>01b818	83b818	00 33 c0 3f 00 3c 00 00 0c 00 3f 0f cf cf f0 30
	>01b828	83b828	f0 00 fc 0c fc 00 3c 00 00 0c 0f 30 cf 00 30 c0
	>01b838	83b838	00 f0 0c f0 00 fc 00 3c 00 00 00 00 3f 30 3f 00
	>01b848	83b848	ff c0 3c 00 c3 00 c3 00 00 00 00 00 30 0f 00 33
	>01b858	83b858	c0 3f 00 3c 00 00 00 c3 00 00 00 00 f0 30 f3 03
	>01b868	83b868	fc 0c fc 00 3c 00 3c 00 00 00 00 00 30 c0 03 f0
	>01b878	83b878	0c f0 00 fc 00 3c 00 3c 30 00 fc 3c c0 c0 3f 30
	>01b888	83b888	3f 00 ff c0 cf 00 30 00 00 30 3c c0 c0 00 30 0f
	>01b898	83b898	00 33 c0 3f 00 cf 00 00 0c 00 3f 0f cf cf f0 30
	>01b8a8	83b8a8	f0 00 fc 0c 3c 00 cc 00 00 0c 0f 30 cf 00 30 c0
	>01b8b8	83b8b8	00 f0 0c f0 00 3c 00 0c 00 00 00 00 3f 30 3f 00
	>01b8c8	83b8c8	ff c0 cf 00 30 00 30 00 00 00 00 00 30 0f 00 33
	>01b8d8	83b8d8	c0 3f 00 cf 00 00 00 30 00 00 00 00 f0 30 f3 03
	>01b8e8	83b8e8	fc 0c 3c 00 cc 00 cc 00 00 00 00 00 30 c0 03 f0
	>01b8f8	83b8f8	0c f0 00 3c 00 0c 00 cc 3c 3c ff c3 c3 ff c3 ff
	>01b908	83b908	c3 ff c3 ff c3 ff c3 ff 3c 00 c3 00 c3 3c c3 3c
	>01b918	83b918	c3 3c c3 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01b928	83b928	00 00 00 00 03 03 ff fc 00 00 00 00 00 00 00 00
	>01b938	83b938	00 00 00 00 03 00 fc 00 3c 3c ff c3 c3 ff c3 ff
	>01b948	83b948	c3 ff c3 ff c3 3f 0c fc 3c 00 c3 00 c3 3c c3 3c
	>01b958	83b958	c3 3c c3 3c 03 3c 0c f0 00 00 00 00 00 00 00 00
	>01b968	83b968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b978	83b978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01b988	83b988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01b998	83b998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01b9a8	83b9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01b9b8	83b9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01b9c8	83b9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9d8	83b9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9e8	83b9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01b9f8	83b9f8	00 00 00 00 00 00 00 00 c3 00 3c 00 ff 00 cf cc
	>01ba08	83ba08	33 00 3f 30 00 00 00 00 00 c3 00 3c 00 ff cc 03
	>01ba18	83ba18	00 33 30 0f 00 00 00 00 3c 00 fc 00 fc 00 fc 0c
	>01ba28	83ba28	f3 03 f3 30 0f 00 3f 33 00 3c 00 fc 00 fc 0c f0
	>01ba38	83ba38	03 f0 30 c3 00 0f 33 0c 3c 00 ff 00 cf cc 33 00
	>01ba48	83ba48	3f 30 00 00 00 00 00 00 00 3c 00 ff cc 03 00 33
	>01ba58	83ba58	30 0f 00 00 00 00 00 00 fc 00 fc 00 fc 0c f3 03
	>01ba68	83ba68	f3 30 0f 00 3f 33 00 00 00 fc 00 fc 0c f0 03 f0
	>01ba78	83ba78	30 c3 00 0f 33 0c 00 00 30 00 cf 00 ff 00 f3 c3
	>01ba88	83ba88	3c 00 3f 30 00 00 00 00 00 30 00 cf 00 ff c3 30
	>01ba98	83ba98	00 3c 30 0f 00 00 00 00 cc 00 3c 00 fc 00 fc 0c
	>01baa8	83baa8	f0 00 f0 30 0c 00 fc cc 00 cc 00 3c 00 fc 0c f0
	>01bab8	83bab8	00 f0 30 c0 00 0c cc 30 cf 00 ff 00 f3 c3 3c 00
	>01bac8	83bac8	3f 30 00 00 00 00 00 00 00 cf 00 ff c3 30 00 3c
	>01bad8	83bad8	30 0f 00 00 00 00 00 00 3c 00 fc 00 fc 0c f0 00
	>01bae8	83bae8	f0 30 0c 00 fc cc 00 00 00 3c 00 fc 0c f0 00 f0
	>01baf8	83baf8	30 c0 00 0c cc 30 00 00 c0 ff c0 ff c0 ff c0 ff
	>01bb08	83bb08	c3 ff c3 ff c3 ff c3 ff c0 3f c0 3f c0 3f c0 3f
	>01bb18	83bb18	c3 3c c3 3c c3 3c c3 3c 00 ff 00 ff 00 ff 00 ff
	>01bb28	83bb28	fc fc 03 03 00 00 00 00 00 ff 00 ff 00 ff 00 ff
	>01bb38	83bb38	fc 00 03 00 00 00 00 00 0c fc 30 f0 30 f0 0c fc
	>01bb48	83bb48	0c fc 03 3f c3 ff c3 ff 0c f0 30 c0 30 c0 0c f0
	>01bb58	83bb58	0c f0 03 3c c3 3c c3 3c 00 00 00 00 00 00 00 00
	>01bb68	83bb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bb78	83bb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01bb88	83bb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01bb98	83bb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01bba8	83bba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01bbb8	83bbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01bbc8	83bbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbd8	83bbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbe8	83bbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bbf8	83bbf8	00 00 00 00 00 00 00 00 30 00 fc 3c f3 f3 0f 0c
	>01bc08	83bc08	0f 00 3f 30 3f 00 3c 00 00 30 3c c0 f3 00 0c 03
	>01bc18	83bc18	00 0c 30 0f 00 3f 00 3c 0c 00 3f 0f 03 03 fc 0c
	>01bc28	83bc28	fc 00 ff 03 3c 00 c3 00 00 0c 0f 30 03 00 0c f0
	>01bc38	83bc38	00 fc 03 fc 00 3c 00 00 00 00 00 00 0f 0c cf c0
	>01bc48	83bc48	3f 30 3f 00 3c 00 3c 00 00 00 00 00 0c 03 c0 0c
	>01bc58	83bc58	30 0f 00 3f 00 3c 00 3c 00 00 00 00 fc 0c fc 00
	>01bc68	83bc68	ff 03 3c 00 c3 00 c3 00 00 00 00 00 0c f0 00 fc
	>01bc78	83bc78	03 fc 00 3c 00 00 00 c3 30 00 fc 3c f3 f3 0f 0c
	>01bc88	83bc88	0f 00 3f 30 3c 00 33 00 00 30 3c c0 f3 00 0c 03
	>01bc98	83bc98	00 0c 30 0f 00 3c 00 30 0c 00 3f 0f 03 03 fc 0c
	>01bca8	83bca8	fc 00 ff 03 f3 00 0c 00 00 0c 0f 30 03 00 0c f0
	>01bcb8	83bcb8	00 fc 03 fc 00 f3 00 00 00 00 00 00 0f 0c cf c0
	>01bcc8	83bcc8	3f 30 3c 00 33 00 33 00 00 00 00 00 0c 03 c0 0c
	>01bcd8	83bcd8	30 0f 00 3c 00 30 00 33 00 00 00 00 fc 0c fc 00
	>01bce8	83bce8	ff 03 f3 00 0c 00 0c 00 00 00 00 00 0c f0 00 fc
	>01bcf8	83bcf8	03 fc 00 f3 00 00 00 0c c3 ff c3 ff c3 ff c3 c3
	>01bd08	83bd08	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd18	83bd18	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd28	83bd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd38	83bd38	00 00 00 00 00 00 00 00 c3 ff c3 ff c3 ff c3 c3
	>01bd48	83bd48	3c 3c 00 00 00 00 00 00 c3 3c c3 3c c3 3c c3 00
	>01bd58	83bd58	3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd68	83bd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd78	83bd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd88	83bd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bd98	83bd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bda8	83bda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdb8	83bdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdc8	83bdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdd8	83bdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bde8	83bde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bdf8	83bdf8	00 00 00 00 00 00 00 00 3c 00 3f 00 3f 00 3f 30
	>01be08	83be08	cf c0 cf 0c f0 00 fc cc 00 3c 00 3f 00 3f 30 0f
	>01be18	83be18	c0 0f 0c 03 00 f0 cc 30 c3 00 3c 00 ff 00 f3 33
	>01be28	83be28	cc 00 fc 0c 00 00 00 00 00 c3 00 3c 00 ff 33 c0
	>01be38	83be38	00 cc 0c f0 00 00 00 00 3f 00 3f 00 3f 30 cf c0
	>01be48	83be48	cf 0c f0 00 fc cc 00 00 00 3f 00 3f 30 0f c0 0f
	>01be58	83be58	0c 03 00 f0 cc 30 00 00 3c 00 ff 00 f3 33 cc 00
	>01be68	83be68	fc 0c 00 00 00 00 00 00 00 3c 00 ff 33 c0 00 cc
	>01be78	83be78	0c f0 00 00 00 00 00 00 33 00 3c 00 3f 00 3f 30
	>01be88	83be88	0f 00 0f 0c 30 00 3f 33 00 33 00 3c 00 3f 30 0f
	>01be98	83be98	00 0f 0c 03 00 30 33 0c 0c 00 f3 00 ff 00 cf c3
	>01bea8	83bea8	3c 00 fc 0c 00 00 00 00 00 0c 00 f3 00 ff c3 0c
	>01beb8	83beb8	00 3c 0c f0 00 00 00 00 3c 00 3f 00 3f 30 0f 00
	>01bec8	83bec8	0f 0c 30 00 3f 33 00 00 00 3c 00 3f 30 0f 00 0f
	>01bed8	83bed8	0c 03 00 30 33 0c 00 00 f3 00 ff 00 cf c3 3c 00
	>01bee8	83bee8	fc 0c 00 00 00 00 00 00 00 f3 00 ff c3 0c 00 3c
	>01bef8	83bef8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf08	83bf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf18	83bf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf28	83bf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf38	83bf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf48	83bf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf58	83bf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf68	83bf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf78	83bf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf88	83bf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bf98	83bf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfa8	83bfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfb8	83bfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfc8	83bfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfd8	83bfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bfe8	83bfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01bff8	83bff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c008	83c008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c018	83c018	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c028	83c028	3c ff 3c ff 33 ff 30 fc 30 0f 00 3f cf 30 3f c0
	>01c038	83c038	3c c3 3c c3 33 cc 30 cc c0 c0 00 c0 00 cf c0 ff
	>01c048	83c048	00 ff 00 ff 30 3f c0 0f c0 00 00 c0 00 cf c0 3f
	>01c058	83c058	00 ff 00 ff 30 0f 00 0f 00 00 00 00 00 00 00 00
	>01c068	83c068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c078	83c078	00 00 00 00 00 00 00 00 00 00 00 00 03 03 00 03
	>01c088	83c088	00 03 00 03 00 03 00 03 00 00 00 00 03 00 00 03
	>01c098	83c098	00 03 00 03 00 03 00 03 c3 ff 00 ff 3c ff ff ff
	>01c0a8	83c0a8	fc ff fc ff f0 ff 30 ff c3 3c 00 ff 3c c3 ff 00
	>01c0b8	83c0b8	fc 03 fc 03 f0 0f 30 cf 00 00 00 00 c0 cf 00 ff
	>01c0c8	83c0c8	00 ff 00 ff cc cf 30 00 00 00 00 00 c0 0f 00 ff
	>01c0d8	83c0d8	00 ff 00 ff cc 03 00 00 00 00 00 00 00 00 00 00
	>01c0e8	83c0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c0f8	83c0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c108	83c108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c118	83c118	00 00 00 00 00 00 00 00 30 3f 00 3f cf ff 3f ff
	>01c128	83c128	3f ff 3f ff 3c ff 0c ff 30 0f 00 3f cf 30 3f c0
	>01c138	83c138	3f c0 3f c0 3c c3 0c f3 c0 c0 00 c0 0c ff c0 ff
	>01c148	83c148	00 ff 00 ff 33 f3 0c c0 c0 00 00 c0 0c f3 c0 3f
	>01c158	83c158	00 ff 00 ff 33 c0 00 c0 00 00 00 00 00 00 00 00
	>01c168	83c168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c178	83c178	00 00 00 00 00 00 00 00 03 03 00 03 30 ff 03 ff
	>01c188	83c188	00 ff 00 ff cc cf 30 03 03 00 00 03 30 cf 03 fc
	>01c198	83c198	00 ff 00 ff cc 03 00 03 0c fc 00 fc f3 ff fc ff
	>01c1a8	83c1a8	fc ff fc ff 3c ff 30 ff 0c f0 00 fc f3 0c fc 03
	>01c1b8	83c1b8	fc 03 fc 03 3c c3 30 cf 00 00 00 00 00 00 00 00
	>01c1c8	83c1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1d8	83c1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1e8	83c1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c1f8	83c1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c208	83c208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c218	83c218	00 00 00 00 00 00 00 00 c0 fc 33 3f 30 3f 00 0f
	>01c228	83c228	00 0f 00 0f 0c 0f 0c 0f c0 3c 33 0c 30 0f 00 0f
	>01c238	83c238	00 0f 00 0f 0c 03 0c 03 00 0f 30 3f 3c ff 30 00
	>01c248	83c248	00 00 c3 c3 00 c3 3c ff 00 0f 30 0f 3c c3 00 00
	>01c258	83c258	00 00 c3 00 00 c3 3c c3 00 00 00 00 00 00 00 00
	>01c268	83c268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c278	83c278	00 00 00 00 00 00 00 00 03 03 00 00 00 00 00 00
	>01c288	83c288	00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00
	>01c298	83c298	00 00 00 00 00 00 00 00 00 ff 30 ff 30 3f 00 0f
	>01c2a8	83c2a8	00 0f 0c 0f 0c 0f 00 03 00 ff 30 cf 30 0f 00 0f
	>01c2b8	83c2b8	00 0f 0c 03 0c 03 00 03 00 00 cc cf 03 ff 03 f0
	>01c2c8	83c2c8	00 f0 0c fc 00 fc 03 ff 00 00 cc 03 03 fc 00 f0
	>01c2d8	83c2d8	00 f0 0c f0 00 fc 03 fc 00 00 00 00 00 00 00 00
	>01c2e8	83c2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c2f8	83c2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c308	83c308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c318	83c318	00 00 00 00 00 00 00 00 c0 ff 00 3f 3c 3f 0c 0f
	>01c328	83c328	00 0f 0c 0f 00 03 03 03 c0 3f 00 3f 3c 03 0c 03
	>01c338	83c338	00 0f 0c 03 00 03 03 00 00 c0 33 f3 00 ff 00 ff
	>01c348	83c348	00 ff 00 ff 00 ff 00 ff 00 c0 33 c0 00 ff 00 ff
	>01c358	83c358	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c368	83c368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c378	83c378	00 00 00 00 00 00 00 00 00 03 cc cf 00 ff 00 ff
	>01c388	83c388	00 ff 00 ff 00 ff 00 ff 00 03 cc 03 00 ff 00 ff
	>01c398	83c398	00 ff 00 ff 00 ff 00 ff 03 ff 00 fc 3c fc 30 f0
	>01c3a8	83c3a8	00 f0 30 f0 00 c0 c0 c0 03 fc 00 fc 3c c0 30 c0
	>01c3b8	83c3b8	00 f0 30 c0 00 c0 c0 00 00 00 00 00 00 00 00 00
	>01c3c8	83c3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3d8	83c3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3e8	83c3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c3f8	83c3f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c408	83c408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c418	83c418	00 00 00 00 00 00 00 00 00 03 03 03 00 00 03 03
	>01c428	83c428	3f 3f 00 00 00 00 00 00 00 03 03 00 00 00 03 00
	>01c438	83c438	3f 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01c448	83c448	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01c458	83c458	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c468	83c468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c478	83c478	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c488	83c488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c498	83c498	00 00 00 00 00 00 00 00 03 03 00 00 00 00 03 03
	>01c4a8	83c4a8	3f 3f 00 00 00 00 00 00 03 00 00 00 00 00 03 00
	>01c4b8	83c4b8	3f 00 00 00 00 00 00 00 03 ff fc ff 0c 0f f0 f0
	>01c4c8	83c4c8	ff ff 00 00 00 00 00 00 03 fc fc 03 0c 03 f0 00
	>01c4d8	83c4d8	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4e8	83c4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c4f8	83c4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c508	83c508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c518	83c518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01c528	83c528	3f 3f 00 00 00 00 00 00 00 00 00 00 00 00 03 00
	>01c538	83c538	3f 00 00 00 00 00 00 00 c0 ff 3c 3f 03 03 fc fc
	>01c548	83c548	ff ff 00 00 00 00 00 00 c0 3f 3c 03 03 00 fc 00
	>01c558	83c558	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c568	83c568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c578	83c578	00 00 00 00 00 00 00 00 03 ff 3c fc c0 c0 3f 3f
	>01c588	83c588	ff ff 00 00 00 00 00 00 03 fc 3c c0 c0 00 3f 00
	>01c598	83c598	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 c0
	>01c5a8	83c5a8	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 c0 00
	>01c5b8	83c5b8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5c8	83c5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5d8	83c5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5e8	83c5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c5f8	83c5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c608	83c608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c618	83c618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c628	83c628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c638	83c638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c648	83c648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c658	83c658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c668	83c668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c678	83c678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c688	83c688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c698	83c698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6a8	83c6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6b8	83c6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6c8	83c6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6d8	83c6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6e8	83c6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c6f8	83c6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c708	83c708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c718	83c718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c728	83c728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c738	83c738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c748	83c748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c758	83c758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c768	83c768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c778	83c778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c788	83c788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c798	83c798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7a8	83c7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7b8	83c7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7c8	83c7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7d8	83c7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7e8	83c7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c7f8	83c7f8	00 00 00 00 00 00 00 00 00 00 00 00 03 f3 00 ff
	>01c808	83c808	00 ff 00 ff 33 f3 0c c0 00 00 00 00 03 f0 00 ff
	>01c818	83c818	00 ff 00 ff 33 c0 00 c0 c3 ff 00 ff 3c ff ff ff
	>01c828	83c828	3f ff 3f ff 0f ff 0c ff c3 3c 00 ff 3c c3 ff 00
	>01c838	83c838	3f c0 3f c0 0f f0 0c f3 00 00 00 00 c0 c0 00 c0
	>01c848	83c848	00 c0 00 c0 00 c0 00 c0 00 00 00 00 c0 00 00 c0
	>01c858	83c858	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01c868	83c868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c878	83c878	00 00 00 00 00 00 00 00 03 03 00 03 00 f3 03 ff
	>01c888	83c888	00 ff 00 ff 0c fc 03 f0 03 00 00 03 00 f3 03 fc
	>01c898	83c898	00 ff 00 ff 0c f0 00 f0 0c fc 00 fc f3 ff fc ff
	>01c8a8	83c8a8	3c ff 3c ff cc ff 0c 3f 0c f0 00 fc f3 0c fc 03
	>01c8b8	83c8b8	3c c3 3c c3 cc 33 0c 33 00 00 00 00 00 00 00 00
	>01c8c8	83c8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8d8	83c8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8e8	83c8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c8f8	83c8f8	00 00 00 00 00 00 00 00 03 03 0f 0f 0c 0f 0c 0f
	>01c908	83c908	0c 0f 0c 0f 0f 0f 03 03 03 00 0f 00 0c 03 0c 03
	>01c918	83c918	0c 03 0c 03 0f 00 03 00 ff ff 3f ff 0c fc 0f ff
	>01c928	83c928	00 f3 0f ff 30 f3 f3 f3 ff 00 3f c0 0c f0 0f f0
	>01c938	83c938	00 f3 0f f0 30 c3 f3 00 30 3f c0 ff c0 ff 00 ff
	>01c948	83c948	00 ff 00 ff 00 ff 00 ff 30 0f c0 3f c0 3f 00 ff
	>01c958	83c958	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c968	83c968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c978	83c978	00 00 00 00 00 00 00 00 00 00 03 03 03 03 0f 0f
	>01c988	83c988	0c 0f 0c 0f 0c 0f 0c 0f 00 00 03 00 03 00 0f 00
	>01c998	83c998	0c 03 0c 03 0c 03 0c 03 ff ff fc fc ff ff 33 f3
	>01c9a8	83c9a8	00 f3 0f ff 0c ff 0f ff ff 00 fc 00 ff 00 33 c0
	>01c9b8	83c9b8	00 f3 0f f0 0c f3 0f f0 f0 ff c0 ff c0 ff 00 ff
	>01c9c8	83c9c8	00 ff 00 ff 00 ff 00 ff f0 0f c0 3f c0 3f 00 ff
	>01c9d8	83c9d8	00 ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00
	>01c9e8	83c9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01c9f8	83c9f8	00 00 00 00 00 00 00 00 00 c0 33 f3 c0 ff 00 0f
	>01ca08	83ca08	00 0f 30 3f 00 3f c0 ff 00 c0 33 c0 c0 3f 00 0f
	>01ca18	83ca18	00 0f 30 0f 00 3f c0 3f 00 ff 0c ff 0c fc 00 f0
	>01ca28	83ca28	00 f0 30 f0 30 f0 00 c0 00 ff 0c f3 0c f0 00 f0
	>01ca38	83ca38	00 f0 30 c0 30 c0 00 c0 c0 c0 00 00 00 00 00 00
	>01ca48	83ca48	00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00 00
	>01ca58	83ca58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca68	83ca68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ca78	83ca78	00 00 00 00 00 00 00 00 00 f0 0c fc 3c ff 30 00
	>01ca88	83ca88	00 00 c3 c3 00 c3 3c ff 00 f0 0c f0 3c c3 00 00
	>01ca98	83ca98	00 00 c3 00 00 c3 3c c3 03 3f cc fc 0c fc 00 f0
	>01caa8	83caa8	00 f0 00 f0 30 f0 30 f0 03 3c cc 30 0c f0 00 f0
	>01cab8	83cab8	00 f0 00 f0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01cac8	83cac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cad8	83cad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cae8	83cae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01caf8	83caf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 03
	>01cb08	83cb08	0f 0f 30 3f 00 3f 00 3f 00 00 00 00 00 00 03 00
	>01cb18	83cb18	0f 00 30 0f 00 3f 00 3f 00 03 0f 0f 3c 3f ff ff
	>01cb28	83cb28	ff ff 3f ff 0f ff 0f ff 00 03 0f 00 3c 03 ff 00
	>01cb38	83cb38	ff 00 3f c0 0f f0 0f f0 0c ff 00 ff c0 ff 00 ff
	>01cb48	83cb48	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cb58	83cb58	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cb68	83cb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cb78	83cb78	00 00 00 00 00 00 00 00 0f 0f 03 03 00 00 00 00
	>01cb88	83cb88	03 03 0c 0f 00 0f 00 0f 0f 00 03 00 00 00 00 00
	>01cb98	83cb98	03 00 0c 03 00 0f 00 0f 30 f3 cf cf 3c 3f ff ff
	>01cba8	83cba8	ff ff 0f ff 03 ff 03 ff 30 c3 cf 00 3c 03 ff 00
	>01cbb8	83cbb8	ff 00 0f f0 03 fc 03 fc 0c ff 00 ff c0 ff 00 ff
	>01cbc8	83cbc8	c0 ff c0 ff f0 ff 3f 3f 0c f3 00 ff c0 3f 00 ff
	>01cbd8	83cbd8	c0 3f c0 3f f0 0f 3f 00 00 00 00 00 00 00 00 00
	>01cbe8	83cbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cbf8	83cbf8	00 00 00 00 00 00 00 00 c0 ff 3f ff 30 f0 0f 0f
	>01cc08	83cc08	ff ff 00 00 00 00 00 00 c0 3f 3f c0 30 c0 0f 00
	>01cc18	83cc18	ff 00 00 00 00 00 00 00 c0 c0 00 00 00 00 c0 c0
	>01cc28	83cc28	fc fc 00 00 00 00 00 00 c0 00 00 00 00 00 c0 00
	>01cc38	83cc38	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc48	83cc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc58	83cc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc68	83cc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cc78	83cc78	00 00 00 00 00 00 00 00 3c ff c3 ff c3 ff 00 00
	>01cc88	83cc88	ff ff 00 00 00 00 00 00 3c c3 c3 3c c3 3c 00 00
	>01cc98	83cc98	ff 00 00 00 00 00 00 00 00 c0 c0 c0 00 00 c0 c0
	>01cca8	83cca8	fc fc 00 00 00 00 00 00 00 c0 c0 00 00 00 c0 00
	>01ccb8	83ccb8	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccc8	83ccc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccd8	83ccd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cce8	83cce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ccf8	83ccf8	00 00 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 3f
	>01cd08	83cd08	0f 0f 00 00 00 00 00 00 00 3f 00 3f 00 3f 30 0f
	>01cd18	83cd18	0f 00 00 00 00 00 00 00 0f ff 0f ff 0f ff 3c fc
	>01cd28	83cd28	f0 f0 00 00 00 00 00 00 0f f0 0f f0 0f f0 3c c0
	>01cd38	83cd38	f0 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cd48	83cd48	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cd58	83cd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd68	83cd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cd78	83cd78	00 00 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 0f
	>01cd88	83cd88	03 03 00 00 00 00 00 00 00 0f 00 0f 00 0f 0c 03
	>01cd98	83cd98	03 00 00 00 00 00 00 00 03 ff 03 ff 03 ff 0f ff
	>01cda8	83cda8	fc fc 00 00 00 00 00 00 03 fc 03 fc 03 fc 0f f0
	>01cdb8	83cdb8	fc 00 00 00 00 00 00 00 ff ff cf cf 00 00 00 00
	>01cdc8	83cdc8	00 00 00 00 00 00 00 00 ff 00 cf 00 00 00 00 00
	>01cdd8	83cdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cde8	83cde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cdf8	83cdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce08	83ce08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce18	83ce18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce28	83ce28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce38	83ce38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce48	83ce48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce58	83ce58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce68	83ce68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce78	83ce78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce88	83ce88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ce98	83ce98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cea8	83cea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ceb8	83ceb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cec8	83cec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ced8	83ced8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cee8	83cee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cef8	83cef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf08	83cf08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf18	83cf18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf28	83cf28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf38	83cf38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf48	83cf48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf58	83cf58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf68	83cf68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf78	83cf78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf88	83cf88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cf98	83cf98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfa8	83cfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfb8	83cfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfc8	83cfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfd8	83cfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cfe8	83cfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01cff8	83cff8	00 00 00 00 00 00 00 00 0f ff 03 ff 03 ff 00 ff
	>01d008	83d008	00 ff 00 ff 00 ff 00 ff 0f f0 03 fc 03 fc 00 ff
	>01d018	83d018	00 ff 00 ff 00 ff 00 ff ff ff 3f 3f ff ff cc cf
	>01d028	83d028	00 cf f0 ff 30 ff f0 ff ff 00 3f 00 ff 00 cc 03
	>01d038	83d038	00 cf f0 0f 30 cf f0 0f 00 00 c0 c0 c0 c0 f0 f0
	>01d048	83d048	30 f0 30 f0 30 f0 30 f0 00 00 c0 00 c0 00 f0 00
	>01d058	83d058	30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00 00 00
	>01d068	83d068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d078	83d078	00 00 00 00 00 00 00 00 0c fc 03 ff 03 ff 00 ff
	>01d088	83d088	00 ff 00 ff 00 ff 00 ff 0c f0 03 fc 03 fc 00 ff
	>01d098	83d098	00 ff 00 ff 00 ff 00 ff ff ff fc ff 30 3f f0 ff
	>01d0a8	83d0a8	00 cf f0 ff 0c cf cf cf ff 00 fc 03 30 0f f0 0f
	>01d0b8	83d0b8	00 cf f0 0f 0c c3 cf 00 c0 c0 f0 f0 30 f0 30 f0
	>01d0c8	83d0c8	30 f0 30 f0 f0 f0 c0 c0 c0 00 f0 00 30 c0 30 c0
	>01d0d8	83d0d8	30 c0 30 c0 f0 00 c0 00 00 00 00 00 00 00 00 00
	>01d0e8	83d0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d0f8	83d0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d108	83d108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d118	83d118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d128	83d128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d138	83d138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d148	83d148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d158	83d158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d168	83d168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d178	83d178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d188	83d188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d198	83d198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1a8	83d1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1b8	83d1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1c8	83d1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1d8	83d1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1e8	83d1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d1f8	83d1f8	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d208	83d208	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d218	83d218	03 fc 03 fc 0f f0 fc 00 0c cf f3 f3 3c fc ff ff
	>01d228	83d228	ff ff f0 ff c0 ff c0 ff 0c c3 f3 00 3c c0 ff 00
	>01d238	83d238	ff 00 f0 0f c0 3f c0 3f f0 f0 c0 c0 00 00 00 00
	>01d248	83d248	c0 c0 30 f0 00 f0 00 f0 f0 00 c0 00 00 00 00 00
	>01d258	83d258	c0 00 30 c0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01d268	83d268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d278	83d278	00 00 00 00 00 00 00 00 30 ff 00 ff 03 ff 00 ff
	>01d288	83d288	03 ff 03 ff 0f ff fc fc 30 cf 00 ff 03 fc 00 ff
	>01d298	83d298	03 fc 03 fc 0f f0 fc 00 00 c0 f0 f0 3c fc ff ff
	>01d2a8	83d2a8	ff ff fc ff f0 ff f0 ff 00 c0 f0 00 3c c0 ff 00
	>01d2b8	83d2b8	ff 00 fc 03 f0 0f f0 0f 00 00 00 00 00 00 c0 c0
	>01d2c8	83d2c8	f0 f0 0c fc 00 fc 00 fc 00 00 00 00 00 00 c0 00
	>01d2d8	83d2d8	f0 00 0c f0 00 fc 00 fc 00 00 00 00 00 00 00 00
	>01d2e8	83d2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d2f8	83d2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d308	83d308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d318	83d318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d328	83d328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d338	83d338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d348	83d348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d358	83d358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d368	83d368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d378	83d378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d388	83d388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d398	83d398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3a8	83d3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3b8	83d3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3c8	83d3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3d8	83d3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3e8	83d3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d3f8	83d3f8	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d408	83d408	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d418	83d418	00 00 00 00 00 00 00 00 c0 ff c0 ff c0 ff f0 ff
	>01d428	83d428	3f 3f 00 00 00 00 00 00 c0 3f c0 3f c0 3f f0 0f
	>01d438	83d438	3f 00 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 f0
	>01d448	83d448	c0 c0 00 00 00 00 00 00 00 f0 00 f0 00 f0 30 c0
	>01d458	83d458	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d468	83d468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d478	83d478	00 00 00 00 00 00 00 00 ff ff f3 f3 00 00 00 00
	>01d488	83d488	00 00 00 00 00 00 00 00 ff 00 f3 00 00 00 00 00
	>01d498	83d498	00 00 00 00 00 00 00 00 f0 ff f0 ff f0 ff 3c 3f
	>01d4a8	83d4a8	0f 0f 00 00 00 00 00 00 f0 0f f0 0f f0 0f 3c 03
	>01d4b8	83d4b8	0f 00 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c fc
	>01d4c8	83d4c8	f0 f0 00 00 00 00 00 00 00 fc 00 fc 00 fc 0c f0
	>01d4d8	83d4d8	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4e8	83d4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d4f8	83d4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d508	83d508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d518	83d518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d528	83d528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d538	83d538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d548	83d548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d558	83d558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d568	83d568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d578	83d578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d588	83d588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d598	83d598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5a8	83d5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5b8	83d5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5c8	83d5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5d8	83d5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5e8	83d5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d5f8	83d5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d608	83d608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d618	83d618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d628	83d628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d638	83d638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d648	83d648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d658	83d658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d668	83d668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d678	83d678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d688	83d688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d698	83d698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6a8	83d6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6b8	83d6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6c8	83d6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6d8	83d6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6e8	83d6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d6f8	83d6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d708	83d708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d718	83d718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d728	83d728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d738	83d738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d748	83d748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d758	83d758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d768	83d768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d778	83d778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d788	83d788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d798	83d798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7a8	83d7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7b8	83d7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7c8	83d7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7d8	83d7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7e8	83d7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d7f8	83d7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d808	83d808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d818	83d818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d828	83d828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d838	83d838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d848	83d848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d858	83d858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d868	83d868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d878	83d878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d888	83d888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d898	83d898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8a8	83d8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8b8	83d8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8c8	83d8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8d8	83d8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8e8	83d8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d8f8	83d8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d908	83d908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d918	83d918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d928	83d928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d938	83d938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d948	83d948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d958	83d958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d968	83d968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d978	83d978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01d988	83d988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01d998	83d998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01d9a8	83d9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01d9b8	83d9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01d9c8	83d9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9d8	83d9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9e8	83d9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01d9f8	83d9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da08	83da08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da18	83da18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da28	83da28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da38	83da38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da48	83da48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da58	83da58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da68	83da68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da78	83da78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da88	83da88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01da98	83da98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daa8	83daa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dab8	83dab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dac8	83dac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dad8	83dad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dae8	83dae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01daf8	83daf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db08	83db08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db18	83db18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db28	83db28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db38	83db38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db48	83db48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db58	83db58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db68	83db68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01db78	83db78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01db88	83db88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01db98	83db98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01dba8	83dba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01dbb8	83dbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01dbc8	83dbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbd8	83dbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbe8	83dbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dbf8	83dbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc08	83dc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc18	83dc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc28	83dc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc38	83dc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc48	83dc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc58	83dc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc68	83dc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc78	83dc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc88	83dc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dc98	83dc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dca8	83dca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcb8	83dcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcc8	83dcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcd8	83dcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dce8	83dce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dcf8	83dcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd08	83dd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd18	83dd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd28	83dd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd38	83dd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd48	83dd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd58	83dd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd68	83dd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd78	83dd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd88	83dd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dd98	83dd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dda8	83dda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddb8	83ddb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddc8	83ddc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddd8	83ddd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dde8	83dde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ddf8	83ddf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de08	83de08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de18	83de18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de28	83de28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de38	83de38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de48	83de48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de58	83de58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de68	83de68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de78	83de78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de88	83de88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01de98	83de98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dea8	83dea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01deb8	83deb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dec8	83dec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ded8	83ded8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dee8	83dee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01def8	83def8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df08	83df08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df18	83df18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df28	83df28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df38	83df38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df48	83df48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df58	83df58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df68	83df68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df78	83df78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df88	83df88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01df98	83df98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfa8	83dfa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfb8	83dfb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfc8	83dfc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfd8	83dfd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dfe8	83dfe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01dff8	83dff8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e008	83e008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e018	83e018	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e028	83e028	3f 30 3f 30 3f 03 3f 30 00 00 03 00 0c 03 00 0f
	>01e038	83e038	30 0f 30 0f 03 3c 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e048	83e048	ff 00 ff 30 ff f0 ff 0f 30 0f 00 ff 00 ff 00 3f
	>01e058	83e058	00 3f 30 cf f0 0f 0f f0 00 00 00 00 00 00 00 00
	>01e068	83e068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e078	83e078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e088	83e088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e098	83e098	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e0a8	83e0a8	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e0b8	83e0b8	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e0c8	83e0c8	ff 00 ff 0c ff fc ff 03 30 0f 00 ff 00 ff 00 3f
	>01e0d8	83e0d8	00 3f 0c f3 fc 03 03 fc 00 00 00 00 00 00 00 00
	>01e0e8	83e0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e0f8	83e0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e108	83e108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e118	83e118	00 00 00 00 00 00 00 00 00 00 03 03 0f 0c 0f 00
	>01e128	83e128	3f 30 3f 30 3f 00 3f 30 00 00 03 00 0c 03 00 0f
	>01e138	83e138	30 0f 30 0f 00 3f 30 0f 3f 30 ff 00 ff 00 ff 00
	>01e148	83e148	ff 00 ff 03 ff 3f ff 00 30 0f 00 ff 00 ff 00 3f
	>01e158	83e158	00 3f 03 fc 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e168	83e168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e178	83e178	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e188	83e188	ff 00 ff c0 ff fc ff 00 0c f0 00 ff 00 ff 00 ff
	>01e198	83e198	00 ff c0 3f fc 03 00 ff 00 00 c0 c0 f0 30 f0 00
	>01e1a8	83e1a8	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e1b8	83e1b8	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e1c8	83e1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1d8	83e1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1e8	83e1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e1f8	83e1f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e208	83e208	00 00 00 00 00 00 03 03 00 00 00 00 00 00 00 00
	>01e218	83e218	00 00 00 00 00 00 03 00 3f 00 3f 0c 3f 3c 3f 0c
	>01e228	83e228	3c 3c 3f 3f 0f 03 cf cc 00 3f 0c 30 3c 00 0c 30
	>01e238	83e238	3c 00 3f 00 03 0c cc 03 ff 00 ff 00 cf 00 0f 00
	>01e248	83e248	00 00 0f 0f ff c0 ff 00 00 0f 00 00 00 00 00 00
	>01e258	83e258	00 00 0f 00 c0 0f 00 ff 00 00 00 00 00 00 00 00
	>01e268	83e268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e278	83e278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e288	83e288	00 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00
	>01e298	83e298	00 00 00 00 0f 00 00 00 3f 00 3f 03 3f 33 3f 03
	>01e2a8	83e2a8	3f 33 3f 33 0f 00 cf cc 00 3f 03 3c 33 0c 03 3c
	>01e2b8	83e2b8	33 0c 33 0c 00 0f cc 03 ff 00 ff 00 f3 00 c3 00
	>01e2c8	83e2c8	00 00 c3 c3 ff fc ff 00 00 c3 00 00 00 00 00 00
	>01e2d8	83e2d8	00 00 c3 00 fc 00 00 ff 00 00 00 00 00 00 00 00
	>01e2e8	83e2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e2f8	83e2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e308	83e308	00 00 00 00 03 03 00 00 00 00 00 00 00 00 00 00
	>01e318	83e318	00 00 00 00 03 00 00 00 3f 00 3f 00 3f 30 3f 00
	>01e328	83e328	3f 30 3f 30 cf c0 0f 0c 00 3f 00 3f 30 0f 00 3f
	>01e338	83e338	30 0f 30 0f c0 0f 0c 03 ff 00 ff c0 fc c0 f0 c0
	>01e348	83e348	c0 c0 f0 f0 ff 3f ff 00 00 f0 c0 00 c0 00 c0 00
	>01e358	83e358	c0 00 f0 00 3f c0 00 ff 00 00 00 00 00 00 00 00
	>01e368	83e368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e378	83e378	00 00 00 00 00 00 00 00 ff 00 ff 03 cf 03 0f 03
	>01e388	83e388	03 03 0f 0f ff fc ff 00 00 0f 03 00 03 00 03 00
	>01e398	83e398	03 00 0f 00 fc 03 00 ff fc 00 fc 00 fc 0c fc 00
	>01e3a8	83e3a8	fc 0c fc 0c f3 03 f0 30 00 fc 00 fc 0c f0 00 fc
	>01e3b8	83e3b8	0c f0 0c f0 03 f0 30 c0 00 00 00 00 00 00 00 00
	>01e3c8	83e3c8	00 00 00 00 c0 c0 00 00 00 00 00 00 00 00 00 00
	>01e3d8	83e3d8	00 00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00
	>01e3e8	83e3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e3f8	83e3f8	00 00 00 00 00 00 00 00 0c 0c 00 00 0f 0c 0f 00
	>01e408	83e408	3f 30 00 00 00 00 00 00 0c 00 00 00 0c 03 00 03
	>01e418	83e418	30 0f 00 00 00 00 00 00 33 33 03 03 f3 30 ff 00
	>01e428	83e428	ff c0 00 00 00 00 00 00 33 00 03 00 30 c3 00 ff
	>01e438	83e438	c0 3f 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01e448	83e448	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 cf
	>01e458	83e458	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e468	83e468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e478	83e478	00 00 00 00 00 00 00 00 30 30 0f 0c 0f 00 3f 30
	>01e488	83e488	3f 00 00 00 00 00 00 00 30 00 0c 03 00 0c 30 0f
	>01e498	83e498	00 3f 00 00 00 00 00 00 03 03 f3 33 f3 00 ff 00
	>01e4a8	83e4a8	ff c0 00 00 00 00 00 00 03 00 33 c0 00 f3 00 ff
	>01e4b8	83e4b8	c0 3f 00 00 00 00 00 00 ff 03 ff 00 ff 00 ff 00
	>01e4c8	83e4c8	ff c3 00 00 00 00 00 00 03 fc 00 ff 00 ff 00 cf
	>01e4d8	83e4d8	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4e8	83e4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e4f8	83e4f8	00 00 00 00 00 00 00 00 0f 0c 0f 00 3f 30 3f 00
	>01e508	83e508	3f 00 00 00 00 00 00 00 0c 03 00 0c 30 0f 00 3f
	>01e518	83e518	00 3f 00 00 00 00 00 00 f3 33 f3 03 ff 0c ff c0
	>01e528	83e528	ff 00 00 00 00 00 00 00 33 c0 03 f0 0c f3 c0 3f
	>01e538	83e538	00 ff 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e548	83e548	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 f3
	>01e558	83e558	c3 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e568	83e568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e578	83e578	00 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 ff 00
	>01e588	83e588	ff c3 00 00 00 00 00 00 00 ff 00 ff 00 ff 00 cf
	>01e598	83e598	c3 3c 00 00 00 00 00 00 cf cc cf c0 ff 30 ff 03
	>01e5a8	83e5a8	ff 00 00 00 00 00 00 00 cc 03 c0 0c 30 cf 03 fc
	>01e5b8	83e5b8	00 ff 00 00 00 00 00 00 f0 30 f0 00 fc 0c fc 00
	>01e5c8	83e5c8	fc 00 00 00 00 00 00 00 30 c0 00 f0 0c f0 00 fc
	>01e5d8	83e5d8	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5e8	83e5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e5f8	83e5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e608	83e608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e618	83e618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e628	83e628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e638	83e638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e648	83e648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e658	83e658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e668	83e668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e678	83e678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e688	83e688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e698	83e698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6a8	83e6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6b8	83e6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6c8	83e6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6d8	83e6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6e8	83e6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e6f8	83e6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e708	83e708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e718	83e718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e728	83e728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e738	83e738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e748	83e748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e758	83e758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e768	83e768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e778	83e778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e788	83e788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e798	83e798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7a8	83e7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7b8	83e7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7c8	83e7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7d8	83e7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7e8	83e7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e7f8	83e7f8	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e808	83e808	ff 00 ff 30 ff 3f ff c0 0c f0 00 ff 00 ff 00 ff
	>01e818	83e818	00 ff 30 cf 3f c0 c0 3f 00 00 c0 c0 f0 30 f0 00
	>01e828	83e828	fc 0c fc 0c fc 00 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e838	83e838	0c f0 0c f0 00 fc 0c f0 00 00 00 00 00 00 00 00
	>01e848	83e848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e858	83e858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e868	83e868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e878	83e878	00 00 00 00 00 00 00 00 fc 0c ff 00 ff 00 ff 00
	>01e888	83e888	ff 00 ff 0c ff 0f ff f0 0c f0 00 ff 00 ff 00 ff
	>01e898	83e898	00 ff 0c f3 0f f0 f0 0f 00 00 c0 c0 f0 30 f0 00
	>01e8a8	83e8a8	fc 0c fc 0c fc c0 fc 0c 00 00 c0 00 30 c0 00 f0
	>01e8b8	83e8b8	0c f0 0c f0 c0 3c 0c f0 00 00 00 00 00 00 00 00
	>01e8c8	83e8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8d8	83e8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8e8	83e8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e8f8	83e8f8	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e908	83e908	3f 30 3f 30 0f 00 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e918	83e918	30 0f 30 0f 00 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e928	83e928	0f 00 0f 00 cf c0 cf c0 30 cf 00 ff cc 33 c0 0f
	>01e938	83e938	00 0c 00 0f c0 0f c0 0f ff 00 ff 00 ff 03 fc 0c
	>01e948	83e948	f0 00 f0 30 f0 30 cc 0c 00 ff 00 ff 03 fc 0c f0
	>01e958	83e958	00 f0 30 c0 30 c0 0c c0 00 00 00 00 00 00 00 00
	>01e968	83e968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e978	83e978	00 00 00 00 00 00 00 00 3f 00 3f 00 3f 00 3f 00
	>01e988	83e988	3f 00 3f 30 3f 30 0f 00 00 3f 00 3f 00 3f 00 3f
	>01e998	83e998	00 3f 30 0f 30 0f 00 0f ff 30 ff 00 ff cc cf c0
	>01e9a8	83e9a8	0f 00 0f 00 cf c0 cf 00 30 cf 00 ff cc 33 c0 0f
	>01e9b8	83e9b8	00 0c 00 0f c0 0f 00 cf ff 00 ff 00 ff 03 fc 0c
	>01e9c8	83e9c8	f0 00 f3 03 f3 33 f3 33 00 ff 00 ff 03 fc 0c f0
	>01e9d8	83e9d8	00 f0 03 f0 33 c0 33 c0 00 00 00 00 00 00 00 00
	>01e9e8	83e9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01e9f8	83e9f8	00 00 00 00 00 00 00 00 ff 00 ff 00 f3 00 c3 00
	>01ea08	83ea08	00 00 c3 c3 ff 3f ff 00 00 c3 00 00 00 00 00 00
	>01ea18	83ea18	00 00 c3 00 3f c0 00 ff fc 00 fc c0 fc cc fc c0
	>01ea28	83ea28	fc cc fc cc f0 00 f3 33 00 fc c0 3c cc 30 c0 3c
	>01ea38	83ea38	cc 30 cc 30 00 f0 33 c0 00 00 00 00 00 00 00 00
	>01ea48	83ea48	00 00 00 00 f0 f0 00 00 00 00 00 00 00 00 00 00
	>01ea58	83ea58	00 00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00
	>01ea68	83ea68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ea78	83ea78	00 00 00 00 00 00 00 00 ff 00 ff 00 fc 00 f0 00
	>01ea88	83ea88	00 00 f0 f0 ff 03 ff 00 00 f0 00 00 00 00 00 00
	>01ea98	83ea98	00 00 f0 00 03 3c 00 ff fc 00 fc 30 fc 3c fc 30
	>01eaa8	83eaa8	3c 3c fc fc f0 c0 f3 33 00 fc 30 0c 3c 00 30 0c
	>01eab8	83eab8	3c 00 fc 00 c0 30 33 c0 00 00 00 00 00 00 00 00
	>01eac8	83eac8	00 00 00 00 00 00 c0 c0 00 00 00 00 00 00 00 00
	>01ead8	83ead8	00 00 00 00 00 00 c0 00 00 00 00 00 00 00 00 00
	>01eae8	83eae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eaf8	83eaf8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 03 00 33 30
	>01eb08	83eb08	c3 c0 03 00 0f 0c cf cc 0c 03 0c 03 00 03 30 03
	>01eb18	83eb18	c0 03 00 03 0c 03 cc 03 cf 0c cf 0c c3 00 c3 00
	>01eb28	83eb28	f3 33 c0 00 cc cc 0c 0c 0c c3 0c c3 00 c3 00 c3
	>01eb38	83eb38	33 c0 00 c0 cc 00 0c 00 c0 00 f0 30 f0 30 f0 00
	>01eb48	83eb48	f0 00 fc 0c fc cc 3c 00 00 c0 30 c0 30 c0 00 f0
	>01eb58	83eb58	00 f0 0c f0 cc 30 00 3c 00 00 00 00 00 00 00 00
	>01eb68	83eb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eb78	83eb78	00 00 00 00 00 00 00 00 0f 00 0f 0c 03 00 33 30
	>01eb88	83eb88	33 30 0f 0c 0f 00 cf c0 00 0f 0c 03 00 03 30 03
	>01eb98	83eb98	30 03 0c 03 00 0f c0 0f cf 00 cf 0c cf 0c c3 00
	>01eba8	83eba8	c3 c0 c3 c3 33 33 30 30 00 cf 0c c3 0c c3 00 c3
	>01ebb8	83ebb8	c0 03 c3 00 33 00 30 00 c3 03 cc 0c cc 0c cc 0c
	>01ebc8	83ebc8	c3 03 c0 00 c0 00 c0 00 03 c0 0c c0 0c c0 0c c0
	>01ebd8	83ebd8	03 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00
	>01ebe8	83ebe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ebf8	83ebf8	00 00 00 00 00 00 00 00 ff c0 ff 00 ff 00 ff 00
	>01ec08	83ec08	ff c3 00 00 00 00 00 00 c0 3f 00 ff 00 ff 00 cf
	>01ec18	83ec18	c3 3c 00 00 00 00 00 00 c0 c0 cf cc cf 00 ff 00
	>01ec28	83ec28	ff 03 00 00 00 00 00 00 c0 00 cc 03 00 cc 00 ff
	>01ec38	83ec38	03 fc 00 00 00 00 00 00 0c 0c f0 30 f0 00 fc 0c
	>01ec48	83ec48	fc 00 00 00 00 00 00 00 0c 00 30 c0 00 f0 0c f0
	>01ec58	83ec58	00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec68	83ec68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ec78	83ec78	00 00 00 00 00 00 00 00 ff 3c ff 00 ff 00 ff 00
	>01ec88	83ec88	ff c3 00 00 00 00 00 00 3c c3 00 ff 00 ff 00 f3
	>01ec98	83ec98	c3 3c 00 00 00 00 00 00 cc cc c0 c0 cf 0c ff 00
	>01eca8	83eca8	ff 03 00 00 00 00 00 00 cc 00 c0 00 0c c3 00 ff
	>01ecb8	83ecb8	03 fc 00 00 00 00 00 00 30 30 00 00 f0 30 f0 00
	>01ecc8	83ecc8	fc 0c 00 00 00 00 00 00 30 00 00 00 30 c0 00 30
	>01ecd8	83ecd8	0c f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ece8	83ece8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ecf8	83ecf8	00 00 00 00 00 00 00 00 cf 00 ff c3 3c 3c 00 00
	>01ed08	83ed08	00 00 00 00 00 00 00 00 00 cf c3 3c 3c 00 00 00
	>01ed18	83ed18	00 00 00 00 00 00 00 00 0c 0c 0c 0c 30 30 00 00
	>01ed28	83ed28	00 00 00 00 00 00 00 00 0c 00 0c 00 30 00 00 00
	>01ed38	83ed38	00 00 00 00 00 00 00 00 3f 33 0f 03 0f 03 0f 03
	>01ed48	83ed48	3c 0c 00 00 00 00 00 00 33 0c 03 0c 03 0c 03 0c
	>01ed58	83ed58	0c 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed68	83ed68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ed78	83ed78	00 00 00 00 00 00 00 00 0f 03 3c 30 3c 0c 30 00
	>01ed88	83ed88	30 30 00 00 00 00 00 00 03 0c 30 0c 0c 30 00 30
	>01ed98	83ed98	30 00 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01eda8	83eda8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01edb8	83edb8	00 00 00 00 00 00 00 00 f0 30 f0 30 f0 c0 3c 0c
	>01edc8	83edc8	3f 30 00 00 00 00 00 00 30 c0 30 c0 c0 30 0c 30
	>01edd8	83edd8	30 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ede8	83ede8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01edf8	83edf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee08	83ee08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee18	83ee18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee28	83ee28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee38	83ee38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee48	83ee48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee58	83ee58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee68	83ee68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee78	83ee78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee88	83ee88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ee98	83ee98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eea8	83eea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eeb8	83eeb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eec8	83eec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eed8	83eed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eee8	83eee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eef8	83eef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef08	83ef08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef18	83ef18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef28	83ef28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef38	83ef38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef48	83ef48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef58	83ef58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef68	83ef68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef78	83ef78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef88	83ef88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ef98	83ef98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efa8	83efa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efb8	83efb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efc8	83efc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efd8	83efd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01efe8	83efe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01eff8	83eff8	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f008	83f008	0f 00 cf c0 cf cc cf cc 00 ff 00 ff c0 3f 30 0c
	>01f018	83f018	00 0f c0 0f cc 03 cc 03 ff 0c ff 00 ff 33 f3 03
	>01f028	83f028	f0 00 f0 00 f3 03 f3 00 0c f3 00 ff 33 cc 03 f0
	>01f038	83f038	00 f0 00 f0 03 f0 00 f3 fc 00 fc 00 fc 00 fc 00
	>01f048	83f048	fc 00 fc 0c fc 0c f0 00 00 fc 00 fc 00 fc 00 fc
	>01f058	83f058	00 fc 0c f0 0c f0 00 f0 00 00 00 00 00 00 00 00
	>01f068	83f068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f078	83f078	00 00 00 00 00 00 00 00 ff 00 ff 00 ff c0 3f 30
	>01f088	83f088	0f 00 0f 0c 0f 0c 33 30 00 ff 00 ff c0 3c 30 0f
	>01f098	83f098	00 0f 0c 03 0c 03 30 03 ff 0c ff 00 ff 33 f3 03
	>01f0a8	83f0a8	f0 00 f0 00 f3 03 f3 03 0c f3 00 ff 33 cc 03 f0
	>01f0b8	83f0b8	00 f0 00 f0 03 f0 03 f0 fc 00 fc 00 fc 00 fc 00
	>01f0c8	83f0c8	fc 0c fc 0c f0 00 f0 00 00 fc 00 fc 00 fc 00 fc
	>01f0d8	83f0d8	0c f0 0c f0 00 f0 00 f0 00 00 00 00 00 00 00 00
	>01f0e8	83f0e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f0f8	83f0f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f108	83f108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f118	83f118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f128	83f128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f138	83f138	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f148	83f148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f158	83f158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f168	83f168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f178	83f178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f188	83f188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f198	83f198	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1a8	83f1a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1b8	83f1b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1c8	83f1c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1d8	83f1d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1e8	83f1e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f1f8	83f1f8	00 00 00 00 00 00 00 00 c3 c0 33 30 33 30 33 30
	>01f208	83f208	c3 c0 03 00 03 00 03 00 c0 03 30 03 30 03 30 03
	>01f218	83f218	c0 03 00 03 00 03 00 03 f3 00 f3 30 f3 30 c3 00
	>01f228	83f228	c3 03 c3 c3 cc cc 0c 0c 00 f3 30 c3 30 c3 00 c3
	>01f238	83f238	03 c0 c3 00 cc 00 0c 00 f0 00 f0 30 c0 00 cc 0c
	>01f248	83f248	cc 0c f0 30 f0 00 f3 03 00 f0 30 c0 00 c0 0c c0
	>01f258	83f258	0c c0 30 c0 00 f0 03 f0 00 00 00 00 00 00 00 00
	>01f268	83f268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f278	83f278	00 00 00 00 00 00 00 00 33 30 0f 0c cf cc 0f 00
	>01f288	83f288	0f 00 3f 30 3f 33 3c 00 30 03 0c 03 cc 03 00 0f
	>01f298	83f298	00 0f 30 0f 33 0c 00 3c f3 30 f3 30 c3 00 cf 0c
	>01f2a8	83f2a8	c3 c0 33 30 33 33 30 30 30 c3 30 c3 00 c3 0c c3
	>01f2b8	83f2b8	c0 03 30 03 33 00 30 00 f0 30 f0 30 c0 00 cc 0c
	>01f2c8	83f2c8	c3 03 c0 00 f0 30 f3 33 30 c0 30 c0 00 c0 0c c0
	>01f2d8	83f2d8	03 c0 00 c0 30 c0 33 c0 00 00 00 00 00 00 00 00
	>01f2e8	83f2e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f2f8	83f2f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f308	83f308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f318	83f318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f328	83f328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f338	83f338	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f348	83f348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f358	83f358	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f368	83f368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f378	83f378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f388	83f388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f398	83f398	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3a8	83f3a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3b8	83f3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3c8	83f3c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3d8	83f3d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3e8	83f3e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f3f8	83f3f8	00 00 00 00 00 00 00 00 0f 0c 0f 0c 0f 03 3c 30
	>01f408	83f408	fc 0c 00 00 00 00 00 00 0c 03 0c 03 03 0c 30 0c
	>01f418	83f418	0c f0 00 00 00 00 00 00 0c 0c 30 30 00 00 00 00
	>01f428	83f428	00 00 00 00 00 00 00 00 0c 00 30 00 00 00 00 00
	>01f438	83f438	00 00 00 00 00 00 00 00 f0 c0 3c 0c 3c 30 0c 00
	>01f448	83f448	0c 0c 00 00 00 00 00 00 c0 30 0c 30 30 0c 00 0c
	>01f458	83f458	0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f468	83f468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f478	83f478	00 00 00 00 00 00 00 00 fc cc f0 c0 f0 c0 f0 c0
	>01f488	83f488	3c 30 00 00 00 00 00 00 cc 30 c0 30 c0 30 c0 30
	>01f498	83f498	30 0c 00 00 00 00 00 00 30 30 0c 0c 00 00 00 00
	>01f4a8	83f4a8	00 00 00 00 00 00 00 00 30 00 0c 00 00 00 00 00
	>01f4b8	83f4b8	00 00 00 00 00 00 00 00 f3 00 ff c3 3c 3c 00 00
	>01f4c8	83f4c8	00 00 00 00 00 00 00 00 00 f3 c3 3c 3c 00 00 00
	>01f4d8	83f4d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4e8	83f4e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f4f8	83f4f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f508	83f508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f518	83f518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f528	83f528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f538	83f538	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f548	83f548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f558	83f558	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f568	83f568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f578	83f578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f588	83f588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f598	83f598	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5a8	83f5a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5b8	83f5b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5c8	83f5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5d8	83f5d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5e8	83f5e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f5f8	83f5f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f608	83f608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f618	83f618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f628	83f628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f638	83f638	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f648	83f648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f658	83f658	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f668	83f668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f678	83f678	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f688	83f688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f698	83f698	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6a8	83f6a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6b8	83f6b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6c8	83f6c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6d8	83f6d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6e8	83f6e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f6f8	83f6f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f708	83f708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f718	83f718	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f728	83f728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f738	83f738	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f748	83f748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f758	83f758	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f768	83f768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f778	83f778	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f788	83f788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f798	83f798	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7a8	83f7a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7b8	83f7b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7c8	83f7c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7d8	83f7d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7e8	83f7e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f7f8	83f7f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f808	83f808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f818	83f818	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f828	83f828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f838	83f838	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f848	83f848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f858	83f858	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f868	83f868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f878	83f878	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f888	83f888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f898	83f898	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8a8	83f8a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8b8	83f8b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8c8	83f8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8d8	83f8d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8e8	83f8e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f8f8	83f8f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f908	83f908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f918	83f918	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f928	83f928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f938	83f938	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f948	83f948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f958	83f958	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f968	83f968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f978	83f978	00 00 00 00 00 00 00 00 03 03 0c 0f 30 3f 33 3c
	>01f988	83f988	33 3c 30 3f c0 ff c0 ff 03 00 0c 03 30 0f 30 0c
	>01f998	83f998	30 0c 30 0f c0 3f c0 3f c0 c0 30 f0 0c fc cc 3c
	>01f9a8	83f9a8	cc 3c 0c fc 03 ff 03 ff c0 00 30 c0 0c f0 0c 30
	>01f9b8	83f9b8	0c 30 0c f0 03 fc 03 fc 00 00 00 00 00 00 00 00
	>01f9c8	83f9c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9d8	83f9d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9e8	83f9e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01f9f8	83f9f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa08	83fa08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa18	83fa18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa28	83fa28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa38	83fa38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa48	83fa48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa58	83fa58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa68	83fa68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa78	83fa78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa88	83fa88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fa98	83fa98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faa8	83faa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fab8	83fab8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fac8	83fac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fad8	83fad8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fae8	83fae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01faf8	83faf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb08	83fb08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb18	83fb18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb28	83fb28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb38	83fb38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb48	83fb48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb58	83fb58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb68	83fb68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fb78	83fb78	00 00 00 00 00 00 00 00 f0 ff c0 ff f0 ff fc ff
	>01fb88	83fb88	3f 3f 33 33 0c 0c 03 03 f0 0f c0 3f f0 0f fc 03
	>01fb98	83fb98	3f 00 33 00 0c 00 03 00 0f ff 03 ff 0f ff 3f ff
	>01fba8	83fba8	fc fc cc cc 30 30 c0 c0 0f f0 03 fc 0f f0 3f c0
	>01fbb8	83fbb8	fc 00 cc 00 30 00 c0 00 00 00 00 00 00 00 00 00
	>01fbc8	83fbc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbd8	83fbd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbe8	83fbe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fbf8	83fbf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc08	83fc08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc18	83fc18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc28	83fc28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc38	83fc38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc48	83fc48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc58	83fc58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc68	83fc68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc78	83fc78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc88	83fc88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fc98	83fc98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fca8	83fca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcb8	83fcb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcc8	83fcc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcd8	83fcd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fce8	83fce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fcf8	83fcf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd08	83fd08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd18	83fd18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd28	83fd28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd38	83fd38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd48	83fd48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd58	83fd58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd68	83fd68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd78	83fd78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd88	83fd88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fd98	83fd98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fda8	83fda8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdb8	83fdb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdc8	83fdc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdd8	83fdd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fde8	83fde8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fdf8	83fdf8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe08	83fe08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe18	83fe18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe28	83fe28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe38	83fe38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe48	83fe48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe58	83fe58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe68	83fe68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe78	83fe78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe88	83fe88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fe98	83fe98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fea8	83fea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01feb8	83feb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fec8	83fec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fed8	83fed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fee8	83fee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fef8	83fef8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff08	83ff08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff18	83ff18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff28	83ff28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff38	83ff38	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff48	83ff48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff58	83ff58	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff68	83ff68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff78	83ff78	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff88	83ff88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ff98	83ff98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffa8	83ffa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffb8	83ffb8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffc8	83ffc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffd8	83ffd8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01ffe8	83ffe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>01fff8	83fff8	00 00 00 00 00 00 00 00
202							.send


205							.section sSharedWRAM
206							.include "sharedWRAM.asm"

:5	;******  Processing file: sharedWRAM.asm


2	>0036						mINIDISP  .word ?
3	>0038						mOBSEL    .word ?
4	>003a						mBGMODE   .word ?
5	>003c						mMOSIAC   .word ?
6	>003e						mBG1SC    .word ?
7	>0040						mBG2SC    .word ?
8	>0042						mBG3SC    .word ?
9	>0044						mBG4SC    .word ?
10	>0046						mBG12NBA  .word ?
11	>0048						mBG23NBA  .word ?
12	.004a						mBG1HOFS  .dunion HLWord
210:1	>004a							.word ?
211								.struct
212	>004a								lo .byte ?
213	>004b								hi .byte ?
214								.ends
215							.endu
13:5	.004c						mBG1VOFS  .dunion HLWord
210:1	>004c							.word ?
211								.struct
212	>004c								lo .byte ?
213	>004d								hi .byte ?
214								.ends
215							.endu
14:5	.004e						mBG2HOFS  .dunion HLWord
210:1	>004e							.word ?
211								.struct
212	>004e								lo .byte ?
213	>004f								hi .byte ?
214								.ends
215							.endu
15:5	.0050						mBG2VOFS  .dunion HLWord
210:1	>0050							.word ?
211								.struct
212	>0050								lo .byte ?
213	>0051								hi .byte ?
214								.ends
215							.endu
16:5	.0052						mBG3HOFS  .dunion HLWord
210:1	>0052							.word ?
211								.struct
212	>0052								lo .byte ?
213	>0053								hi .byte ?
214								.ends
215							.endu
17:5	.0054						mBG3VOFS  .dunion HLWord
210:1	>0054							.word ?
211								.struct
212	>0054								lo .byte ?
213	>0055								hi .byte ?
214								.ends
215							.endu
18:5	.0056						mBG4HOFS  .dunion HLWord
210:1	>0056							.word ?
211								.struct
212	>0056								lo .byte ?
213	>0057								hi .byte ?
214								.ends
215							.endu
19:5	.0058						mBG4VOFS  .dunion HLWord
210:1	>0058							.word ?
211								.struct
212	>0058								lo .byte ?
213	>0059								hi .byte ?
214								.ends
215							.endu
20:5	>005a						mW12SEL   .word ?
21	>005c						mW34SEL   .word ?
22	>005e						mWOBJSEL  .word ?
23	>0060						mWH0      .word ?
24	>0062						mWH1      .word ?
25	>0064						mWH2      .word ?
26	>0066						mWH3      .word ?
27	>0068						mWBGLOG   .word ?
28	>006a						mOBJLOG   .word ?
29	>006c						mTM       .word ?
30	>006e						mTS       .word ?
31	>0070						mTMW      .word ?
32	>0072						mTSW      .word ?
33	>0074						mCOLDATA  .word ?
34	>0076						mSETINI   .word ?
35	>0078						mNMITIMEN .word ?

37	>007a						joyLeft	 		.byte ?
38	>007b						joyRight 		.byte ?
39	>007c						joyUp	 			.byte ?
40	>007d						joyDown	 		.byte ?
41	>007e						joyFire	 		.byte ?
42	>007f						oldJoyLeft		.byte ?
43	>0080						oldJoyRight 	.byte ?
44	>0081						oldJoyUp			.byte ?
45	>0082						oldJoyDown		.byte ?
46	>0083						oldJoyFire		.byte ?
47	>0084						joyUpStart  	.byte ?
48	>0085						joyUpStop		.byte ?
49	>0086						joyFireEvent 	.byte ?
50	.0087						GameData 		.dstruct sGameData
2:3	>0087						lives 		.byte ?					; player lives
3	>0088						flowers 		.byte ?					; current flowers
4	>0089						score 		.byte ?,?,?,?,?,?		; current score, byte per digit
5	>008f						high 			.byte ?,?,?,?,?,?		; best high score, byte per digit
6	>0095						currLevel 	.byte ?					; current level 0 bassed
7	>0096						exitOpenNZ 	.byte ?					; have all keys been collected
8	>0097						musicMode 	.byte ?					; not actually used, yet
9							.ends
51:5	.0098						LevelData 		.dstruct sLevelData
12:3	>0098						numKeysLeft			.byte ?			; number of keys left to collect
13	>0099						totalKeys 			.byte ?			; the number of keys in the start of the level
14	>009a						playerIndex 		.byte ?			; the tile index the player should spawn on
15	>009b						exitIndex 			.byte ?,?		; tile index the player can exit from, up to 2 per level
16	>009d						exitFrame 			.byte ?			; the start frame for the 'exit door'
17	>009e						exitTargetFrame	.byte ?			; the target frame for the 'exit door'
18	>009f						exitFrameDelta		.byte ?			; are we opening or closing so +1 / -1
19	>00a0						levelGraphicsSet 	.byte ?			; which of the current wall/fruit set we are using this level
20							.ends
52:5	.00a1						PlayerData 		.dstruct sPlayerData
33:3							; state info
34	>00a1						state 					.byte ?				; major FSM value
35	>00a2						minorState 				.byte ?				; sub FSM in that FSM value

37	>00a3						deadNZ					.byte ?
38	>00a4						hasShieldNZ				.byte ?
39	.00a5						shieldTimer				.dunion HLWord
210:1	>00a5							.word ?
211								.struct
212	>00a5								lo .byte ?
213	>00a6								hi .byte ?
214								.ends
215							.endu
40:3	>00a7						canFloatNZ 				.byte ?				; AKA has collected spring
41	>00a8						floatTimer 				.byte ?

43	>00a9						onGroundNZ 				.byte ?
44	>00aa						hasJumpedNZ				.byte ?
45	>00ab						isFallingNZ				.byte ?
46	>00ac						facingRight 			.byte ?				; this is 0 or 1 only
47	>00ad						startedJumpLR 			.byte ?				; this a clone of facingRight at time of jump
48	>00ae						movingLRNZ 				.byte ?				; this is are we moving on the X axis
49	>00af						slowMoveNZ				.byte ?				; are we moving opposite direction in air
50	>00b0						hitBubbleNum 			.byte ?				; which bubble are we currently standing on
51	>00b1						forceJumpNZ				.byte ?				; used to trigger a jump, when you bounce on a boss head

53	.00b2						yDeltaAccum 			.dunion HLWord		; the current Y delta value to add the upper 8bits of to Y for jump
210:1	>00b2							.word ?
211								.struct
212	>00b2								lo .byte ?
213	>00b3								hi .byte ?
214								.ends
215							.endu
54:3	>00b4						currAnim 				.byte ?				; the players current animation number
55	>00b5						frameOffset 			.byte ?				; the current frame in the animation

57	>00b6						bulletActive 			.byte ?				; this is 0 or 1 only
58	>00b7						bulletUD 				.byte ?				; this is 0 or 1 only
59	>00b8						bulletLR 				.byte ?				; this is 0 or 1 only
60	>00b9						bulletBurstNZ 			.byte ?				; has the bullet hit something?
61	>00ba						numBulletEgg			.byte ?				; number of egg bullets the player has, 0 for bubble bullet

63	>00bb						exitAtIndex 			.byte ?				; this is the tile map index that the player is exiting from

65	>00bc						flashColour				.byte ?				; index into the flash colour LUT
66	>00bd						baseFlashTimeDelta	.byte ?				; this is the next timer value to load when toggled
67							.ends
53:5	=$00be						TICK_DOWN_START = *
54	.00be						TickDowns 		.dstruct sTimerTickDowns
23:3	>00be						dissBlocks 					.byte ?	; timer till next update to a block that dissapears, there is only 1 so it can be exploited
24	>00bf						playerAnim 					.byte ?	; players animation timer
25	>00c0						doorAnim						.byte ?	; frames till next exit door animation
26	>00c1						bulletLifeTimer 			.byte ?	; how long until the bullet will expire
27	>00c2						shieldFlashTimer 			.byte ?	; time until we speed up the fast rate
28	>00c3						shieldFlashTimerSpeedUp .byte ?	; this the intial flash hold value, this is overly complex
29	>00c4						bubbleTimer 				.fill kEntity.maxBubbleMakers ; timer until each bubble can spawn
30							.ends
55:5	=$00cc						TICK_DOWN_END = *
56	.00cc						EntityData 		.dstruct sEntityData
70:3	>00cc						number			 .byte ?									; how many entities are actually in this level
71	>00cd						type				 .fill kEntity.maxEntities			; the kEntity type that this entity is
72	>00e6						direction		 .fill kEntity.maxEntities 		; which direction the entity is moving
73	>00ff						active			 .fill kEntity.maxEntities 		; if it is still active
74	>0118						movTimer			 .fill kEntity.maxEntities			; timer till next movement
75	>0131						animTimer		 .fill kEntity.maxEntities 		; timer till next anim frame update
76	>014a						animBase 		 .fill kEntity.maxEntities			; the base index into the entity animation data for this animation
77	>0163						animFrame		 .fill kEntity.maxEntities			; the current frame in this animation
78	>017c						originalY		 .fill kEntity.maxEntities 		; the Y the unit was spawned at, for the spiders and fish
79	>0195						entState			 .fill kEntity.maxEntities 		; current sub FSM state for this entity (abused for other purposes as well)
80	>01ae						collisionX1 	 .fill kEntity.maxEntities			; holds minX for this ent for collision table building
81	>01c7						collisionX2 	 .fill kEntity.maxEntities			; holds maxX for this ent for collision table building
82	>01e0						collisionY1 	 .fill kEntity.maxEntities			; holds minY for this ent for collision table building
83	>01f9						collisionY2 	 .fill kEntity.maxEntities			; holds maxY for this ent for collision table building
84	>0212						speed				 .fill kEntity.maxEntities			; current movement speed for this entity in pixels
85	>022b						ignoreColl		 .fill kEntity.maxEntities			; should this entity ignore collision until no longer colliding (helps stop enemies not stick on each other)
86	>0244						palleteOffset	 .fill kEntity.maxEntities			; sets ent to use defined pallete + this number, should be in kSPal_X, used for boss flash
87	>025d						numPipes			 .byte ?									; how many bubble spawns do we have in this map
88	>025e						pipeIndex 		 .fill kEntity.maxBubbleMakers	; a list of all the bubble spawn locations
89	>0266						lastPipeUsed 	 .byte ?									; the last pipe to spawn a bubble
90	>0267						pipeBubbleStart .byte ?									; the first entity that is used for bubbles
91							.ends
57:5	.0268						PasswordTemp .block
58	>0268							lives .byte ?
59	>0269							flowers .byte ?
60	>026a							score .byte ?,?,?,?,?,?
61	>0270							high .byte ?,?,?,?,?,?
62	>0276							currLevel .byte ?
63							.bend ;PasswordTemp
64	>0277						ActivePassword 						.fill 12
65	>0283						PasswordEntryIndex 					.byte ?
66	>0284						ValidPassword 							.byte ?
67	>0285						PasswordInfiLives 					.byte ?
68	>0286						PasswordRedBullets 					.byte ?
69	>0287						PasswordHaveSpring 					.byte ?
70	>0288						PasswordLevelSkip 					.byte ?
71	.0289						checkSpriteToCharData 				.dstruct sCSTCCParams
94:3	>0289						xDeltaCheck 	.byte ? 		; pixels
95	>028a						yDeltaCheck 	.byte ? 		; pixels
96	>028b						xDeltaBackup 	.byte ? 		; pixels
97	>028c						yDeltaBackup 	.byte ? 		; pixels
98							.ends
72:5	>028d						bulletFrame 							.byte ?
73	>028e						disableUpdateSpritesXYToOAMNF 	.byte ?

75	>028f						tileMapTemp .fill 240
76	.037f						mplexBuffer     .dstruct sMplexBuffer
101:3	>037f						xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
102	>039f						xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
103	>03bf						ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
104							.ends
77:5	>03df						PasswordRAMCache .fill 12

79	>03eb						OAMMirror .fill 256*2
80	>05eb						OAMMirrorHigh .fill 32


:1	;******  Return to file: QWAKSNES.asm

207							.send ;sSharedWRAM

209	.0000						HLWord .union
210	>0000							.word ?
211								.struct
212	>0000								lo .byte ?
213	>0001								hi .byte ?
214								.ends
215							.endu

217	.0000						HLBLong .union
218	>0000							.long ?
219								.struct
220	>0000								lo	.byte ?
221	>0001								hi	.byte ?
222	>0002								bank .byte ?
223								.ends
224								.struct
225	>0000								loWord .word ?
226	>0002								dummy1 .byte ?
227								.ends
228								.struct
229	>0000								dummy2 .byte ?
230	>0001								hiWord .word ?
231								.ends
232							.endu

234							A8 .macro
236							.endm

238							A16 .macro
240							.endm

242							XY8 .macro
244							.endm

246							XY16 .macro
248							.endm

250							AXY8 .macro
252							.endm

254							AXY16 .macro
256							.endm


;******  End of listing
